cset: moving following pidspec: 2541
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.825320606 seconds)
loading group "shootout"... done (took 1.046178584 seconds)
loading group "string"... done (took 0.66974718 seconds)
loading group "linalg"... done (took 8.58964096 seconds)
loading group "parallel"... done (took 0.167542271 seconds)
loading group "find"... done (took 3.026134278 seconds)
loading group "tuple"... done (took 2.148653949 seconds)
loading group "union"... done (took 14.822124787 seconds)
loading group "dates"... done (took 1.469337647 seconds)
loading group "micro"... done (took 0.219013928 seconds)
loading group "simd"... done (took 4.779294982 seconds)
loading group "io"... done (took 1.060591164 seconds)
loading group "random"... done (took 9.527510948 seconds)
loading group "problem"... done (took 1.526151643 seconds)
loading group "array"... done (took 25.255802835 seconds)
loading group "misc"... done (took 1.903039938 seconds)
loading group "scalar"... done (took 43.59683931 seconds)
loading group "sort"... done (took 3.338063746 seconds)
loading group "sparse"... done (took 12.777368082 seconds)
loading group "collection"... done (took 18.438474164 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.421061012 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.113286369 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.127262626 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.1145546 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.186687414 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.119023102 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.127131372 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.082730483 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.881950671 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.134665848 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.113389569 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.42585549 seconds)
done (took 5.279198483 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.164158268 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.089276299 seconds)
    (2/2) benchmarking "String"...
    done (took 0.082520052 seconds)
  done (took 1.383181986 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.069896457 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.061380327 seconds)
    (3/3) benchmarking "different"...
    done (took 0.066838339 seconds)
  done (took 1.410140693 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.064662181 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.133172394 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.064670039 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.065382025 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.066033776 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.066011921 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.06581094 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.066020814 seconds)
  done (took 1.743458289 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.0706133 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.065944271 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.065407218 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.06725938 seconds)
  done (took 1.484150006 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.063707613 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.119792563 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.063255927 seconds)
    (4/4) benchmarking "different"...
    done (took 0.064326235 seconds)
  done (took 1.52276263 seconds)
done (took 9.004544848 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.138007573 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.83152362 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.774425687 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.124196217 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.250652429 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.365548522 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.12139472 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.181026306 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.088321219 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075341318 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.122658115 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.078083948 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.388419896 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.503008816 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.069684334 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.173380746 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.642897851 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087849964 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.136252635 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.489180479 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.071707998 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.085945384 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.085809558 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.069684588 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.324550374 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.154000948 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.672033802 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.094828966 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.068247259 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.094346041 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.071334826 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078646528 seconds)
  done (took 10.760081918 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.09101622 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.088312449 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.067198717 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.123336483 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.095492796 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.07071571 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.075240386 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.067390795 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.089672873 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.126307028 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.091780484 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.099963499 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.066870365 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.068952601 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.074216405 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.198287101 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.081631702 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.082244703 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.067888565 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081381476 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.10717404 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.07949879 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.079054906 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078549347 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.1341772 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.170094602 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.095069241 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.096728583 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066937307 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.079865461 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.116070661 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.127370818 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067228648 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.065168112 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.121189079 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.097459112 seconds)
  done (took 4.658986515 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.880523334 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.094704192 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.081479589 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.073033347 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.10517306 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.112178265 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.120237034 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.12117502 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.099892776 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068894007 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.157314877 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.67397964 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.15118202 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.07045338 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.118962752 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.356605549 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.070837879 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.06889968 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066629776 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.070774653 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.07034701 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.113290631 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066072238 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.17711115 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.58364311 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069253053 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067897633 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.09630569 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.065462239 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.140226321 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.093192649 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.069209013 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.546390258 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.064106545 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.063251396 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.088350661 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.09086586 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065227232 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.066762533 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.077660304 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.065363869 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.108151027 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.076056198 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.496154526 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.066257102 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.560801792 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.21720722 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.070921387 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.068530329 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.09789177 seconds)
    (50/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.062230592 seconds)
    (51/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.065483772 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.2136471 seconds)
    (53/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.132215364 seconds)
    (54/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.062716515 seconds)
    (55/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.264338061 seconds)
    (56/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.065957682 seconds)
    (57/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.065501284 seconds)
    (58/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.066633528 seconds)
    (59/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.095556122 seconds)
    (60/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.064641059 seconds)
    (61/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.065700014 seconds)
    (62/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.073130552 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.094717537 seconds)
    (64/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.785871327 seconds)
    (65/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.090719074 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.083260431 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.09456988 seconds)
    (68/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.08119426 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.063609044 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.393111177 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069085595 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.064744269 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.064732695 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.063779523 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.097865842 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.061824508 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.062437524 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.102185371 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.089501175 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.082613367 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.065911984 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.062121623 seconds)
    (83/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.059158849 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.061158783 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.325119384 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.149250598 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.06215521 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.063646841 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.459986911 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.060045721 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.063136615 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.064416001 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.282403674 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.067559891 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.06488649 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.065468412 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099932561 seconds)
    (98/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.068094307 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.073882569 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.703526826 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.067511615 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.49637669 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.068774763 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.102477205 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.120379551 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067608578 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.101609125 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.067612872 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065097444 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.074768471 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.067637701 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.066232097 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.071221695 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.067604635 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.06864608 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.07095629 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070068118 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069526998 seconds)
  done (took 23.09879958 seconds)
done (took 40.616150154 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.315413536 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.081687836 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.082174564 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.081779656 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.081954977 seconds)
  done (took 1.932438983 seconds)
done (took 3.337616265 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.255181978 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.07579718 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.064381219 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.20535864 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.088238447 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.176838416 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.215026357 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.160977396 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.088093561 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.089239314 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.089056957 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.226196267 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.226995288 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.088258398 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.160002208 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.231650019 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.0877381 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.06348111 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.087511208 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.087733261 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.089940723 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064607449 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.089901678 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.090841472 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.16290352 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.091537983 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.064899141 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.16299879 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.089842128 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.160934519 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.086460231 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.086004898 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.089263976 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.161400484 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.087999825 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.159160786 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.187818195 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.088805744 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.088364345 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.088567745 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.086921378 seconds)
  done (took 6.381727065 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.074612306 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082652745 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.085982091 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063154254 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.072499361 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083999855 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062472139 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082925824 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.092868983 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.08340958 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083329974 seconds)
  done (took 2.240215171 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.069110769 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.08213016 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084982942 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062569953 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073898591 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08436058 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062660744 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083951054 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.086914982 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084984202 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084546354 seconds)
  done (took 2.184662219 seconds)
done (took 12.117594609 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.095987223 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.064885103 seconds)
  done (took 1.468213337 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.225581212 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.507202415 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.964406735 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.092714584 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.072887728 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.085597569 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.19670775 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.066164504 seconds)
  done (took 7.70995519 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.098426879 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.066553621 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.072024191 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.068866354 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.06685987 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.070626892 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.068793472 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.069146476 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.068908592 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.069094046 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.06839833 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.068846615 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.069509799 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.070304188 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.069067214 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.069746241 seconds)
  done (took 2.554751078 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.103134903 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.068057157 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.099020471 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.061727005 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.072816594 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.063002981 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.072009562 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.0740279 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.070803246 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.072018797 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.073626087 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.071926657 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.072392738 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.072270717 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.07428418 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.074576314 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.074512593 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.0717298 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.074719386 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.075035334 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.073651638 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.074571464 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.074793111 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.072736761 seconds)
  done (took 3.228809813 seconds)
done (took 16.287185386 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.174952384 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.074218789 seconds)
  done (took 1.566820891 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.066812 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.067278076 seconds)
  done (took 1.470363456 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.072157365 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.059952591 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.076870018 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.069516633 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.061700685 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.06109089 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.076699602 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.060938544 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.06082571 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.060828071 seconds)
  done (took 1.995365705 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.062272184 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.067277337 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.065333112 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.063808135 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.066185116 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.061536326 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.063934477 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.061622475 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.067945043 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.060634076 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.064882682 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.082207373 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.064355 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.083172541 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.064415297 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.06473023 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.066610581 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.063904562 seconds)
  done (took 2.532042645 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.060571273 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.061114679 seconds)
  done (took 1.466458466 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.063658221 seconds)
    (2/7) benchmarking "second"...
    done (took 0.060685823 seconds)
    (3/7) benchmarking "month"...
    done (took 0.062978844 seconds)
    (4/7) benchmarking "year"...
    done (took 0.063002239 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.061256721 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.060583048 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.061350328 seconds)
  done (took 1.773783623 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.424658288 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.124483326 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.354095823 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.070194295 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.078399076 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.263875969 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.06521906 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.069589638 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.070076747 seconds)
  done (took 2.906461274 seconds)
done (took 15.06070547 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.081673036 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.181260492 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.086574464 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.381888234 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.093521398 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.068014788 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.115590243 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.183247351 seconds)
done (took 2.557815094 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.278431182 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.152797824 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.313391481 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.149343082 seconds)
  done (took 2.963528288 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.335187382 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078653297 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.078147238 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.068199166 seconds)
  done (took 1.916205316 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.064205145 seconds)
    (2/2) benchmarking "read"...
    done (took 0.070466593 seconds)
  done (took 1.489310273 seconds)
done (took 8.009818432 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.070877143 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.060564417 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.066267164 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.062937324 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.062647706 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.06212578 seconds)
    (7/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.063197835 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.061000377 seconds)
    (9/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.09278233 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.063115333 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.063388932 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064203258 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064201323 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064251065 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064830307 seconds)
    (16/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.064705474 seconds)
    (17/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064337299 seconds)
    (18/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.064034171 seconds)
    (19/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06446385 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06499892 seconds)
    (21/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.063832108 seconds)
    (22/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.064382664 seconds)
    (23/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.062332682 seconds)
    (24/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.062336102 seconds)
  done (took 2.942990589 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.078385236 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.064618768 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.066172088 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.065493783 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.066311479 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.067189064 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.067246999 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.066349748 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.0679092 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.066158168 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067851848 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.06801056 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.065903327 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.068119964 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06657991 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.06845322 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.067987543 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066623391 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066060318 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.068310852 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.067997394 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066622508 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.06833187 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.068035594 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.068374519 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.068012771 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.066339566 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.066873714 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067990623 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.068396195 seconds)
  done (took 3.39832329 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.065538667 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.059027075 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.059384874 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.069237553 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.059040083 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.059614372 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.06018361 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.059698268 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.060887674 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.062459896 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.061648758 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.060795041 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.061558278 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.060757152 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.061224797 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.061414016 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.066114755 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.081306525 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.061352897 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.061009681 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.065416638 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.06104988 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.060394287 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.06058271 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.061135442 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.060838597 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.060273016 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.061102033 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.060812543 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.062024493 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.061230944 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.065295175 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.066107284 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.061077421 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.071419618 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.066242843 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.060895455 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.067803036 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.062483567 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.061100442 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.060307066 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.061066813 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.061293625 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.061044548 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.071354705 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.061028434 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.062495009 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.061555629 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.061417815 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.061390202 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.060991731 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062964092 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.069942892 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.062653299 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.061240352 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.06273236 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.061080261 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.061991782 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.061349539 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.060692399 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.061010433 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.064361927 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.062852375 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.061979858 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.081818763 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.062489702 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.071787587 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.061151785 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.061946377 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.065133504 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.061894204 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.079746341 seconds)
  done (took 5.920336906 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.070636302 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.071078172 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.078264194 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.069473082 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064554008 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061868192 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065740455 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062033091 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.071852063 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.066076265 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061983784 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.06572007 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.071476041 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065777672 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063288507 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.071507225 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.066233753 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06523431 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.061922199 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065784654 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063181403 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065867154 seconds)
  done (took 2.851244153 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.138568183 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.06602144 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.108046474 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.071728954 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070401337 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.071630733 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.067853892 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.067164526 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067705379 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068248345 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068108376 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067796438 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070345074 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06817883 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06784264 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068001746 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067215199 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.06768288 seconds)
  done (took 2.71353033 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.07564864 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.065018786 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089143338 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.06561857 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.066580213 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.066536949 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070831097 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.071099395 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.066292551 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.066607654 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.071217489 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066596187 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.066541982 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067025248 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066676113 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.067259688 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.066627374 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067314012 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.071069272 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.070660648 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070908814 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.07120082 seconds)
  done (took 2.89957269 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077324548 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065736479 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.0806451 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.06685215 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060732083 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060867315 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.068386727 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.066947443 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.067324402 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.065654266 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066240213 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061543956 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.068207789 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066327475 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.068560394 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067025703 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065860182 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.06639493 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065942914 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061626302 seconds)
  done (took 2.713017471 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.07082995 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.061853635 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.062422146 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.068556789 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06394416 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.064358075 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.069311485 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.064232474 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.064271028 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.086839505 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.064291022 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.064676747 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.081307972 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.06793497 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.064326043 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069906503 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.069890934 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069385364 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063237949 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06415518 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.086981967 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.064808222 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.069529627 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.064031083 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.064145657 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.064226807 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064303475 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.067785141 seconds)
  done (took 3.276886659 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.063601653 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.062549903 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.064005025 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.064304309 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.063990952 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.064242985 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.064171426 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064026651 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.063686424 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.064026083 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.063708646 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.063856562 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.067435886 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.064204975 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064280013 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.064027131 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06434152 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.064448861 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065017101 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064713162 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.064268558 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064177972 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.064250125 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.064558657 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064491473 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.064554516 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064627479 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064428157 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064282036 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064238999 seconds)
  done (took 3.310707775 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.072609526 seconds)
    (2/2) benchmarking "in"...
    done (took 0.070622301 seconds)
  done (took 1.52492426 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.061122693 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.076525227 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.058901885 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.071856877 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069639056 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.064464308 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070382816 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070067284 seconds)
  done (took 1.918818196 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.066175941 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.090113253 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.061325638 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.063395733 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.064402189 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.130370432 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.076366203 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.075705529 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077571948 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.065508336 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.063848351 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.075768441 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.062697909 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.0772015 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064387435 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.072340011 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.07047445 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.080976141 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.076263573 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.060886982 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07545628 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063905707 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.061645367 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.064037162 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.062763614 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.069829404 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.078724581 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.075330275 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071375194 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.06029522 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.082512907 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.061313716 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.062455618 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071464656 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.066293675 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.061948085 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.100628841 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.062602365 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.067947494 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.061747925 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.074959058 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.084113812 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.077220101 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.081210826 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.063892091 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.064422354 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.061702097 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.06396433 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.06551931 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.071553397 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.061442921 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069788306 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.060744009 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.063398349 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.072897783 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.062028334 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.066998109 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.071253338 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.076329645 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.072844334 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.070635779 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.078176594 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.071780886 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.070484083 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.063233825 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.082924142 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.063948493 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.076686615 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.078036012 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.063692091 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.077030552 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.061632796 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.061003022 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.062242076 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.097360066 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.063889861 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.063576629 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.062736074 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.061840948 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062572943 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070255544 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.067329405 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069673971 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065371099 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078101527 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070898796 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.061553609 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.068423557 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.080206816 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.06512424 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061634765 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.079098297 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.065265761 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.061446465 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.079930295 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.072186616 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.06346516 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.062437446 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.064940982 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075455942 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.062571298 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060096523 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069937562 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.062949596 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.063892374 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.065973277 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069567865 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060806046 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.071817561 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.066013928 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.062777246 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.060012105 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.065451382 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.062205982 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.060063816 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071055132 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.061371166 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.076501012 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.067783223 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.076037466 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.076466481 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.07265348 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.077757125 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.060677913 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.059497176 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.07905528 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.070487044 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.06171366 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.078789915 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.05999547 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.074410743 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.059405015 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.060402845 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.068554893 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.058300109 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06056578 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.058441863 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.063420373 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.060040033 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.060551714 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.064757913 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.069256896 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.073393914 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.061827733 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.069979293 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.060877764 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.077099373 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.070479002 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.065444412 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063652217 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.0609818 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.07291636 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.067596636 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.070664394 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.059841153 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.060951901 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.060845711 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.071446064 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070024559 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.062027857 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.066290869 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.063041797 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.060664008 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.060629351 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.061635657 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.06418886 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063505191 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.061286778 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068641017 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.069678789 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.072604927 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.065429717 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.068351905 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.058472366 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.060118209 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.061744536 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.059182825 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.064324485 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.068970513 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075983698 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.072415746 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.082345297 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.060599033 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.07068651 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.061758555 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.077372619 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.074115605 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.061285038 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064563615 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.059067737 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061803165 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.069990299 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071915906 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.07423888 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075397672 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.064961556 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.065199041 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.059819395 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.075562486 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.060778268 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069352074 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.070047085 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.064764097 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.06051815 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062030648 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.069888801 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.065200595 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.060856099 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.076818854 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.065350325 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.059247711 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.072573851 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.058388895 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.068793156 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.057978283 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.062127256 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.063284862 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.059760692 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.06808727 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072975909 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.056518127 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.058854204 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072537054 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.062062415 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061554272 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.068594156 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.07572794 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.065273098 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.068816148 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071804647 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.070251109 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.06456863 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.070392403 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.061217464 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.069955819 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.061686198 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.069725011 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.057957852 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.075814849 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.056820654 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.072869042 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.058291642 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.068189045 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.05815034 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.066998438 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.058513924 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.074575008 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.059093307 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.058543473 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.068535698 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.056281073 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.067357182 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.0572257 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.062829454 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.064538983 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.067352015 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.059664372 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.067909887 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.059053066 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.066763437 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.062656473 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.065946164 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.067298886 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.062331893 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.057043651 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.066562655 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068136076 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.066535333 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.058530712 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.058572467 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.057977246 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.322556301 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.066130714 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.065884734 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.073334827 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.069673358 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.070600392 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065368489 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.066590449 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.066433724 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.074632443 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.075544798 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.084913583 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.075029018 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.073585988 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.075586171 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.064413031 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.081556181 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.065151628 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.076045213 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.063456574 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.070300746 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.073878466 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.064094325 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.084240324 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.065560686 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.071943173 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.077030626 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072959157 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.067841901 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.083075827 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.066725722 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.07290874 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.072382646 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.068096815 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.070793364 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.065753185 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.072557461 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.073969232 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.075024394 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.064016 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.071304768 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.072998068 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065435478 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.07134008 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.064733805 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.072035324 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.064772508 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.06189018 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.06731819 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07487847 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.06820649 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.068168133 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.062726497 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.061354314 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.062589329 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.069619047 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.067181109 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.071222968 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078324811 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060772412 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.063118847 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.061905709 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.065687085 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081446349 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072168981 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.070170584 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.066722577 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.060903196 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.063570647 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.063792836 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.062498982 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.065606286 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.061542678 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.061560299 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.073046967 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.064076198 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.06672764 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062809226 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.063458402 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.070613837 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.065101867 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.061187186 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.067894329 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.061638508 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.06743384 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.061278033 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.063902653 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.066470296 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.061123032 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.065711017 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.072966191 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.079286626 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.069294799 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.071926855 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.063394969 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.070852731 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.078475536 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.069623666 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063170136 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.072148826 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.061027337 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.080983943 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.071727527 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070688683 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071827173 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.062901146 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.079169192 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.066502162 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.072213949 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077835699 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062987983 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.068625217 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.061143773 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.077910692 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.066394327 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.061330513 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.070577248 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.06982329 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.068224043 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.074570307 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.062855944 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.070239602 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06701839 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.065103745 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.063103416 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.063216113 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.071053228 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.07791881 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.062322093 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.065663328 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.069766491 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.070131378 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.066090026 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073995795 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.07015328 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062485347 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.062682186 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.064865613 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.21145013 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.074059873 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062106313 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.066777921 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.066349855 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.060926078 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.068295442 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078463992 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.071084764 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071307204 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.060834803 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.060590172 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.079646061 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.065064969 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.064706822 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.069811372 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.071426194 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074143966 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.071179206 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078667911 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.062152417 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.067375377 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074041037 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.062499905 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.061050618 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.065279726 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.062744894 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.070876463 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071650791 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069036179 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063922619 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.068487244 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.075514099 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.062595891 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.066038318 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.065746475 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.06183134 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.072636887 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.070394709 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.073900622 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.063308962 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.061532045 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.065147182 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.070691619 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.069253491 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.070981084 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062601331 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.068976102 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.076451868 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.069613142 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065168696 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.061157217 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064683904 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.070743134 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.065437148 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.060374154 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.065207191 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.064725113 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.068396714 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.071126588 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.065901742 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.060816446 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.079084913 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.070355001 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.071127007 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.063553674 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.063439036 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061859312 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.061168535 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073096504 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.061096924 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.063203901 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.066584457 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.063341086 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.07971927 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.068677094 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.076162637 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060878524 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.064151861 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.059256131 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.06982238 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.064259858 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.060124874 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.070605115 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.059805701 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076264903 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.073605108 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.067070084 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.060523091 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.065917648 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.0679162 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.074924522 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070138674 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.069330879 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.063363188 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069527664 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.061599957 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.070831991 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.059427243 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.058487314 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.069552462 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.06835441 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072353845 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.05924524 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.069843169 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.061571221 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.06820896 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.068594415 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.061691287 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.0614278 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.061450831 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069248605 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064645621 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.07034841 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.066149142 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.078529203 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.062354168 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.073100371 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.070820821 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.073329378 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.075801478 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.074592868 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.070005507 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.061765156 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069369833 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.069565212 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.062497866 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.066213876 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.064563047 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083115413 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.062941964 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.062118786 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.073923514 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.065575885 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.059229164 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.065302202 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.213926631 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.070240531 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.060924241 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.070836414 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.063806749 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.060083082 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.064379698 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.064835624 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.058765532 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.06053575 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.060981003 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071273958 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.06565713 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.06120696 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080841874 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.063080665 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.070692254 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073515002 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.068872928 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.0633883 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.060253608 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.062929903 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.075383294 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07743836 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.064779764 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07060667 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.062739097 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.070795831 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.060416262 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.069983014 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.069955626 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070708145 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.060616464 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061415876 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.076414122 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076928416 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.065848996 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.071026244 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.070350605 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.061411176 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081895087 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.068837824 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061285413 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.071407573 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062384152 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.058937074 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.058959009 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.061274193 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.071109772 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.059302166 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.062059429 seconds)
  done (took 42.244927257 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.09735272 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.060366557 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.059401508 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.059427792 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.067083289 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.060426559 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.059619166 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.060397466 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.060621525 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.061714055 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.059642416 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062208649 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.066024892 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.072575727 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.067753723 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063184184 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.05949579 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.060477073 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.05938169 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06011447 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065759077 seconds)
  done (took 2.860944703 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.063049549 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.063289675 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.063289021 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063642639 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063091478 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059835429 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.063554157 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059660668 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.064195497 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060295491 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.064471759 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060152303 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.059938096 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.059953037 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059613509 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061074789 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.06404731 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.063013752 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.059707716 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063380785 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061391206 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.063547522 seconds)
  done (took 2.86363433 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.061236237 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.059764441 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.068241577 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.058597193 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.058829585 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.062065034 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.058492123 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.064045436 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.063653079 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.063652549 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.068110625 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.060191023 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.058593169 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.06493363 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.0587125 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.060042246 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.101738162 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.060102059 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.060517137 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.058879645 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.062021424 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.068527398 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.058987136 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.059289064 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.063868255 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.062612745 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.060858338 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.061802313 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.059633939 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.063975801 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.061581394 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.059287219 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.070102878 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.06951398 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.063912435 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.063606991 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.060652773 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.060182404 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.059074131 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.059150159 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.067816869 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.060385009 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.059079784 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.060433507 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.068385025 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.058969891 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.058659556 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.068179513 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.058737981 seconds)
  done (took 4.582843716 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.069460365 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.111735407 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.065005013 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.092738945 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.071788746 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.065144731 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.064773001 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.096070503 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.061992807 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.062813719 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.074775765 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.075208988 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063710703 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.065095576 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.066609618 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.061901076 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.062535518 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.061097209 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.064542762 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061753572 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.06439361 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.066110515 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.071636806 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.072290125 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063036703 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.061404426 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061201495 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.063129642 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.071946415 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.065228093 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.063492444 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063528559 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.072071525 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.066761376 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061521181 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.061354955 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.074224179 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.064178269 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.063480525 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.061535195 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.063000849 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.064952684 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.067807726 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.0751358 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063524736 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.068266653 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063571889 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.061390684 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.073996747 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.063609019 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.067912847 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.075534072 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065079989 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064105612 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.06553283 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.074400223 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.064056819 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.062333835 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.063786712 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.074754127 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.061891097 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064767478 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.077953421 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.063060055 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.066610094 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.074411088 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.067099569 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.063542395 seconds)
  done (took 6.262377384 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.068455823 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.093919515 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074287879 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.07472712 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.069530043 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.069600988 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.069966567 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.069487528 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.070084613 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072901056 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.069907823 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.105250496 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.066259539 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.071449325 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.070050308 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.069847684 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.07003091 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069657764 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.069804977 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.069997483 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.071278122 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.076850661 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.071603627 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.075644302 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.072177066 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.066232062 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069576517 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.069579116 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074997912 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.069676153 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.072393989 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.069783894 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.070054129 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074550759 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.072237784 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.069623671 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.060620767 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.070913481 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.07066617 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.069845448 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.067507651 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.077271621 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.07018206 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.066454218 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071857045 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071434089 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.076830805 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074349843 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.073244255 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.07492042 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.07164728 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.07729054 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071806168 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.072410896 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.077628234 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.080203305 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.077304422 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.077554011 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.070587518 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.075028028 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.07487333 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.077290133 seconds)
  done (took 6.0551855 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072352333 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065717475 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.078401643 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.059039402 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.058782408 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068886433 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.05916012 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.059627886 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066116771 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.065775511 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067796635 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068402528 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070744423 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067580636 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070565407 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.073407264 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070488924 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.07071594 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068406 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.069592703 seconds)
  done (took 2.888598708 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.074393301 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.07807519 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.065055546 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070254099 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.066452986 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.070354264 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.06591111 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066207398 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065355864 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065519349 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.070345328 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.069845527 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065643726 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.068810614 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071505192 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.070517896 seconds)
  done (took 2.626331983 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.063001568 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.067030471 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.066097837 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.061073783 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.062491136 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.059760801 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.060670335 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.058813069 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.062016015 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.073827135 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.060255717 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.062953574 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.061082776 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.059454569 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.06110394 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.06433145 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.063656756 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.061742087 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.062340698 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.066710739 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.071012428 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.062685942 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.064573317 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.061858817 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.064252308 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.07057739 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.063488287 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.064586239 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.061709918 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.064523675 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.063958617 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.068825602 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.063959559 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.062170624 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.060850453 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.061769884 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.062143659 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.064812778 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.064564621 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.062491694 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.060788493 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.067343394 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.0622404 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.062498733 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.063845552 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.064488954 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.063284545 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.06767337 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.061860489 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.063962001 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.062236292 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.063605332 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.062399758 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.069019011 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.064237417 seconds)
  done (took 5.028393882 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076443278 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064496901 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060165511 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060539151 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.066078869 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.066608546 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.065861573 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066200363 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067022987 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060576872 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066542803 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.065925112 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066946805 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066647562 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066900629 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.0664284 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060854833 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066419385 seconds)
  done (took 2.720531531 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.065433777 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064735908 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.063591538 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.061015471 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.061410954 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065638775 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.059887152 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.061556978 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060707183 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.061293222 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06134702 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.061259748 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060813544 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.06066519 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.064958009 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061123971 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.060856826 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.059774746 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.061085625 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.059269804 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066073721 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.059574909 seconds)
  done (took 2.893496155 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.08668845 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.082824431 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.126552614 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.078996603 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.087631319 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.070395928 seconds)
  done (took 2.064060007 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.09260396 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.096485184 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064134629 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.064079631 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068969004 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067305297 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067273132 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067350391 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07075703 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070987301 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067118113 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071088783 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.0707095 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07431089 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071074305 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071211752 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069447804 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069561674 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066210094 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077385646 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069358084 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072804368 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069887599 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069329272 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069514138 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074672725 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072386097 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072406807 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067688582 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072771257 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07112453 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067913818 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070821971 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070803456 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.064352044 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070864908 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067541446 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074724188 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069450122 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072349338 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063949632 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068834163 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070944242 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070523963 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070705748 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067488875 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070799995 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067695096 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067800238 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076428738 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069362494 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072872905 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06914205 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07140815 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07115871 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076285473 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071293646 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07270326 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069352993 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071411995 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073112463 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069395258 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072925363 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071985494 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069409369 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072975369 seconds)
  done (took 6.224350026 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.102732316 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.065108419 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070418491 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073023303 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07427192 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067783924 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067857306 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067669762 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067575485 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.065250826 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.10347559 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067837562 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072876786 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075489251 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068193284 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068082689 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067646168 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072916948 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.064861276 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07610456 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067145997 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072928013 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073012389 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072638855 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071546878 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069284937 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067439353 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068910888 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069363084 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069488345 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072679283 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069718035 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074693331 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066377616 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073366926 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067560419 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067981093 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070599948 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068321454 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069656223 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073347714 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074937844 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06786766 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067474586 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071153971 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067447125 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067934166 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.064960533 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068241702 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06667755 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07358276 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073815648 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07349927 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075256349 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069627726 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069615473 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069865138 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069838705 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070070541 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071924943 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073983535 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068282987 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077342788 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067783284 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067969518 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073025086 seconds)
  done (took 6.251182606 seconds)
done (took 130.391611256 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.217089258 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.188778515 seconds)
  done (took 1.925693002 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.073475411 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.16403601 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.073121591 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.073179107 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.106794934 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.106477839 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.07451668 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.070484359 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.073082475 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.07081123 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.137627383 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.074590825 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.070736638 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.070840761 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.070505988 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.07069977 seconds)
  done (took 2.920314657 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.106318501 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.185211688 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.102502112 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.068432353 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.150688072 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.074912167 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.070400141 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.07479895 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.075275522 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.0691185 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.106001853 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.082124365 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.074568449 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.075037651 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.070463434 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.073880247 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.075007299 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.074877827 seconds)
  done (took 3.152694703 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.102208187 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.09033736 seconds)
  done (took 1.743416739 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.160282677 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.105399403 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.144046942 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.344016702 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.135846734 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.138953134 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.14170706 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.137872069 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.113057555 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.13309913 seconds)
  done (took 3.096831398 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.104763407 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.103489245 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.306987561 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.101162693 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.081128934 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.075812424 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.073479832 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.078115537 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.073900916 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.075146634 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.121205605 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.07386249 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.070960068 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.122670511 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.096677689 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.105149544 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.07031481 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.079147806 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.079376189 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.069146445 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.07424653 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.078450638 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.17585258 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.078233338 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.100027118 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.075047321 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.075939442 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.072534999 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.072577225 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.076428353 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.077106541 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.097234986 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.076191007 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.08043046 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.074677203 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.094665066 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.069696684 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.096446559 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.072556781 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.070369094 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.073036267 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.077222661 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.070479587 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.076290671 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.073321058 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.075613211 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.078026264 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.069035994 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.073312978 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.072339726 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.070765314 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.074719437 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.074099607 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.075070508 seconds)
  done (took 6.245944466 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.106576353 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.106582786 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068877061 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.110888114 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.103832637 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068378116 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.103216934 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.098695988 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.106603294 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067963063 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067504166 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069172412 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077064753 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.080731837 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.114975584 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.106791144 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070218381 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068847787 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.108327774 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.108408567 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067367624 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.100249796 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.098817106 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.1046384 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.066794262 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068295633 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066708695 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.068120212 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074280173 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.073873067 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.06707432 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.073821288 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.079070499 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.073332107 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066398453 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066543951 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066475763 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.07352027 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074840292 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076806116 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.072857635 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06636004 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.06708322 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067567112 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068716841 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.067815423 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.07523748 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076170464 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.073328145 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06807282 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.068693041 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.068131616 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.06883394 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075714973 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.073809327 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.074233898 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.074141443 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.067018558 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066930056 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.068667819 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074769905 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.07469857 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074155405 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.06834704 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.075190072 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067083884 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075820254 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.079277737 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067315901 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067882919 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067178609 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.06722366 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069330846 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075089244 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.075275052 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069258424 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068769521 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068900993 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077465575 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.07539729 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068832708 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.074204537 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068481753 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068820926 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069401264 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069189759 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.074210492 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.075435367 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.068009539 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068311602 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069022176 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068782731 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.068133856 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.075116924 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075631556 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.074108834 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.073092095 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067283601 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.073251898 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.073330234 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067839703 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.073379506 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.067205621 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067245031 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067431689 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.072693127 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072495246 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.074601579 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06722334 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066868751 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.074667512 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.07760122 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.068697224 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.074344962 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077412157 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.213199019 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.068582784 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.079275232 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070005721 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077650447 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067626119 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075670843 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067800279 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.073520981 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067481542 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.06656939 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.06736335 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.073318277 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.0677296 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066829795 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067501204 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066990011 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.073356876 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076818575 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067793001 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.073597211 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.073407718 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.068047276 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.07335923 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067851902 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.074342447 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067499974 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.06747307 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066674404 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077633523 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068942348 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068680433 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069051031 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.078021692 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069014368 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.07698847 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.073627163 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068479279 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.080297026 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.075173324 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.072467576 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.075366908 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067923806 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067050533 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067088826 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.072035066 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.074160878 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07626355 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069802926 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068749269 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.074665126 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.078066061 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.068631763 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.074649722 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074868549 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.075294618 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.06949656 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069030842 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078698611 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.078100079 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075591663 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.075496759 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076106184 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.067525981 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072587889 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.073407457 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067184467 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078653901 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067302417 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.07703866 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.073489781 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.07277481 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073629878 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.076432333 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077978257 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.078026219 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.078650284 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066864426 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067403321 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.075370467 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.068358832 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068643418 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.074653387 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069337175 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.068808497 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.081603548 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067154442 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.07560829 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.066496398 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.074027133 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067039932 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067746654 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077504607 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067375372 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068211157 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.073485901 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.067048283 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.074692604 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078458408 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.072792592 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.06677977 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068886326 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.076054351 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.076292519 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.0694252 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068207899 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069113735 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.074745326 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.074622808 seconds)
  done (took 18.231203213 seconds)
done (took 38.87584471 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.167008557 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.113299044 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.209351399 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.198032306 seconds)
  done (took 2.33766011 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.098669647 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.06395936 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.079968696 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.088684446 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.06383415 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.074098214 seconds)
  done (took 2.064568571 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.198016079 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.173297341 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.243114031 seconds)
  done (took 2.200701051 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.366566759 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.151542987 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.219177562 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.505725125 seconds)
  done (took 2.933028213 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.107661079 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.098044359 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.075835578 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.109144811 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.083438058 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.060764624 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.131286398 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.068244933 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.100552922 seconds)
  done (took 2.490749108 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.142219958 seconds)
done (took 13.77686157 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.12893913 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.483418556 seconds)
    (3/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.110758944 seconds)
    (4/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.075123105 seconds)
    (5/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.231498372 seconds)
    (6/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.179164227 seconds)
    (7/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.190708406 seconds)
    (8/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.186276954 seconds)
    (9/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.178586951 seconds)
    (10/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.075661618 seconds)
    (11/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.267683515 seconds)
    (12/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.212402734 seconds)
    (13/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.092633237 seconds)
    (14/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.074334781 seconds)
    (15/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.076197797 seconds)
    (16/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.09422043 seconds)
    (17/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.095445088 seconds)
    (18/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.078014919 seconds)
    (19/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.078373844 seconds)
    (20/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.254435651 seconds)
    (21/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.122214526 seconds)
    (22/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.240403017 seconds)
    (23/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.169376465 seconds)
    (24/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.06483816 seconds)
    (25/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.089493629 seconds)
    (26/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.176902832 seconds)
    (27/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.073472082 seconds)
    (28/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.069933994 seconds)
    (29/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.07502798 seconds)
    (30/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.076623819 seconds)
    (31/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.140208824 seconds)
    (32/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.072437054 seconds)
    (33/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.245449569 seconds)
    (34/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.071339148 seconds)
    (35/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.07111186 seconds)
    (36/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.146310489 seconds)
    (37/341) benchmarking ("sort", BigInt, false)...
    done (took 0.262487654 seconds)
    (38/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.073410617 seconds)
    (39/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.240476647 seconds)
    (40/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.067773855 seconds)
    (41/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.1458049 seconds)
    (42/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.07285843 seconds)
    (43/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.075079641 seconds)
    (44/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.15678361 seconds)
    (45/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.185179648 seconds)
    (46/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.186631581 seconds)
    (47/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.086467508 seconds)
    (48/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.073409165 seconds)
    (49/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.199488754 seconds)
    (50/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.198517066 seconds)
    (51/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.087722474 seconds)
    (52/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.222931984 seconds)
    (53/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.064183011 seconds)
    (54/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.064270962 seconds)
    (55/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.205278127 seconds)
    (56/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.09064824 seconds)
    (57/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.081695739 seconds)
    (58/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.175238199 seconds)
    (59/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.083315616 seconds)
    (60/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.13416104 seconds)
    (61/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.124627388 seconds)
    (62/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.076338387 seconds)
    (63/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.174182388 seconds)
    (64/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.065989629 seconds)
    (65/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.1759549 seconds)
    (66/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.145829611 seconds)
    (67/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.069774612 seconds)
    (68/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.06731008 seconds)
    (69/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.088368903 seconds)
    (70/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.189813802 seconds)
    (71/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.184267977 seconds)
    (72/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.066002878 seconds)
    (73/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.066936369 seconds)
    (74/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.066820022 seconds)
    (75/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.167546785 seconds)
    (76/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.176990692 seconds)
    (77/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.227658209 seconds)
    (78/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.085090616 seconds)
    (79/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.19884407 seconds)
    (80/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.065820238 seconds)
    (81/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.064823484 seconds)
    (82/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.073511006 seconds)
    (83/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.076430908 seconds)
    (84/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.0728069 seconds)
    (85/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.090121419 seconds)
    (86/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.165283953 seconds)
    (87/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.072440593 seconds)
    (88/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.088295516 seconds)
    (89/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.072305511 seconds)
    (90/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.072191364 seconds)
    (91/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.071927738 seconds)
    (92/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.064384296 seconds)
    (93/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.064085168 seconds)
    (94/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.071131739 seconds)
    (95/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.080053201 seconds)
    (96/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.141218592 seconds)
    (97/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.075408968 seconds)
    (98/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.234732138 seconds)
    (99/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.066296449 seconds)
    (100/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.08196678 seconds)
    (101/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.14181792 seconds)
    (102/341) benchmarking ("sort", Float32, false)...
    done (took 0.139132184 seconds)
    (103/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.223659991 seconds)
    (104/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.112667126 seconds)
    (105/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.069940373 seconds)
    (106/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.083242655 seconds)
    (107/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.073536573 seconds)
    (108/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.084118882 seconds)
    (109/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.077482269 seconds)
    (110/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.199698262 seconds)
    (111/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.145974012 seconds)
    (112/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.0914317 seconds)
    (113/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.135288703 seconds)
    (114/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.067593616 seconds)
    (115/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.189409292 seconds)
    (116/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.067085706 seconds)
    (117/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.065732965 seconds)
    (118/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.064882872 seconds)
    (119/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.080396788 seconds)
    (120/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.138466437 seconds)
    (121/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.225020488 seconds)
    (122/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.076039729 seconds)
    (123/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.069368004 seconds)
    (124/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.148080292 seconds)
    (125/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.149920183 seconds)
    (126/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.066246001 seconds)
    (127/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.065861068 seconds)
    (128/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.074625002 seconds)
    (129/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.06564984 seconds)
    (130/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.072902038 seconds)
    (131/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.065365019 seconds)
    (132/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.073943529 seconds)
    (133/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.065087237 seconds)
    (134/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.151412398 seconds)
    (135/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.0842782 seconds)
    (136/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.064149298 seconds)
    (137/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.064330788 seconds)
    (138/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.071743454 seconds)
    (139/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.065237244 seconds)
    (140/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.073986203 seconds)
    (141/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.153376214 seconds)
    (142/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.16204947 seconds)
    (143/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.089618977 seconds)
    (144/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.071142885 seconds)
    (145/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.07296018 seconds)
    (146/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.073365695 seconds)
    (147/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.08597934 seconds)
    (148/341) benchmarking ("sort", Bool, false)...
    done (took 0.141264861 seconds)
    (149/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.147678858 seconds)
    (150/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.120580985 seconds)
    (151/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.132986554 seconds)
    (152/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.137690899 seconds)
    (153/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.066109446 seconds)
    (154/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.084770655 seconds)
    (155/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.071202019 seconds)
    (156/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.07364874 seconds)
    (157/341) benchmarking ("sort", Int64, false)...
    done (took 0.065240758 seconds)
    (158/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.064310023 seconds)
    (159/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.072874801 seconds)
    (160/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.067959412 seconds)
    (161/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.085509618 seconds)
    (162/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.09104497 seconds)
    (163/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.156150895 seconds)
    (164/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.065670379 seconds)
    (165/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.239507622 seconds)
    (166/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.066227133 seconds)
    (167/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.149080035 seconds)
    (168/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.064146157 seconds)
    (169/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.065228519 seconds)
    (170/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.073529984 seconds)
    (171/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.083746184 seconds)
    (172/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.201092559 seconds)
    (173/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.078395344 seconds)
    (174/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.089171864 seconds)
    (175/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.064406228 seconds)
    (176/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.183244422 seconds)
    (177/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.074926459 seconds)
    (178/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.078662771 seconds)
    (179/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.065479667 seconds)
    (180/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.144412417 seconds)
    (181/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.146883829 seconds)
    (182/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.064040605 seconds)
    (183/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.132937588 seconds)
    (184/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.08146475 seconds)
    (185/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.084364581 seconds)
    (186/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.068299018 seconds)
    (187/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.065270029 seconds)
    (188/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.065804088 seconds)
    (189/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.19066108 seconds)
    (190/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.062209708 seconds)
    (191/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.314339765 seconds)
    (192/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.06624252 seconds)
    (193/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.066168022 seconds)
    (194/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.132502401 seconds)
    (195/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.066175245 seconds)
    (196/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.065489481 seconds)
    (197/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.146866053 seconds)
    (198/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.200014231 seconds)
    (199/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.066064053 seconds)
    (200/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.064742545 seconds)
    (201/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.081937811 seconds)
    (202/341) benchmarking ("sort", Float64, false)...
    done (took 0.137136783 seconds)
    (203/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.066694116 seconds)
    (204/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.091024421 seconds)
    (205/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.165777053 seconds)
    (206/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.063996705 seconds)
    (207/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.124965373 seconds)
    (208/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.071114403 seconds)
    (209/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.063377212 seconds)
    (210/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.123478961 seconds)
    (211/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.063855007 seconds)
    (212/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.067815208 seconds)
    (213/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.062166465 seconds)
    (214/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.065540899 seconds)
    (215/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.064801858 seconds)
    (216/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.071634233 seconds)
    (217/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.082051938 seconds)
    (218/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.064214262 seconds)
    (219/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.075317386 seconds)
    (220/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.16199405 seconds)
    (221/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.064724076 seconds)
    (222/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.090149237 seconds)
    (223/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.072050901 seconds)
    (224/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.076608504 seconds)
    (225/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.152431235 seconds)
    (226/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.071224795 seconds)
    (227/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.064249966 seconds)
    (228/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.064798488 seconds)
    (229/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.073027255 seconds)
    (230/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.065730278 seconds)
    (231/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.065154848 seconds)
    (232/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.066299317 seconds)
    (233/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.065340817 seconds)
    (234/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.168341582 seconds)
    (235/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.068176284 seconds)
    (236/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.065568473 seconds)
    (237/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.066311112 seconds)
    (238/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.066295743 seconds)
    (239/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.077522833 seconds)
    (240/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.086576137 seconds)
    (241/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.065702775 seconds)
    (242/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.077524915 seconds)
    (243/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.076156506 seconds)
    (244/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.067921081 seconds)
    (245/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.065679554 seconds)
    (246/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.092554429 seconds)
    (247/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.067102568 seconds)
    (248/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.065927727 seconds)
    (249/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.065503274 seconds)
    (250/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.07245604 seconds)
    (251/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.069352606 seconds)
    (252/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.072453827 seconds)
    (253/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.089701969 seconds)
    (254/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.09114737 seconds)
    (255/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.142265865 seconds)
    (256/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.072577402 seconds)
    (257/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.069173695 seconds)
    (258/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.064960247 seconds)
    (259/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.070013623 seconds)
    (260/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.199780922 seconds)
    (261/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.064167044 seconds)
    (262/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.065800455 seconds)
    (263/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.066248282 seconds)
    (264/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.151658942 seconds)
    (265/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.066661106 seconds)
    (266/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.066606713 seconds)
    (267/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.072647043 seconds)
    (268/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.065403075 seconds)
    (269/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.065150068 seconds)
    (270/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.073026194 seconds)
    (271/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.064931106 seconds)
    (272/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.069417282 seconds)
    (273/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.065418724 seconds)
    (274/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.067435793 seconds)
    (275/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.065993753 seconds)
    (276/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.063543819 seconds)
    (277/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.067099548 seconds)
    (278/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.08146581 seconds)
    (279/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.172089885 seconds)
    (280/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.07696754 seconds)
    (281/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.143441347 seconds)
    (282/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.064586374 seconds)
    (283/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.064343766 seconds)
    (284/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.064759271 seconds)
    (285/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.198627934 seconds)
    (286/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.06487168 seconds)
    (287/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.148407745 seconds)
    (288/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.065079944 seconds)
    (289/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.064144278 seconds)
    (290/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.06506376 seconds)
    (291/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.083077005 seconds)
    (292/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.065928518 seconds)
    (293/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.067022526 seconds)
    (294/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.190788801 seconds)
    (295/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.064501535 seconds)
    (296/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.109171318 seconds)
    (297/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.069214445 seconds)
    (298/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.06459596 seconds)
    (299/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.06479852 seconds)
    (300/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.083103311 seconds)
    (301/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.079756194 seconds)
    (302/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.065950983 seconds)
    (303/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.075404018 seconds)
    (304/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.071227678 seconds)
    (305/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.064083918 seconds)
    (306/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.064774937 seconds)
    (307/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.06721184 seconds)
    (308/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.120822037 seconds)
    (309/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.149690809 seconds)
    (310/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.198592406 seconds)
    (311/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.064212496 seconds)
    (312/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.063224152 seconds)
    (313/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.062299603 seconds)
    (314/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.065962593 seconds)
    (315/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.063134637 seconds)
    (316/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.063511475 seconds)
    (317/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.063374538 seconds)
    (318/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.071770909 seconds)
    (319/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.063911106 seconds)
    (320/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.072608331 seconds)
    (321/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.239287777 seconds)
    (322/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.067502276 seconds)
    (323/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.069020443 seconds)
    (324/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.079770062 seconds)
    (325/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.122284401 seconds)
    (326/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.067663244 seconds)
    (327/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.068973725 seconds)
    (328/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.067723989 seconds)
    (329/341) benchmarking ("sort", Int8, false)...
    done (took 0.154051553 seconds)
    (330/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.067647746 seconds)
    (331/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.066791704 seconds)
    (332/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.067190342 seconds)
    (333/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.065185917 seconds)
    (334/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.069165825 seconds)
    (335/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.073604122 seconds)
    (336/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.08604873 seconds)
    (337/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.095591867 seconds)
    (338/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.070961452 seconds)
    (339/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.0695764 seconds)
    (340/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.065459307 seconds)
    (341/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.066917754 seconds)
  done (took 36.934576725 seconds)
done (took 38.546532468 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.088370401 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.077005732 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.077477926 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.073982967 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.077638053 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.076149589 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.077726481 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.07579072 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.077295053 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.076903458 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.077114079 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.064750686 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.073183206 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.08074889 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.074385899 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.081272061 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.077938166 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.081064706 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.065814998 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.080114489 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.09340651 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.077452556 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.074576173 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.079777685 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.065383134 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.074752344 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.090172114 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.087541832 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.072858762 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.075378856 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.072906274 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.083809275 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.072435618 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.069838802 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.073057882 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.069640273 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.07283575 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.070346661 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.086804553 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.069515128 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.063824171 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.075750739 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.070995178 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.071849961 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.072564539 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.076641891 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.069438375 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.077822881 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.063905194 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.076144689 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.0867555 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.068579589 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.070484844 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.072524474 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.069230464 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.073343655 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.070576339 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.075472478 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.068779191 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.075108954 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.074837474 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.07254694 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.063549465 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.072397275 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.070920252 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.071009354 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.062065154 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068702809 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.063332298 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.063359758 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.062447253 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.072152386 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.070245425 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.068733704 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.063206147 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.06541391 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.064186121 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.07713403 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.071153356 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.074789099 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.064889272 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.070236765 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.06978211 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.065107286 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069983942 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.075212869 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.063386744 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.064379782 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.063358168 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.078056303 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.069844144 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.063238946 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.074942303 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.068206697 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.068106999 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.06361577 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.063601966 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070344029 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.073482163 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.064891532 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.063878355 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070540663 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.07034677 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.074228907 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.065375343 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070252436 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070677806 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.063632006 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.073851805 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.071691181 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.073265266 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.076497515 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.072173242 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.075649373 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.063866684 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.062483357 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.073094689 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.063775759 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068109863 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.071296043 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.068921342 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.072977817 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.065216713 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.062995301 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069392873 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.071173344 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.064966906 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.06521059 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.065283698 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.074724334 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.072656207 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.06411401 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.064914175 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.074253514 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.074305589 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.064613169 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.064159654 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.074457355 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.065243357 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.071320549 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.070533842 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.073753335 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.064518242 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.065057866 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.063715563 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.06419013 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.064519037 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.070305754 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.074670107 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.064985219 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.073464433 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.217460329 seconds)
done (took 12.701461568 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.06526659 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.105642796 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.07778802 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.080578175 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.076981618 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.06540508 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.068249238 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.082529912 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.067432498 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.088481757 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.089264803 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.085427272 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.094727513 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.062669381 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.063899377 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.065011869 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.062314478 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.076156289 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.080973141 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.087653772 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.100281182 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.063936515 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.079912046 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.083723197 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.078442753 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.082565857 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.06599824 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.06524859 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.067696471 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.082942158 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.090081298 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.064046468 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.0653392 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.081689779 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.080863777 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.074271677 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.066719642 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.072715437 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.069615361 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.064650878 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.066312332 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.081428967 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.070846753 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.070824988 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.065644564 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.065168601 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.064695 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.071409372 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.081583036 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070088903 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.076071257 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.082756855 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.06609874 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.064560846 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.062714474 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.071436503 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.064530091 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.065276632 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.065551913 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.064434368 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.065392487 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.066884841 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.068944361 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.070637221 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.068115578 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.070375945 seconds)
  done (took 6.514953801 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.080609356 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.09051182 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.079517511 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.080156174 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.065118402 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.066198161 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.066192021 seconds)
  done (took 2.240799239 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.065250145 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.072166545 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.076283454 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.077559236 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.08706422 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.074212453 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.065282553 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.09653335 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.063861538 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.07297142 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.080325846 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.077881933 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.068234562 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.077032892 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.065249771 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.078105887 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.066584219 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.073116252 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.0723617 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.078106777 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.068847672 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.094547372 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.078689658 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.065817645 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.078017865 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.072358415 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.067335286 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.065143639 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066957622 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.066184241 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065862371 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089338255 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.072116543 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.079062117 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066250271 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.064687764 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.069030485 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065451451 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.068619666 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.074217357 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.068148232 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.064345408 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.065058638 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.064956716 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.065760823 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.06898977 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.065751361 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.064074121 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.064038499 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.071776933 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.063732022 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.070539204 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.066629626 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.06915802 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.069262762 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.068930712 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.071772426 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.065054843 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.071887907 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.070928272 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064485527 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.07685238 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.075860932 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.067583696 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.075704783 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.073049697 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.071127504 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.067918051 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.063911584 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.063687724 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.064702818 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.075481828 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.067555595 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.066627265 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.065427197 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.069198897 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.068283052 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.080177815 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.079814508 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.077551797 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.066996168 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.064588955 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.068922411 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.07954996 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069201042 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06455834 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.06531298 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.064110889 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.069434254 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.064782327 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.06973999 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.065305022 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.072855839 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.068634002 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.067756144 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.072113505 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.064682484 seconds)
  done (took 8.546649795 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.067378252 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.066754909 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.065794157 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.06540202 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.065924086 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.066105593 seconds)
  done (took 2.146136937 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.087772086 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.06458509 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.076747309 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.065061929 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.086967197 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.07116143 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.07139298 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067908279 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.083108177 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.077829756 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.073507787 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.07591834 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.076432569 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.068456844 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.073013953 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.0675307 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.072954205 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.069816683 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.076423158 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068843524 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.083284016 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.067761032 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066999953 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.077167061 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.068111942 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.06583597 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.066455717 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.075135461 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.074671762 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.067000529 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.066292679 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.06832588 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.075278045 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.06850221 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.073324155 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.075509553 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066330843 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.072300594 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069059484 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.069691336 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.075070129 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067203413 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.06715233 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.070301037 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.066775235 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.073213745 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.070166823 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.068492476 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.0708141 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.070237918 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.070789928 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.065324633 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.067868088 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.070372867 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.073233103 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066476149 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.07054534 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.071117279 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.06623008 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.073540002 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.06520649 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.067890233 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.066367094 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.067617164 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.069476897 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.069973573 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.0736655 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.06674174 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067165631 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.07042183 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.070264273 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.064771819 seconds)
  done (took 6.819300924 seconds)
done (took 27.964688405 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.537432559 seconds)
  done (took 2.23159823 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.892341244 seconds)
  done (took 2.625327471 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.509716542 seconds)
  done (took 10.246952864 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.333218139 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.396459927 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.72615399 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.129403477 seconds)
  done (took 3.35134697 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.738848713 seconds)
  done (took 2.487081014 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.226876067 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.21840392 seconds)
  done (took 2.197458636 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.331772279 seconds)
  done (took 2.070384828 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.132726014 seconds)
  done (took 2.866944121 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.229683575 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.159706366 seconds)
  done (took 2.135693611 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.528876444 seconds)
  done (took 2.267379681 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.26146913 seconds)
  done (took 6.005872372 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.229596012 seconds)
  done (took 2.009300267 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.226214398 seconds)
  done (took 1.971380186 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.005462993 seconds)
  done (took 3.743100789 seconds)
done (took 47.951642911 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.081622952 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.083789371 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.083295745 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.078893422 seconds)
  done (took 2.045216131 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.071556176 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.067715111 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.071113533 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.071651951 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.069483483 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.069930083 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.070734905 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.067728346 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.069427547 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.067601443 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.066540463 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.068288383 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.070513432 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.067753052 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.070742117 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.071567802 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.06797342 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.067900114 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.070421662 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.067719418 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.070471078 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.068002288 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.066143304 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.06790672 seconds)
  done (took 3.401044194 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.075929799 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.069986179 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.07281843 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.069033823 seconds)
  done (took 2.037752351 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.074265783 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.074089483 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.08338577 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.087568386 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.073675457 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.075215502 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.081171688 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.082138636 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.063577186 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.084517356 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.066148964 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.06450307 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.064759921 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083538467 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.080782595 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.060288465 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.061831391 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.07487416 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.074107719 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.076648396 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.066229146 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.063405667 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.074035733 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.074830532 seconds)
  done (took 3.515374148 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.079603717 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.063268251 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.078635987 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.089062317 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.08973978 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.063123924 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.076299573 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.090492528 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.125179461 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.063210528 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.069436636 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063541461 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.102254023 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.063762662 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.078250866 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.106302518 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.109875926 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.067479202 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.096526383 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.063369422 seconds)
  done (took 3.39809594 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.073827232 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.067716947 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.068418337 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.064443783 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.075139025 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.070899352 seconds)
  done (took 2.17907823 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.066272232 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.066169793 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.068088304 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.069839437 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.065601281 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.066060217 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.065326444 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.063691562 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.063861209 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.064693814 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.064631053 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.065221374 seconds)
  done (took 2.541747446 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.145644179 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.067082971 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.067659883 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.063825097 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.065537127 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.064243174 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.078146133 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.066710251 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.081718546 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.064919633 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.065091819 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.067050784 seconds)
  done (took 2.649948078 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101637782 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108324783 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.142475482 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114219372 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114000134 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094241648 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.123323195 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.093208235 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.157233227 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.134090581 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114255185 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09094486 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084116668 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.067512691 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0975404 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115700342 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133828058 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.070831171 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11113941 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.165326357 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132131335 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.133558844 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145162101 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114180163 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088133773 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146774891 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.0950786 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100114195 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.121822663 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123774306 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117124031 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.095621582 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.069506099 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.06894937 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14642694 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.100511511 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117958694 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.09043218 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102343971 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086149944 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104996678 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.06746234 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.083329263 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.110261337 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082370772 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12837137 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.087720827 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117273063 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081413778 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.137036271 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121320864 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096390307 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083051185 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101285061 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.287236181 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110215027 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.132594308 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105138227 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08055299 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.116953893 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.100664956 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097759393 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10457835 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077476424 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.174235221 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08672159 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.109317732 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109890486 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.093130081 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093402776 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104791745 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.133198737 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122691589 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.122798305 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135344115 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092894903 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119280619 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.097508434 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.127022279 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1022798 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.070655176 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.11847287 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.126711646 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.096659867 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098566877 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.127486919 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.089680144 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075308358 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.099484184 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.119311163 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080389676 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.111081694 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078569329 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.106421636 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130583457 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095495011 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109375626 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114189113 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075993724 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152209869 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106400239 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071200097 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.118562178 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114762791 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.158565879 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095633346 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.076072869 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.099377138 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.261782328 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.145933603 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10541319 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077924917 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108378296 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138573661 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092863927 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.166964035 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094728536 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140324751 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109310793 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085485236 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074967257 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.090229537 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112849561 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107476482 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112979309 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089943057 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.08442177 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087025815 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112245987 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092200647 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080769159 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.113791319 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.102033097 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.074568388 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087558301 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.077061193 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139438091 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.07605109 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135211362 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122946888 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.076323375 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103588752 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.095851243 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10619144 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.095851632 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114571217 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137714132 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.114306211 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.087563569 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.091699471 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10647455 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.141365902 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.124669863 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09030708 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.074589526 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098146628 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109674118 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098162794 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.1255266 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.096441754 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108850656 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103665489 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140162555 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142903855 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097463452 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097823334 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103159379 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.279885027 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07522883 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153790951 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101851926 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115521567 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082873752 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139130979 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.111339604 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.08742672 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084767237 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098070225 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.101975753 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10390553 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140540089 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.093432793 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.070612999 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090472514 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.142078822 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073857757 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107622195 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.088180055 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.090955275 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115814304 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.090882651 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079084911 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.06645572 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126107665 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.157357397 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.069031034 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115722004 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.110614845 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101060517 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.11978275 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.067705788 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116687136 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.136679465 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115659655 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138901232 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144971116 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115011471 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116482941 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.112512883 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103797147 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077624317 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.123433268 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.133214269 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094034185 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090158544 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133499263 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116296868 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.134702064 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.114368836 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110735953 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.101261178 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.262985312 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101224178 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.099741662 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142171191 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11890904 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.123493614 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084256442 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104695837 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116140072 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133089188 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080476275 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139520828 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.081371164 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115736869 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.075591174 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.121370548 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.077579618 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.110965091 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079256176 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100639667 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.069321571 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.073932479 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142285429 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.113160194 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106546813 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100264277 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.137098131 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.134104196 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.07906241 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105948619 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112950399 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098679109 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113668101 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107321393 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.087003575 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093180648 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106757529 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083082373 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.079583772 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.11285681 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092731393 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124596181 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.081883441 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073096096 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138057522 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101998196 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093310258 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075962033 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105674832 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.119203357 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090566102 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085397898 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11294947 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102444148 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140260009 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.088798048 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.09604254 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.122040746 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078032776 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.090032022 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.066981839 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.082536287 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.073168372 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.284803328 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.074552217 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115719332 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.0685538 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.130999854 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087194148 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.092873708 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.102502611 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112062726 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128579826 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09617984 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.142254117 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090056322 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119088384 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107642252 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094627232 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088645945 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103857173 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10130284 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.12274986 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.096364539 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123110412 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144234595 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104888038 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.142937296 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091761331 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1202953 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108052379 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.125185305 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111427568 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145612415 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.136468707 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110956135 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110289414 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075197705 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096113858 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106541342 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.112863649 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.175119903 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124524403 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.071464653 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.106331386 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092168687 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105857632 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10301134 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083218855 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147833894 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103350496 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.088701422 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114377793 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.092288072 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.105748686 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076120798 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095498522 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.099507276 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093454955 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096678433 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111122131 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122692003 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108638088 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.137370934 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.09571112 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.08925103 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.114333959 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106452513 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108115205 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084294123 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08491253 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13336025 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.113483424 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.123467172 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.09558424 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103132784 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.10627292 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095266526 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118480007 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102415237 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.120654575 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076238796 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.073500814 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.065610877 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.069129886 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.118037362 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103017357 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105793661 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093803217 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.068703906 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09851396 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101377165 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.068506126 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084513638 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089447764 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.090782325 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.086892262 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102459341 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.11236396 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.089799004 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101726169 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097627325 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14354391 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.09912571 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085618939 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.139535008 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.142902845 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.083514129 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088053462 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.068670432 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.076681048 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108604458 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14299075 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144051465 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.074065006 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082663632 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.079600516 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.080643675 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.068020769 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.344140165 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.1028079 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109565985 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105003959 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.118717451 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108800393 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078893988 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.107626033 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10303263 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095866599 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.106532424 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120314974 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.129452896 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.144369593 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110361939 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107379643 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076120457 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.080205639 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.075337187 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078896187 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.102081998 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.078716987 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076246951 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.143203427 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.091577772 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104409168 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108977829 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.088099964 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075002743 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134037364 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.068220083 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134089856 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.070456322 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080645545 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.081353919 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077827203 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092868572 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137665962 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10877229 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11248087 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107308318 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103178417 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139129415 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155223416 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079080337 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.142809024 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074169616 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074197591 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.074328061 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112312921 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088133943 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.113988129 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139356156 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08964901 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101576205 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075567594 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142002088 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.096776678 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102210854 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085096034 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.076975316 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.308321647 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078069524 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.078581986 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088388913 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.108980252 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.071195363 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.102468721 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082825212 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079032171 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143692847 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.631150053 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090923988 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.075816129 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096884043 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.14456718 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129717218 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096171546 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10862912 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.118501786 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098540707 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093337509 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105756798 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.181061034 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073306651 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094787975 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.105122313 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098807633 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103389521 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.099366704 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.08635169 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.091296593 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.084896787 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077539506 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105917001 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087638064 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094517221 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105200352 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081268701 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.085119424 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.128897686 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.102203037 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.081423753 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086397985 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.104174684 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086936683 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09956684 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.067686138 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.1120812 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.09074508 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11782901 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.094354854 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109272334 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.126486321 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087732882 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135525687 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.105411832 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.120089763 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08543767 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.076390024 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122962443 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.086126169 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07578184 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142978191 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.25913706 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.09168769 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102101563 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.094963224 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11144496 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11512615 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109362653 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.095773606 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07698434 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09827371 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.101139348 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083872126 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077031686 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.072906709 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.074786112 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105507562 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083680234 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.081065406 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112669363 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086833208 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10143617 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.098955107 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.120759963 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081398057 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098986601 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107622267 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090179421 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108136434 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099059148 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.126946799 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.172699335 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123943874 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127116064 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.132411649 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.074997925 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.074078803 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.067049358 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113728768 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078025084 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.087031648 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079303969 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132980712 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.080140687 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109937226 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.229586067 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080650852 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094521944 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097191883 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.069913187 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083872566 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107254044 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087182146 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080592594 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119936859 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083054599 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.127836598 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109543018 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098886996 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093270164 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079017893 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112541958 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.10539272 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.128843391 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.095723923 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.075701522 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115719225 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.266559492 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136882385 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.073002062 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081585369 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130882878 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104817693 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133568175 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080572517 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151760458 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.1431982 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100215137 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134148665 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071274784 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08442697 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089799017 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.127854119 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085977878 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111514025 seconds)
  done (took 67.072717564 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.152014202 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.141285773 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.080754122 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.102126863 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.186216053 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.19564642 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.1176172 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.094381778 seconds)
  done (took 3.008071505 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.066582707 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.081069485 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.079630924 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.203713593 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.095029385 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.065787761 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.072517368 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.081846474 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.067283722 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.067526123 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.10190414 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.067707046 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.067775278 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.370953654 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.06641775 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.072292909 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.067050106 seconds)
  done (took 3.609668548 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.331559059 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.159490858 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.254012163 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.216932826 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.147478052 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.554243916 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.074723498 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.082118214 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.694957406 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.371658397 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.137881887 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.08641558 seconds)
  done (took 20.038330332 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.076163654 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.078613493 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.078415794 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.076969706 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.076648747 seconds)
  done (took 2.383811069 seconds)
done (took 119.646336554 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.083150042 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.174671124 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.069160181 seconds)
  done (took 2.202348894 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.081495706 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.080127935 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.082113496 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.079843055 seconds)
  done (took 2.260369062 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.073880789 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.075960776 seconds)
  done (took 2.077586481 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.223269966 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.181468433 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.092319055 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.081470596 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.079709663 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.081596395 seconds)
  done (took 2.179729733 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.070483102 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.070353317 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.072462419 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.073309386 seconds)
  done (took 2.21086997 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.06735276 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.065436686 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.069161995 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.072577461 seconds)
  done (took 2.199507683 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.084251351 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.085910067 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.117610677 seconds)
  done (took 2.213491872 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.081952787 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.081876438 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.078680995 seconds)
  done (took 2.172553458 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.108258409 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.096374103 seconds)
  done (took 2.128753792 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.079128944 seconds)
  done (took 2.006835447 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.088744179 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.097009801 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.139057421 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.109180599 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.143381513 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.128862255 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.078207038 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.079466472 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.075128011 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.073825849 seconds)
  done (took 2.935548463 seconds)
done (took 27.092808421 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.077940903 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.374195945 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.361551889 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.08925186 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.674071854 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.358137003 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.007994176 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.093352914 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.104000034 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069846675 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087158713 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.65131905 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.999442401 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.332566343 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.985945587 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.331818046 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.65385384 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070106108 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069112425 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069636783 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.993064832 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068923588 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069405384 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069645296 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.651316451 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.376458512 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070424861 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.330602442 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069432986 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.074002704 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.359804256 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070686924 seconds)
  done (took 16.564460921 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.068647423 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.123656585 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073780264 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.086116344 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.071976738 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.07062098 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.072630783 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.070034377 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.115192019 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069221293 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087704751 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069495898 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.073411497 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071070029 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.09026415 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069187084 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069844703 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.07160068 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069581161 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070586906 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088937305 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069452951 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.07018111 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070043406 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069859746 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083682027 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070917605 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069528288 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069351818 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073747829 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.074170308 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070296994 seconds)
  done (took 4.388830309 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.12137049 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.127130421 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074191734 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.109415528 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.116756638 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068635182 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.152206211 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.094071284 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.118808581 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.06993344 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087997133 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069693295 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.105944635 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070765455 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.090758322 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.06966845 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.072000069 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069941655 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069575607 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070409644 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.089813457 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069133924 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070150076 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070207799 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070132506 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.084658611 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070314888 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068942602 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.06766817 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071213121 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073514819 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068581845 seconds)
  done (took 4.648616868 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.068532009 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.070802215 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.079254888 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.081869063 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.06727978 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.069311313 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.070546526 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.067004983 seconds)
  done (took 2.521712859 seconds)
done (took 30.068142392 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.078298112 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.068717131 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.071726962 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.08925989 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.075149713 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.071183147 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.065706802 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.075318712 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.071960604 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.07202042 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.074073926 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.067946667 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.070747249 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.065183801 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.073160742 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.066556969 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.073585875 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.071017384 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.07147165 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.072838998 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.068996866 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.072084578 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.075062259 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.071165801 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.071725551 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.072119187 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.076236882 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.073171951 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.067223546 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.069932045 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.068717097 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.082227136 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.073085826 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.073503296 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.066891327 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.066878642 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.071265878 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.069358793 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.073508329 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.076085115 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.068952976 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.07585851 seconds)
  done (took 4.939419235 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.087284967 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.093411193 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.085723789 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.081340583 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.107504144 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.08065794 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.091530323 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.078650245 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.078130947 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.091704501 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.072891687 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.07795258 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.079187059 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.073888471 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.076885558 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.073246032 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.07845447 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.07225014 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.077692789 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.076894659 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.09155687 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.072477881 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.079662145 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.080551922 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.074319786 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.080411721 seconds)
  done (took 4.073550889 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.071511943 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.087476814 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.091685951 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.140470754 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.108320634 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.082030601 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.08359361 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.094653071 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.10272568 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.068859911 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.07301117 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.096075399 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.098238321 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.076110537 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.108298809 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.087555716 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.081661951 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.070590022 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.075907204 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.104658351 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.092282116 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.087945215 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.10247781 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.087551358 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.06615894 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.076286002 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.074105628 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.083256899 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.074594629 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.079437086 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.07136602 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.071123335 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.06797548 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.0793127 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.074637034 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.064890639 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.089033613 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.079716165 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.08171856 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.105945798 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.076932371 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.06817358 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.095346799 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.133767736 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.066586801 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.069182188 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.070903689 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.079488659 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.068934887 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097084966 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.083798712 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.066633052 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.08632159 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.068404176 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.068399369 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.083624041 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.068653885 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.069850342 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.122531992 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.073171885 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.088038099 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.071879294 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.08836571 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.066312968 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.078061773 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.067995779 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.068408778 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.065386605 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.102221079 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.075109037 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.119712231 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.06958739 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.066136742 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.080869436 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.080015121 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.074063459 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.066467395 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086372794 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.079389636 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.071507621 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.078252743 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.069572577 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.070218322 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.102992708 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.065715441 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.065069203 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.064823733 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.068953616 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.070312096 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.067355297 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.080175572 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.066219347 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.069943918 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.082391497 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.067431652 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.06851378 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.069153323 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.067749506 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.066205376 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.077600029 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.070516588 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.068325967 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.07971902 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.068260256 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.07028359 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.081847911 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.077565811 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.066699612 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.069599274 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.070963916 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.070064148 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.073194326 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.071649463 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.070545543 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.075628635 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.075962 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.074922958 seconds)
  done (took 11.232178351 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.162422362 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.152221131 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.068254834 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.146425804 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.075013906 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.071358202 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.148778282 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.087234849 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.067668524 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.070459902 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.068177501 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.09702349 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.091871291 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.103686526 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.071220753 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.067916808 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.093498223 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.100786548 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.150328212 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.146014815 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.091177732 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.074971225 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.070004991 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.069090187 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.070170866 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.078483987 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.090072026 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.075924294 seconds)
  done (took 4.659093015 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.074421001 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.083144374 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.071438618 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.091437667 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.085684622 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.06743429 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.068933385 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.068879198 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.084615638 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.074021492 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.067473948 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.072178736 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.071031836 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.06823728 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.067993234 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.073768849 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.073868992 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.066202749 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.07120741 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.07170391 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.077929425 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.094641493 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.073260713 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.069064106 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.071876361 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.068217708 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.074459688 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.076934745 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.066945559 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.09734174 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.06415158 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.071833607 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.083868584 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.070002896 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.069095297 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.070149881 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.069114378 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.069181006 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.067742195 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.065438 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.065067955 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.072490579 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.066017742 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.072961683 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.081545446 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.074913214 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.068319743 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.072863551 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.069814404 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.063742581 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.070976571 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.072239914 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.071026779 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.075756883 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.071040749 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.06976514 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.068483594 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.097532479 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.072902069 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.066397778 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.066157659 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.065017803 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.068589863 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.074912544 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.083629228 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.069056653 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.064997208 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.067085015 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.071703889 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.081180937 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.066552801 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.072267977 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.064052463 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.067105505 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.069771158 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.070156949 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.070271733 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.066840364 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.068313341 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.068783688 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.069298963 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.068523149 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.068220416 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.071021569 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.066164847 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.066933692 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.068866983 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.070065409 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.075286932 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.067432073 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.071572006 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.069946386 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.067811779 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.071250961 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.07429383 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.072034805 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.088964668 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.077609669 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.06907824 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.066522568 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.083864041 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.070863355 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.067950989 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.074379573 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.073530483 seconds)
  done (took 9.566151682 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.089924668 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.068524408 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.087084263 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.093682366 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.077330827 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.072049636 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.081423414 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.068119088 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.083444136 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.066013923 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.075846152 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.065440182 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.080541789 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.076158954 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.068745948 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.077814759 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.070153695 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.088321834 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.083058389 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.067018636 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.077067232 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.080199617 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.080124923 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.087698879 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.087193132 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.088105596 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.08136125 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.071957487 seconds)
  done (took 4.201688639 seconds)
done (took 40.612537371 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.018425303 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.192705966 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.022646512 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.300903636 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.08079615 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.143434966 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.130174967 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.006237323 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.199667204 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.048245841 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.330678266 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.397043134 seconds)
done (took 69.894147801 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.055507591 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.163932867 seconds)
    (2/2) benchmarking "String"...
    done (took 2.244554886 seconds)
  done (took 6.364144756 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.613722057 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.018625478 seconds)
    (3/3) benchmarking "different"...
    done (took 2.068513285 seconds)
  done (took 8.655965941 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.109604578 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.645504123 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.279689463 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.017654589 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.024457118 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.430884568 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.827585495 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.483851102 seconds)
  done (took 33.666546591 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.255501888 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.230387479 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.77567339 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.821638541 seconds)
  done (took 17.087058509 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.624185731 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.279905419 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.281014711 seconds)
    (4/4) benchmarking "different"...
    done (took 2.273250329 seconds)
  done (took 11.477970225 seconds)
done (took 89.465413165 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.021741886 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.053259286 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.060061139 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.174648143 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.042049114 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.054017563 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.034810306 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.055254013 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.021681035 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.024476557 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.455265506 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.028542761 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.034713837 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.058576845 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.022057667 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.023447422 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.585047226 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.02482655 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.032962079 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.645155612 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.546418696 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.031006797 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.024977586 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.079092918 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.171848574 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.06270813 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.582826748 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.025765635 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.638607566 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.019408557 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.191495423 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.024133701 seconds)
  done (took 212.807840636 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.022656056 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.101682169 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.174618912 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.056396634 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.552206247 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.222569994 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.163217395 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.595213611 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.02983481 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.036578806 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.319105603 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.022557135 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.344800295 seconds)
    (14/36) benchmarking "dot"...
    done (took 3.059907576 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.018966488 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.054554643 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.283773842 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.345415429 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.020885038 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.212550486 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.035051012 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.177988937 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.144367559 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.292532709 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.034787821 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.08787816 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.056551009 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.047846353 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.217068515 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.263163348 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.043900513 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.067589457 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.23101055 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.893600638 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.023596776 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.052137468 seconds)
  done (took 180.265862599 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.200531765 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.03235197 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.085025724 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.159347522 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.771909145 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.752686098 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.027691888 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.023225363 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.023201527 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.031048338 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.026162221 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.091432821 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.560678407 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.050228706 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.026635975 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.02647136 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.324121647 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.03405237 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.025179089 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.024381484 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.089493119 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.398346539 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.163042079 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.029490423 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.033689692 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.163531824 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.038045441 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.025967188 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.161082378 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.030585939 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.10296078 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.162016768 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.037173251 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.1069266 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.034582144 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.506552812 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.029968047 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.025572527 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.027592002 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.08878572 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.025680562 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.151703179 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.12020534 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.027264149 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.038277426 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.096060369 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.699291419 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.030317988 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.026451183 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.026445915 seconds)
    (50/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.026835206 seconds)
    (51/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.028652425 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.554202578 seconds)
    (53/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.031496912 seconds)
    (54/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.051458785 seconds)
    (55/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.658135303 seconds)
    (56/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.029293802 seconds)
    (57/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.030377847 seconds)
    (58/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.029194442 seconds)
    (59/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.026431167 seconds)
    (60/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.028348531 seconds)
    (61/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.03569626 seconds)
    (62/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.064577119 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.840049417 seconds)
    (64/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.235454373 seconds)
    (65/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.031827509 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.4135915 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.849854442 seconds)
    (68/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.030116058 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.027845257 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.39141488 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.086425591 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.02646464 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.105754167 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.025584562 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.025380471 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.024614019 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.02267503 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.121848819 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.10649308 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.02714255 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.160367474 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.028120512 seconds)
    (83/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.024109669 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.02397221 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.143189256 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.254221746 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.018545819 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.02321097 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.068244173 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.012677527 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.013454338 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.018996416 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.097039005 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.012933725 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.011756267 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.011966248 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.113051018 seconds)
    (98/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.01615579 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.013495763 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.12993071 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.233375025 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.082601004 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.255433002 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.260156498 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.017705113 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.012823296 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.023906425 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.011162598 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.009360212 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.018868712 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.010701752 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.009305983 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.01185545 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.012758932 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.009442344 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.01691755 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.022906634 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.009871209 seconds)
  done (took 437.785145533 seconds)
done (took 835.061829502 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.649275726 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.823465282 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.611224751 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.645743536 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.614105119 seconds)
  done (took 15.293869254 seconds)
done (took 17.239769038 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.033636502 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.02827495 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.017554589 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.032551507 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.031468756 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.030764447 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.06296001 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.055031298 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.050327276 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.028273147 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.036274504 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.031828611 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.036113062 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.051237982 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.039641422 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.037199498 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.032655023 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.021336967 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.038689526 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.031076556 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.031735927 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.027327426 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.03381177 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.035640361 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.04427883 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.032783124 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.026480685 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.034087233 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.034590246 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.03440467 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.069917744 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.041590927 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.062193324 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.04128491 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.038597283 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.041503703 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.032864982 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.056200298 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.032393071 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.070138318 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.040933794 seconds)
  done (took 85.539161821 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.019995446 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.152410344 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.232360063 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.053917222 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.022872886 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.230464433 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.078636488 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.143439052 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.149779436 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.233368075 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.251179132 seconds)
  done (took 25.522961532 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.019034838 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.159149847 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.237644027 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.059394602 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.043129528 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.237517533 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.086935055 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.151895967 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.154709665 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.236364956 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.250825106 seconds)
  done (took 25.597664147 seconds)
done (took 138.605308848 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.388272329 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.045204923 seconds)
  done (took 6.378181535 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.003812529 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.021299559 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.152409669 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.004539085 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.006929228 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.005427909 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.004464859 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.004768279 seconds)
  done (took 18.148475877 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.004387048 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.001917565 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.002925529 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.003530789 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.002925997 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.003916056 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.00178985 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.000960746 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.001418358 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.002823537 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.004023672 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.000837357 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.001454347 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.001831901 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.001604442 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.004658893 seconds)
  done (took 33.98101505 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.998903514 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.999632696 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.000198762 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.002814353 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.999673837 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.999523889 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.001266546 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.999788241 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.001234713 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.9964857 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.99769032 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.997969668 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.998301128 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.999488612 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.997097139 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.998804568 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.997657338 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.997298042 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.002172235 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.998636662 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.998159035 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.998618997 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.002441155 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.001978386 seconds)
  done (took 49.922210513 seconds)
done (took 110.382959737 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.290958344 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.856033984 seconds)
  done (took 9.078676071 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.001271631 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.997100079 seconds)
  done (took 6.009358453 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.000360706 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.996171673 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.996419525 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.997245983 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.996707191 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.99715457 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.995289277 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.995248291 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.994672998 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.994470603 seconds)
  done (took 21.897302112 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.993566463 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.994318424 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.994125873 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.994748552 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.994457263 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.994309798 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.993355976 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.993631101 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.993814422 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.994403615 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.993141211 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.993767777 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.993852685 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.992817095 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.994491675 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.992748277 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.99353107 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.993745802 seconds)
  done (took 37.821033024 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.99376125 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.991847986 seconds)
  done (took 5.913443409 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.992373698 seconds)
    (2/7) benchmarking "second"...
    done (took 1.992469806 seconds)
    (3/7) benchmarking "month"...
    done (took 1.99442847 seconds)
    (4/7) benchmarking "year"...
    done (took 1.991754133 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.991515961 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.992070881 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.991342406 seconds)
  done (took 15.873407173 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.99253746 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.146876863 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.200032381 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.60267621 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.994148445 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.992653692 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.863810119 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.992738564 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.994797158 seconds)
  done (took 21.70710522 seconds)
done (took 120.231219269 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.848808021 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.989871565 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.281906496 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.15612451 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.992632833 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.326370823 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.017225079 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.535852798 seconds)
done (took 44.073097318 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.111832109 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.986291957 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.01950475 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.01071061 seconds)
  done (took 22.939932044 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.988700439 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.328270578 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.012339869 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.058832171 seconds)
  done (took 23.325808263 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.366130247 seconds)
    (2/2) benchmarking "read"...
    done (took 2.34477279 seconds)
  done (took 6.63738773 seconds)
done (took 61.939497353 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.987416446 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.987620597 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.987466351 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.987762839 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.988620774 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.987436469 seconds)
    (7/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.988363509 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.987861568 seconds)
    (9/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.987117275 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.988473331 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.987096865 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.987199491 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.98689001 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.987678156 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.988485187 seconds)
    (16/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.987203016 seconds)
    (17/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.987105955 seconds)
    (18/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.986949599 seconds)
    (19/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.986780124 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.988010112 seconds)
    (21/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.987146525 seconds)
    (22/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.987288864 seconds)
    (23/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.987796208 seconds)
    (24/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.986941739 seconds)
  done (took 49.624327397 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.987781904 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.987170976 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.987538357 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.986540608 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.988840886 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.987390568 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.986756697 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.986446529 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.988180241 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.988266936 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.986788369 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.985725787 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.98735511 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.987230935 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.987216794 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.987063042 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.986434739 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.986844311 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.986849923 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.98696886 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.987308512 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.987302509 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.986741483 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.987153611 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.987977367 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.987201968 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.98686005 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.987141659 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.987209669 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.986870775 seconds)
  done (took 61.539785743 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.987656075 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.988145498 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.987520469 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.987629344 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.98907648 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.988095971 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.987854884 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.98822718 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.987749252 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.989389459 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.987794076 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.988201732 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.988593184 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.988046167 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.988811685 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.988951033 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.988222154 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.988982234 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.988665155 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.990416925 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.988799791 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.988978806 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.988521713 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.989280452 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.990470465 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.989406997 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.988697594 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.989300638 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.989162785 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.990934502 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.989761204 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.989338769 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.989259605 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.989542481 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.989900171 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.989803412 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.98930108 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.991839877 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.996116966 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.990271872 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.988477529 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.989165988 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.990092208 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.989535931 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.990472788 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.989985311 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.989422265 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.989594258 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.989603094 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.989927351 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.989737149 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.989271248 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.990170243 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.990098221 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.991187344 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.990010298 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.990337791 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.989376729 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.990363145 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.991273627 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.990119586 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.98991632 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.990592789 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.98955699 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.991737069 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.990680299 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.990399886 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.990756937 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.990756507 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.993616549 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.99128372 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.990856308 seconds)
  done (took 145.18015742 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.990666841 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.992421353 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.990669152 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.990472074 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.990998088 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.991119015 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.992539085 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.991419453 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.991563631 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.991310836 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.991453455 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.991797122 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.990548075 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.990910597 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.990995741 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.99072862 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.99258664 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.991156886 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.991906828 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.991931691 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.991698694 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.992496825 seconds)
  done (took 45.737242691 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.993376144 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.991560891 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.991526181 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.993055239 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.99196688 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.992628709 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.992041991 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.991646371 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.993097982 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.991711782 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.992081178 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.992408373 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.991795582 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.993231223 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.992175964 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.992900073 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.993679038 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.992384348 seconds)
  done (took 37.79102872 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.992681352 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.992612593 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.992869796 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.9927386 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.994569481 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.99305438 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.992588118 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.99376746 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.993132867 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.994999438 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.992851739 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.99326335 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.993473441 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.992359222 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.994821339 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.993290697 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.993705704 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.992814876 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.993215575 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.994641182 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.993185189 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.993595538 seconds)
  done (took 45.783189088 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.993332465 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.995542414 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.994679734 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.994020921 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.993996315 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.993838235 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.985238478 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.993818142 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.993495387 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.995254566 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.993829485 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.995837698 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.994601223 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.994778046 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.994610853 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.994604984 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.99565052 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.994404575 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.994244594 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.994149499 seconds)
  done (took 41.809203487 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.996831186 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.995902765 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.995453214 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.995831274 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.996078304 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.99685698 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.996592945 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.995653209 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.995507595 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.996639241 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.996556614 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.996960582 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.996196288 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.996517358 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.996047385 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.996570296 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.997396395 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.995938002 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.99721027 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.995907561 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.996579762 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.997383856 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.996879585 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.997058909 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.996797627 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.996275835 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.998214714 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.996827338 seconds)
  done (took 57.83300598 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.995886936 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.995705172 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.997579791 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.995264114 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.996205311 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.987266774 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.986431135 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.997206589 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.996014087 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.996084121 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.997283188 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.99608999 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.997261691 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.996347895 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.997903797 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.997399765 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.996902022 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.998468466 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.996614999 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.996520414 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.997416492 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.996492869 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.99741867 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.997290533 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.996405573 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.997917288 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.997804453 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.998792614 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.997729458 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.997256484 seconds)
  done (took 61.819529094 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.015234225 seconds)
    (2/2) benchmarking "in"...
    done (took 2.016454821 seconds)
  done (took 5.963219975 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.99730754 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.997159638 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.997114637 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.99867548 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.998852181 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.997117983 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.997295344 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.998280162 seconds)
  done (took 17.914686977 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.998100502 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.001932531 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.997467266 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.997735159 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.000072771 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.006592178 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.998900738 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.000581483 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.001362014 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.00004018 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.004253667 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.002373252 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.005379939 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.001817755 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.992854034 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.999333635 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.000353691 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.003109198 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.001981209 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.99917832 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.002189705 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.999970485 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.998122963 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.000205054 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.999537793 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.001913388 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.008752676 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.000472715 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.001338583 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.000032568 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.00660396 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.999091403 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.000683709 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.001159664 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.001713016 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.99989639 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.007846631 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.001454545 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.000920286 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.999731777 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.002395118 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.003102206 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.004521954 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.00906343 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.002416892 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.000066903 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.999354821 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.001628532 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.001349253 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.004856309 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.006903674 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.002624284 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.000449255 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.000579783 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.002965454 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.00166276 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.001464775 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.002645916 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.006959407 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.009850864 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.005150638 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.019286646 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.009163378 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.002251407 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.003495739 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.010711741 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.0214213 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.003439616 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.003481688 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.000710808 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.009237737 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.00172254 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.001356298 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.001454023 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.015309775 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.009032743 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.004253459 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.001604276 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.000764705 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.003451081 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.004710767 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.00269937 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.003621223 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.003426333 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.012653171 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.022372154 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.002611466 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.004249108 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.004177908 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.004096097 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.008058372 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.005954873 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.002715035 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.001883816 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.006208354 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.005042127 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.003188748 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.004324616 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.002603559 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.013472332 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.002064039 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.003051218 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.006068342 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.011011075 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.002595264 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.004206787 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.00437623 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.004201769 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.01179593 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.004036718 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.005129228 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.002839276 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.003767096 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.007698565 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.002939289 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.007132959 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.010162782 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.01214176 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.005503087 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.008929281 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.009165286 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.006762875 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.014486519 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.025075412 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.003568535 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.008291408 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.009283883 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.014101332 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.010584473 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.003737922 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.007620239 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.003968239 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.003186697 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.009214776 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.003723887 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.005255514 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.004861901 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.005199475 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.005256582 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.005873325 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.007509722 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.006129567 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.007084688 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.006215993 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.009359709 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.006215733 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.008039437 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.01251633 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.00529485 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.005871175 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.004458251 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.00905763 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.005800475 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.007579721 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.004346394 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.004623407 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.006239213 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.005845684 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.008815551 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.006925784 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.0050697 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.007304463 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.008598929 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.007427132 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.006011648 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.005995478 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.007488851 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.007855749 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.008223244 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.008341548 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.009438658 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.007395815 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.011621182 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.006726866 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.996573295 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.00738494 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.006494359 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.005368968 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.011884183 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.016525348 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.010603375 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.0148832 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.995245758 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.015581954 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.007105363 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.987293473 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.000642348 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.008626967 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.009326329 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.997227732 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.006296988 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.000664507 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.025991064 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.018410476 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.010680528 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.008892211 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.998431645 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.011679101 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.015001574 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.007247568 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.00948308 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.0115802 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.009054063 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.010436471 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.007584975 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.012296591 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.007961001 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.007604213 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.014416043 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.008957116 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.008410988 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.011985225 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.009530625 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.01197539 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.007430662 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.008585838 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.009361156 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.011448949 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.01851665 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.011152072 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.008420197 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.010018623 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.01145109 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.01134307 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.011280609 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.012604979 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.013756926 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.008892481 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.015267008 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.018128038 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.012518516 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.010917798 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.010457608 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.013322129 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.013372271 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.011782689 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.014646415 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.01609017 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.015385188 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.010965396 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.018458275 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.011327728 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.013821274 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.014602256 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.01190774 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.013547643 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.013286928 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.012298372 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.012554858 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.018816707 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.010697791 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.012950931 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.011106158 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.015457918 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.012763625 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.013816394 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.012914397 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.015400786 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.020376407 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.019350047 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.012049804 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.015933688 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.015889709 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.013402343 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.015188208 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.012516794 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.024832096 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.020327608 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.01287031 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.0126856 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.014412327 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.016480086 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.013842189 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.014705065 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.018331601 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.987636629 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.011376847 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.005985497 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.004667815 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.005341421 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.009527253 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.012053016 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.012330932 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.014038464 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.015592981 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.013333317 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.008125177 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.016291902 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.00843016 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.015251183 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.016690274 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.005958706 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.013945005 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.012521282 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.023815343 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.015586665 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.01673264 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.023914634 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.017550428 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.014476934 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.016755401 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.014424971 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.004147164 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.998127422 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.014078846 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.017389103 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.017539458 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.017960633 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.025358791 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.016386227 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.023929132 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.016994274 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.02448399 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.016647037 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.014337373 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.014605727 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.017364462 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.022497804 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.015101057 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.015318915 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.023733978 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.017251475 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.016440258 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.019605327 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.013008827 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.015844479 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.016853539 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.016915711 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.021216351 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.020051257 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.015042375 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.015753051 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.01522777 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.015646467 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.02024858 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.017818892 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.016642656 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.017411505 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.015397662 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.016953834 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.017046317 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.017441604 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.018073516 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.018387991 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.016743805 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.025377735 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.017782284 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.017160672 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.021682282 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.017351698 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.025739076 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.017916263 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.017504359 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.016471722 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.014646281 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.018302327 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.01669835 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.018215501 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.017287492 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.01780832 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.018880215 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.029404123 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.024442318 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.021269944 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.02018758 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.018682892 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.021730054 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.029203864 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.038255414 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.01921655 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.021833156 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.022053317 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.025716703 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.021009136 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.024557694 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.022169601 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.027208448 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.021047671 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.018475149 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.022559226 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.029056982 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.020366275 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.009070985 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.008296573 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.023854478 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.019211076 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.016601677 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.009684845 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.02240427 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.01862369 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.029564001 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.014501924 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.010756016 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.015294104 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.017426089 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.020094849 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.013211326 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.016971572 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.015568703 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.016676366 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.018906886 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.02346045 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.02473895 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.01928379 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.023369592 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.028487224 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.021337787 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.02120294 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.020738915 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.021613318 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.019931696 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.020706046 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.019543776 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.02390563 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.019154853 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.021433964 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.023895082 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.027019663 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.023280305 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.019706466 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.019854788 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.025188751 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.021053195 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.023153554 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.023073636 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.030823843 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.023749552 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.032019653 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.030209483 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.020407195 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.021533271 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.028541098 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.030310338 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.022053242 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.01977898 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.022499558 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.024225173 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.026134861 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.023754306 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.023175863 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.021082942 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.026234569 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.021839765 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.020715836 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.023394157 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.021114758 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.024357971 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.025004867 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.026244856 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.022324651 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.021190913 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.0205464 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.02308355 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.024165201 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.025645461 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.02197648 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.021477352 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.026455113 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.02367954 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.026027684 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.021290383 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.021770451 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.025037254 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.021359433 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.023011136 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.023257666 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.024361773 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.022379119 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.026260867 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.02935229 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.023801258 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.023981427 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.024306739 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.028083577 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.023792698 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.023343064 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.025327745 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.02126907 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.031211832 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.024339333 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.023996907 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.023896229 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.023995272 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.030486088 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.026776766 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.029026914 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.023321514 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.024243071 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.022903591 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.027229239 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.030573696 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.027877139 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.028018931 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.030051014 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.028750716 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.026793846 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.023941354 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.022992361 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.024032155 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.026293993 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.028927813 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.027080345 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.027693645 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.025761586 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.025988727 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.02598974 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.026302237 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.025079613 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.023814689 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.028517481 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.03371403 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.033805873 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.024644344 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.027564365 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.016623646 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.031111329 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.03487938 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.025547494 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.025598758 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.025754916 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.027661483 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.026321911 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.032739348 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.030775185 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.02877429 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.02636971 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.03058745 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.040943258 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.028762154 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.035722914 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.054830879 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.027682147 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.028899641 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.028016718 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.026503802 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.02575453 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.02978358 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.027839952 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.034858798 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.027294471 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.026638897 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.03570934 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.026155097 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.027687974 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.029881284 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.026854123 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.032622042 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.030583756 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.035485618 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.028340984 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.025739967 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.027276797 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.030657609 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.025446431 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.025246161 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.028186287 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.030421291 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.026713699 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.028971444 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.037509829 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.030453185 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.029945223 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.04135103 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.037138692 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.029546422 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.027310209 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.029556738 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.032452104 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.032180665 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.028101499 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.032594765 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.033970319 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.032980518 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.035234051 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.031315292 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.02996402 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.030434794 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.026739475 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.030051801 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.040924326 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.038753673 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.028871597 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.029608016 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.034880473 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.028652281 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.036084647 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.036782912 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.033596461 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.032967387 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.029999497 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.027792546 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.028190044 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.02885296 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.031966089 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.035881344 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.031190701 seconds)
  done (took 1203.47833913 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.029351613 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.029009768 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.028804918 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.029185482 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.029321089 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.030469663 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.029435463 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.030608161 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.030224191 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.028877715 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.029536792 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.028864876 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.030314302 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.030794918 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.029958765 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.028912601 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.030239597 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.030389901 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.030766459 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.028707659 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.029908671 seconds)
  done (took 44.586873542 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.03021108 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.030176373 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.030226648 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.030290594 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.0312165 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.030492582 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.031579125 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.031950516 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.03074848 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.030217376 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.030560568 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.031075396 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.03166476 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.030690272 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.029376215 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.030883173 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.029780427 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.031693063 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.031472642 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.031350538 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.031341507 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.031301756 seconds)
  done (took 46.642684348 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.033417323 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.033258316 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.034833931 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.032292504 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.030740964 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.032991641 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.031073685 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.03236521 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.030870671 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.031168101 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.038429648 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.038387127 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.031989583 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.035170856 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.033406961 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.03362405 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.177748908 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.033309458 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.033473409 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.032643986 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.033828513 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.040886048 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.032549818 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.031424471 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.033578665 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.033374257 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.030861718 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.03225694 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.032660252 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.032548589 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.038370165 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.031678599 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.034237496 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.03659125 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.033014605 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.034219715 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.038591316 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.034096784 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.033660165 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.032755671 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.041502583 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.052145893 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.031649445 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.032725554 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.040220588 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.031659276 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.032544376 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.037069939 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.03949287 seconds)
  done (took 101.798547661 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.032101747 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.03263415 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.030973134 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.032654262 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.031630111 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.033490621 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.032533722 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.033960832 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.03242709 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.032208044 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.033438545 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.031121445 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.033514535 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.032886243 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.033972148 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.033667629 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.034537717 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.034571569 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.033505032 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.031964434 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.034136609 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.033219123 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.032099362 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.033839558 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.033459948 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.031068013 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.033180463 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.034223968 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.032696924 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.033893975 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.033546298 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.033881902 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.033870831 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.03373229 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.035216707 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.034073642 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.034304471 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.034302274 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.033605359 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.033435365 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.03326169 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.033349475 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.034223065 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.034622882 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.035484309 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.035570943 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.035091138 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.036088428 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.034263048 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.034142927 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.033815524 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.034452926 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.03422599 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.034541099 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.033845222 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.034194378 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.034751148 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.034754339 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.035949199 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.03475679 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.034632762 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.034654734 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.035360768 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.034589823 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.035771023 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.035409031 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.034787584 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.035404612 seconds)
  done (took 140.270119092 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.036020152 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.036533652 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.035684164 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.037156785 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.035681508 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.036112137 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.036281957 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.035880543 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.037148974 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.037103343 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.037159859 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.036767979 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.037247594 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.035070859 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.037549674 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.036990517 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.036935719 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.037061323 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.037563909 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.037220806 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.036512802 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.037919628 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.036976356 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.036967527 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.038397953 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.039101787 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.037531389 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.038690822 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.038057113 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.039745742 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.037768979 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.038104701 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.037800117 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.037808404 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.037496251 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.037017484 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.038694719 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.037967415 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.038104425 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.036979913 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.039767027 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.03718536 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.037334838 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.040076476 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.038643384 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.038879394 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.039509799 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.037880942 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.039945976 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.038980693 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.038722241 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.041035172 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.039798683 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.038671626 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.039074897 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.038697784 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.038197825 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.039889141 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.038373522 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.03973745 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.03951533 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.03779591 seconds)
  done (took 128.320199954 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.039431968 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.038235604 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.039200426 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.037962495 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.038398098 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.039094115 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.038919936 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.039454126 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.039641324 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.039968932 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.040352923 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.039700136 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.041611 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.040214057 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.03954556 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.0415215 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.040487706 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.040892667 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.038483604 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.038987047 seconds)
  done (took 42.764016206 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.039353401 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.038276535 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.040338465 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.039152587 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.037766115 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.039754943 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.040015231 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.040953294 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.041280872 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.040584135 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.040674822 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.040499131 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.040663847 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.041296074 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.041084981 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.041938969 seconds)
  done (took 34.617206667 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.041617639 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.04079305 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.043094272 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.042849955 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.04115788 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.041749274 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.040992836 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.042033224 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.042113934 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.042110044 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.041442853 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.0406259 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.041331934 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.044033582 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.041771527 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.041279669 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.04128053 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.043368688 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.040727791 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.044015297 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.040869408 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.042114934 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.042046666 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.041842288 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.04199166 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.043096845 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.042301751 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.042769162 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.043848917 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.04323409 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.041505749 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.041943017 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.04223858 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.043519235 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.044967326 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.043365959 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.041363705 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.043211246 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.041013752 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.042643497 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.043965294 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.03427213 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.042502893 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.04369735 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.042211533 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.043769371 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.044601916 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.043149208 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.043576992 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.042585519 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.041989877 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.046066957 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.045160937 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.043233086 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.043453195 seconds)
  done (took 114.30849632 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.04344894 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.044304517 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.045358558 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.042860535 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.045170358 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.043836827 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.044141699 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.042358763 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.04359137 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.044516238 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.04341577 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.045349394 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.043331643 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.04476036 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.044116084 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.043336168 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.04379912 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.043937294 seconds)
  done (took 38.76885382 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.044567162 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.045876844 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.045086565 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.045698968 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.044919585 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.044217964 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.045616602 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.043523863 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.044845589 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.045761795 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.044880616 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.045534312 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.044193678 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.044548362 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.045938483 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.045852365 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.045335608 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.046146165 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.044943632 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.045670514 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.044726996 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.045624755 seconds)
  done (took 46.971529662 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.045607357 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.045142455 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.058846647 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.064604186 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.063238234 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.076444074 seconds)
  done (took 14.332590215 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.045307743 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.044620127 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.04863284 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.045604706 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.046446752 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.044474637 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.045230108 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.04641292 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.045370139 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.045608939 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.046227779 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.046113685 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.046866687 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.046515784 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.046699944 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.045884832 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.04740026 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.046031562 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.046858331 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.046520911 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.047586993 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.047139058 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.045719553 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.046062159 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.04761434 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.046490432 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.047494555 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.045094844 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.04710641 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.048143158 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.045990243 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.046776528 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.046125306 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.048238012 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.04865798 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.046750578 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.04879002 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.047046832 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.046456017 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.046104662 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.046523413 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.046309955 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.036981175 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.048147973 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.04668437 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.048345656 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.04587678 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.047381209 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.048057675 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.04734737 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.048480812 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.048190286 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.048646594 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.048082912 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.048759667 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.044354003 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.048835619 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.048517955 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.048812151 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.048896797 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.048736395 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.05002663 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.048303715 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.049712612 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.047940946 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.048231334 seconds)
  done (took 137.08054794 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.047521731 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.048232453 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.04790627 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.049307567 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.04848628 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.048331583 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.048434906 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.049288765 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.048352792 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.04856177 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.049506143 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.049980039 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.047900625 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.048183254 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.050332053 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.049664851 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.050375102 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.048366242 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.048463996 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.049173004 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.048917203 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.049403027 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.049137914 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.050758444 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.049888285 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.041569183 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.049209528 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.049658218 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.049036498 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.050294323 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.049418495 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.049665874 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.049699175 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.051411955 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.051477209 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.049705809 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.050542666 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.050181991 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.049557437 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.049502311 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.050869701 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.050579826 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.050900536 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.051399022 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.050532436 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.050880418 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.050830482 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.050834064 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.05187481 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.050943641 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.050385865 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.051803797 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.051762681 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.050598656 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.050854757 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.050974493 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.052278328 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.052080202 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.048588881 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.051114222 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.051622944 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.051889665 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.053013727 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.052100864 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.051577897 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.051038278 seconds)
  done (took 137.281772751 seconds)
done (took 2804.144753368 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.153168299 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.163983739 seconds)
  done (took 16.30199754 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.214098277 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.093829513 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.236617334 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.167410056 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.054939689 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.056979897 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.052630525 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.053220309 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.145274255 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.052799781 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.059379404 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.052910441 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.052911779 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.053227264 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.052617376 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.053034992 seconds)
  done (took 55.454601491 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.055393696 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.059056531 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.053054505 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.056289005 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.065199177 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.127343161 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.07288507 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.055947668 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.065781824 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.089399736 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.070393344 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.057214073 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.059954689 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.058336319 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.138700168 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.09841375 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.110353772 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.124974575 seconds)
  done (took 39.403328105 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.132244643 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.060520122 seconds)
  done (took 11.183374951 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.089656671 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.066276703 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.066482654 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.067854567 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.087243328 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.048508772 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.068599519 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.070402981 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.082414053 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.069185737 seconds)
  done (took 72.738033432 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.059132439 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.060654936 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.314346164 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.066814869 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.063965543 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.080296959 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.059663154 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.084475043 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.058574488 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.056761576 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.067838062 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.317751708 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.067342239 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.059452902 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.48605592 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.068955051 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.063463014 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.086400039 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.087538926 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.063390081 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.064342418 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.059301242 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.221408747 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.743463512 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.058589299 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.061023803 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.063206511 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.054781527 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.054229548 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.060070038 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.062233232 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.059337933 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.059768032 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.059387935 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.066743292 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.06392768 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.545274632 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.074885092 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.0667117 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.145404718 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.100272351 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.065128309 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.830705815 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.061440681 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.056311785 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.06342936 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.735579132 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.151515834 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.060161843 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.238355745 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.381801494 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.075452339 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.208151064 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.224434574 seconds)
  done (took 143.160120616 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.05735403 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.293759307 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.20879187 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.057241414 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.315558068 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.265377151 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.057884448 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.103926112 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.058204164 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.258119839 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.317383114 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.161071879 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.059376855 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.058905291 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.057420764 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.056628614 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.202193546 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.123153087 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.060059052 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.055200684 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.081847208 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.259065935 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.178964688 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.059895909 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.084082521 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.26493683 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.178688233 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.159095654 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.876945459 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.056540528 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.119666446 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.060029042 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.060516984 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.057402207 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.210851487 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.148623153 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.142435814 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.059884543 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.0604522 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.057855715 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.730802472 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.258882586 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.153956332 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.181279698 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.309872902 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.272182643 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.666228677 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.058815831 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.681790809 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.223430864 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.264171784 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.265059579 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.178394544 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.061499582 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.352566197 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.06001812 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.060552117 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.280564967 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.277126818 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.156393882 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.062157568 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.05796905 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.059262003 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.297661978 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.060838858 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.14955151 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.060622934 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.06201294 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.14932752 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.159427788 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.286066885 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.279090758 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.088827097 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.384534403 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.553707277 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.262785585 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.123228198 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.27966479 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.061522208 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.059257221 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.142889025 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.902984605 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.320282167 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.299121817 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.258001066 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.089857268 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.711979547 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.06143811 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.246800978 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.248044343 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.294612005 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.302764196 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.295066818 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.429703415 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.0605736 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.060261871 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.3713368 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.177876075 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.007474971 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.410989142 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.289557975 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.985926121 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.086456637 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.406427606 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.189771815 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.063193888 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.706878097 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.060905723 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.266742884 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.100460366 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.063730986 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.061102311 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.251172604 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.96988708 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.062343406 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.7709583 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.120850112 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.064988009 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.265507749 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.063724817 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.306506213 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.063851934 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.294044248 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.699007294 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.091855001 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.236660687 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.302479311 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.694383572 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.301482463 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.302689488 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.174468311 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.282845327 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.8680399 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.062457875 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.322641037 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.063748812 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.061486187 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.229876541 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.066105636 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.203421183 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.065745141 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.326721651 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.083585067 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.290591143 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.065205751 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.30120352 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.093281575 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.111935224 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.065846945 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.192107134 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.065439558 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.91117461 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.219316236 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.067548439 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.063026276 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.649516431 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.064859634 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.211214864 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.288688352 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.083626347 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.133423371 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.626497506 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.059608888 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.151607945 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.085628688 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.687777694 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.06382665 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.31733344 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.040056016 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.544111342 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.0631898 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.299687115 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.24841163 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.067600963 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.066089548 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.906160922 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.064458745 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.063912926 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.220327031 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.115293514 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.97306837 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.262007201 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.068229304 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.190836996 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.067973419 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.146714603 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.39368685 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.064426573 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.064896717 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.064742428 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.064356079 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.06453318 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.271922727 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.092654413 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.499818868 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.199774647 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.318977096 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.372114889 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.260449777 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.103415384 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.066084116 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.286504695 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.067776933 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.127149941 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.066795042 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.083848859 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.291724356 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.06738351 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.269282134 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.29886403 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.112345544 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.102948314 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.067304115 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.058026087 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.972446177 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.212844264 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.15057344 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.068029628 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.065469718 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.178603629 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.186158216 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.24651477 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.899595415 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.214089754 seconds)
  done (took 944.917067268 seconds)
done (took 1285.143044005 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.065207101 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.057592152 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.070154094 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.067268457 seconds)
  done (took 30.26109591 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.068005806 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.067593738 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.068172862 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.071887745 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.070288802 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.0712882 seconds)
  done (took 14.420228106 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.068313773 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.070714017 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.072507917 seconds)
  done (took 23.21211843 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.492381089 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.469551752 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.142583869 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.206121928 seconds)
  done (took 11.310582977 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.075584514 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.071403968 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.069803534 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.074814869 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.068675069 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.067116352 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.069643825 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.068393482 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.072419284 seconds)
  done (took 20.646143022 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.22139299 seconds)
done (took 106.068978393 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.070842412 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.282264019 seconds)
    (3/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.084979147 seconds)
    (4/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.078617924 seconds)
    (5/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.600169234 seconds)
    (6/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.195587997 seconds)
    (7/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.836688285 seconds)
    (8/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.189779113 seconds)
    (9/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.042835457 seconds)
    (10/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.657055242 seconds)
    (11/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.375830378 seconds)
    (12/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.073991168 seconds)
    (13/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.305697667 seconds)
    (14/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.083058905 seconds)
    (15/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.082516566 seconds)
    (16/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.06809583 seconds)
    (17/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 3.868076331 seconds)
    (18/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.082886607 seconds)
    (19/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.08507616 seconds)
    (20/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.462138931 seconds)
    (21/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.869554485 seconds)
    (22/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.475769855 seconds)
    (23/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.070629904 seconds)
    (24/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.462127604 seconds)
    (25/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.292206992 seconds)
    (26/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.040205703 seconds)
    (27/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.08817825 seconds)
    (28/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.084529619 seconds)
    (29/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.183353022 seconds)
    (30/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.070381124 seconds)
    (31/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.226840055 seconds)
    (32/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.608360561 seconds)
    (33/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.52696378 seconds)
    (34/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.294709585 seconds)
    (35/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.154715337 seconds)
    (36/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.324379102 seconds)
    (37/341) benchmarking ("sort", BigInt, false)...
    done (took 7.075514579 seconds)
    (38/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.084560056 seconds)
    (39/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.378378876 seconds)
    (40/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.135082211 seconds)
    (41/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.552983825 seconds)
    (42/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.576103313 seconds)
    (43/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.410716121 seconds)
    (44/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.073467 seconds)
    (45/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.095919929 seconds)
    (46/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.2195628 seconds)
    (47/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.487945961 seconds)
    (48/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.149365943 seconds)
    (49/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.379152751 seconds)
    (50/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 7.972462664 seconds)
    (51/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.54365909 seconds)
    (52/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.973898583 seconds)
    (53/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.468195299 seconds)
    (54/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.259428178 seconds)
    (55/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.284776036 seconds)
    (56/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.074410659 seconds)
    (57/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.204454405 seconds)
    (58/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.077216391 seconds)
    (59/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.313789506 seconds)
    (60/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.20095975 seconds)
    (61/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.071486639 seconds)
    (62/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.155881816 seconds)
    (63/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.070960903 seconds)
    (64/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.383488888 seconds)
    (65/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.33888859 seconds)
    (66/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.195296241 seconds)
    (67/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.168139344 seconds)
    (68/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.782271011 seconds)
    (69/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.366376425 seconds)
    (70/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.07490634 seconds)
    (71/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.22843942 seconds)
    (72/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.153848057 seconds)
    (73/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.131284489 seconds)
    (74/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.147374108 seconds)
    (75/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.545134759 seconds)
    (76/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.286804051 seconds)
    (77/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.078757122 seconds)
    (78/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.549229445 seconds)
    (79/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.269499525 seconds)
    (80/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.2743536 seconds)
    (81/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.399721205 seconds)
    (82/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.077257822 seconds)
    (83/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.643030201 seconds)
    (84/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.197823639 seconds)
    (85/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.485067122 seconds)
    (86/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.157324846 seconds)
    (87/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.091321857 seconds)
    (88/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.083768793 seconds)
    (89/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.151575804 seconds)
    (90/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.083521629 seconds)
    (91/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.318268887 seconds)
    (92/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.481155626 seconds)
    (93/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.185778913 seconds)
    (94/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.078123819 seconds)
    (95/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.167435111 seconds)
    (96/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.174287408 seconds)
    (97/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.208810707 seconds)
    (98/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.071937359 seconds)
    (99/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.005967953 seconds)
    (100/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.184534238 seconds)
    (101/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.154673763 seconds)
    (102/341) benchmarking ("sort", Float32, false)...
    done (took 5.736687615 seconds)
    (103/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.077041984 seconds)
    (104/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 4.694993396 seconds)
    (105/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.281768249 seconds)
    (106/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.677377281 seconds)
    (107/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.090841341 seconds)
    (108/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.771265147 seconds)
    (109/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.078393236 seconds)
    (110/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.286682722 seconds)
    (111/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.321573998 seconds)
    (112/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.789608201 seconds)
    (113/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.180989209 seconds)
    (114/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.502348132 seconds)
    (115/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.273618083 seconds)
    (116/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.180846846 seconds)
    (117/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.796100506 seconds)
    (118/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.47082434 seconds)
    (119/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.387249846 seconds)
    (120/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.206986112 seconds)
    (121/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.077741221 seconds)
    (122/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.392751484 seconds)
    (123/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.340961064 seconds)
    (124/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.074025172 seconds)
    (125/341) benchmarking ("collect", "all", Float32, false)...
    done (took 4.249818633 seconds)
    (126/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.488367745 seconds)
    (127/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.781721177 seconds)
    (128/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.190369327 seconds)
    (129/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.782976734 seconds)
    (130/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.317316402 seconds)
    (131/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.206838322 seconds)
    (132/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.152993257 seconds)
    (133/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.393031764 seconds)
    (134/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.077624171 seconds)
    (135/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.962083763 seconds)
    (136/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.162656641 seconds)
    (137/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.225567463 seconds)
    (138/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.172900628 seconds)
    (139/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.076805516 seconds)
    (140/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.338466211 seconds)
    (141/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.234777044 seconds)
    (142/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.203307101 seconds)
    (143/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.415485831 seconds)
    (144/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.097132582 seconds)
    (145/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.077493473 seconds)
    (146/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.323663233 seconds)
    (147/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.083216964 seconds)
    (148/341) benchmarking ("sort", Bool, false)...
    done (took 2.29173298 seconds)
    (149/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.10304135 seconds)
    (150/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.203393864 seconds)
    (151/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.077678353 seconds)
    (152/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.175440256 seconds)
    (153/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.005763059 seconds)
    (154/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.323618393 seconds)
    (155/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.094368871 seconds)
    (156/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.090104584 seconds)
    (157/341) benchmarking ("sort", Int64, false)...
    done (took 5.70446215 seconds)
    (158/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.386274645 seconds)
    (159/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.095108861 seconds)
    (160/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.685263973 seconds)
    (161/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.063570352 seconds)
    (162/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.952463827 seconds)
    (163/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.960555438 seconds)
    (164/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.47950072 seconds)
    (165/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.079799903 seconds)
    (166/341) benchmarking ("map", identity, Int8, false)...
    done (took 3.858789255 seconds)
    (167/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.078257473 seconds)
    (168/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.276700966 seconds)
    (169/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.282444614 seconds)
    (170/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.091827408 seconds)
    (171/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.222700587 seconds)
    (172/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.499934077 seconds)
    (173/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.239653553 seconds)
    (174/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.971362041 seconds)
    (175/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.091011087 seconds)
    (176/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.233850161 seconds)
    (177/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.075017828 seconds)
    (178/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.078866247 seconds)
    (179/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.365462355 seconds)
    (180/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.439634631 seconds)
    (181/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.077781462 seconds)
    (182/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.236258232 seconds)
    (183/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.201409978 seconds)
    (184/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.903832264 seconds)
    (185/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.475780441 seconds)
    (186/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.139387901 seconds)
    (187/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.369752891 seconds)
    (188/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.078821201 seconds)
    (189/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.091862455 seconds)
    (190/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.188563839 seconds)
    (191/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.537964587 seconds)
    (192/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.351320617 seconds)
    (193/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.079303162 seconds)
    (194/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.227162136 seconds)
    (195/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.177893514 seconds)
    (196/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.711763381 seconds)
    (197/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.079633232 seconds)
    (198/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.432325884 seconds)
    (199/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.082791077 seconds)
    (200/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 8.650646864 seconds)
    (201/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.35154665 seconds)
    (202/341) benchmarking ("sort", Float64, false)...
    done (took 5.796197294 seconds)
    (203/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.188283524 seconds)
    (204/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.967675395 seconds)
    (205/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.376703245 seconds)
    (206/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.37263846 seconds)
    (207/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.860038005 seconds)
    (208/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.181892226 seconds)
    (209/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.163469179 seconds)
    (210/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.084214231 seconds)
    (211/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.264550285 seconds)
    (212/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.313921276 seconds)
    (213/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.099432954 seconds)
    (214/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.205993675 seconds)
    (215/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.181504932 seconds)
    (216/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.176655154 seconds)
    (217/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.277552366 seconds)
    (218/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.288276165 seconds)
    (219/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.083247467 seconds)
    (220/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.278105962 seconds)
    (221/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.396157599 seconds)
    (222/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.099332356 seconds)
    (223/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.228569013 seconds)
    (224/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.755703845 seconds)
    (225/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.090400727 seconds)
    (226/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.101113516 seconds)
    (227/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.081394256 seconds)
    (228/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.530333962 seconds)
    (229/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.265786992 seconds)
    (230/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.499357178 seconds)
    (231/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.358934394 seconds)
    (232/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.491969405 seconds)
    (233/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.218149047 seconds)
    (234/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.194453973 seconds)
    (235/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.413582942 seconds)
    (236/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.42208292 seconds)
    (237/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.082323274 seconds)
    (238/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.47673607 seconds)
    (239/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.850787976 seconds)
    (240/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.114659837 seconds)
    (241/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.379995935 seconds)
    (242/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.706000163 seconds)
    (243/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.372444672 seconds)
    (244/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.790738015 seconds)
    (245/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.206322806 seconds)
    (246/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.871691988 seconds)
    (247/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.217573662 seconds)
    (248/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.321967896 seconds)
    (249/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.364381238 seconds)
    (250/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.098262623 seconds)
    (251/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.338720263 seconds)
    (252/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.075602895 seconds)
    (253/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.980420876 seconds)
    (254/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.807812381 seconds)
    (255/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.267258219 seconds)
    (256/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.109411707 seconds)
    (257/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.157091463 seconds)
    (258/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.38612144 seconds)
    (259/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.172780982 seconds)
    (260/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.46119689 seconds)
    (261/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.161259957 seconds)
    (262/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.847125422 seconds)
    (263/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.845178343 seconds)
    (264/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.084546929 seconds)
    (265/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.277021106 seconds)
    (266/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.166536803 seconds)
    (267/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.56596747 seconds)
    (268/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.281147446 seconds)
    (269/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.248028537 seconds)
    (270/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.297676861 seconds)
    (271/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.197949525 seconds)
    (272/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.362154773 seconds)
    (273/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.475811626 seconds)
    (274/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.083809558 seconds)
    (275/341) benchmarking ("map", identity, BigInt, true)...
    done (took 4.073519081 seconds)
    (276/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.099737309 seconds)
    (277/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.146274508 seconds)
    (278/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 3.008101434 seconds)
    (279/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.024652291 seconds)
    (280/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.087505302 seconds)
    (281/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.259146976 seconds)
    (282/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.385001426 seconds)
    (283/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.495602632 seconds)
    (284/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.084376072 seconds)
    (285/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 4.122510393 seconds)
    (286/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.090186445 seconds)
    (287/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.140901362 seconds)
    (288/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.83556488 seconds)
    (289/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.849542166 seconds)
    (290/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.382383162 seconds)
    (291/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.078279698 seconds)
    (292/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.393142403 seconds)
    (293/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.489280392 seconds)
    (294/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.177193395 seconds)
    (295/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.343956104 seconds)
    (296/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.20736101 seconds)
    (297/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.217521595 seconds)
    (298/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.426128732 seconds)
    (299/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.493936737 seconds)
    (300/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.217646893 seconds)
    (301/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.580338822 seconds)
    (302/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.478719949 seconds)
    (303/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.890452716 seconds)
    (304/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.225240652 seconds)
    (305/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.299400866 seconds)
    (306/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.367973715 seconds)
    (307/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.291578291 seconds)
    (308/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.024701747 seconds)
    (309/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.204717275 seconds)
    (310/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.408191057 seconds)
    (311/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.395983568 seconds)
    (312/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.319798928 seconds)
    (313/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.166924966 seconds)
    (314/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.163551654 seconds)
    (315/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.321546104 seconds)
    (316/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.427755806 seconds)
    (317/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.093751416 seconds)
    (318/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.207356243 seconds)
    (319/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.300744675 seconds)
    (320/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.099792724 seconds)
    (321/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.27907341 seconds)
    (322/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.546772772 seconds)
    (323/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.247954068 seconds)
    (324/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.966992916 seconds)
    (325/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.214333523 seconds)
    (326/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.172553961 seconds)
    (327/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.087935047 seconds)
    (328/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.208542737 seconds)
    (329/341) benchmarking ("sort", Int8, false)...
    done (took 5.033995609 seconds)
    (330/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.168742253 seconds)
    (331/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.796831139 seconds)
    (332/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.265896888 seconds)
    (333/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.201674039 seconds)
    (334/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.306984334 seconds)
    (335/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.118312501 seconds)
    (336/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.096983696 seconds)
    (337/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.196783231 seconds)
    (338/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.173000189 seconds)
    (339/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.172363734 seconds)
    (340/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.491945869 seconds)
    (341/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.535874742 seconds)
  done (took 1164.329162297 seconds)
done (took 1166.412724462 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.110722826 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.08827601 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.572051681 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.096693547 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.087689176 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.09088373 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.581820198 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.117407796 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.104382514 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.583089 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.09735231 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.088622836 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.103122263 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.12271226 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.100450913 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.101398834 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.095008301 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.112871593 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.123931059 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.093618998 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.13905813 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.093829213 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.087017802 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.139561649 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.088774921 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.104358827 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.112594545 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.140595025 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.140501322 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.089905103 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.094788578 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.434857609 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.134167682 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.095776329 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.100918202 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.104018374 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.094832564 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.105296957 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.112157858 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.105154229 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.089663483 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.098375774 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.094891179 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.092119857 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.089128624 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.089632484 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.091102746 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.215476223 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.103102498 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.418762415 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.147805572 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.112686123 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.140950928 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.09248157 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.093378747 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.092093519 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.133634943 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.097534966 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.093917615 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.419847989 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.180726224 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.105443558 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.419513363 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.148897367 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.100797105 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.099538547 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.089632137 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.113709018 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.435636935 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.619790447 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.116872903 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.109521871 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.092574255 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.093901444 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.104576054 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.583328285 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.105231988 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.651833905 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.116957068 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.107279506 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.097559414 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.094281997 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.093317041 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.108857146 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.114507514 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.091443017 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.0967514 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.098566103 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.105767483 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.439546412 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.131213253 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.564517687 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.092390214 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.115004181 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.109487407 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.650992654 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.118415538 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.114205886 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.095343454 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.4374681 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.128199974 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.116994275 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.094640734 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.104807919 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.206751511 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.115842422 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.108144754 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.093430126 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.115208699 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.088483625 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.092600704 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.10649317 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.112470691 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.127153725 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.111020148 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.091924946 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.103524698 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.098497483 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.115093596 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.101872151 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.100303298 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.104884497 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.094288465 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.145540411 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.11715319 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.109079457 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.208927231 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.10093834 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.217194621 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.108032643 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.099401381 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.093210075 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.421637318 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.133779235 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.116068291 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.100600622 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.116886138 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.116599318 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.110213915 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.095448324 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.109926948 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.096025361 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.145842153 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.093560926 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.118781836 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.146496759 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.107413335 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.100153692 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.117558707 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.130260338 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.11575382 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.09986138 seconds)
done (took 329.312315931 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.141461901 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.095724504 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.170175299 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.09507485 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.162866573 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.146888375 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.095136331 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.096467862 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.09576116 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.47909642 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.094939791 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.100084421 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.094670844 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.095279778 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.14483696 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.095880893 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.087354641 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.317503582 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.098267802 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.15553908 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.094783997 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.09600712 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.096173096 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.484517868 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.094695074 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.09508544 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.15509293 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.097829433 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.334938333 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.096830347 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.097542782 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.337090564 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.155671649 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.109214318 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.103484594 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.105079326 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.163272191 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.105454734 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.143746905 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.14394858 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.172499716 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.131415628 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.09737507 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.094676563 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.099772857 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.09949953 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.096745943 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.130490777 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.097473911 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.105985747 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.329924526 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.102755617 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.105554576 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.097919791 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.097613933 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.112222973 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.097924807 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.098376168 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.156705224 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.0994078 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.145121169 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.486546683 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.481513918 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.098807917 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.09849765 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.098504339 seconds)
  done (took 198.835950921 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.165910646 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.184926418 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.165411982 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.103352275 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.150859123 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.163823547 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.102935828 seconds)
  done (took 17.067056391 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.105606754 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.099989745 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.123556087 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.122820217 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.100279378 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.244339958 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.1112807 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.105424761 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.12632923 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.101375799 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.435112683 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.123598342 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.107958608 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.099791671 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.112443003 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.128461884 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.102461319 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.101496694 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.19903589 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.177554955 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.105286562 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.107017591 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.130324801 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.11225531 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.100407486 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.102969034 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.102357027 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.10860212 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.100772803 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.101194867 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.100617564 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.114489889 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.10106621 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.099784265 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.100250417 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.100631797 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.101281136 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.101180369 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.100793343 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.10092201 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.099963407 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.10099409 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.100614549 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.101210858 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.10123483 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.123406602 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.101092917 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.102031245 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.099912976 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.102189136 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.130580926 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.102945295 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.10118956 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.107147958 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.142416693 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.105736868 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.102480717 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.102046812 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.101345161 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.102259673 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.102078814 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.182716297 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.125707936 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.101666014 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.12523448 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.139188998 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.104437865 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.102342683 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.10180426 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.127400811 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.10214826 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.126448 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.102139419 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.199994636 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.103495482 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.249408759 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.125127745 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.105600996 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.105980447 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.100636473 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.110105777 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.102313446 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.103975388 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.110163013 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.108168632 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.102734507 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.102325542 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.105402687 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.111311712 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.103442291 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.150967184 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.102889239 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.104057069 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.199513435 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.101971585 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.200972499 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.129667966 seconds)
  done (took 227.666945887 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.109528879 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.105192326 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.117646213 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.104955738 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.103161963 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.108726263 seconds)
  done (took 14.682965394 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.107774119 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.107088793 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.104360344 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.103339365 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.104939415 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.105139765 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.104828425 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.10475241 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.107733608 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.104261363 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.104799606 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.105053736 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.104258076 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.105469013 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.105964081 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.103664728 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.104214358 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.104548122 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.104427879 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.104312969 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.347556399 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.106558126 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.10553684 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.106992281 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.10967365 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.10493615 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.113941008 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.104335408 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.104751138 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.109761546 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.108942647 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.106560538 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.107443516 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.110388835 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.108681989 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.107967916 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.107977475 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.107592661 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.10510247 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.105722721 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.108060059 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.106834321 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.10476336 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.108059507 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.106962202 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.112617502 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.111684577 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.11419204 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.105571818 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.107811636 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.107174725 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.105824495 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.107481305 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.108640234 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.110752972 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.111982701 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.111102735 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.107054233 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.106946836 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.108927144 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.109454975 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.107108406 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.107646326 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.109940911 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.115335086 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.10883597 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.110445047 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.109838644 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.108045297 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.106676772 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.107944139 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.106495879 seconds)
  done (took 155.008797333 seconds)
done (took 615.278606337 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.163787818 seconds)
  done (took 9.200912411 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.108302742 seconds)
  done (took 9.237281593 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.14720329 seconds)
  done (took 12.188736277 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.123143326 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.146330277 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.113501007 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.107388876 seconds)
  done (took 30.539543669 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.368651448 seconds)
  done (took 9.406073744 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.116275736 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.105524481 seconds)
  done (took 16.326754573 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.133732236 seconds)
  done (took 9.172100658 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.267359514 seconds)
  done (took 9.334817138 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.113903238 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.11377629 seconds)
  done (took 16.283178609 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.192621109 seconds)
  done (took 9.230814785 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.911906906 seconds)
  done (took 9.952264427 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.120321429 seconds)
  done (took 9.175564159 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.117653106 seconds)
  done (took 9.157024535 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.887216904 seconds)
  done (took 9.925025788 seconds)
done (took 171.166695493 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.113718617 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.10598073 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.108907847 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.10564454 seconds)
  done (took 30.473134997 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.142432559 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.142673827 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.15270401 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.143861677 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.134372062 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.132735687 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.144168714 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.143041572 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.134385006 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.141386395 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.14365645 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.141504271 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.143440511 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.152139636 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.152916382 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.14215564 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.144658597 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.14465732 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.134348145 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.15337903 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.141994892 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.143087748 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.109085376 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.110347433 seconds)
  done (took 53.408865029 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.300740297 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.176073075 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.25475817 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.154871697 seconds)
  done (took 10.92586371 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.108589405 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.173891465 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.161096225 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.155224974 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.160375096 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.212428908 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.153972646 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.245768914 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.238174707 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.236222507 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.116436543 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.132180324 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.13668789 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.156494622 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.21267147 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.110717978 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.110826501 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.217707601 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.171086505 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.280666355 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.110844774 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.164506499 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.152057472 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.164340716 seconds)
  done (took 54.122296444 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.112046013 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.11938283 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.117772885 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.112659517 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.11258534 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.111886191 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.118048162 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.112814759 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.13296927 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.114133279 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.11087528 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.11198005 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.119694419 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.112617667 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.112460369 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.126550239 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.12644039 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.112505998 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.115688246 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.120054618 seconds)
  done (took 44.375052317 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.109621624 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.957504901 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.458879284 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.363261229 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.110892421 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.115594771 seconds)
  done (took 33.156931275 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.123639735 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.127330266 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.116228813 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.135942239 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.156423468 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.111936976 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.171295455 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.274871024 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.120269075 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.169299889 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.130879236 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.117577081 seconds)
  done (took 27.798418104 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.112147085 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.115039526 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.116075983 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.126080079 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.122428834 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.119065518 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.119740961 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.111065936 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.127964702 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.131454483 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.120723204 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.124530849 seconds)
  done (took 47.488901107 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.326738112 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.337249943 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.325306804 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.577466249 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.435899571 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.097992127 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.399880325 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.325062674 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.84284344 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.865807161 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.411781517 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.096446628 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.065313927 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.039358885 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.031554241 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.356428442 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.115278735 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.973032828 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.368058541 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.164957142 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.117330274 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.114819849 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.112996456 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.404051011 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.44096657 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.112470765 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.325948834 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.129995558 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.113157175 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.341483313 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.588420298 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.167086601 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.317001147 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.371889602 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.454142291 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.244197516 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.1180017 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.159665729 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.159771767 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.149934514 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.123070731 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.12608982 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.656006115 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.126008219 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.387913932 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.116588412 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.197741394 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.099193215 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.041728001 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.436415224 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.229270924 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.115330988 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.14990436 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.547507468 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.235762608 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.358657943 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.119567405 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.163226232 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.170388963 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.370722791 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.315221845 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.119889412 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.327629395 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.041999788 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.467121574 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.237963237 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.11799013 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.120353596 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.815958299 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.358992917 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.1971959 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.438296295 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.875090684 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.117552224 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.118281243 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.160908076 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.205744986 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.116277144 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.415048475 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.109899931 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.043674335 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.216754693 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.512386643 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.12162397 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.116124611 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.124341059 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.963443793 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.043266228 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.213590428 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.369803194 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.440678342 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.119149715 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.117988657 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.140042592 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.120251403 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.06313153 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.547600056 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.181616452 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.044127737 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.68249299 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.603666487 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.083779093 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.459723272 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.159451204 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.391230016 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.270293504 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.52386733 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.325267224 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.364202787 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.704717221 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.122458257 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.678286715 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.203879046 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.196955884 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.11939164 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.676846064 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.170954321 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.417221675 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.233801094 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.120088157 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.047575181 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.130937391 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.324977769 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.611445025 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.172288633 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.121984699 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.124590211 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.120702696 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.123057431 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.228693735 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.128172812 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.414104584 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.195977445 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.121785593 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.046152868 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.126070767 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.401800708 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.563176342 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.1786341 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.383168605 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.392179528 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.820586567 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.70576742 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.067864153 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.394071758 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.194700656 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.197264209 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.691241525 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.252375453 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.219676675 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.121541079 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.261694511 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.131720714 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.124051743 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.299010429 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.536752611 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.548718969 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.164370608 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.121513737 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.116342426 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.166891923 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.362775317 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.173290428 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.154319137 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.126960673 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.205515165 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.349716874 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.123645041 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.04840691 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.366024698 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.364959151 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.413669613 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.537210441 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.173593708 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.195939008 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.133384712 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.336390995 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.203800072 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.775286481 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.671191781 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.338964676 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.560812434 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.087543832 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.788651403 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.389553672 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.506118682 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.137998653 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.578246337 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.170345763 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.682392959 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.155466957 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.651105764 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.050712661 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.130656079 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.458812823 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.079333348 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.44093084 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.190987001 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.129083595 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.125118414 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.124120298 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.120742975 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.023615788 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.231066311 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.193416698 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.195756803 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.051390145 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.648454213 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.163664337 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.126074518 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.125370006 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.450946676 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.962657657 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.07922333 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.124319627 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.201180723 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.868871862 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.671590243 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.130113183 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.12658746 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.728354154 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.130490622 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.027880727 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.231653976 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.864285468 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.151885483 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.377841826 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.825570629 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.413567115 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.201684411 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.201868034 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.126082799 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.132223248 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.827694817 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.135546548 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.826045572 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.407257153 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.402720481 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.568347001 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.192458653 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.336844858 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.139541539 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.126638371 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.611417013 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.152495695 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.127746001 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.329781225 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.642725749 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.459814907 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.770204108 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.214563955 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.126909349 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.398796403 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.132899059 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.604089726 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.817964486 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.136740032 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.128194773 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.398657243 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.811475945 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.129473001 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.103287837 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.133373922 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.33919992 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.331389498 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.397704411 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.427224421 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.58186255 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.055465845 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.133342363 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.153951608 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.3715234 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.128077189 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.163236974 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.572064088 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.18501401 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.558138652 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.412601649 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.521777756 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.761813642 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.399197037 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.196630589 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.138925067 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.7853081 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.263171125 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.060847885 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.245409753 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.053884447 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.802018577 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.422756305 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.144523385 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.40039211 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.113864618 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.475686433 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.430162411 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.391955864 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.172343106 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.159185543 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.128838212 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.184193918 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.127471224 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.188740112 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.244852755 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.137478018 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.542081796 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.167696212 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.176263554 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.133941179 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.60662718 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.152424513 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.13218306 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.821316398 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.153573243 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.24814128 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.201454923 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.86874388 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.636373636 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.15701282 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.012948979 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.779173698 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.402300502 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.189333113 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.578558784 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.167376117 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.534433462 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.131162449 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.344614358 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.135603104 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.573806597 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.176802513 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.402557498 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.083063939 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.343824046 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.330024986 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.151828613 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.137281652 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.058949659 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.240893022 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.008593628 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.115404731 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.133528545 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.814730045 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.554960018 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.210206651 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.581729954 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.952047134 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.132137551 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.464830276 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.523966665 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.622418479 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.162245955 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.13258375 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.452906622 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.262185213 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.438970111 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.421156631 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.139406776 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.157334673 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.343959423 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.257428777 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.051240872 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.623305722 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.716872194 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.833039189 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.14392384 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.334513652 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.456286062 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.289026321 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.166822079 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.210681631 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.537376088 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.402451906 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.203491043 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.059780164 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.132247641 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.52867481 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.646945572 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.228205332 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.373451804 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.445699191 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.547595467 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.623335828 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.468335613 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.524376853 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.545372841 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.527494897 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.343906799 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.49269316 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.457558677 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.017154079 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.544999989 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.346154325 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.222092716 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.406962958 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.002453536 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.842382915 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.377669097 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.138441396 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.062359971 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.341149603 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.135491461 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.417739725 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.660445752 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.38078585 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.40091016 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.611772937 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.672458362 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.197848458 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.157459661 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.100603225 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.157378292 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.154020697 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.135303594 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.62543521 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.428495625 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.14684343 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.073725618 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.80569683 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.061499199 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.348110815 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.195755133 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.166101306 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.691328238 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.404112582 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.242261274 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.426082882 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.245774473 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.16942968 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.061580792 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.808369553 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.083048745 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.181816549 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.560030643 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.152416325 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.137774008 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.339816609 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.065169301 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.181723078 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.141418517 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.339264601 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.716898894 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.411335051 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.264907285 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.378944246 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.435382084 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.983414205 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.168213213 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.409477907 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.063494831 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.655830354 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.838709028 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.175606177 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.207804277 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.137160881 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.137705841 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.40896858 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.466056475 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.237276908 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.739204288 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.166331454 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.161347917 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.469725228 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.232592873 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.140798574 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.142747286 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.51104648 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.369987665 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.137978057 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.132302158 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.352253497 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.222931544 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.334794333 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.210541458 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.652599184 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.142361807 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.981237234 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.243339464 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.086283062 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.138746547 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.885179855 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.198540983 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.139206599 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.41410769 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.797224564 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.341630975 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.535525308 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.020365909 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.199929478 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.178027857 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.142958745 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.144423325 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.526170731 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.441979471 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.139700455 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.411613774 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.189250685 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.146274959 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.802359511 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.107844161 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.139406143 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.802454156 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.034520626 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.870467209 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.534003139 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.170584406 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.144014085 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.143305643 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.06558414 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.195034053 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.273877543 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.129156267 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.147187166 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.516025607 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.442752142 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.228543347 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.145890826 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.141573424 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.145661835 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.353239517 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.653832478 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.157278638 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.841002942 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.345351767 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.14983497 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.631366748 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.585404058 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.26664332 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.181789414 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.198777915 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.387565161 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.682474624 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.204497492 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.125856777 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.369074278 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.142186731 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.414411407 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.414604916 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.141089884 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.354201969 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.637480428 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.428936136 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.495099843 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.452633804 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.20880666 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.211228092 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.041962586 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.141298875 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.144477917 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.409582875 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.197241204 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.141182564 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.149222646 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.695712615 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.805277918 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.609088355 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.299185335 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.450532404 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.956782886 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.896114501 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.144636262 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.068828353 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.142706785 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.167774289 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.145381571 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.070128037 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.866881754 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.866858756 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.355023202 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.452825195 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.069450047 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.347658991 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.885996993 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.069008817 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.11177099 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.143726101 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.409022082 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.069949994 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.145498052 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.098835287 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.414923984 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.750097075 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.41395572 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.143299829 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.088951775 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.148949874 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.145206156 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.141976876 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.227080676 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.145317289 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.260590493 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.411802853 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.515825673 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.248438375 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.782382876 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.80355921 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.081998407 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.187627137 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.760872559 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.71554819 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.411258467 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.272624059 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.810657013 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.089924025 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.146750259 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.161323808 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.407240734 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.149583779 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.148250407 seconds)
  done (took 2232.50166187 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.20600006 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.237231976 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.195789458 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.191978258 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.27452066 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.238499812 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.220989699 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.246158043 seconds)
  done (took 59.885065189 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.145544631 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.45931905 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.194005636 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.145965883 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.147329959 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.176608007 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.328648344 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.1700903 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.146298798 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.185873214 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.146810371 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.150479732 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.146774997 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.145965654 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.151497955 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.404333492 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.163856187 seconds)
  done (took 81.493510123 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.198841477 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 11.029821826 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.154654529 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.933265988 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.183141217 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.441495749 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.147431715 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.149209416 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.48469214 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.448429666 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.208580533 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.153705325 seconds)
  done (took 95.609158278 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.148420002 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.147665986 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.148149337 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.147210244 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.146813245 seconds)
  done (took 12.814821217 seconds)
done (took 2786.153147571 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.624817629 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.239715634 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.219162582 seconds)
  done (took 6.534967584 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.292693236 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.340303663 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.45379808 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.460767162 seconds)
  done (took 11.628289866 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.429470586 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.522639177 seconds)
  done (took 7.027374709 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.507025665 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.169643086 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.530739344 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.148536888 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.151764109 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.154358924 seconds)
  done (took 23.535425063 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.148711379 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.149035392 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.149579079 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.14995242 seconds)
  done (took 10.674668042 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.148611218 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.937170959 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.146548555 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.149458725 seconds)
  done (took 22.458644458 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.344237187 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.181288851 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.905038731 seconds)
  done (took 10.508880289 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.774981987 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.597536244 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.759511078 seconds)
  done (took 10.209597465 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.293296294 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.98869118 seconds)
  done (took 8.359960448 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.293116867 seconds)
  done (took 4.371642705 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.982782745 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.462289509 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.621241346 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.664925323 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.721000388 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.357587677 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.456613153 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.408976959 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.539006489 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.530392995 seconds)
  done (took 27.823682491 seconds)
done (took 160.040216635 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.581940573 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.173558115 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.355257596 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.524370438 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.388684605 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.35789289 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.447267969 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.510207589 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.199461444 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.185018504 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.522478038 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.387568304 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.376942013 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.166452997 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.393354165 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.168333173 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.388225877 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.608578393 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.210385106 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.446510036 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.455540056 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.168246801 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.362126085 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.186665736 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.390826768 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.314475115 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.774107774 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.171738072 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.353650906 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.788133299 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.320550399 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.590008127 seconds)
  done (took 178.347756206 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.026987654 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.15159059 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.153669403 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.151804714 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.463798732 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.153575724 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.15275837 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.1514067 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.452552056 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.442742329 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.153147511 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.449609065 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.15398603 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.152384126 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.153587193 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.151238206 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.560751745 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.069234171 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.152649312 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.152060868 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.155400713 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.340016864 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.153494657 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.353811249 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.546710765 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.153637392 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.15292787 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.141680521 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.15459978 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.155257445 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.154373226 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.153291792 seconds)
  done (took 217.147197326 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.153201224 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.155046743 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.154766644 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.153604119 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.152069215 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.155793042 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.156475409 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.15361565 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.005604374 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.994726402 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.156848052 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.15371598 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.153112346 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.15371628 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.155357447 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.150151496 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.154489623 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.144790663 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.144457563 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.154865912 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.155209557 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.802509472 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.155629479 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.827915141 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.154901771 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.15997984 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.154181656 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.161483781 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.160121923 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.160384118 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.155673798 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.154703002 seconds)
  done (took 230.043413117 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.396207327 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.155595425 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.15699931 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.160418146 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.156655326 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.155453296 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.14781836 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.402562673 seconds)
  done (took 21.815417792 seconds)
done (took 649.440221357 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.535370241 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.894052332 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.278926749 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.179270159 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.439747044 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.220280391 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.172846774 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.241042915 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.814922215 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.246731816 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.567610069 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.181704396 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.867826493 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.198987422 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.285684556 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.238697315 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.545245308 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.825935712 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.3057087 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.845625589 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.373804058 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.091648611 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.313255262 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.860450243 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.576561786 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.112500564 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.181097885 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.543539872 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.176745629 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.40060932 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.811569769 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.410163258 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.187531594 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.1750863 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.235116376 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.216785972 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.366662622 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.172768711 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.285035286 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.88424188 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.866689928 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.698085303 seconds)
  done (took 111.910895292 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.164453853 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.16279586 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.161997894 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.163317874 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.168397321 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.1635243 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.161804017 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.160899449 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.162889861 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.16313592 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.162681393 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.168997557 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.163106736 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.171181313 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.16150226 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.162329564 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.162182015 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.169160277 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.161897606 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.16428625 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.163355478 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.15525851 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.160415292 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.162633688 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.16312393 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.16334426 seconds)
  done (took 58.343763333 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.158471608 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.325482996 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.441273767 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.186255166 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.160879545 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.161641878 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.187233558 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.164282736 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.163127015 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.16324458 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.25189683 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.163358103 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.169768099 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.439248784 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.182165856 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.160401557 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.15857103 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.160363433 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.340878327 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.174099153 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.189540402 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.165075459 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.188777752 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.173972478 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.161954348 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.161739302 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.16511528 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.580730806 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.171536609 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.253693051 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.203375131 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.194115056 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.49364809 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.442540486 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.22357496 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.169341345 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.161010936 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.296852717 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.172603286 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.162650751 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.187449029 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.167892812 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.442528281 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.659105792 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.173629247 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.160294096 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.578209819 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.303368609 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.205974595 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.175607374 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.447535207 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.187655165 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.162711084 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.163309907 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.198386238 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.17222374 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.162992633 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.39062314 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.174186668 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.17715875 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.166883913 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.162195382 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.345998788 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.169439772 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.334725052 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.168841847 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.169278757 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.163904062 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.444162293 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.188382733 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.660554682 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.175673225 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.162599455 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.255169277 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.337940419 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.603969369 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.17546964 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.347716313 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.511148058 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.194854406 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.171285742 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.568240614 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.200375189 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.171657549 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.163280217 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.162902193 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.162924784 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.204695659 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.187955938 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.575424239 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.661517688 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.416178374 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.200525161 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.17503993 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.165154017 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.403199229 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.170944777 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.164104075 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.440122234 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.680504258 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.176042472 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.171984402 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.643403489 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.176788518 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.193421867 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.17380179 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.452213075 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.188853003 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.205719733 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.162586679 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.170327903 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.167010481 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.192702123 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.171630426 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.164401511 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.635361813 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.310077207 seconds)
  done (took 266.566351643 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.165639591 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.163652385 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.162428614 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.165260352 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.151414343 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.164941821 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.162543112 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.161809633 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.164174976 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.162454942 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.16313342 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.155030853 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.16558015 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.163640972 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.668667861 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.15555934 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.65677372 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.17675152 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.177864531 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.179137073 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.795938246 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.185507951 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.178265521 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.178009287 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.174823187 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.177392776 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.186378349 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.221988273 seconds)
  done (took 176.483477338 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.176984116 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.247829114 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.192000212 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.227051929 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.192442945 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.178407749 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.200348013 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.199159844 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.184392811 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.179370182 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.177553297 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.20549938 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.188174909 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.317730092 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.216505444 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.209140846 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.258371689 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.18565091 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.178660131 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.179534195 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.231231223 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.193875015 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.206894518 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.235355245 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.192330687 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.225961205 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.195625001 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.179896282 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.178799198 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.281672856 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.205785342 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.207994301 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.215467091 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.198937731 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.273984683 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.278564853 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.261991956 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.209015532 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.185371381 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.180053266 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.17920651 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.18268217 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.228335252 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.194727177 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.180515686 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.27332362 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.203436869 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.181792319 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.200171542 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.18026258 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.192656878 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.197912059 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.214122338 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.284211502 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.232058717 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.206820086 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.202969212 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.198751578 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.182211399 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.256500957 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.189227436 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.273073055 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.206704261 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.181564109 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.182016766 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.185266208 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.229831563 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.218345186 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.258747691 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.190483221 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.256299164 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.239259867 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.196111275 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.181266419 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.181666598 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.231328642 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.271037326 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.237697608 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.244821297 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.220931449 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.192255093 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.181825378 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.183104 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.210086554 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.190596739 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.272397074 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.277987798 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.192000391 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.183728158 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.184064657 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.183371922 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.204978665 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.23995428 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.225714482 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.267455788 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.21742186 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.220576376 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.191008914 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.19408915 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.189299395 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.214189324 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.191755524 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.19509705 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.519395008 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.219504026 seconds)
  done (took 234.633410513 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.548813377 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.234867031 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.254433962 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.477531739 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.5788002 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.315294066 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.223396919 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.242252384 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.241994974 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.346775877 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.291444914 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.275428068 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.221008795 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.205845325 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.23140764 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.239652785 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.258345947 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.538528595 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.331957602 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.931373588 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.229400098 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.49423559 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.523866533 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.578149056 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.271380385 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.611765948 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.849394872 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.319207156 seconds)
  done (took 70.98089083 seconds)
done (took 921.002540758 seconds)
SAVING RESULT...
DONE!
