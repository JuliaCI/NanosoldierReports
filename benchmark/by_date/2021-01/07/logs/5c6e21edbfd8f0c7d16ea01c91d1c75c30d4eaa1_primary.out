cset: moving following pidspec: 3228
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.844094123 seconds)
loading group "shootout"... done (took 1.112492322 seconds)
loading group "string"... done (took 0.668029128 seconds)
loading group "linalg"... done (took 8.547894038 seconds)
loading group "parallel"... done (took 0.164184226 seconds)
loading group "find"... done (took 2.999072026 seconds)
loading group "tuple"... done (took 2.125360459 seconds)
loading group "union"... done (took 14.832812258 seconds)
loading group "dates"... done (took 1.440917897 seconds)
loading group "micro"... done (took 0.217130715 seconds)
loading group "simd"... done (took 4.837542575 seconds)
loading group "io"... done (took 1.08427783 seconds)
loading group "random"... done (took 9.605382768 seconds)
loading group "problem"... done (took 1.507198312 seconds)
loading group "array"... done (took 25.257627122 seconds)
loading group "misc"... done (took 1.767146949 seconds)
loading group "scalar"... done (took 43.911779183 seconds)
loading group "sort"... done (took 3.336116924 seconds)
loading group "sparse"... done (took 12.777906433 seconds)
loading group "collection"... done (took 18.378468881 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.423832302 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.113055976 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.126008603 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.110856781 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.182333039 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.118215667 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.125915456 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.08258308 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.841381086 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.137002794 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.112765612 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.423309164 seconds)
done (took 5.236726916 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.164091749 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.088538584 seconds)
    (2/2) benchmarking "String"...
    done (took 0.081569367 seconds)
  done (took 1.386662343 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.069654977 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.058637949 seconds)
    (3/3) benchmarking "different"...
    done (took 0.066967994 seconds)
  done (took 1.411082679 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.064455944 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.133013525 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.065792414 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.066447996 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.066986208 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.065663959 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.065566501 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.065933609 seconds)
  done (took 1.750477284 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.070126561 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.066054174 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.065239556 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.067283216 seconds)
  done (took 1.488448298 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.063864684 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.119778887 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.064831425 seconds)
    (4/4) benchmarking "different"...
    done (took 0.064073413 seconds)
  done (took 1.529585084 seconds)
done (took 9.031700167 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.138305338 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.821887783 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.774505692 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.123621657 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.248807612 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.362489648 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.122066123 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.180992038 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.087292287 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.073479944 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.119416705 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.076037782 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.385804844 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.491839236 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.069549075 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.166456545 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.640640251 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.084668362 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.130495024 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.436957589 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.071559379 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.085669665 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.082722443 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.06916251 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.327036432 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.151240021 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.66421371 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.094149462 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.066796801 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.092961465 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.068575361 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.076198603 seconds)
  done (took 10.637633211 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.090750648 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.087935993 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.067466076 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.124280136 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.094737773 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.070221702 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.075144312 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.067034918 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.08893622 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.125111575 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.090965657 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.099294307 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.066820079 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.068743821 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.073691814 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.198144812 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.081255165 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.084887407 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.067504678 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.08103718 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.106608333 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.079178906 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.078657316 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078269278 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.130351085 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.17118372 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.098334696 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.098767487 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.06638603 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.079213108 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.115730593 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.126464396 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067703213 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.064971169 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.120280842 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.096393993 seconds)
  done (took 4.655624558 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.875707343 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.094108717 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.080830864 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.072436933 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.104447403 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.111609205 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.118401427 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.120236034 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.097125296 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067303025 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.155942721 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.665365424 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.14847879 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070738047 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.11805545 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.354557972 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.060878259 seconds)
    (17/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.116023108 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06611795 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.067685408 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.06890844 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067548609 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.109714115 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.065224564 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.172567515 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.574193023 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068120862 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067416128 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.094094723 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.063039946 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.136375267 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.090506089 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.067648326 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.539644482 seconds)
    (34/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.061691637 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.063687355 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.061864539 seconds)
    (37/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.174056012 seconds)
    (38/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.088028332 seconds)
    (39/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.093393982 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065339677 seconds)
    (41/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.066481286 seconds)
    (42/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.062457989 seconds)
    (43/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.077016438 seconds)
    (44/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.064885929 seconds)
    (45/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106616928 seconds)
    (46/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.079015766 seconds)
    (47/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.507889241 seconds)
    (48/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068738895 seconds)
    (49/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.57935762 seconds)
    (50/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.225709328 seconds)
    (51/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.073292593 seconds)
    (52/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.07085293 seconds)
    (53/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.099767254 seconds)
    (54/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.064199762 seconds)
    (55/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.071306454 seconds)
    (56/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.924789392 seconds)
    (57/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.14331006 seconds)
    (58/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.065250949 seconds)
    (59/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.270137495 seconds)
    (60/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068815834 seconds)
    (61/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.067727624 seconds)
    (62/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068769777 seconds)
    (63/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.099773909 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067030038 seconds)
    (65/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068170745 seconds)
    (66/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.072954573 seconds)
    (67/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.096904367 seconds)
    (68/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.798742842 seconds)
    (69/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.088424083 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.095203085 seconds)
    (71/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.065275922 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.402915016 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.074718126 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.068972084 seconds)
    (75/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069424105 seconds)
    (76/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.068976365 seconds)
    (77/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.105414913 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066477181 seconds)
    (79/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065819632 seconds)
    (80/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.110083093 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.093143943 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.087183651 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068129762 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.065481738 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.064463449 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.320030862 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.160515892 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.064176469 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.065382699 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.470777127 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.061952196 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066932325 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.066094745 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.208025422 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.065802774 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.062619874 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.063754605 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098435194 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.068825368 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.332067708 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.065174483 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.47727298 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069543066 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.103858927 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.123066265 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067860671 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.10213825 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.066280344 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.063547425 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.072912618 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.064347884 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.063653283 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068129246 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.06405044 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.064569989 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.067377549 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.066607952 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065551874 seconds)
  done (took 22.554073695 seconds)
done (took 39.945556901 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.309649675 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.076617313 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.076644877 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.077229174 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.077009733 seconds)
  done (took 1.886169522 seconds)
done (took 3.248281639 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.248912256 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.073608056 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.062467214 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.198765602 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.088482314 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.173053432 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.211140481 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.157384376 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.086398136 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.086547293 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.086219583 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.214092343 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.222380729 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.086093149 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.156885359 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.222813031 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.086752292 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.062705179 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.086210477 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.086073963 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.085999949 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.06265075 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.08621265 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.086085019 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.155550514 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.08551771 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.061791017 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.154906382 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.084585408 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.155013746 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.084781127 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.087096108 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.086661556 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.158837001 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.087609122 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.157102817 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.183858304 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.087790838 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.087370291 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.085148498 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.084065428 seconds)
  done (took 6.219994897 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.073601162 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.084213911 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.083262478 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062074611 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071629916 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082311606 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061627654 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.081781778 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.089039733 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082578977 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082235532 seconds)
  done (took 2.206399086 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.068365382 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.080950273 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08233104 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060081615 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071400132 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.081349123 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060793695 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.081345316 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.084255075 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.081646652 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082079805 seconds)
  done (took 2.140224071 seconds)
done (took 11.856070892 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.094687219 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.063815464 seconds)
  done (took 1.44637764 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.220145221 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.493418085 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.962331545 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.090251075 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.070325813 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.083097972 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.190842923 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.065048221 seconds)
  done (took 7.650437293 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.098983059 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.066779784 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.069319639 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.066714956 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.066130497 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.066887424 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.067335879 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.068085926 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.065953735 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.067001937 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.065630458 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.065911962 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.068181427 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.06613783 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.067907565 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.067078882 seconds)
  done (took 2.506919673 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.101977952 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.069365549 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.099659765 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.061382331 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.07218289 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.061989333 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.070868925 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.072865043 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.070510014 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.071069193 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.07291779 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.071272165 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.071516486 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.071888818 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.073471768 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.073374266 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.073018929 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.070920412 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.073272494 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.074094318 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.07256683 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.07367858 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073807942 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.071810677 seconds)
  done (took 3.190591525 seconds)
done (took 16.098009548 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.172300293 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.075200747 seconds)
  done (took 1.545271213 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.066154977 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.066142376 seconds)
  done (took 1.446899512 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.070954214 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.058845832 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.075749713 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.068427109 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.059818615 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.060061901 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.075556553 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.060920775 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.061247972 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.061226798 seconds)
  done (took 1.964475888 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.061075712 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.06658642 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.064423297 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.063025859 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.065032915 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.060788643 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.063098802 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.061191037 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.066957429 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.059847753 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.064097421 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.081458607 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.064927658 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.083951888 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.06520946 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.065816954 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.067291279 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.064896016 seconds)
  done (took 2.504636059 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.059539416 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.059658154 seconds)
  done (took 1.439673598 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.063026078 seconds)
    (2/7) benchmarking "second"...
    done (took 0.060342353 seconds)
    (3/7) benchmarking "month"...
    done (took 0.062571836 seconds)
    (4/7) benchmarking "year"...
    done (took 0.062199963 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.060126908 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.059548752 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.060296747 seconds)
  done (took 1.740949496 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.417898878 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.122510753 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.343165708 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.067199679 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.074726426 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.254803471 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.062426096 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.066781999 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.067416408 seconds)
  done (took 2.835060857 seconds)
done (took 14.806021827 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.080475053 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.17858074 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.085143007 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.379397887 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.092089904 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.067252491 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.112740587 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.179500447 seconds)
done (took 2.514607635 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.276569743 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.134453067 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.311267686 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.147524598 seconds)
  done (took 2.919166672 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.32948637 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.077312045 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.07611536 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.065287921 seconds)
  done (took 1.882261018 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.063138204 seconds)
    (2/2) benchmarking "read"...
    done (took 0.069400077 seconds)
  done (took 1.462425237 seconds)
done (took 7.880728466 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.069590531 seconds)
    (2/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.090083764 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.05951525 seconds)
    (4/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.064541401 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 0.061784464 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.062377637 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.062105761 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.061086548 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.062695713 seconds)
    (10/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.062017207 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.060832303 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.063663611 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.063807255 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063761414 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063382687 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063477074 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064053546 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.063360999 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063433907 seconds)
    (20/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.061644393 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063384045 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064360681 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.062705069 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.063711415 seconds)
  done (took 2.899220717 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.07730661 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.064039896 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.064686689 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.064629048 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.065270639 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.064826329 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.065000957 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.064121749 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.0648662 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.063785995 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06682294 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.067324969 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.064964416 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067696681 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065274678 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.067283534 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.066963329 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065709804 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.0652588 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.067055047 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.066732653 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065789531 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.067302124 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.066432584 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067160603 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067145618 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.065646294 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.065641677 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.066552022 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.067087761 seconds)
  done (took 3.335435322 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.064385576 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.057723175 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.058281804 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.068354203 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.058120621 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.058762059 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.059030324 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.058383192 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.058571342 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.060083239 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.05923778 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.058478179 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.059211284 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.058529059 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.058841012 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.059267926 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.063067804 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.077775103 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.060395216 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.059783382 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.064593592 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.060140739 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.059488585 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.059529594 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.06041277 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.059907928 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.059463552 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.060129513 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.060102574 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.061139113 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.059814896 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.064492022 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.065244713 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.059769621 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.070673833 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.065091894 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.060144201 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.066981201 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.061294493 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.05986242 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.059988057 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.059478639 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.06028332 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060185021 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070179335 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.060115955 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.061607497 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.060889871 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.060507382 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.060077527 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.0605061 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.061463607 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.067883428 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.061717041 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.059993668 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.061219482 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.060201533 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.060746197 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.060251353 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.060045989 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.060024503 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.063718798 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.061758275 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.060655507 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.080427389 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.061560584 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.070624294 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.059853387 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.060285433 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.063875533 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.060832001 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078555044 seconds)
  done (took 5.805357042 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.069347732 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.069431589 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.077493793 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.068427271 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062564298 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.0597487 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.062974906 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.05937549 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068747506 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.063545637 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059489403 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.06335785 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068870226 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063361202 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060541865 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.06969764 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.064822297 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064016137 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.060997597 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065137132 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062581347 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.064514855 seconds)
  done (took 2.786275368 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.135942258 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064535163 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.103399005 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.068085292 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.067082602 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.068501879 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064655036 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064866437 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064750712 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065507423 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066598578 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066239074 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068839794 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067148776 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067237377 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067033835 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066971248 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066664528 seconds)
  done (took 2.648925724 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.074635006 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.064291924 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089372304 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.065759992 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.06594674 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065351338 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069119601 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069612901 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.065452776 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.066140986 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.070322789 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065486635 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.065613328 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065982823 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065469439 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.065717164 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.065670496 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065789984 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069853493 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069882529 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070011768 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069810351 seconds)
  done (took 2.853336123 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07602618 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.062827773 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.078448293 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.064501998 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.05868438 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.0585305 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.064371398 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.063410902 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.064304741 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.063264774 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063744888 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060199283 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.06690934 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065399814 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067324298 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065485329 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064860398 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065306919 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065035299 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060327761 seconds)
  done (took 2.648351364 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069780302 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.061635115 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061296593 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066306829 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061300932 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.061676218 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.066906838 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.061831938 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.061934706 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.083275722 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.061875551 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.072779009 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.067563026 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.066872898 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.063309705 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.068502966 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.068500974 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.066930472 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.061783492 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061660606 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.083386793 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.061791076 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.066921959 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063272532 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063102309 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.063303604 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063216976 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.066200743 seconds)
  done (took 3.196783441 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.062372468 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.061684438 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.06161098 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.061843918 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.061807208 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.062096848 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.06220869 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.061983426 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061656675 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.063871271 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.0628864 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.062809155 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.066003503 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.063233373 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.063220996 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.062997353 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063000097 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.063645087 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063796884 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063479951 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.063174457 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063346106 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.063005622 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.0634614 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063795142 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.063362224 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063442905 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.063428625 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063217542 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.06344116 seconds)
  done (took 3.246969876 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.071422708 seconds)
    (2/2) benchmarking "in"...
    done (took 0.069117118 seconds)
  done (took 1.496556552 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.059848986 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.075626917 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.058284239 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.070830811 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.066940303 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.062075627 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067875227 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069030465 seconds)
  done (took 1.880190792 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.066507538 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.088565814 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.060531583 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.060987484 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.063343948 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.125635372 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.074527252 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.073861995 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075892377 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.065576758 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.062191961 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.073171805 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.060380395 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.074009039 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062536484 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.06955405 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069563868 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.080255948 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.075011725 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.060217882 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07437467 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062739702 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.060417668 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.06270791 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.061282168 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.06885166 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.078164709 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.073125567 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.068734898 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.05851801 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.080676571 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.060336949 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.061586537 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069316599 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.063732515 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.059689963 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.096388647 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.060664716 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.065141481 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.059521452 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.071748507 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.080735669 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.074609926 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.077640358 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.061551577 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.062212274 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.059598805 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.061527995 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.063330965 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.068726925 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.060093049 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06803125 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.060041515 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.061892132 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.071580064 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.061508649 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.066864141 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.070955086 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.075809766 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.072450993 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.070540928 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.077601938 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.070849727 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.069307374 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.062328952 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.081837129 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.063415781 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.073857234 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074703296 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.060382101 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072642433 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.058953456 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.057737933 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.059266238 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.09248991 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.060685133 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.060161564 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.059473139 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.059019239 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.060665129 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069201326 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064163551 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066649588 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062592325 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075409438 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.068751721 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.05919837 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.065787163 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.077111638 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.062876346 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.058999612 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.075269511 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.062562381 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.058333643 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.077015556 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.068750665 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.060378203 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.059629753 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.062494585 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.072400059 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.059839555 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.058006284 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.06767634 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.060282036 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.060961186 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.063263211 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067179127 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060310038 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.070830592 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.065290352 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.061884875 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.05877044 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.064434823 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.06092494 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.058252807 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.0679426 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.057895798 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072499471 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.065189831 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.072688664 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.07305498 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.069412265 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.074430737 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.058006543 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.056940541 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.076389966 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.067686553 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.059462037 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.075663199 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.057583829 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.071057648 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.057400175 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.059251704 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.206350239 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.060100092 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062412923 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.060279532 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.065383809 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.061321145 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06165364 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.0660997 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.068530216 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.072120233 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.060680538 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.06881742 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.060100801 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.075154641 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.069494371 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.06386846 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062878454 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.061145849 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.073103819 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.067471241 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.069727025 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.059978857 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.060896585 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.060734431 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.071673139 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070438588 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.062366435 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.067672999 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.065126913 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.061033512 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.06090215 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.061745968 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.064697912 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064207845 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.061525632 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06896368 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.069373617 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.074696263 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.067669383 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.069929936 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.059413607 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.0600429 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.062237529 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.059646883 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.065148419 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.069884538 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.0763242 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.072327446 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.0820106 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.060325931 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.070581887 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.061830185 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.07775785 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.073314257 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.059954701 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063791903 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.058363087 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060661208 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.069018794 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.070770618 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.072781112 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074369422 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.063725559 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.06405445 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.05887682 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.074786846 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.059736826 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067693746 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.068250437 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.063372092 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.059423441 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.060395186 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.068262395 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.063418948 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.058839225 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.074452689 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.065078627 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.05840527 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.073557587 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.059458255 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.06989727 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.058612072 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.06290419 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.064488368 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.061385911 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.070237682 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076185643 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.05944066 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.061314106 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.07616659 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.061138216 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060748569 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.067449239 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.075564948 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.064561014 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.068933274 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071578099 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.070723789 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.065060519 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.070579938 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.061107694 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.069248612 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.062871828 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.070723721 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.0594414 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076699022 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.057661103 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.07378036 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.059022145 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.070362593 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.059446105 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068588367 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.060058561 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.075877935 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.060244643 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.059313814 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.07039321 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.057197422 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.067923015 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.057546708 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.063875465 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.064641098 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.067412982 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.05992106 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.067907722 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.059337385 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.067218286 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.062854902 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.066226868 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.067234958 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.062669152 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.057415912 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.066817514 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069129045 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.066522261 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.059377708 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.05928379 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.059707259 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.210952123 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.061971915 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.06194016 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.06909445 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.065187702 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.066158653 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061204308 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.061163423 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.061162481 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068313224 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069347856 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077155415 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.067947061 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.067300945 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.068617592 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.058912661 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075051199 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.059207815 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.069600077 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.058105161 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.064877017 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.068738702 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.059368012 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078168261 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.060247714 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.067150137 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071224115 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067894389 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.063510294 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.07931584 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.063598513 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.069645099 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.068996211 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.065005406 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.067510119 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.062297016 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.069337514 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.070728743 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.071626362 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.061701949 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.068411761 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06998645 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062043323 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.068224582 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.06207817 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.069283885 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.061347449 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.057926683 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.063544776 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.070347236 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.063732663 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.063836196 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.059286795 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.05809467 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.059629257 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.065416299 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.063643093 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.067886637 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074640368 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.057722081 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.05983686 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.059013794 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.063120195 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.076886822 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.068672904 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.06758901 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.065400609 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.059713238 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.062097086 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.06232841 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.060732196 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.064018919 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.059809188 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.059715056 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071396556 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.062462584 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.06486106 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061310405 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.061831029 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.07015058 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.065449156 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.061027375 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.067502787 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.060314444 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.065787908 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.059774977 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.06201441 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.065115755 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.059603411 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.064457285 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.071181257 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.077299309 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.067155549 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.069642049 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.061704331 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.068675959 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076480049 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.067716777 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061755628 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.069414095 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.058670385 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077793745 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.068666927 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067534991 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069165879 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.059942934 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.075652325 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.063516514 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.070861576 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075293978 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.059725976 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.065588795 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.05806822 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074465927 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.063639486 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.059835631 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.068778084 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068194825 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.066019237 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.071853277 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.060736637 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.068366932 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065087979 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.062194049 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.059495395 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.059377934 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.066856871 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.074399863 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.05900951 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.061968461 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.066297444 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.066710139 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.063002711 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.0701736 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.066268156 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059093904 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.059738632 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.06184268 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.205321194 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.072387683 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062294797 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.066549359 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.066690296 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.060844184 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.067929494 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078083213 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.070362169 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070533339 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.060303626 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.059783611 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.078869252 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.064260445 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.064103393 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.068896284 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.070597599 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073148908 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.070267514 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.077726835 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.061461915 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.066715613 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073159983 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.061193711 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.060067333 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.064247668 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.06195572 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.069534792 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.070814861 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.068679888 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06248274 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.06752919 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.074678046 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.061865966 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.065026787 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.065043022 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.061312288 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.071780905 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.069364475 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.072050264 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.061976807 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.060064987 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.064196397 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.069521585 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.068452463 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.069821199 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061346215 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.066878338 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.074338315 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.06796754 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062894729 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.058081228 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061866005 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.068416036 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.063321136 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.059079557 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.063751415 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.063118466 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065332567 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.069677352 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.064843848 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.060076918 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.078210093 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.068785724 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.070179633 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.062448114 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.062630318 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061146397 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.059874547 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072219704 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.060125729 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.060876838 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.064110367 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.060931074 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.076807243 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.068624892 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.077355664 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061821797 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.065588627 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.060202538 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070758466 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.065680163 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.060507459 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.071617769 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.059578087 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076389925 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.073187634 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.066048725 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.060229912 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.065780641 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.068883596 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.07580736 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070817917 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.069558556 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064614116 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070587803 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.062760723 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.072520763 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.060136166 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.059635288 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.071232135 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069677706 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07352717 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.060584805 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.070915777 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.062694728 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.067815233 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.06767638 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.062402555 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061839275 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.061914529 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070095977 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064641779 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.070100312 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.065221988 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.077652164 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.06147073 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.071964365 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.070033832 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.071871829 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.074225454 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072589846 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.068565203 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.060331725 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.06782324 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.066631392 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.059226486 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.063592382 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.061343429 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079295932 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.059568968 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.059529338 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071713152 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.063730708 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.057879328 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.063385689 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.206262745 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.071437152 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.06296214 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072008051 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.065866076 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.06172988 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.065622611 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.065841158 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.059609676 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.06040894 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.060740148 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.070469665 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.065795439 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.060765694 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079018576 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.060625907 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.068233214 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.070420844 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.065866789 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.060879116 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.058313537 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.060726911 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.072820179 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075036786 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.062596499 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067895889 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.060597684 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.068796254 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.059144368 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.069872103 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.069209408 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069577965 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.060073307 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061124428 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.075713692 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077042807 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.066303464 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.071006452 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.069931381 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.062190025 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082612882 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.069621167 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061858654 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.071647386 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062453316 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.059594328 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.059463173 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.062070046 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.07250122 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.059647522 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.063566034 seconds)
  done (took 41.41772049 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.096443959 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.059601313 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.058575849 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.058864306 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066706837 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.05958537 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.059086079 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.059813456 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.059487414 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.061156364 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.05922308 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061986661 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.064966437 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.071671593 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.066872788 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.062286123 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.059062139 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.060108934 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.059308652 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059694249 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.064936838 seconds)
  done (took 2.796450082 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.062327212 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.062833847 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.062706718 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063116201 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062455004 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059294717 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.063216096 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058895148 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063338269 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059730565 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.063570381 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059156068 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.059235247 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.05916441 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059623361 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060506553 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.063267528 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062541944 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.059377202 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.062882357 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060522033 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.06279026 seconds)
  done (took 2.800485446 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.060337575 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.05957391 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.067655827 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.058584502 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.058240242 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.061854086 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.05824662 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.063937551 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.064670891 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.064311311 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.069753926 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.061182817 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.059701601 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.065732898 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.059550094 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.060654304 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.102301097 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.059989757 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.059905121 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.058523324 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.061221084 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.067778263 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.058286673 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.058966303 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.063505814 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.063602099 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.059791212 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.062704761 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.060963354 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.064395209 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.061073661 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.059580815 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.069144511 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.067926322 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.064560493 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.065151929 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.061671335 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.060963911 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.059960263 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.059678396 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.068843311 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.061310413 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.060316577 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.06153216 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.069365714 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.0600094 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.05993825 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.06944764 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.059664431 seconds)
  done (took 4.548441827 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.068850308 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.110758838 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.064259154 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.091823534 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.071273335 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.064531461 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.064522372 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.095877367 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.060850024 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.062244416 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.073985639 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.074079216 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063641946 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.064845052 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.067350193 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063349098 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063562094 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062085636 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.065698226 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.062909369 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.065638338 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.066827761 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.073100303 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.073425367 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.064124754 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.06297841 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.06309915 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.064401305 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.073317595 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.066373003 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.064852245 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065109182 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.073059434 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.067888124 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062841688 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.062613799 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.074525065 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.063173555 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.063005531 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.061444585 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.062930875 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.064304695 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.067672358 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.074401079 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063054709 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.067848258 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063586094 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.061179024 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.073806256 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.062924454 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.067387787 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.07487512 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064557155 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.063375292 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064784045 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.074061466 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.063255379 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.06232143 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.063413286 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.073534957 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.061357102 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064457469 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.076826555 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.062779744 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.066511764 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.074284002 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.067161457 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.063870812 seconds)
  done (took 6.216762835 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067916463 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.093875019 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074015081 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.074461506 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.069198972 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.069494266 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.06908022 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.069161297 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.069872268 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.073088916 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.069581739 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.104141523 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.066658008 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.070778451 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.069903284 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.071248781 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.072137917 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.070966963 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.070826127 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.070681613 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.071308399 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.07620877 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.071526587 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.076374361 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073831526 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.067709888 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071000794 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.071175501 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.076296577 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.070920792 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.073152502 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.070700934 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.070877318 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.076196413 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.07324362 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.070993917 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.061390705 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.070038963 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.069604803 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.069132979 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.065186041 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074114259 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.069396538 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.065435232 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.068991935 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.069226207 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.073988243 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.071795383 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.070714889 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072305843 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.069294022 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074183439 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.069181448 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.069453184 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074267372 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.076616932 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074012975 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074724276 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.069437811 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074178814 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074533217 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.078718562 seconds)
  done (took 5.970290564 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.071408152 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065045151 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.07720357 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.059222638 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.058629297 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.06779711 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.059033654 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.058923026 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065296826 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.06562095 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066894056 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067683282 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069737296 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066830571 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067892818 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069912046 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068150878 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067782161 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065389374 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068129239 seconds)
  done (took 2.813021345 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.073654179 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.077555339 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.064437302 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067663159 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.064079668 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.067897855 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.063923264 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06480882 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064740357 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064311349 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.069273729 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.0690213 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064852885 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.068168832 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.069421564 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.067571466 seconds)
  done (took 2.552521138 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.062347385 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.066073071 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.064927758 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.060325844 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.061918144 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.059354044 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.060171456 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.058588582 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.061640773 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.072833393 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.05972198 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.062214222 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.060368354 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.059149816 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.059438767 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.062329121 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.061290149 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.060902717 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.061533701 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.065532317 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.06982189 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.062247045 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.064433062 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.061021042 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.064336125 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.069938376 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.06246532 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.063536547 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.061435824 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.063829398 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.064023174 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.068164032 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.06374506 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.061806376 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.060493392 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.061541438 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.061640048 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.064012308 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.064049857 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.061515274 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.060031494 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.066605071 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.061948508 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.06223387 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.06296321 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.063155358 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061307062 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.065802864 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.059981322 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.061861209 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.060280247 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.061536919 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.060466372 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.066593561 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.061886325 seconds)
  done (took 4.924342959 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076023474 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063888082 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058661871 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.05873051 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.064005619 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.064592826 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.063746346 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.064325843 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064893809 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058668951 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064389367 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.063553141 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06438554 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064435307 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066207735 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06564914 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.059711613 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.065516952 seconds)
  done (took 2.638862157 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.064968373 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.0644828 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.063249642 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.06082313 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.060416918 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065163152 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.059700303 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.060362173 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060242956 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.060778116 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062230856 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.061125716 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061818377 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.061509383 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065145047 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.0607158 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.060509662 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.059371788 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.060693117 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.05908483 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065368806 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.059295765 seconds)
  done (took 2.837683896 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.086047508 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.082206803 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.125931513 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.079388051 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.087547265 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.071815674 seconds)
  done (took 2.012830814 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.091874089 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.096194281 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063836915 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.063598797 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06846259 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066460311 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066429614 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066688768 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070240325 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070403796 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066670219 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070032661 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069955678 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071904573 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068475828 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068791198 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067336256 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066770652 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.064199921 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073933545 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.0671803 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071800765 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068801487 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068659084 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068462306 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074190952 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071958644 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072505879 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068380447 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072139443 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070251891 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066775401 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070308547 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070323425 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.063913992 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070043862 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067086779 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074154755 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069293508 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072253836 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063646399 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068694777 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070381134 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069988457 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070160218 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067038427 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07065023 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068897367 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069012822 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077898168 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070669149 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073965572 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070609096 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072811055 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072449551 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077636654 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072750292 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073933549 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070679493 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072569042 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074416102 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07053881 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074098546 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072968819 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070947241 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074132242 seconds)
  done (took 6.156930554 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101649949 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064880505 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068287938 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072506245 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074183161 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069344845 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06888715 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068804822 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068772721 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06616629 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105211667 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068965427 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07393555 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077184558 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069358244 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069080646 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068790056 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074115282 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066081147 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077539186 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068526167 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073924248 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074107693 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074041833 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072493213 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070486382 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068602962 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06892451 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068815019 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068646599 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071983773 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068990809 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074008971 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06572122 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07307155 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067514237 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066773895 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069809988 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068455339 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070110529 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074193252 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076126118 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068573636 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068656491 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072535045 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068774491 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068700102 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065906264 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068608844 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066067579 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072515879 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072308914 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072743381 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074305973 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069140728 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06913671 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069024584 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069331326 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069272669 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070869939 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07440908 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06911792 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078079852 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06899507 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068925484 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074988316 seconds)
  done (took 6.224698999 seconds)
done (took 128.040714335 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.216372886 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.187981457 seconds)
  done (took 1.872399208 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.072755212 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.163617208 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.072263191 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.072460294 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.108378094 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.10517545 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.07351154 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.07021391 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.072485557 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.070725975 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.138624841 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.074017255 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.069869474 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.069836764 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.069998509 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.071061251 seconds)
  done (took 2.862385126 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.105417236 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.203835974 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.081564009 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.068936642 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.151735611 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.076027745 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.071649577 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.076120759 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.076411459 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.069391383 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.107342929 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.083190876 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.075121779 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.07647563 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.071326481 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.074815815 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.075948651 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.075659236 seconds)
  done (took 3.115067058 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.100316341 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.091086396 seconds)
  done (took 1.690235355 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.154439805 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.102754397 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145282186 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.342186567 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.133409182 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.135010289 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.138838766 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.133639248 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.108037578 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.13095111 seconds)
  done (took 3.014954423 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.103354869 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.104318555 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.307488716 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.102582991 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.081451194 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.076795632 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.074452823 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.079226357 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.074440985 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.075982312 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.122540507 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.074544825 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.071435803 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.124759014 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.097134385 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.105678524 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.070341255 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.077540484 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.079837968 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.0700384 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.075542933 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.079314091 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.17771907 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.077945294 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.099665006 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.074640114 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.076676133 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.073658681 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.073421459 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.077786923 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.078417168 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.098167713 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.076021759 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.079774965 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.074535312 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.096725923 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.071228553 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.098587279 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.073740586 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.071594323 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.074390024 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.078452256 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.071461128 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.07787169 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.074724184 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.076837237 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.079414347 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.070394998 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.074187434 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.073781183 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.071613511 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.076097329 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.075363646 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.077160941 seconds)
  done (took 6.23648423 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.104727368 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.105563764 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067906465 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.110017092 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.102528439 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067892222 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.101662353 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.097688453 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.106598619 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067823813 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067876321 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068273224 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.07631084 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.079848027 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.113878184 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.105538183 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.06900868 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.067890269 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.105774914 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.107377422 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068409445 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.101155251 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.099599796 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.107489496 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.066387665 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.067642153 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.067119428 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.068068959 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074064375 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.074888567 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.068049979 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075425085 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.082281561 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.072618634 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.065904093 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066536493 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.065966654 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.073079363 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074160538 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.073866846 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.071904162 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066088716 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066449752 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067277218 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067241554 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.065651688 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.072093606 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.073051783 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.07255028 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066987608 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.066912061 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.067080301 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.067012769 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.073413069 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.071953633 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.073606554 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073608776 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.065966938 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066012133 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.068261168 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074456519 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.074766137 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.073569474 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067485078 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.074289554 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066676825 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077600785 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.081021317 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.068172352 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068650688 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.068193583 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067751319 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.068614953 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074115159 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.074594106 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068687657 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068053586 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067736453 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076677644 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074063597 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068158129 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.073969722 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067913898 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067926653 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068404018 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.06887642 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.073847105 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.075404353 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.06919168 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.06831588 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.068019768 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068114747 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.067172183 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.07376399 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.074907273 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.075209123 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.073647363 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067205782 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.072207774 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.073605936 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.06853019 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.074025994 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.067576518 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068066558 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067507532 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.072630278 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.070360071 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.072294028 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.065696384 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.06505321 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.070444604 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.073275871 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.065405096 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.070432943 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.072911948 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.209921614 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.067319181 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076054526 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067620971 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.074458935 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067453518 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074978452 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067421569 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.07258142 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066939245 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.065996754 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.06667748 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.072410331 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.06695864 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066272311 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067007324 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067577147 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.074856138 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.07572529 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067319939 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072760056 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.072934322 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067046329 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.072076501 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066489567 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.073304817 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066916999 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066677723 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066884575 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075138886 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.06792897 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068156757 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.067919516 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.076407399 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066489894 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.074339277 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.07179812 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066019403 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075536975 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.074340498 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.071802769 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.074994495 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067162649 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.066769314 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066441605 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069222455 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.071185523 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072336469 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06713153 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066887416 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.071218605 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.074484229 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.066867678 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.07204533 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.072071766 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.072344314 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066879827 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067225734 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.075268701 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.074267792 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.072243832 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.072336252 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073119316 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.06635907 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.071859784 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072470459 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066572936 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078613223 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066727055 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.077797016 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.073921844 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.071931279 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073801984 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.075965491 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.074899654 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.074521016 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.076317975 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066296275 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066377316 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.072402506 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066620441 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066759426 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.072006439 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067161401 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.066976409 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.078990384 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066817997 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.074557048 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.066215502 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.072895034 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.065752893 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066954273 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077598494 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066548507 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067490348 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.071864401 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066246729 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.071649296 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07418934 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.071649653 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.06626486 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066837477 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.072355831 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.0733931 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066328999 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066084165 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067246566 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.071383057 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.07051728 seconds)
  done (took 17.928989665 seconds)
done (took 38.229285404 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.166309979 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.112282422 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.206405454 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.197066122 seconds)
  done (took 2.268706816 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.097389109 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.063126596 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.077654959 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.087006914 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.063016705 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.073314903 seconds)
  done (took 2.005154114 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.195644546 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.171126549 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.239307612 seconds)
  done (took 2.124955043 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.363976374 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.148644511 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.215505944 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.500096637 seconds)
  done (took 2.864773543 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.107475752 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.09836168 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.074693123 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.10764499 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.082106567 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.060161386 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.129157335 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.067199402 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.096028756 seconds)
  done (took 2.424249815 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.134895378 seconds)
done (took 13.383450071 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.519026417 seconds)
    (2/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.224169914 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.218582303 seconds)
    (4/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.108699771 seconds)
    (5/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.091856432 seconds)
    (6/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.206030567 seconds)
    (7/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.091544511 seconds)
    (8/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.228005097 seconds)
    (9/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.189536176 seconds)
    (10/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.252658618 seconds)
    (11/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.159965442 seconds)
    (12/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.1409039 seconds)
    (13/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.275944322 seconds)
    (14/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.073268405 seconds)
    (15/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.075525839 seconds)
    (16/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.144648317 seconds)
    (17/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.076254936 seconds)
    (18/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.073111419 seconds)
    (19/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.118482809 seconds)
    (20/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.093847573 seconds)
    (21/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.077326239 seconds)
    (22/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.077689043 seconds)
    (23/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.200820207 seconds)
    (24/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.155752501 seconds)
    (25/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.246696626 seconds)
    (26/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.076874628 seconds)
    (27/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.205719143 seconds)
    (28/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.127258094 seconds)
    (29/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.186935321 seconds)
    (30/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.18572124 seconds)
    (31/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.072238599 seconds)
    (32/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.22820443 seconds)
    (33/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.172219412 seconds)
    (34/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.149399733 seconds)
    (35/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.076174492 seconds)
    (36/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.073720938 seconds)
    (37/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.143734946 seconds)
    (38/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.073627888 seconds)
    (39/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.158330732 seconds)
    (40/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.090665881 seconds)
    (41/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.065391889 seconds)
    (42/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.078116877 seconds)
    (43/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.074158426 seconds)
    (44/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.072095938 seconds)
    (45/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.072529062 seconds)
    (46/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.177379129 seconds)
    (47/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.123287816 seconds)
    (48/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.221224368 seconds)
    (49/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.19252347 seconds)
    (50/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.090922922 seconds)
    (51/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.190650022 seconds)
    (52/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.065531372 seconds)
    (53/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.065656288 seconds)
    (54/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.19082135 seconds)
    (55/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.157470255 seconds)
    (56/341) benchmarking ("sort", BigInt, false)...
    done (took 0.263434428 seconds)
    (57/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.077490335 seconds)
    (58/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.112217739 seconds)
    (59/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.084920791 seconds)
    (60/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.139091645 seconds)
    (61/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.122170585 seconds)
    (62/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.214260618 seconds)
    (63/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.143692149 seconds)
    (64/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.074928945 seconds)
    (65/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.078909725 seconds)
    (66/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.128881782 seconds)
    (67/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.071231247 seconds)
    (68/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.069861076 seconds)
    (69/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.151695064 seconds)
    (70/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.173458121 seconds)
    (71/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.162751152 seconds)
    (72/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.068953117 seconds)
    (73/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.087540854 seconds)
    (74/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.227837499 seconds)
    (75/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.069290873 seconds)
    (76/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.073797239 seconds)
    (77/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.091017733 seconds)
    (78/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.167317309 seconds)
    (79/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.074808247 seconds)
    (80/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.071779123 seconds)
    (81/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.141830663 seconds)
    (82/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.07259933 seconds)
    (83/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.137856844 seconds)
    (84/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.068379531 seconds)
    (85/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.081863312 seconds)
    (86/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.190031937 seconds)
    (87/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.073078238 seconds)
    (88/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.075177689 seconds)
    (89/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.198568232 seconds)
    (90/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.068062278 seconds)
    (91/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.067060133 seconds)
    (92/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.142626147 seconds)
    (93/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.089731787 seconds)
    (94/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.07535441 seconds)
    (95/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.074676189 seconds)
    (96/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.218654531 seconds)
    (97/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.065522442 seconds)
    (98/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.081392149 seconds)
    (99/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.121676133 seconds)
    (100/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.071494583 seconds)
    (101/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.083911203 seconds)
    (102/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.08286044 seconds)
    (103/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.0859384 seconds)
    (104/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.085803809 seconds)
    (105/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.071823093 seconds)
    (106/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.147231789 seconds)
    (107/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.149757821 seconds)
    (108/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.090273173 seconds)
    (109/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.0880612 seconds)
    (110/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.072936771 seconds)
    (111/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.066205329 seconds)
    (112/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.077692605 seconds)
    (113/341) benchmarking ("sort", Float32, false)...
    done (took 0.137396376 seconds)
    (114/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.066832854 seconds)
    (115/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.06461047 seconds)
    (116/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.179777886 seconds)
    (117/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.133758323 seconds)
    (118/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.064304336 seconds)
    (119/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.073488434 seconds)
    (120/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.067157093 seconds)
    (121/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.198719072 seconds)
    (122/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.084451711 seconds)
    (123/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.069226285 seconds)
    (124/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.141236046 seconds)
    (125/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.08167861 seconds)
    (126/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.064472725 seconds)
    (127/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.06779974 seconds)
    (128/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.232574073 seconds)
    (129/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.07746207 seconds)
    (130/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.141116585 seconds)
    (131/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.06559756 seconds)
    (132/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.137079266 seconds)
    (133/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.119574197 seconds)
    (134/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.070573463 seconds)
    (135/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.148773223 seconds)
    (136/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.074250901 seconds)
    (137/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.160518073 seconds)
    (138/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.068080149 seconds)
    (139/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.073944703 seconds)
    (140/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.083600887 seconds)
    (141/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.069795351 seconds)
    (142/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.163387944 seconds)
    (143/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.065625486 seconds)
    (144/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.137264856 seconds)
    (145/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.072901984 seconds)
    (146/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.065302983 seconds)
    (147/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.117244298 seconds)
    (148/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.073755225 seconds)
    (149/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.074860446 seconds)
    (150/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.080789528 seconds)
    (151/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.17310305 seconds)
    (152/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.065207523 seconds)
    (153/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.064590196 seconds)
    (154/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.143058405 seconds)
    (155/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.1438197 seconds)
    (156/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.069048986 seconds)
    (157/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.199425016 seconds)
    (158/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.074830305 seconds)
    (159/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.065922555 seconds)
    (160/341) benchmarking ("sort", Bool, false)...
    done (took 0.146510608 seconds)
    (161/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.077488351 seconds)
    (162/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.195467117 seconds)
    (163/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.077075256 seconds)
    (164/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.151611423 seconds)
    (165/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.064686423 seconds)
    (166/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.06539246 seconds)
    (167/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.063366916 seconds)
    (168/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.069953557 seconds)
    (169/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.072294313 seconds)
    (170/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.063635111 seconds)
    (171/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.196518411 seconds)
    (172/341) benchmarking ("sort", Int64, false)...
    done (took 0.065637552 seconds)
    (173/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.063741974 seconds)
    (174/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.064184265 seconds)
    (175/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.080076485 seconds)
    (176/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.063485829 seconds)
    (177/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.064646111 seconds)
    (178/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.06301258 seconds)
    (179/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.062744839 seconds)
    (180/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.08752877 seconds)
    (181/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.062616739 seconds)
    (182/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.062880952 seconds)
    (183/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.151667455 seconds)
    (184/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.063998521 seconds)
    (185/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.067268395 seconds)
    (186/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.234034331 seconds)
    (187/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.067727981 seconds)
    (188/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.083586284 seconds)
    (189/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.063851524 seconds)
    (190/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.081204596 seconds)
    (191/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.064894648 seconds)
    (192/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.080387562 seconds)
    (193/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.064662092 seconds)
    (194/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.168826589 seconds)
    (195/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.072083016 seconds)
    (196/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.065649176 seconds)
    (197/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.074393538 seconds)
    (198/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.229474997 seconds)
    (199/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.065823444 seconds)
    (200/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.063701697 seconds)
    (201/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.065090239 seconds)
    (202/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.19825295 seconds)
    (203/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.065882586 seconds)
    (204/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.06537188 seconds)
    (205/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.06566014 seconds)
    (206/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.068374368 seconds)
    (207/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.146842034 seconds)
    (208/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.065736657 seconds)
    (209/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.151137802 seconds)
    (210/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.06591386 seconds)
    (211/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.066255725 seconds)
    (212/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.163355278 seconds)
    (213/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.06998612 seconds)
    (214/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.084306824 seconds)
    (215/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.067167367 seconds)
    (216/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.065781435 seconds)
    (217/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.072255061 seconds)
    (218/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.063910977 seconds)
    (219/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.065276907 seconds)
    (220/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.065159878 seconds)
    (221/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.06720447 seconds)
    (222/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.073000272 seconds)
    (223/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.083694405 seconds)
    (224/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.171658061 seconds)
    (225/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.065193653 seconds)
    (226/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.073151691 seconds)
    (227/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.065981192 seconds)
    (228/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.072664011 seconds)
    (229/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.065337962 seconds)
    (230/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.064268699 seconds)
    (231/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.084327721 seconds)
    (232/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.064571778 seconds)
    (233/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.181832085 seconds)
    (234/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.066397487 seconds)
    (235/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.122581729 seconds)
    (236/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.148659659 seconds)
    (237/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.063735189 seconds)
    (238/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.079520087 seconds)
    (239/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.063509873 seconds)
    (240/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.064345907 seconds)
    (241/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.064224206 seconds)
    (242/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.063696378 seconds)
    (243/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.07558974 seconds)
    (244/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.073593089 seconds)
    (245/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.078364255 seconds)
    (246/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.065711798 seconds)
    (247/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.070610962 seconds)
    (248/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.070469844 seconds)
    (249/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.064001583 seconds)
    (250/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.064528458 seconds)
    (251/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.087360739 seconds)
    (252/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.071372871 seconds)
    (253/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.064336675 seconds)
    (254/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.088605976 seconds)
    (255/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.144610018 seconds)
    (256/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.066576677 seconds)
    (257/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.071115766 seconds)
    (258/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.075726893 seconds)
    (259/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.062799079 seconds)
    (260/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.063313561 seconds)
    (261/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.064713398 seconds)
    (262/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.069905069 seconds)
    (263/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.066821981 seconds)
    (264/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.227756154 seconds)
    (265/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.064942503 seconds)
    (266/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.072474334 seconds)
    (267/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.064285382 seconds)
    (268/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.065374483 seconds)
    (269/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.075991224 seconds)
    (270/341) benchmarking ("sort", Float64, false)...
    done (took 0.137290164 seconds)
    (271/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.074215323 seconds)
    (272/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.063580641 seconds)
    (273/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.067094494 seconds)
    (274/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.091737709 seconds)
    (275/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.065316766 seconds)
    (276/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.16493839 seconds)
    (277/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.167298548 seconds)
    (278/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.07271861 seconds)
    (279/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.073350529 seconds)
    (280/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.132690419 seconds)
    (281/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.066013289 seconds)
    (282/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.150168873 seconds)
    (283/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.132109602 seconds)
    (284/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.06391582 seconds)
    (285/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.064805967 seconds)
    (286/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.073981599 seconds)
    (287/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.093951815 seconds)
    (288/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.064773175 seconds)
    (289/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.065493453 seconds)
    (290/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.077671802 seconds)
    (291/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.066034285 seconds)
    (292/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.081177837 seconds)
    (293/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.151633876 seconds)
    (294/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.065023044 seconds)
    (295/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.068111942 seconds)
    (296/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.06562312 seconds)
    (297/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.088806509 seconds)
    (298/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.065646955 seconds)
    (299/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.065478314 seconds)
    (300/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.06583393 seconds)
    (301/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.065046988 seconds)
    (302/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.064970659 seconds)
    (303/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.079615273 seconds)
    (304/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.064715064 seconds)
    (305/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.063572265 seconds)
    (306/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.064175241 seconds)
    (307/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.076103665 seconds)
    (308/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.064303882 seconds)
    (309/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.064849121 seconds)
    (310/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.064807267 seconds)
    (311/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.064744832 seconds)
    (312/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.066405124 seconds)
    (313/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.062779067 seconds)
    (314/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.06457522 seconds)
    (315/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.07071614 seconds)
    (316/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.090280129 seconds)
    (317/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.064269157 seconds)
    (318/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.089387606 seconds)
    (319/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.066660688 seconds)
    (320/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.065195144 seconds)
    (321/341) benchmarking ("sort", Int8, false)...
    done (took 0.329011831 seconds)
    (322/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.116716796 seconds)
    (323/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.077274253 seconds)
    (324/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.069139641 seconds)
    (325/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.065492411 seconds)
    (326/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.064726762 seconds)
    (327/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.06441281 seconds)
    (328/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.066621171 seconds)
    (329/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.069195226 seconds)
    (330/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.06591364 seconds)
    (331/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.090880448 seconds)
    (332/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.066070274 seconds)
    (333/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.066036459 seconds)
    (334/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.067135404 seconds)
    (335/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.067325279 seconds)
    (336/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.072471669 seconds)
    (337/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.067204138 seconds)
    (338/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.066120566 seconds)
    (339/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.066427716 seconds)
    (340/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.068519148 seconds)
    (341/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.066664819 seconds)
  done (took 36.6663092 seconds)
done (took 38.220748889 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.086871176 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.076425938 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.074866494 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.071591259 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.075548377 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.073650996 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.075535929 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.073348862 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.075338921 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.07572635 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.075935937 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.064096979 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.072439501 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.080306465 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.073457175 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.080049079 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.076979713 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.080404915 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.065343566 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.079438161 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.092916236 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.07654156 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.073259691 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.078697648 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.065017849 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.074517302 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.088648927 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.08393842 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.069549399 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.072564299 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.070697676 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.081835918 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.071546308 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.071348799 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.074917903 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.070464677 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.074321319 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.071948397 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.088843635 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.070420404 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.065163134 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.077116219 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.071955097 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.073070369 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.07360756 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.077247984 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.070585269 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.078570372 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.064641196 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.076175113 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.088410915 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070427883 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.072113623 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.073610029 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.070477393 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.074365181 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.071463037 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.076621603 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.069690169 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.076933082 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.076420521 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.073650818 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.064503709 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.073619947 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.072019831 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.072547588 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.063496211 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068811935 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.063612073 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.063155069 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.063069465 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.073695924 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.07198123 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.069724154 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.064078726 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.064590138 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.063778273 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.076910704 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.070749513 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.073974425 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.065223634 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.069900802 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.069280604 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.065123072 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070198719 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.076469722 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.063755005 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.064783621 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.063751367 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.079295466 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.071160015 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.064504906 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.076281611 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.06983087 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.0700612 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.064353623 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.063823234 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070393967 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.072909517 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.06489516 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.063770114 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070547982 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.070030434 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.073839141 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.065105086 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.069821354 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.07007242 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.063538953 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.073526154 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.072494643 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.073712933 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.077836465 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.073557087 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.076676447 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.065100751 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.063562471 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.074083592 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.065122571 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070169858 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.072423617 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.069844737 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.072849299 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.065007444 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.063625767 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069875382 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.070853438 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.065167815 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.064996719 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.064652872 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.07402455 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.071482938 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.063279497 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.064081681 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.07313845 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.073267461 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.063517368 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.06378859 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.073934041 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.064223321 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.0696909 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.067989867 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.071071168 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.063329471 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.06392186 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.063358319 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.063011806 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.063020492 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.07246363 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.069058169 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.064114931 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.072584845 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.219751874 seconds)
done (took 12.647078884 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.065301141 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.105711846 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.077342521 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.079684895 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.076945443 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.064964257 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.069215433 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.084594185 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.067916137 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.090003256 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.091620895 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.087615663 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.096407719 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.063933324 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.065211079 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.065277108 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.062235543 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.075293385 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.080501818 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.087162035 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.099113558 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.063626186 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.079453075 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.083356745 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077764854 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.081247868 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.064990986 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.065586431 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.068339269 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.084527262 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.09186725 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.065371181 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.066642189 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.083607327 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.080926556 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073756134 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.066211932 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.07235588 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.069523779 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.065215129 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.067359634 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.083445171 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.071937342 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.072558109 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.066901226 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.066845204 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.065700838 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.073174763 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.08229899 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.069536686 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.075655332 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.082469012 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.06583981 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.064560312 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.062821924 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.070868323 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.064369961 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.064971286 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.06452676 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.064108789 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.06460399 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.06660617 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.069247278 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.069772184 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.067209399 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.069904279 seconds)
  done (took 6.490821566 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.079990955 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.090416478 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.078294916 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.078929739 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.064083967 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.064524917 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.064302096 seconds)
  done (took 2.192479852 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.065040761 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.071638293 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.076404001 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.075972194 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.085501285 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.073280404 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.064652362 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.095998828 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.06403207 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.074912208 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.08152255 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.079784901 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.069641682 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.078505467 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.065356589 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.07642912 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.065292059 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.071395366 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.071569714 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.076949286 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.068410304 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.094019751 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.078034213 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.065315327 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.077573818 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.071828664 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.066582964 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.064814865 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.064846948 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.063795932 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.063773383 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.086057983 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.070121253 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.077488566 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065772106 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.064801583 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.069760621 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066588405 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.069825739 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.075595361 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.069378443 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.065665257 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.066189646 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.065837522 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.067513266 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.070126071 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.066695018 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.065078642 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.065427406 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.073428483 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.06449378 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.072133834 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.068054147 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.070807924 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.070816053 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.070265981 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.072571593 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.066210926 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.073438728 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.071726815 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065046782 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.078266873 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.077318919 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.069572837 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.077307622 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.074276578 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.072240446 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.069692494 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.065039369 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.064655648 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.065860562 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.077256679 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.068777324 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.067569097 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.06647034 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.0703735 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.069591808 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.081136117 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.081224417 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.079137877 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.068154985 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.065930831 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.069955407 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.081186959 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071101729 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065424303 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.06663719 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.065294579 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.070338601 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.06588504 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.070676598 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.065545901 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.072616379 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.068357257 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.068160097 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.073942981 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.065664817 seconds)
  done (took 8.557004047 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.067350652 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.06637184 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.065882271 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.067006211 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.067101837 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.066682328 seconds)
  done (took 2.110960427 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.087223297 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.064512064 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.078126399 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.066191107 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.088554797 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.073176046 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.07305164 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.068191745 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.082970039 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.076959153 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.072801941 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.075508146 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.075388263 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.066672049 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.070502871 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.065741394 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.070653426 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.067520161 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.074379514 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066621123 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.08066279 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.066690548 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066564144 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.076153042 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.067515159 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.065868435 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.065477617 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.074495427 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.074336541 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.06606114 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.065817872 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.067353885 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.073332334 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.066409462 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.070413286 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.072889025 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.064289708 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.070170887 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.066876622 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.067248336 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.072908392 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066472408 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.066657593 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.069842244 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.066511779 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.073105084 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.070061771 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.068226272 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.070511873 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.070110826 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.070193398 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.065224323 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.06739361 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.069957814 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.072881142 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066337941 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.070021621 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.07136207 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.067208812 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.073699958 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.064567901 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.068728807 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067035627 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.068514732 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.068995437 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.070271486 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.073249105 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.068249961 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.073961856 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.066244816 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.07174856 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.06587493 seconds)
  done (took 6.74040244 seconds)
done (took 27.745338508 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.53982515 seconds)
  done (took 2.192012168 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.885799856 seconds)
  done (took 2.578541573 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.100855777 seconds)
  done (took 9.797886272 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.342217058 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.404533457 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.731713448 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.130033521 seconds)
  done (took 3.342173341 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.749310808 seconds)
  done (took 2.456216006 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.226960386 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.217143031 seconds)
  done (took 2.160188268 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.331801432 seconds)
  done (took 2.024557694 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.146285531 seconds)
  done (took 2.838841104 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.229416281 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.159552963 seconds)
  done (took 2.097143994 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.530808135 seconds)
  done (took 2.226969611 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.248594749 seconds)
  done (took 5.948480997 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.229322469 seconds)
  done (took 1.971561378 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.225622394 seconds)
  done (took 1.929182883 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.004544152 seconds)
  done (took 3.698935 seconds)
done (took 46.965257731 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.081340557 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.083555551 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.084030641 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.07883106 seconds)
  done (took 1.999470804 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.07193286 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.06769132 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.070981478 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.071212754 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.069059338 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.070284711 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.070678568 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.067520618 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.069031335 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.068035147 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.066056068 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.067578482 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.070210182 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.068362982 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.070388076 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.071811501 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.067948139 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.067861191 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.069781967 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.067411102 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.070022654 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.068148178 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.066196336 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.067909667 seconds)
  done (took 3.351801794 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.075930258 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.069765263 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.073267726 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.069363353 seconds)
  done (took 1.996887722 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.074232269 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.073679432 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.082927704 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.08760487 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.073242358 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.074495453 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.081001726 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.081271527 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.063248275 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.084303215 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.065611034 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.064133286 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.064564571 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083150076 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.080338086 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.060261834 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.06115972 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.074960382 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.073876262 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.076691602 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.065930926 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.063163635 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.073673574 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.074487335 seconds)
  done (took 3.465712075 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.07986052 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.063447269 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.078681687 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.08865481 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.089589342 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.063303042 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.076218583 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.090468552 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.124571208 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.064048847 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.070375482 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.065037711 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.104979085 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.064504064 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.078393064 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.106014243 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.1094881 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.068263236 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.09860059 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.065317539 seconds)
  done (took 3.366647548 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.073733083 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.067201513 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.068284855 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.06345991 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.074563351 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.070647068 seconds)
  done (took 2.137423626 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.066258821 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.065801324 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.068163743 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.069761413 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.065959683 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.065754245 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.064874529 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.063842497 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.063592802 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.064437252 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.064493678 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.064959547 seconds)
  done (took 2.498137097 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.145553859 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.06679933 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.067534225 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.063739859 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.066034181 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.065226565 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.080607412 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.068036615 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.08279253 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.066440818 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.066086712 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.068853454 seconds)
  done (took 2.617802614 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101230964 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107583633 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141355237 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113458671 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113592589 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093558399 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.122688308 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.092250196 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.15561632 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.133242704 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113123777 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.090043414 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083627277 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.067017709 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096423105 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114846336 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134863713 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073149608 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112965641 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.164590773 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131457123 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.131411585 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144135857 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113239898 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087191422 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143704414 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094496158 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.098665534 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.120638741 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122350581 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116124284 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.094839155 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.068916241 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.068074758 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145277115 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.099825925 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116667738 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.08988146 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101798778 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.085741216 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104313692 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.066968995 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.082750123 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.110121862 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081597589 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127363088 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.085664598 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112081655 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079155461 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.133261601 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118313088 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094372552 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.081565771 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099723404 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.288860572 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109602667 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.131152194 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104518886 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080470977 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.116067615 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.099730535 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097207764 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103838008 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077692277 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.172159267 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086019745 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.108488931 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108348469 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.090449352 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.091643278 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104127825 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132380696 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.124878734 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.124717423 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.137510257 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.094887665 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12099174 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.100251127 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.128899306 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104608199 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.072399763 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.120387073 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.126408953 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.095438197 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.097788529 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.126788195 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.089150754 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07515087 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.095930024 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.11523151 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077826829 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.111909467 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08006375 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.1060201 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129351446 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094261761 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108752617 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11352631 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075563652 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150600965 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.105782259 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070691909 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.114317298 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109435155 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150790024 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090997338 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.073336031 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09539953 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.261128977 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.146810875 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104613337 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078218292 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106845384 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135929048 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092727301 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.165186403 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093195253 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135546904 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108354162 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084474535 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072330091 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.087446301 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108224859 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104220427 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10828991 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087147671 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.080770466 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08436409 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107669446 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089187017 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077788756 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.110331434 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.098342082 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.072096297 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085620809 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.077055199 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138442984 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.075552246 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133895227 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121932946 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.076317176 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103373071 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.095136252 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105221322 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.095709771 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113416145 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136363511 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.112646272 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086814002 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.090451799 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105423921 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.139849103 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.12377711 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089722986 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.073974827 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097208376 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109486568 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095191582 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122662622 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.097301641 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105331328 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099888517 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137215583 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.13978965 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095844146 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096583233 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101853459 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.281954736 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074683292 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152154792 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101479657 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115248718 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082457466 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136675744 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.111017409 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.086627254 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084777754 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097301461 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.100735981 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102958722 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.13893723 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.092657268 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.069803367 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089664124 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139826021 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073492005 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105946573 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.088149072 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.090458695 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114775557 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.093224754 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079077692 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.065793056 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12362833 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.154143663 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.068048727 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.111242622 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.108260117 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099313805 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.117234399 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.067415419 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11548221 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.134998189 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114725959 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137320794 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143584286 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112906136 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114976149 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.110869105 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103122883 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076825597 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.124591732 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.132565745 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093373937 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089427226 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132754741 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115414634 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.132264114 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.110621543 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108638534 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.100086728 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102453851 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.262388479 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.100166299 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140438368 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117635866 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.120732771 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083008567 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102164436 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113872473 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131321432 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07911054 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137174146 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.080528833 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114707493 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.074578088 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119464848 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.077038905 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.108250084 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.076876164 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.096804887 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.067388904 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.071252611 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.137595963 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.110991294 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103360919 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096514621 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.133166195 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.132431113 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.07852694 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104908348 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111719003 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098039932 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112600451 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.106326092 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.08615901 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09211816 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106052539 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.082363336 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.079653739 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.111625271 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091665469 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123265028 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.08123652 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072598741 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136984274 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101508084 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093032629 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07667495 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106646401 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.119026988 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090120274 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084678292 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111854626 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101458545 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138178599 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.08776784 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.09434026 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.119674275 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07722659 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.089107392 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.066606893 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.082036978 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.073973338 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.288247065 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.074624621 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11368335 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.06701126 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.126898985 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083932344 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.090114219 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099074806 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10772815 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12427413 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.092082322 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136192253 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086812186 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114407687 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104062357 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091454393 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085379022 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10188774 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100639041 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.121385656 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.095634602 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121734305 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142474177 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103713055 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.141433107 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091085472 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121795925 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107138873 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.124540218 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11214445 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144999978 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.13509088 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110098332 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110315819 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072959423 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.091890222 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10252101 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.108459863 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.170651778 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125133573 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.071989371 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.106596494 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09397588 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107610065 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103564045 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081653061 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143762254 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098790726 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.085666032 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111376952 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.088419071 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100588196 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073080481 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.091531303 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.096138495 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090419478 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.093371428 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.271290548 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12507052 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11055007 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.139965962 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.098626563 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.092384722 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.118316626 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110660043 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109880605 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085905018 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086441183 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136394088 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.1177295 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.125539913 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.09682247 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108655524 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.111099497 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099617739 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123940981 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107634685 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.125801831 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079915905 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.075272553 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.067764583 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.071454375 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.122095196 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108473766 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112172994 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098184404 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.072193628 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.103193716 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10669774 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071641713 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087523076 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092350693 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096777811 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.090439707 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105363063 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.111875596 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.09000026 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102224958 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09654759 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14290757 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.097167394 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087382909 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141807809 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.150063922 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088095574 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091023032 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.068840444 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.076697386 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110049841 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146205593 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147537926 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.074364124 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083478296 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.082407878 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.082955123 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.068753611 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.084232223 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.247059875 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102013927 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096886221 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.109500735 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101772648 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073238215 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100374928 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096135206 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.089111741 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.101002513 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114256378 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120492878 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.136332443 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107237054 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103721648 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073645852 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.077816889 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.073218341 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.076830413 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.098877197 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.076568826 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073731099 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13916529 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.088628144 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101172999 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105336888 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085660844 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072646037 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129988119 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.066965189 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131426327 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.069293958 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079555396 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.079926271 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076803604 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091501817 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135672342 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106675199 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11023038 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103606021 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10191265 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137060961 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152506798 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07720802 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.140401001 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073342884 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073002771 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.073609833 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112650189 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089659246 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115047912 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14121704 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089708861 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100137501 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074872743 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13980942 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.09550832 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100715224 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083663685 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.075673364 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136341616 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.076281788 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.238501173 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087668889 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.108425201 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.070407428 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.101821671 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082275563 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.07701929 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13787945 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.627443698 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087291499 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.073044954 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.092546741 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.137918466 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122990621 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091372911 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105170737 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.115078381 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09925732 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.094752781 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107291932 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.18438687 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073731741 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093042223 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.102850692 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097386201 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101347956 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.098219324 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.085494484 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.089273043 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.084017594 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076918429 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104632086 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086550055 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094228097 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.104090242 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.080618747 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.084488816 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.127887574 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.10098555 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.080003452 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086077512 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.103478967 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086748595 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098303641 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.06663636 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110638474 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.088626735 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114269106 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092044184 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.104464241 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123351349 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087166811 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134150375 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.103825539 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.119309803 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084924181 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.075773842 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122369934 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.085346906 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075040482 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142277417 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.090277051 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.089244969 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.264592276 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.095374553 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111080515 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11560957 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112110911 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097783384 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079013574 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100213456 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.102301452 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084763656 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078142302 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.073738603 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.075825153 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107191782 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084615415 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.083225303 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114416056 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.088638252 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.102953043 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.099824759 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.120120042 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080453174 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097796344 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105996687 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089474019 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106820147 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09747027 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.124594657 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.170528231 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122212292 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.125681853 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1308893 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.074506606 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.073709837 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.066388117 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112385649 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.077238698 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.086631161 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080554554 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131888156 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.081535063 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11214794 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.230052507 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.077843741 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.090896469 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09380486 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.069221841 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083344982 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107222892 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086956645 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079942111 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118980326 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083066782 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125573995 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108266783 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096796491 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091685412 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078584399 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110970577 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.10163763 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.125778299 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091903289 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.071772123 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108345697 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098016685 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.296417873 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.071113014 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078786826 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.12582066 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101035485 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128347192 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077461863 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144352603 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.138595348 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096840879 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130050647 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069431275 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080749203 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08586395 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.122507615 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083498072 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110144663 seconds)
  done (took 66.381530308 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.147436386 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.139499608 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.080187849 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.100916448 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.184701285 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.194374051 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.11750552 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.094157588 seconds)
  done (took 2.930731487 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.066059945 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.081880491 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.078398947 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.202088075 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.09317161 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.065112512 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.070466491 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.079306128 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.065568038 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.064460852 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.101083458 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.06688244 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.06695475 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.375898274 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.064456543 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.069651816 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.065421559 seconds)
  done (took 3.528395803 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.330044922 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.031568079 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.230201548 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.279973197 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.143212671 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.553434736 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.074387903 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.080413139 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.690889101 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.369018038 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.137350242 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.085777323 seconds)
  done (took 19.871460602 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.073705873 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.076177822 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.075611679 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.073113413 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.072307418 seconds)
  done (took 2.224296062 seconds)
done (took 118.091397215 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.081123329 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.168774791 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.065137283 seconds)
  done (took 2.111958337 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.079461164 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.078057754 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.078542221 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.075717437 seconds)
  done (took 2.17503593 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.072317323 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.074128252 seconds)
  done (took 2.006676385 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.215813341 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.174715261 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.088057096 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.079420615 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.077141044 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.078267056 seconds)
  done (took 2.107363996 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.069044561 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.068815949 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.069502324 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.069831633 seconds)
  done (took 2.137284759 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.0656703 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.064169159 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.066446324 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.069091656 seconds)
  done (took 2.125227734 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.082020064 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.083348541 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.113078945 seconds)
  done (took 2.138220612 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.080689465 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.080431441 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.075815026 seconds)
  done (took 2.101614314 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.10624918 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.094350021 seconds)
  done (took 2.061193163 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.077264831 seconds)
  done (took 1.939749261 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.087224368 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.095352705 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.136609068 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.103830515 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.142550666 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.122499716 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.07559504 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.077621255 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.073255885 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.078625009 seconds)
  done (took 2.851663394 seconds)
done (took 26.174895375 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.076435597 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.365468087 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.358702875 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.08479665 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.668684106 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.354391704 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.999837245 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.091383303 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.10199285 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067976299 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08600093 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.648733655 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.993356683 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.331168374 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.979042985 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.325016594 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.652008638 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068543261 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067648933 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.068090244 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.985383044 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.067733811 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068019465 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068213882 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.650071547 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.375026829 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069125087 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.324352519 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068221852 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071594017 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.356826297 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068975677 seconds)
  done (took 16.397824269 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.067871084 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.119943133 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.069987347 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.081703281 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.06787764 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.067376114 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.068804456 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.066473285 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.109468646 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.065897009 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08333668 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.06580851 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.069569645 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.067011599 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.08817617 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.065625979 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.068213395 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.066747658 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.065829786 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066803818 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.084160927 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.065347366 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066176397 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.06641157 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.065983298 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.078623279 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.066961266 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066263208 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.065776713 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.06961718 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.070216919 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067714322 seconds)
  done (took 4.205147626 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.118900633 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.124510476 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.0727873 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.10909885 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.118632541 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.069758449 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.152126702 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092727168 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.115137339 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068637933 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083193233 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066067191 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.102324186 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.069553319 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088793535 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068235746 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.070532518 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068808721 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067888339 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.068628146 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.087667 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.067875686 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068896364 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069130746 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069116878 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083864992 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069409472 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068114946 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068453534 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071504914 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072643632 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067350115 seconds)
  done (took 4.539249453 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.067169576 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.06944263 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.075498438 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.078586337 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.06426288 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.066608183 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.067272821 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.065001245 seconds)
  done (took 2.436422924 seconds)
done (took 29.457158255 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.076826104 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.065712948 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.068896092 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.084722693 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.071747479 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.068105481 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.062583736 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.072100474 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.068935855 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.069156184 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.070763746 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.064638555 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.067706202 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.063119403 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.07077833 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.064841487 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.070564006 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.069847422 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.068862846 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.069423588 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.065437256 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.068863955 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.072479232 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.06827811 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.068222926 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.067752954 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.07238633 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.069637275 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.064528317 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.066507476 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.065744908 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.079601307 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.070729586 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.069668941 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.064364715 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.065264635 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.069256234 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.067253592 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.071726671 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.074348272 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.066940334 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.073496933 seconds)
  done (took 4.758026118 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.085935681 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.09135558 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.08396421 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.079389418 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.104930393 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.07906511 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.088418361 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.077040652 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.075102117 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.087990573 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.071441895 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.076388733 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.078232638 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.072952612 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.076234693 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.071993948 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.076815981 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.070627337 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.075844083 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.077885238 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.090957034 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.070293578 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.078604538 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.079340525 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.072909212 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.07903884 seconds)
  done (took 3.967401128 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.070238322 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.086015093 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.089985012 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.139450841 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.109261652 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.081853942 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.08186221 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.092858139 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.101178856 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.067715958 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.071574452 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.094487497 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.095896475 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.07453961 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.105969296 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.084630763 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.078871003 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.067879277 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.072773046 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.101451307 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.090587842 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.086199228 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.100536313 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.087323083 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.066633329 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.077057978 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.074750598 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.083921135 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.075025977 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.079993739 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.071656262 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.073636085 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.067928949 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.079946409 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.071845749 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.065486177 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.089228931 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.080635093 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.082002297 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.106124362 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.077907212 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.069298544 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.097285649 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.132924083 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.067403538 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.069886248 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.071048069 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.080022532 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.069204359 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097777035 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.086587273 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.067263465 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.086219925 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.068700397 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.068814363 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.084358387 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.06868924 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.111575293 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.079561525 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.073087345 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.088394135 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.072282968 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.088855684 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.066401039 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.078713511 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.068151207 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.06837485 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.065504826 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.103136598 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.074630104 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.120170048 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.068285272 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.06476588 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.079412891 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.078950902 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.072518488 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.065012379 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.084833432 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.077900315 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.069067254 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.077378614 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.068906907 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.069240738 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.100774081 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.065449217 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.065160318 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.064763202 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.068618055 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.069270132 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.067451713 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.080723414 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.066594396 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.070096327 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.082752734 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.06724001 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.067306842 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.069480087 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.067994871 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.066117435 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.077918805 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.071070712 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.06899913 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.079503737 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.068439945 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.070206983 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.082404254 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.07661262 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.065638839 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.068104448 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.06832597 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.066892117 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.069963957 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.070182365 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.068757334 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.074314067 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.074556118 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.073457456 seconds)
  done (took 11.1079645 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.159976155 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.153796838 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.068349957 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.14810242 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.075806847 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.07192503 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.149696765 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.08795552 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.067990772 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.068473812 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.066973364 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.095443761 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.091224174 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.104937261 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.07224801 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.067852668 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.092792741 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.101058377 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.152075241 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.146687519 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.091253543 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.075782266 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.070054736 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.069455173 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.069040541 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.07657259 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.086157826 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.07648761 seconds)
  done (took 4.590732668 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.072865138 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.081497838 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.070416795 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.090864484 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.085908844 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.067910849 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.069713797 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.068757229 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.085161523 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.074580108 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.06816344 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.072799405 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.0714476 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.068427144 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.068366299 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.073968049 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.074425179 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.066544991 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.071397197 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.07213745 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.078569774 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.093522422 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.072092674 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.067653607 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.070336818 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.067675908 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.074884271 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.07739752 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.067419341 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.097752313 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.064697481 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.071744347 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.082457743 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.068675317 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.06710286 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.068194237 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.067180051 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.067664572 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.067902681 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.065494418 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.065238443 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.073374818 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.065881084 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.073368735 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.084656773 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.075633502 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.068912259 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.070323711 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.070212032 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.064411669 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.070701574 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.070534332 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.070325328 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.076306215 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.071243427 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.070064078 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.06912375 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.098629341 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.07379336 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.067356866 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.066785132 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.065526782 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.069220294 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.075660904 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.084112122 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.069079988 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.066019531 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.067497089 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.072574952 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.081773561 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.067125633 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.072948873 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.064715801 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.067777005 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.069732102 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.070691084 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.069143602 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.065816056 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.067295049 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.066272951 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.067033294 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.067596586 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.067055561 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.07007513 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.065331292 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.065946013 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.068028918 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.068766808 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.073717559 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.066420801 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.070569406 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.068806571 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.066186701 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.070210172 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.073459049 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.070528683 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.087898028 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.07620204 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.068181589 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.065756472 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.082096963 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.069396583 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.066631855 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.072979579 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.070593354 seconds)
  done (took 9.471546872 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.088059885 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.067043343 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.085582956 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.092920589 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.075994854 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.071229684 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.080221137 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.0666808 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.081799851 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.064760337 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.074989942 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.063884594 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.079646788 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.074869658 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.067347009 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.076741052 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.068622366 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.086371473 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.080221301 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.064295924 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.074926608 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.078012341 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.078140776 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.084232051 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.083934048 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.084575636 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.079561874 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.070008654 seconds)
  done (took 4.082685101 seconds)
done (took 39.852711224 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.955170261 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.131207923 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.963213247 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.211427081 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.210486103 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.088158656 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.078464306 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.953692034 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.14583358 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.9911456 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.278965562 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.33453135 seconds)
done (took 69.293697576 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.034564996 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.097447726 seconds)
    (2/2) benchmarking "String"...
    done (took 2.166550979 seconds)
  done (took 6.152521596 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.551578409 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.95118293 seconds)
    (3/3) benchmarking "different"...
    done (took 1.999569868 seconds)
  done (took 8.389738604 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.064989935 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.58904383 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.195151707 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.949767362 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.957078206 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.301680535 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.773516611 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.410780232 seconds)
  done (took 33.067392132 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.181169538 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.169739937 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.703793164 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.753172042 seconds)
  done (took 16.747582988 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.556247362 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.213479745 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.213084576 seconds)
    (4/4) benchmarking "different"...
    done (took 2.205968364 seconds)
  done (took 11.142814268 seconds)
done (took 87.588937217 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.953888732 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.020433746 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.968695693 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.110667084 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.990900287 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.989557056 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.967998917 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.995698056 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.955052076 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.957371809 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.387096364 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.953327077 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.962825807 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.992687488 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.954357665 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.997601817 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.014131719 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.956958899 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.000123466 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.56886636 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.473501858 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.967157621 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.959338931 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.004705461 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.095642851 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.95646417 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.013986529 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.968783857 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.569071021 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.962582885 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.121877734 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.958109385 seconds)
  done (took 209.639711369 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.952160954 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.904012122 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.945005061 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.964845412 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.387321357 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.144905709 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.094980223 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.433728391 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.956542568 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.966992213 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.102472368 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.953917698 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.120103416 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.902254234 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.945268845 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.981882269 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.105985751 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.166147112 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.94631626 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.13568573 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.966350325 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.960198545 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.893350765 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.085980818 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.989942391 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.000911188 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.973439218 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.962118543 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.134590017 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.050039523 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.98933103 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.988926194 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.147183361 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.813703234 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.939997993 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.956185854 seconds)
  done (took 175.855497448 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.126171136 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.943457969 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.001700954 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.074490842 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.710611119 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.67594738 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.938998504 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.934361509 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.936170206 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.940781187 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.934636504 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.00050792 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.364485362 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.95177723 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.927877764 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.928488351 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.141928848 seconds)
    (17/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.935425142 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.931888264 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.932637441 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.931874573 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.996573975 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.305777318 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.068767081 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.935385055 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.942356797 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.066932503 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.942034177 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.932590653 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.066975773 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.936858683 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.010061212 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.066624146 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.944696719 seconds)
    (34/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.931438805 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.010034659 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.93985186 seconds)
    (37/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.930862213 seconds)
    (38/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.427887743 seconds)
    (39/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.934383923 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.932567033 seconds)
    (41/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.934438365 seconds)
    (42/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.934419514 seconds)
    (43/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.993810572 seconds)
    (44/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.930961102 seconds)
    (45/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.044781264 seconds)
    (46/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.024128805 seconds)
    (47/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.931939706 seconds)
    (48/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.944245782 seconds)
    (49/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.995316513 seconds)
    (50/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.611446612 seconds)
    (51/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.934101986 seconds)
    (52/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.933485409 seconds)
    (53/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.930635796 seconds)
    (54/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.931590068 seconds)
    (55/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.934392541 seconds)
    (56/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.392190837 seconds)
    (57/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.93493388 seconds)
    (58/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.957213565 seconds)
    (59/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.553370341 seconds)
    (60/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.93233606 seconds)
    (61/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.92390655 seconds)
    (62/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.925397176 seconds)
    (63/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.924255403 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.927001564 seconds)
    (65/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.921972726 seconds)
    (66/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.963163362 seconds)
    (67/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.735503298 seconds)
    (68/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.049294737 seconds)
    (69/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.334249599 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.731114742 seconds)
    (71/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.923818007 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.153025543 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.98118774 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.922405156 seconds)
    (75/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.994143735 seconds)
    (76/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.919588277 seconds)
    (77/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.917734911 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.920030233 seconds)
    (79/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.918619176 seconds)
    (80/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.011150609 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.001994096 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.915679613 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.050466423 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.920515223 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.916745195 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.060592333 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.110605357 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.911650319 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.922296947 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.964099043 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.908588958 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.909031365 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.917223983 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.998164968 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.917363302 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.911582438 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.908890218 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.01020707 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.913936783 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.152952883 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.13039491 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.978689564 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.150258839 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.169192488 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.910689298 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.907046378 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.930141057 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.908346067 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.91045946 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.917877212 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.911918527 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.911036233 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.906617987 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.911915206 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.905583115 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.911601721 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.925722427 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.903670737 seconds)
  done (took 425.75983533 seconds)
done (took 815.321549529 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.532607584 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.708433969 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.504282078 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.598603675 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.512624564 seconds)
  done (took 14.699993678 seconds)
done (took 16.540014135 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.925501168 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.921285263 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.909643906 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.931062479 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.922876902 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.922337585 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.95315346 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.944154522 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.941314202 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.926482445 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.928817058 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.922599677 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.926038872 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.94136112 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.932035627 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.930241941 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.921607135 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.91279831 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.932786727 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.921623537 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.924770185 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.9163347 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.923984624 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.927241542 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.933057674 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.924953504 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.918221708 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.927500645 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.925012755 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.924559595 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.960964777 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.928225966 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.952879302 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.931595856 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.929660351 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.937083579 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.919941414 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.949452026 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.923686416 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.962103484 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.932345121 seconds)
  done (took 80.984524765 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.912769966 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.051444958 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.123391431 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.930307435 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.914451481 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.14976279 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.96947074 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.041615872 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.043513951 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.134765448 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.138611812 seconds)
  done (took 24.251789254 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.914506686 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.049692821 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.125269269 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.947400479 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.934157289 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.131618903 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.973466987 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.048230833 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.052399707 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.128091547 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.140678862 seconds)
  done (took 24.295542923 seconds)
done (took 131.377768569 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.292162032 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.939668926 seconds)
  done (took 6.071994823 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.88747602 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.928277972 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.055101115 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.907565659 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.908689245 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.909538205 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.887303619 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.908793191 seconds)
  done (took 17.224913531 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.909864078 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.908782904 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.909434369 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.906675257 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.906987419 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.907203689 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.909686986 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.908868704 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.909208109 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.908760784 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.907333939 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.908304096 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.910542819 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.909006328 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.908430556 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.909623086 seconds)
  done (took 32.38094454 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.908784657 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.908359279 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.909267941 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.910149271 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.913582803 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.908913205 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.912553154 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.908828464 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.909903538 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.909454187 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.908601093 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.910177759 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.90837078 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.911360966 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.910715214 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.911196161 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.910054813 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.910099731 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.91314015 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.912324979 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.911240509 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.908445173 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.913958201 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.911176087 seconds)
  done (took 47.693089348 seconds)
done (took 105.221063702 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.168596165 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.771287254 seconds)
  done (took 8.78265861 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.917908389 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.920942031 seconds)
  done (took 5.766043552 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.917186294 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.914553917 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.91915579 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.919687558 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.916840363 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.917644036 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.915211991 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.91599915 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.917274 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.917563904 seconds)
  done (took 21.020592935 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.916989014 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.916612345 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.921316283 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.914752998 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.916069653 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.916601327 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.91533529 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.916669753 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.918457149 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.918273632 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.917294822 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.915746767 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.91926543 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.918928599 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.916397343 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.920691409 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.914740553 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.915949299 seconds)
  done (took 36.360401869 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.917935581 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.918455561 seconds)
  done (took 5.687617122 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.918909433 seconds)
    (2/7) benchmarking "second"...
    done (took 1.91773043 seconds)
    (3/7) benchmarking "month"...
    done (took 1.919632203 seconds)
    (4/7) benchmarking "year"...
    done (took 1.917045474 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.919416229 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.91427724 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.916466513 seconds)
  done (took 15.276010567 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.91707439 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.091998382 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.144267312 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.509851712 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.919014361 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.922391319 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.80480695 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.886175864 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.924573897 seconds)
  done (took 20.971223792 seconds)
done (took 115.706651749 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.768048361 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.921028639 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.21885754 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.001037404 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.993714349 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.21651328 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.943740953 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.475379472 seconds)
done (took 43.357140859 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.044698256 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.917896071 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.947866816 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.947621126 seconds)
  done (took 22.665371746 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.914038194 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.233033708 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.940887671 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.899710155 seconds)
  done (took 22.844802794 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.29634926 seconds)
    (2/2) benchmarking "read"...
    done (took 2.273698584 seconds)
  done (took 6.433248462 seconds)
done (took 60.841895611 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.921906883 seconds)
    (2/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.921351522 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.917967758 seconds)
    (4/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.917555682 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 1.917025347 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.922785983 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 1.918682228 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.920146844 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.923895586 seconds)
    (10/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.92084779 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.916860652 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 1.920880613 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 1.919045951 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.922575172 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.921915468 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.918283258 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.925238515 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.923472887 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.918863689 seconds)
    (20/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.9184689 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.923144007 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.924916827 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.918603219 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.917577777 seconds)
  done (took 47.943862272 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.919481893 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.924972829 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.918578659 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.919201876 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.91904344 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.921987885 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.923622667 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.9226918 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.919805822 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.92126216 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.920854361 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.920684415 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.925263459 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.923624501 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.919702911 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.921451088 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.923818458 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.924991174 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.918881589 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.922950937 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.922066396 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.918411843 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.925344623 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.92146853 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.922140686 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.919747788 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.921926727 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.926412179 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.9215934 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.924791273 seconds)
  done (took 59.510933627 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.922594823 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.924761044 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.924782633 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.923678939 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.920425759 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.922302815 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.924242601 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.92650859 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.922151758 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.916528829 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.912810862 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.921309933 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.924230874 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.919987778 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.921967154 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.921379823 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.920035541 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.925833622 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.922915267 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.893312118 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.921279273 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.895775785 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.91640693 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.922048279 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.921286924 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.918233478 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.923893586 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.923433427 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.920365415 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.920579784 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.920796903 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.923402968 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.920328062 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.927655282 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.920472287 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.924138532 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.923000653 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.926187119 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.937212489 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.922853438 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.924016598 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.919881039 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.923924022 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.923877371 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.923695279 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.920866699 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.922307566 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.920232084 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.921756091 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.919548354 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.921196806 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.921312866 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.922409009 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.922485052 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.907489307 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.909319347 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.922493223 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.921883092 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.920959057 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.927517336 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.92107051 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.923661235 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.922584767 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.925361008 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.92638776 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.922882646 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.922011449 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.921833596 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.923010357 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.92375092 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.922144851 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.923570045 seconds)
  done (took 140.19318704 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.921440583 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.921151572 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.924367313 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.92195873 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.921534588 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.922981905 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.92156084 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.924699698 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.923281133 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.922350853 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.923540818 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.922214727 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.927616081 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.923207997 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.923029102 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.890485379 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.922745275 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.928410526 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.924809761 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.923422387 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.92365018 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.921944939 seconds)
  done (took 44.136613225 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.925912407 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.923191772 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.925303483 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.92257052 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.928664968 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.921926345 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.922917286 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.924711382 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.923310137 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.924210468 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.914667386 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.904422767 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.923770407 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.918505281 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.915614674 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.92430416 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.910927046 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.923130197 seconds)
  done (took 36.442015186 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.923093075 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.924401137 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.924281239 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.924645015 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.924860055 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.925045448 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.927889771 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.925839208 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.923765457 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.924500492 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.926709302 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.928364217 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.924702092 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.923164062 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.926044185 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.924272736 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.92678241 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.932439267 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.924233433 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.925313134 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.925236046 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.924377735 seconds)
  done (took 44.216691259 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.923970216 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.924977742 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.923983498 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.927869317 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.926248906 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.925442725 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.926874557 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.926876008 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.925890878 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.927893574 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.929071412 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.926090463 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.9244227 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.927328598 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.931140196 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.924790405 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.926156936 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.927910056 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.92701755 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.925451727 seconds)
  done (took 40.389998128 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.927839533 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.928014077 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.926396135 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.925787842 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.926570713 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.926819661 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.928797454 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.927923822 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.926537342 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.927247955 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.928264511 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.927752617 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.927433969 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.926139745 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.933868943 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.925942002 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.926876244 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.926916461 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.92795524 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.935176378 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.926281858 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.928648447 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.927930746 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.929666545 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.928097991 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.929690787 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.92687847 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.928504705 seconds)
  done (took 55.844755786 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.927107865 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.928220282 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.927537908 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.929046103 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.92671449 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.928286584 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.928943754 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.929528703 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.927583426 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.926574583 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.927706736 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.931536217 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.928991068 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.930191016 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.928286794 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.929474171 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.931036671 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.928854198 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.930065693 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.9283154 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.927780394 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.928492361 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.929785467 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.919788272 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.927620411 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.928900006 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.929790715 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.928723976 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.922274661 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.927376816 seconds)
  done (took 59.704871162 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.946730652 seconds)
    (2/2) benchmarking "in"...
    done (took 1.95037411 seconds)
  done (took 5.75721699 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.929600576 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.928825868 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.928573501 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.935700976 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.921819214 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.928739472 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.916544878 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.92963204 seconds)
  done (took 17.257412956 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.92833783 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.91847882 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.92179619 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.929343604 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.929178157 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.937233389 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.933491101 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.922081446 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.92322061 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.904524821 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.936746016 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.933179467 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.937208488 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.936262729 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.930610534 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.931714799 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.931009384 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.934935993 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.930445787 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.929819795 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.93623836 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.932834316 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.931493115 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.933042742 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.931551713 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.933973681 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.941200806 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.932224405 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.934839425 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.931442451 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.938995906 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.932198377 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.928868702 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.931744044 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.931988006 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.929270017 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.944728388 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.930409754 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.931256157 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.931586574 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.934016525 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.936553405 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.93564358 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.939245845 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.933404545 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.932179313 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.931800467 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.932220425 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.931430478 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.936546048 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.940459827 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.937606583 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.931119665 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.931480668 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.935483467 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.931452622 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.933004304 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.935657265 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.937304116 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.937910334 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.936184443 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.953219094 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.941410363 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.932024244 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.934613481 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.933560089 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 1.953885931 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.936718165 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.93298746 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.931659704 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.940344085 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.933475393 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.933379467 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.931718059 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.945485494 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.941283952 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.934903605 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.935779798 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.931936526 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.932829107 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.935247872 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.935955244 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.938878782 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.933242126 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.94358051 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 1.957680124 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.932272224 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.935118808 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.935001968 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.933926428 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.936925145 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.937417172 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.933649483 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.931159541 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.934144698 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.935789438 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.934274127 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.933430322 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.936745047 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.942377568 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.934125966 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.933084146 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.934917611 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.941102441 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.931856878 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.935026722 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.933617267 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.934527137 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.946312047 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.933836893 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.935502516 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.933108791 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.934355001 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.942421047 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.933972352 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.940089377 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.942874115 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.943002797 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.937214698 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.939139903 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.938862896 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.937613396 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.943643591 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 1.963506117 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.934020419 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.925869853 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.936038287 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.947743461 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.940805873 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.93513139 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.938318318 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.933869731 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.936152035 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.937548531 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.936255326 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.934767359 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.934624394 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.935673965 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.934340763 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.936888518 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.935682474 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.937747917 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.940048948 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.939251737 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.939535607 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.938595466 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.938953475 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.942631858 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.9386598 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.938189139 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.937828945 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.916075806 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.929903169 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.936603527 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.937210266 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.938376605 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.937354301 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.936644502 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.937487276 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.937699363 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.939001539 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.939348842 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.938277199 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.93821819 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.937975502 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.940239045 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.938993293 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.937194661 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.93624457 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.940180246 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.941853853 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.937955935 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.944286143 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.938301321 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.936424761 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.9378058 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.936964261 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.939605678 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.941607624 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.949503967 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.94104422 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.948507918 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.938343178 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.945646575 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.938539535 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.939340631 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.939367448 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.940078808 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.938369877 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.938244326 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.939216369 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.943671539 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.960012143 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.94779421 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.942829366 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.938128669 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.945052246 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.94165727 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.945297566 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.93929539 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.941611579 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.942674994 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.940712549 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.938290428 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.940173747 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.942938599 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.941358485 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.940150069 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.945058834 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.940155469 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.940014553 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.943708753 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.940739341 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.942343413 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.942690921 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.941584764 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.93816146 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.941236515 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.948618967 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.944653486 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.939898949 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.941639623 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.943223072 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.939307454 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.942843235 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.943988424 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.945202733 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.938841255 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.943626891 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.949255897 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.943326309 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.941653834 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.940530852 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.944321674 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.941251116 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.942009391 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.943974963 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.948315382 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.944091847 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.94264384 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.9482224 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.94302145 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.942440386 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.941271785 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.943380539 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.945481781 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.94374713 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.942617949 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.941744518 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.94996956 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.941326424 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.942530936 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.943049779 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.945002003 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.944136217 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.944865093 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.94240477 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.945859069 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.950007223 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.947064202 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.943130403 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.946628177 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.944091492 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.943719415 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.944771938 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.94364831 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.956063893 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.95052876 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.943181974 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.94169406 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.943998624 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.943540959 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.944409808 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.942025556 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.952314701 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.943906997 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.943778385 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.94690568 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.944070576 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.945497908 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.950359445 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.944410017 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.946898277 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.944712581 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.945871646 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.943411482 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.942864972 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.946974793 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.943960687 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.944458452 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.936898086 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.942015963 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.934877467 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.943759368 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.952601003 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.944661087 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.943877745 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.936058262 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.929247941 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.94308728 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.944569092 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.94439188 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.946130055 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.946385367 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.944553675 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.944516711 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.944091985 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.947417562 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 1.952827529 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.947206644 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.952847912 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.947186084 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.955354458 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.946312077 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.943479264 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.944078812 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.948048563 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.951742384 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.943405833 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.943340362 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.92241292 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.94466886 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.946449606 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.94841024 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.945919104 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.944693382 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.944323108 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.947172647 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.950062379 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.949813002 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.948199 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.947387517 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.947038498 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.945109442 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.950978606 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.946781085 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.946827069 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.947276016 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.947709764 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.946843711 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.946432187 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.948281264 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.946825999 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.940091696 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.938506101 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.952680885 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.940418214 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.949155881 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.951324822 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.946891808 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.956054279 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.946771393 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.948573593 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.9482206 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.948922783 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.949598443 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.947889766 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.948762137 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.947683911 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.945393436 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.948872279 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 1.958391081 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.95152033 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.951988139 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.950127683 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.949343948 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.949915654 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.956991032 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 1.972074128 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.948221057 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.949842762 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.950936102 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.957378468 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.947975563 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.957332539 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.951569495 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.958212112 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.948351966 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.945881881 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.952436446 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.959166714 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.948549901 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.947942469 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.948345941 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.952514645 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.951529051 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.949202085 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.953071033 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.953084472 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.951958529 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 1.959363078 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.951694177 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.952149226 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.951323804 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.948985758 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.950524726 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.950042548 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.951943627 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.953745665 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.948841183 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.950070248 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.951331525 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.954071319 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.951551857 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.956571321 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 1.954542819 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.948883674 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.951868583 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.950970105 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.951644265 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.951798735 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.950796003 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.949787263 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.953334239 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.951332053 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.950601517 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.955239775 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 1.958825625 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.953621592 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.950489286 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.949606992 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.954091795 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.951344027 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.953309126 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.9528864 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 1.959891685 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.954984659 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 1.961181703 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 1.959199099 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.951706277 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.955639909 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.959021843 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 1.960629777 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.953005651 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.952007454 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.949964605 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.95439732 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.953751105 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.95406821 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.95127068 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.951865066 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 1.955601343 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.951564332 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.953043196 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.940298393 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.952312585 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.943414772 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.95639249 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 1.944620613 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.951749022 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.940348443 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.951737225 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.953031041 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 1.953622535 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.957605023 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.952124032 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.953207218 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 1.955691862 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.940800263 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 1.957905118 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.954607547 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.951930437 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 1.955783092 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.952200184 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.95359103 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.952639597 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.954187853 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.956135166 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 1.950483082 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 1.95212116 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.95356127 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.955198283 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.955237811 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 1.959177049 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.954426614 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.951481601 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.95461936 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.954459555 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.961185068 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.940338334 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.955571749 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 1.956011364 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.9573772 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 1.958548435 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 1.956512617 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.957292577 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.95438508 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.957366862 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.955615246 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.958220103 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 1.963186992 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 1.958702463 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 1.956902644 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 1.963313927 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.961128376 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 1.955072752 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.955278552 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.953774153 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.958847019 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.95554769 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 1.940149255 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.932220673 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 1.942089177 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.938023646 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.956990926 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.955849622 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 1.95797912 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.955314816 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.955878138 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 1.957456681 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.96528252 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 1.964345736 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.95780508 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 1.957124422 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.957395465 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 1.958844633 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 1.968027772 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.957951191 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.95600387 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.955986788 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.957584385 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 1.958426987 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 1.963338204 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 1.963028958 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 1.961193154 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.956155252 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 1.962191968 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 1.973109178 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 1.96007786 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.967669199 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.988332636 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 1.960963095 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.959506316 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.958805153 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 1.95895125 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.956184166 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 1.960100982 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.958027462 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 1.964763181 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.958081256 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.957544345 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.966656705 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.958577057 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.958501251 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.957930141 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.959733932 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 1.962512263 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.957737754 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 1.964074844 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.956499475 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.958806273 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 1.957737288 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 1.960947469 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.958996735 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.957321133 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.956528145 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.961811405 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.956944256 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.959805548 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 1.966068405 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.958256684 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 1.960105062 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.973304562 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 1.969992917 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.958557861 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.958544267 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.95930594 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 1.96664409 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 1.962829917 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.960450445 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.961200167 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 1.968383498 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 1.96159758 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 1.966126581 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 1.960806128 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 1.960868093 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.961177682 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.95917355 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.961028383 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 1.973449976 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 1.969725359 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 1.964405931 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.961076383 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 1.967793677 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.96201591 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 1.966780918 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 1.967289579 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.961112379 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 1.96158622 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.947656294 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.960841643 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.945152349 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.959656899 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 1.962934564 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 1.966129411 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.960474067 seconds)
  done (took 1161.996633305 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.960190574 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.961821418 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.959505816 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.959942025 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.959987304 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.960501287 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.962788949 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.958659299 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.960056774 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.960126778 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.961137199 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.960041016 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.960664045 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.962247122 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.960383767 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.960109013 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.960539528 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.960910782 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.961440891 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.962262095 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.961662131 seconds)
  done (took 43.070817721 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.960333932 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.961022506 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.961343381 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.959923303 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.960896943 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.96465355 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.959500195 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.963229684 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.96081117 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.961657812 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.961790728 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.963343946 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.962872244 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.96082554 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.962382004 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.963200317 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.962767467 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.963203419 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.964111103 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.962808157 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.962031822 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.961540257 seconds)
  done (took 45.060101376 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.964191537 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.962484796 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 1.964074244 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.9629583 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.962278213 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.964111822 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.964238657 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 1.964524614 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 1.962334918 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.964503739 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 1.970094725 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 1.969858666 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.96267076 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 1.965789828 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.963891053 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.965898536 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.108244157 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.961114626 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.963923953 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.96430146 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.964067602 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 1.970733007 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.965091412 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.965311512 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.965005054 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.962294477 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.966255328 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.963013032 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.963779538 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 1.96504338 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 1.968180955 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.962998933 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 1.96363039 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 1.967685492 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 1.965611648 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.966891885 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 1.969874016 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.964198986 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.96372439 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.966088542 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 1.975318554 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 1.991849028 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.963619107 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.964993958 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 1.971487426 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.965672497 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.967099618 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 1.968923733 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 1.971645751 seconds)
  done (took 98.377576873 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.963477992 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.962657426 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.965538095 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.963815984 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.963280968 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.964788871 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.965068842 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.966634763 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.964918474 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.965886965 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.966027348 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.966494812 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.96336074 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.96424104 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.962771904 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.964401752 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.965452168 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.968446689 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.965730124 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.966829655 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.967372883 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.966087147 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.96487701 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.965443945 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.964780314 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.96536184 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.966036242 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.965921821 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.96689782 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.965979919 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.966479005 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.966655996 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.966605938 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.96617801 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.970767009 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.966070508 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.966398961 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.965903722 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.965915105 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.966945932 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.964678667 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.965470736 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.966057015 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.96632832 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.968886818 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.966742933 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.966185249 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.968386058 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.966255356 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.967229006 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.965139496 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.965627614 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.969191033 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.928894988 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.967735742 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.967204091 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.965451419 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.967245549 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.968680088 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.966586691 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.966552899 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.96811288 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.967976244 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.967279113 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.96704323 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.969737543 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.96836185 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.970367974 seconds)
  done (took 135.566700118 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.966358904 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.96802744 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.967004224 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.965722363 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.967158238 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.970476605 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.966636392 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.969332348 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.967882356 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.967541298 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.970939539 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.966275935 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.967960839 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.969953149 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.968607966 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.967364761 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.96948321 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.96624432 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.971976294 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.967202471 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.970097554 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.968086691 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.971395644 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.968423172 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.968243138 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.970977483 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.969520789 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.970709788 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.970311984 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.969619299 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.970858356 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.971314865 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.969760695 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.967268074 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.968353788 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.970682247 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.968280813 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.969085111 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.97175329 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.970361777 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.970271063 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.972443172 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.970554501 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.970853247 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.97033074 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.969513008 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.970913384 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.97012129 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.968509666 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.96873725 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.970992743 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.969957035 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.968864427 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.971052796 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.969282137 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.972129066 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.970236017 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.970127874 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.972004314 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.971920619 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.970821941 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.971822112 seconds)
  done (took 124.009981518 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.97120827 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.973178697 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.969250305 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.968464472 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.97018901 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.970392279 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.971229939 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.972844438 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.971683792 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.9712896 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.971036021 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.971897889 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.972255321 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.970408459 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.971428476 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.971815288 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.973070749 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.971380707 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.972173631 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.96983419 seconds)
  done (took 41.326507693 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.971139179 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.972366241 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.972098465 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.97312539 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.971175285 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.971990377 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.971393705 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.973191604 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.970034164 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.972335751 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.971560787 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.971498434 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.971251403 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.970938302 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.973550819 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.971758083 seconds)
  done (took 33.452093358 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.971476807 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.970943944 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.971855991 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.971261624 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.971412703 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.971711621 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.973848485 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.972173404 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.973470916 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.970851766 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.972522498 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.973961374 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.971578608 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.971806989 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.974823384 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.972577066 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.972228222 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.970662754 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.971121182 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.972031225 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.972016709 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.971874275 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.971564192 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.971590193 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.970458151 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.9740664 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.973456468 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.970491077 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.970866256 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.974672921 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.972537463 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.972177928 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.972797348 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.973646623 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.972177793 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.972927737 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.973663271 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.974052347 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.97204386 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.973339101 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.974780079 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.971900926 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.971782974 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.973078355 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.973289355 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.975056894 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.973671432 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.973116571 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.973269887 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.974882201 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.973569084 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.965415957 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.952687161 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.971721791 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.974917749 seconds)
  done (took 110.370024509 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.972759938 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.976362257 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.97444491 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.972181125 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.973970879 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.973761291 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.9716144 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.975197043 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.975859677 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.974869033 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.97526606 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.972828186 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.975775922 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.974415666 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.975012762 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.97397977 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.975620925 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.974518866 seconds)
  done (took 37.443934067 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.975527896 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.976128725 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.974213566 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.97460774 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.973351514 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.974024023 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.976740417 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.975545552 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.975678888 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.977733208 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.975567736 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.975511031 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.975841591 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.97448627 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.974972311 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.975605623 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.973590253 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.975727481 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.976614126 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.976544404 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.975597453 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.977264977 seconds)
  done (took 45.366450797 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 1.976701527 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 1.974779146 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 1.991594574 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 1.997887481 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 1.997302851 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.012013757 seconds)
  done (took 13.856178644 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.96265745 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.95786798 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.960254614 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.97651636 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.976342975 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.977902075 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.977737066 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.975999094 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.977084966 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.975903238 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.976796688 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.976943735 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.975781934 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.977643371 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.976411353 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.978039351 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.978651041 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.976892474 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.977274104 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.976035547 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.97706561 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.979101134 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.976765079 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.97814089 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.976871357 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.976414781 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.976927203 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.978981446 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.978005075 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.97766226 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.978884933 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.979071937 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.97622887 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.964614265 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.977574511 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.97929597 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.97688632 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.977005321 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.97597612 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.977136738 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.976645194 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.977216573 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.976190766 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.97762081 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.978884554 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.979596373 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.977338587 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.965842559 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.978183054 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.976278896 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.978397425 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.964931396 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.976268401 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.978037588 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.977735586 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.97862523 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.977543881 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.978637318 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.980731891 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.977918207 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.978255686 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.979381819 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.978265477 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.978225111 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.976613235 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.97788517 seconds)
  done (took 132.33992182 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.978982082 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.97802909 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.978532947 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.978815614 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.979762854 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.978063928 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.977815807 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.978295894 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.977064728 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.979656331 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.978575759 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.978715044 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.9787553 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.980481611 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.978276152 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.97898077 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.979082629 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.97826206 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.976872522 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.98049275 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.978764683 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.979112702 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.979244146 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.977788919 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.980691857 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.979052443 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.978555849 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.979062407 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.977518257 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.979475961 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.979752232 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.980824861 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.980379599 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.97762214 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.978788493 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.978327863 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.978531648 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.979107753 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.978741147 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.979000344 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.979143985 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.97920432 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.979401644 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.979045986 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.978472491 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.979127503 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.978640385 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.979832963 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.980039724 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.978876225 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.979706967 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.981437185 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.980929512 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.98024599 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.981101885 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.979432624 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.981648092 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.980592489 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.980522718 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.981247961 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.97933857 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.968504276 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.980893405 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.979635407 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.979098931 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.980090811 seconds)
  done (took 132.505650757 seconds)
done (took 2707.99731714 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.042752375 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.047664762 seconds)
  done (took 16.001127258 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.142338583 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.020862284 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.161995624 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.091505079 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 6.983265643 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 6.982297042 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 1.975113406 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 1.978624331 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.068881457 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 1.97780102 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 6.997123265 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 1.977506417 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 1.979401859 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 1.98180832 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 1.979148564 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 1.976664944 seconds)
  done (took 54.19087658 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.980366736 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 1.983818483 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 1.977731521 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 1.978553167 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 1.98847689 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.05138035 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.001879617 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.980767612 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.992896882 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.012626194 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.996200871 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 1.985479441 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 1.984797796 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 1.986242681 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.066235301 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.021434052 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.038507798 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.051219943 seconds)
  done (took 37.984267194 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.056799937 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 6.982120126 seconds)
  done (took 10.952856267 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.983886622 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.979167362 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.000017138 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.994715125 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.97226605 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.997394011 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.999803 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.997376882 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.972226056 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.993247445 seconds)
  done (took 71.800455216 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.979802268 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.977898781 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.276219276 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 1.984326398 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 1.968212099 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.985765477 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.96436641 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.987350089 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.979240857 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.974615087 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 1.985298097 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.279145088 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 1.988033248 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.976808002 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.321338265 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 1.98755525 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 1.981950907 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.006848522 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.007816495 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.980844561 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 1.983428463 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 1.982003579 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.13811609 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.659573686 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.976539195 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.979942971 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 1.983551563 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.9735231 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.974727026 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.977635924 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 1.978603786 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.975753321 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.981630333 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.977666812 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.984413816 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.986745375 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.469903188 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.996779092 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 1.984902805 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.056190545 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.025674654 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 1.982407993 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.760288748 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 1.981235492 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.978289159 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.985868093 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.65316127 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.050537005 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.978173113 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.133097602 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.323062713 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.00046941 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.196815836 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.136454067 seconds)
  done (took 138.708123807 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.977347532 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.21220851 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.128570818 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.981695112 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.235852284 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.185265968 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.979606047 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.023224474 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.98807776 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.178092909 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.229056441 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.080686691 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.977987038 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.983424217 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.97981811 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.975929891 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.122389296 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.045961136 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.978386596 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.978654787 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.001951602 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.181338094 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.100461282 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.982262652 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.004390819 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.188199992 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.10067419 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.080766519 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.755113591 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.979519252 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.042109686 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.979960332 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.979259311 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.976255042 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.133194613 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.075287259 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.062361675 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.985091107 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.978474056 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.977100816 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.653659934 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.17857737 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.075560439 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.101229736 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.229983944 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.192376702 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.591210386 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.979790876 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.606958594 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.144041577 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.185942184 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.190097353 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.097494824 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.958027833 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.266073482 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.980948869 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.978806523 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.199526468 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.186156563 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.079003034 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.984583276 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.980593934 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.980495117 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.218438024 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.982513957 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.071574944 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.985244292 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.981624906 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.072969059 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.080002233 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.210898723 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.199615798 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.013152514 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.296677752 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.460442243 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.183139313 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.047052117 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.198602647 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.986633649 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.980257903 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.062706082 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.825055158 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.230840277 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.22333225 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.177957896 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.010252611 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.632251795 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.983207265 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.169263657 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.174286789 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.214828304 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.22587853 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.215834386 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.338324502 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.983155036 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.982209638 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.309318439 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.096629828 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.931589296 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.333298547 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.211280212 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.472441949 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.001369063 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.329019174 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.11161018 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.437176528 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.629664443 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.978028438 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.189833837 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.025128811 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.98310782 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.985284158 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.171563028 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.89185399 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.983524174 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.68095553 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.042807196 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.985961044 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.189506678 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.987042505 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.228656407 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.983614066 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.218676981 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.603922763 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.013458432 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.156633436 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.226933141 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.615592319 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.222132669 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.211445431 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.098315694 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.205519823 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.80516894 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.986567848 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.246891957 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.98873914 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.984870071 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.15400896 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.986789345 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.126718772 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.987921861 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.251074948 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.004846166 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.212101201 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.989251975 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.222768471 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.017462862 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.035005241 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.989417387 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.11445644 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.98650144 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.82621235 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.143036555 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.989509516 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.985459257 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.57128357 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.985280572 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.134838679 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.21007136 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.007491617 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.055523994 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.554104558 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.984096252 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.073583943 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.00820493 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.267940213 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 6.987828182 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.233803064 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.952172573 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.466593856 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.985313366 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.220832112 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.170936291 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.989123426 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.984332211 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.837911363 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 6.98558487 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.988474391 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.142454113 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.392899887 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.891211047 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.183309551 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.990270477 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.115061595 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.988154602 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.072655015 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.322781871 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.986115538 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.986680871 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.989044449 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.988255231 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.990412814 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.19620904 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.013277864 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.420271432 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.124238277 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.240850178 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.294380536 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.186114205 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.026578967 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.990679103 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.209054079 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.98889679 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.049678502 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.992427376 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.007233881 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.216484482 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.98952588 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.194070311 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.223583628 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.038910018 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.033964558 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.990975013 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.99005117 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.98717259 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.135013217 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.075853876 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.990732995 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.988949844 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.101956161 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.108751107 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.169650267 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.807738598 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.141172017 seconds)
  done (took 926.358109783 seconds)
done (took 1257.906951191 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.991122139 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.991670258 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.989318656 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 6.993235321 seconds)
  done (took 29.885057203 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.989788097 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.990652153 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.991703908 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.993437705 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 1.991550626 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.988848573 seconds)
  done (took 13.866577047 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.990257503 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.990514785 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.991324121 seconds)
  done (took 22.893744735 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.413274033 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.390724955 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.063119347 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.131835731 seconds)
  done (took 10.921715212 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.994402067 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.990474111 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.991001608 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.99090832 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.992859986 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.992930146 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.991639587 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.992329315 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.993424579 seconds)
  done (took 19.8584083 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.190808287 seconds)
done (took 103.536809209 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.30589672 seconds)
    (2/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 6.995896424 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.181642798 seconds)
    (4/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.080649134 seconds)
    (5/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.308951068 seconds)
    (6/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.225869213 seconds)
    (7/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.386423803 seconds)
    (8/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.366123525 seconds)
    (9/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.31034807 seconds)
    (10/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.053191314 seconds)
    (11/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 3.799603308 seconds)
    (12/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.189648116 seconds)
    (13/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 6.994980055 seconds)
    (14/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.143086859 seconds)
    (15/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.008940328 seconds)
    (16/341) benchmarking ("map", abs, BigInt, false)...
    done (took 6.99221197 seconds)
    (17/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 4.605575274 seconds)
    (18/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.105979715 seconds)
    (19/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.114440233 seconds)
    (20/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.000062385 seconds)
    (21/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.013931795 seconds)
    (22/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.010386918 seconds)
    (23/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.207131665 seconds)
    (24/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 6.996288114 seconds)
    (25/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.748795364 seconds)
    (26/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 6.995879419 seconds)
    (27/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.289910196 seconds)
    (28/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.893969889 seconds)
    (29/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.371583758 seconds)
    (30/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.184212783 seconds)
    (31/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.008906745 seconds)
    (32/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.395978331 seconds)
    (33/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.120544993 seconds)
    (34/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.094239551 seconds)
    (35/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.388088667 seconds)
    (36/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.005708905 seconds)
    (37/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.088671184 seconds)
    (38/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.130792043 seconds)
    (39/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.01832479 seconds)
    (40/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.6241347 seconds)
    (41/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.35557531 seconds)
    (42/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.755094168 seconds)
    (43/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.247952301 seconds)
    (44/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.078741677 seconds)
    (45/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.222094014 seconds)
    (46/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 6.99734242 seconds)
    (47/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.982485787 seconds)
    (48/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.291523693 seconds)
    (49/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.544873608 seconds)
    (50/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 2.995675685 seconds)
    (51/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.002859309 seconds)
    (52/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.234453724 seconds)
    (53/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.317142011 seconds)
    (54/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.525031139 seconds)
    (55/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 6.997011277 seconds)
    (56/341) benchmarking ("sort", BigInt, false)...
    done (took 6.996151771 seconds)
    (57/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.417939689 seconds)
    (58/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.592569758 seconds)
    (59/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.084617331 seconds)
    (60/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.253870977 seconds)
    (61/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 6.997460949 seconds)
    (62/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.387192661 seconds)
    (63/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.001516093 seconds)
    (64/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.799047671 seconds)
    (65/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.246275927 seconds)
    (66/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.097327802 seconds)
    (67/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.579451504 seconds)
    (68/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.193179095 seconds)
    (69/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.763373546 seconds)
    (70/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.004719665 seconds)
    (71/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.069981162 seconds)
    (72/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.014640369 seconds)
    (73/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.392168218 seconds)
    (74/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.70829853 seconds)
    (75/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.064700138 seconds)
    (76/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.00901658 seconds)
    (77/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.707408895 seconds)
    (78/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.115618446 seconds)
    (79/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.563598521 seconds)
    (80/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.092215292 seconds)
    (81/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.173004335 seconds)
    (82/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.014682096 seconds)
    (83/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.124470211 seconds)
    (84/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.063746573 seconds)
    (85/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 2.965128583 seconds)
    (86/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 6.999014771 seconds)
    (87/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.084731716 seconds)
    (88/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.000560505 seconds)
    (89/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.394211135 seconds)
    (90/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.898153901 seconds)
    (91/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.203834445 seconds)
    (92/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.138894537 seconds)
    (93/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 6.997113198 seconds)
    (94/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 3.749256242 seconds)
    (95/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.013152733 seconds)
    (96/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.326755469 seconds)
    (97/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.202009686 seconds)
    (98/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.087505358 seconds)
    (99/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.000973942 seconds)
    (100/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.061521802 seconds)
    (101/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.360286606 seconds)
    (102/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.092312588 seconds)
    (103/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.89271883 seconds)
    (104/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.406087907 seconds)
    (105/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.094651 seconds)
    (106/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.463607138 seconds)
    (107/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.021927744 seconds)
    (108/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.884337262 seconds)
    (109/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.016295827 seconds)
    (110/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.010911921 seconds)
    (111/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.016511842 seconds)
    (112/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 6.989814255 seconds)
    (113/341) benchmarking ("sort", Float32, false)...
    done (took 5.742343663 seconds)
    (114/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 7.909529993 seconds)
    (115/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.412794487 seconds)
    (116/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.000546695 seconds)
    (117/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.124914797 seconds)
    (118/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.08326712 seconds)
    (119/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.012806749 seconds)
    (120/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.56398736 seconds)
    (121/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.503979497 seconds)
    (122/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.37705441 seconds)
    (123/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.095226656 seconds)
    (124/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.452782818 seconds)
    (125/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.296841539 seconds)
    (126/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.306105532 seconds)
    (127/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.273473294 seconds)
    (128/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 6.998446684 seconds)
    (129/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.181220105 seconds)
    (130/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.113037001 seconds)
    (131/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.433394351 seconds)
    (132/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.149893338 seconds)
    (133/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.778459524 seconds)
    (134/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.114319457 seconds)
    (135/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 2.985113782 seconds)
    (136/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.012136895 seconds)
    (137/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.113914082 seconds)
    (138/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.062722922 seconds)
    (139/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.015015621 seconds)
    (140/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.202633654 seconds)
    (141/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.096692314 seconds)
    (142/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.277025428 seconds)
    (143/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.296238305 seconds)
    (144/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.082879878 seconds)
    (145/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.096386066 seconds)
    (146/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.099956709 seconds)
    (147/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.132815037 seconds)
    (148/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.011706589 seconds)
    (149/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.245240057 seconds)
    (150/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.832441569 seconds)
    (151/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.005949996 seconds)
    (152/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.336241585 seconds)
    (153/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.397068004 seconds)
    (154/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.102094214 seconds)
    (155/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.13817551 seconds)
    (156/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.23556608 seconds)
    (157/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.414940014 seconds)
    (158/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.24706808 seconds)
    (159/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.465727465 seconds)
    (160/341) benchmarking ("sort", Bool, false)...
    done (took 2.218226535 seconds)
    (161/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.004168411 seconds)
    (162/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.27469393 seconds)
    (163/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.604467228 seconds)
    (164/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.137570853 seconds)
    (165/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.747388061 seconds)
    (166/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.733340126 seconds)
    (167/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.106792067 seconds)
    (168/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.018032539 seconds)
    (169/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.015880881 seconds)
    (170/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.200913046 seconds)
    (171/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.773712842 seconds)
    (172/341) benchmarking ("sort", Int64, false)...
    done (took 5.66373152 seconds)
    (173/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.185818835 seconds)
    (174/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.004344212 seconds)
    (175/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.90985943 seconds)
    (176/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.391760232 seconds)
    (177/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.00307213 seconds)
    (178/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.711240517 seconds)
    (179/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.431758821 seconds)
    (180/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.020366292 seconds)
    (181/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.280574242 seconds)
    (182/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.407667741 seconds)
    (183/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.877569105 seconds)
    (184/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.23074517 seconds)
    (185/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.15883503 seconds)
    (186/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.313136291 seconds)
    (187/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.006239726 seconds)
    (188/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 4.926529131 seconds)
    (189/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.211337872 seconds)
    (190/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.132866811 seconds)
    (191/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.279816011 seconds)
    (192/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.276565827 seconds)
    (193/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.240532699 seconds)
    (194/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.005145185 seconds)
    (195/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.142400346 seconds)
    (196/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.408585869 seconds)
    (197/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.022714681 seconds)
    (198/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.398141854 seconds)
    (199/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.079208572 seconds)
    (200/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.158251396 seconds)
    (201/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.306238519 seconds)
    (202/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.194352268 seconds)
    (203/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.772370547 seconds)
    (204/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.089560154 seconds)
    (205/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.348952395 seconds)
    (206/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.283987267 seconds)
    (207/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.004239336 seconds)
    (208/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.250210226 seconds)
    (209/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 2.997913648 seconds)
    (210/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.318275887 seconds)
    (211/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.028882235 seconds)
    (212/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.250548842 seconds)
    (213/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.086870493 seconds)
    (214/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.081001723 seconds)
    (215/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.718859822 seconds)
    (216/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.008901116 seconds)
    (217/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 3.672922032 seconds)
    (218/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.018616692 seconds)
    (219/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.150643865 seconds)
    (220/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.207565734 seconds)
    (221/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.092964335 seconds)
    (222/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.01611412 seconds)
    (223/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.00672988 seconds)
    (224/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 5.984103683 seconds)
    (225/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.007379474 seconds)
    (226/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.215290205 seconds)
    (227/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.004692499 seconds)
    (228/341) benchmarking ("perf_sum", Bool, false)...
    done (took 4.054889406 seconds)
    (229/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.127399729 seconds)
    (230/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.114697121 seconds)
    (231/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.272428916 seconds)
    (232/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.191501917 seconds)
    (233/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.223427496 seconds)
    (234/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.326746644 seconds)
    (235/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.014808776 seconds)
    (236/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.066035549 seconds)
    (237/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.121978302 seconds)
    (238/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.34267291 seconds)
    (239/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.422245419 seconds)
    (240/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.028011456 seconds)
    (241/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.494418645 seconds)
    (242/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.005060382 seconds)
    (243/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.681726416 seconds)
    (244/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.299985876 seconds)
    (245/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.244766761 seconds)
    (246/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.951725113 seconds)
    (247/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.244742979 seconds)
    (248/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.023868471 seconds)
    (249/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.005536664 seconds)
    (250/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.067608291 seconds)
    (251/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.908453592 seconds)
    (252/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.030317407 seconds)
    (253/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.395876754 seconds)
    (254/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.702529923 seconds)
    (255/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.035277987 seconds)
    (256/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.083786918 seconds)
    (257/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.02259487 seconds)
    (258/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.137208714 seconds)
    (259/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.086485485 seconds)
    (260/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.087070237 seconds)
    (261/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.317345675 seconds)
    (262/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.025068351 seconds)
    (263/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.006928161 seconds)
    (264/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 3.988633287 seconds)
    (265/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.305057267 seconds)
    (266/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.028426424 seconds)
    (267/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.153844415 seconds)
    (268/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.27966702 seconds)
    (269/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.00868635 seconds)
    (270/341) benchmarking ("sort", Float64, false)...
    done (took 5.777400662 seconds)
    (271/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.010771577 seconds)
    (272/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.022952923 seconds)
    (273/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.333304367 seconds)
    (274/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.873540489 seconds)
    (275/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.842903939 seconds)
    (276/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.198844249 seconds)
    (277/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.210439017 seconds)
    (278/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.316179746 seconds)
    (279/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.021332941 seconds)
    (280/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.107832181 seconds)
    (281/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.006837869 seconds)
    (282/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.078579179 seconds)
    (283/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.01045104 seconds)
    (284/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.086028421 seconds)
    (285/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.301253362 seconds)
    (286/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.722412996 seconds)
    (287/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.186541012 seconds)
    (288/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.302477963 seconds)
    (289/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.290098364 seconds)
    (290/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.687572316 seconds)
    (291/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.342906175 seconds)
    (292/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.497218714 seconds)
    (293/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.008533986 seconds)
    (294/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.171399385 seconds)
    (295/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.071832299 seconds)
    (296/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.218201589 seconds)
    (297/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.032881473 seconds)
    (298/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.009383898 seconds)
    (299/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.192084498 seconds)
    (300/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.007816462 seconds)
    (301/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.407459497 seconds)
    (302/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.156061708 seconds)
    (303/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.891801373 seconds)
    (304/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.326734852 seconds)
    (305/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.091536154 seconds)
    (306/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.404979543 seconds)
    (307/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.806157341 seconds)
    (308/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.267707627 seconds)
    (309/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.27281652 seconds)
    (310/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.858546084 seconds)
    (311/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.112239675 seconds)
    (312/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.300605585 seconds)
    (313/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.404739997 seconds)
    (314/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.95335754 seconds)
    (315/341) benchmarking ("perf_sum", Int8, false)...
    done (took 1.993037751 seconds)
    (316/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.045304918 seconds)
    (317/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.108852537 seconds)
    (318/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.810179015 seconds)
    (319/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.097926782 seconds)
    (320/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.15017408 seconds)
    (321/341) benchmarking ("sort", Int8, false)...
    done (took 4.955178114 seconds)
    (322/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.142783801 seconds)
    (323/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.862511165 seconds)
    (324/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.097414055 seconds)
    (325/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.12814853 seconds)
    (326/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.331080069 seconds)
    (327/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.093749617 seconds)
    (328/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.223664063 seconds)
    (329/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.269815438 seconds)
    (330/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.709630316 seconds)
    (331/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.912887041 seconds)
    (332/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.14888322 seconds)
    (333/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.219130836 seconds)
    (334/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.281376709 seconds)
    (335/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.316737752 seconds)
    (336/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.0924707 seconds)
    (337/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.395237356 seconds)
    (338/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.169152068 seconds)
    (339/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.14051502 seconds)
    (340/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.095713271 seconds)
    (341/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.334910595 seconds)
  done (took 1139.173803978 seconds)
done (took 1141.202956576 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.036449664 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.020612075 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.507704586 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.029520542 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.021111902 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.024206604 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.516261179 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.04954915 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.03826411 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.495853012 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.029890881 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.020049651 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.037140197 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.056871742 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.033304316 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.035295458 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.02651094 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.047463133 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.056529205 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.028553851 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.069612514 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.027258987 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.020632218 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.074751799 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.022327967 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.036479486 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.037485013 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.069165843 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.067220499 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.025726528 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.028591046 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.371118404 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.069568136 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.027606404 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.035588338 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.038107012 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.028102733 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.035910953 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.035674039 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.039141094 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.023777965 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.033181234 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.027214014 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.026192323 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.023571671 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.023372373 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.024415974 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.147068993 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.038687757 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.352229891 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.073179557 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.036705568 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.069160719 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.02799672 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.02553507 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.027041055 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.070856623 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.03101031 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.028881067 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.353066052 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.107970871 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.037965532 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.353738439 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.081923027 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.033671135 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.032505769 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.023658975 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.037571807 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.372018708 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.551987711 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.054057783 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.044870525 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.027142219 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.02678526 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.038389788 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.517580345 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.037394663 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.585217803 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.049386342 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.039196031 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.032222282 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.027758915 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.026793158 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.041590603 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.039033557 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.025022335 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.032132324 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.030861571 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.03937572 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.373408286 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.065978886 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.508549347 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.031179842 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.039731506 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.039569728 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.586377153 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.050806625 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.037591474 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.029328158 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.374266587 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.062636675 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.039738087 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.028800654 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.035515012 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.140522158 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.039336267 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.03895543 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.02560817 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.047610325 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.034838073 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.026530951 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.040594913 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.045755985 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.061645668 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.043029765 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.026870224 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.033879935 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.032484664 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.039288568 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.033689577 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.032543335 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.038731694 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.026912312 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.07717011 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.038913272 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.043783367 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.140960014 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.03337302 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.150672811 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.040893366 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.03246946 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.025963399 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.356144866 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.066689577 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.048968773 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.033980492 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.048188569 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.048661089 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.045246111 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.028546062 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.043444597 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.030128816 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.079887425 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.026151414 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.052743806 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.07886124 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.040721552 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.032781253 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.040149676 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.062202429 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.049520244 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.031037329 seconds)
done (took 318.972513236 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.067118853 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.017921239 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.095169352 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.019284961 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.085987478 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.07218049 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.020389326 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.020612656 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.019876692 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.406994741 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.021190791 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.02849313 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.021688013 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.020998418 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.069533141 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.020483791 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.020976823 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.253621897 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.02164023 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.078643959 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.019119064 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.019635621 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.020717232 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.409641393 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.019621195 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.02151988 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.080943997 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.021411342 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.261872916 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.018050235 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.021573888 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.26188143 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.080897199 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.034896615 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.031660918 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.02717391 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.089142185 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.029539341 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.069852007 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.069150982 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.095896609 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.055858481 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.020434177 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.021130255 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.023835439 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.02337144 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.02290224 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.055456126 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.020714227 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.03005527 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.256431003 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.026969814 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.030227811 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.021993038 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.002562054 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.034146893 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.02236555 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.02431174 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.081403814 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.023171997 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.071476598 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.410759538 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.408726842 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.022365761 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.023467749 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.0240292 seconds)
  done (took 193.79468823 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.090459432 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.109909122 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.090232393 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.028955409 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.076662101 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.09043398 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.028936988 seconds)
  done (took 16.467484822 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.029208919 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.024498877 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.047585339 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.047067602 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.022837184 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.163172235 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.037410179 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.029590602 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.017118156 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.023642851 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.359502182 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.047760843 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.029955286 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.025039022 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.035944962 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.054923006 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.027831538 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.023253394 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.109023257 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.101977701 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.029993093 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.031004357 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.054570407 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.037609276 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.024207474 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.024365734 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.024816526 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.030081823 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.024172035 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.025451814 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.024511422 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.037129411 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.020851147 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.00570874 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.024294929 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.026662652 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.02545581 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.024909945 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.025289013 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.02602603 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.025388637 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.025434046 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.024912077 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.026392445 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.026599559 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.047611158 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.025405201 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.024939407 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.024233336 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.025949332 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.050921944 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.025937927 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.027130465 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.030755482 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.066106855 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.033330462 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.026951064 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.023446855 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.026863703 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.025708007 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.025111489 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.102958063 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.050008711 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.026214586 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.049865518 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.062515737 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.027561163 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.025902224 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.024832378 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.050173338 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.025384869 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.050647729 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.026746497 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.124282442 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.027950678 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.168393182 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.04863825 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.03025529 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.030432107 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.027325125 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.035208429 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.027301938 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.029441805 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.034234713 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.031765554 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.014211367 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.022497559 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.029007501 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.034509498 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.028390907 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.070931808 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.027233603 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.027870369 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.124146976 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.028257976 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.124260118 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.055100216 seconds)
  done (took 220.12194523 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.033450378 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.029981194 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.042941481 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.028284071 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.02887875 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.031715466 seconds)
  done (took 14.15210792 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.03158921 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.031940085 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.029730751 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.028236273 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.026760148 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.028269931 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.029748102 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.02883772 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.034414055 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.028468523 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.029089281 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.028985089 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.0301899 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.028034186 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.029258837 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.029333102 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.030662906 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.028387341 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.029539376 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.029811505 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.274785069 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.031085462 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.030645045 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.034149548 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.035694543 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.027935304 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.039173261 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.035996151 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.033190536 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.038292694 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.035883852 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.033833942 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.035920463 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.040465015 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.035735522 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.037138283 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.037598137 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.032812625 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.033776899 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.032933471 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.033489268 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.03350585 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.03277302 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.034506558 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.035745922 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.041641429 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.038637967 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.041593756 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.03324647 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.03451381 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.035378887 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.033763131 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.034296192 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.035666616 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.038682343 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.040014517 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.037177667 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.033206402 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.032731575 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.036683232 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.039510565 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.033304378 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.037178565 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.038451471 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.039408245 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.034303771 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.037856175 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.038802299 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.03407405 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.033361051 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.035766894 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.033913834 seconds)
  done (took 149.642274155 seconds)
done (took 596.126063212 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.084116478 seconds)
  done (took 9.045994879 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.118012146 seconds)
  done (took 9.173607857 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.130181472 seconds)
  done (took 12.098769244 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.049359276 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.04300724 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.036088575 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.03789964 seconds)
  done (took 30.144927509 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.358826727 seconds)
  done (took 9.322361818 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.04811727 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.031244734 seconds)
  done (took 16.113930065 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.158110305 seconds)
  done (took 9.123693538 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.066852804 seconds)
  done (took 9.053808231 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.048845257 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.057387558 seconds)
  done (took 16.087875694 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.037671348 seconds)
  done (took 9.001407438 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.79714603 seconds)
  done (took 9.849464582 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.048548634 seconds)
  done (took 9.031741805 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.090434366 seconds)
  done (took 9.054439072 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.812248053 seconds)
  done (took 9.776002738 seconds)
done (took 168.836611682 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.042601926 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.03410306 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.036742288 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.034703236 seconds)
  done (took 30.110170074 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.070895061 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.071842268 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.080129079 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.068964479 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.060687727 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.061456945 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.07134818 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.071242633 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.061755724 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.068349146 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.072263488 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.067955799 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.072074329 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.080691692 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.078623455 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.068582828 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.071635812 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.070778342 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.061904513 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.080515456 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.069052806 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.069381184 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.0373118 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.037636867 seconds)
  done (took 51.589173065 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.227961392 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.101893388 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.192497166 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.083964962 seconds)
  done (took 10.570069932 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.037603637 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.101445453 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.088006144 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.083250938 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.086806759 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.139589903 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.089426258 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.174627847 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.165965651 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.166216644 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.045258154 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.058981162 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.06238299 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.082935473 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.140953023 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.036447192 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.036666713 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.157535623 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.099929642 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.296342054 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.037514621 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.093424722 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.09010957 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.09034583 seconds)
  done (took 52.426848703 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.039748166 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.047481598 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.04613387 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.038849267 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.041421316 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.03998507 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.046531234 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.040270901 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.060466254 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.036368031 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.039829221 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.028892544 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.047866317 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.041694538 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.036613378 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.054542439 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.028658405 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.040352824 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.043986269 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.047006982 seconds)
  done (took 42.813900836 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.038689961 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.885108436 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.384968159 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.288415998 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.037944913 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.038947286 seconds)
  done (took 32.640324499 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.051816013 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.054572955 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.042899645 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.062698257 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.082716445 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.046603832 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.098851413 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.200218381 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.047887806 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.09658381 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.057566835 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.043547463 seconds)
  done (took 26.855255342 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.039447756 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.039466022 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.041123025 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.042104557 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.036701008 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.04690695 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.034953342 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.040155342 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.051167546 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.059031135 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.048496273 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.049887 seconds)
  done (took 46.497007617 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.25408071 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.26600667 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.267620766 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.51178609 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.358017808 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.022629435 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.325150612 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.253051001 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.722812553 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.750855113 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.333206447 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.02078295 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.987466543 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.964861752 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.938028824 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.284311434 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.042821634 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.898970702 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.304402703 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.087722331 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.043480795 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.041938559 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.049431895 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.323477971 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.346669154 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.039484696 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.246509496 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.056506484 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.041889989 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.26510113 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.503856228 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.089157385 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.242309621 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.298627827 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.388119804 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.205168702 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.044936317 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.084697896 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.07914698 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.077387752 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.051661171 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.052262322 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.570561709 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.054948554 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.315431767 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.043631819 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.154728868 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.051229116 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.966712443 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.388302324 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.1588445 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.042538566 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.077648694 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.476671618 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.162833123 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.285110866 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.047486209 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.108875223 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.09428089 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.327446631 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.153172573 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.153968158 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.256081478 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.967542468 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.419498231 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.171303147 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.04484873 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.047898324 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.743334423 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.285739045 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.124884082 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.394781462 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.805422894 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.045617572 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.047101645 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.087026435 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.140965293 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.042208995 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.337201685 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.045004281 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.968563157 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.141993451 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.441176596 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.049077456 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.042368611 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.041253944 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.888463736 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.970610133 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.14047788 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.328021405 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.368527921 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.044808543 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.044558183 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.066379143 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.04845893 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.992801024 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.475921012 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.102352338 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.970783252 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.608656645 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.509240685 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.004608275 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.393610272 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.081243247 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.324467076 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.203103593 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.450056528 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.253874025 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.291166904 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.58012636 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.050247631 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.604259894 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.126292972 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.121733675 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.047060882 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.610396121 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.097554905 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.376457252 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.161756645 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.044921886 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.971152271 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.056067973 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.24825587 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.513966165 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.095327175 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.046519173 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.047974335 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.045756519 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.050053231 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.152175994 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.063068941 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.337642708 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.11763029 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.045978601 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.982475633 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.049540528 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.332119113 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.4861324 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.102317303 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.300264568 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.313594473 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.747308608 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.641082852 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.089807802 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.320975045 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.120199969 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.120503651 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.642961509 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.18395592 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.144012012 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.047016655 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.182270598 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.054165227 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.051534244 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.221670106 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.456442986 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.475721035 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.091596796 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.048422329 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.001200154 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.106036796 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.281834479 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.123930201 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.074910879 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.051186694 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.132905157 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.274446497 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.048172267 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.975029826 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.30475634 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.296584722 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.338242009 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.458970715 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.117724271 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.12234343 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.057520246 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.26166823 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.134695365 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.701302984 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.600725843 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.278336909 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.496433988 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.005038731 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.689385724 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.34579718 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.431977501 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.066723066 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.499670939 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.106759591 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.590887538 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.073165483 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.576468971 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 3.974699223 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.053196306 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.394892669 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.011604724 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.361358366 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.209091506 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.064442493 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.050376067 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.050582122 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.058883986 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.980822991 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.158928019 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.119746422 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.12403156 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.976887988 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.558684259 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.08176128 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.053049359 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.050199683 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.386306857 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.885719715 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.003434975 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.04959501 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.125974289 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.793297009 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.598152696 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.052641786 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.053537414 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.650038507 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.054382938 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.802203669 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.169393991 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.827048714 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.078271762 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.344100203 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.754605441 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.334832675 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.128028676 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.126852103 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.052759389 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.050072737 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.751388507 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.060357587 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.752046583 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.341343144 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.326995781 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.501029176 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.11220348 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.260376364 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.06634121 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.052632882 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.571675512 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.078847488 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.052518804 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.255907947 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.569609674 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.427290462 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.016014978 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.137725325 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.05093528 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.3242528 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.054313064 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.526690652 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.740757861 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.063198629 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.098066392 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.276480935 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.737154205 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.05398232 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.041131063 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.057313389 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.265550454 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.255800846 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.337137788 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.349979244 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.500376039 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.978688548 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.057658089 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.074796686 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.29746321 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.052457706 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.088606898 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.501305836 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.122879268 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.481718107 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.334322592 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.475649344 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.691174606 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.319772503 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.120121668 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.065335611 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.714122906 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.186445277 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.984336602 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.172684949 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 3.981557997 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.823914996 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.34509931 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.069805684 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.327509754 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.033929636 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.392184457 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.352911047 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.345401807 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.102039397 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.082550361 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.054212674 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.105698333 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.05537635 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.11497686 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.163419154 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.062083466 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.469786402 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.088103031 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.101768099 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.060170952 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.571138088 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.075229041 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.058197291 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.750639054 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.077666407 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.174425507 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.127461765 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.809690586 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.554422517 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.07681181 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.935214888 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.703339685 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.328440312 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.11241102 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.514141454 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.098937912 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.461309999 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.055233845 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.268659689 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.061854129 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.496108404 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.095729979 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.330362884 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.01734559 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.267803044 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.271037266 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.086370463 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.061286439 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.983835904 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.158867683 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.919395768 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.038771651 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.060683431 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.741980264 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.522839736 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.130760962 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.521974788 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.876846167 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.059349592 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.405030682 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.457638699 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.549311117 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.084011007 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.061648595 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.450812258 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.193007751 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.408622583 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.330344873 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.065847522 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.083154088 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.271199996 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.18479248 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.977101482 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.545967953 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.627806239 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.759531199 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.070088656 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.26113328 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.413759179 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.221210298 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.087214719 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.132398682 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.464385475 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.329675248 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.127826516 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.98524217 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.058790082 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.453067751 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.459035005 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.155566156 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.299753733 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.377252436 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.47373609 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.555575314 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.36406092 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.47327405 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.471527041 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.471033336 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.273517213 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.433132693 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.379052367 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.652064837 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.474135602 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.271224426 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.155058003 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.346828175 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.932920134 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.771182163 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.305778344 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.063746713 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.989091808 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.267246979 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.063669621 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.318821727 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.588928931 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.30806639 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.359363563 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.533818826 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.60031043 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.133702677 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.078970546 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.026286296 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.08360785 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.079561633 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.059814328 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.551030636 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.347067113 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.073387306 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.001569587 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.732021396 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.987394372 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.274858622 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.12374959 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.08914572 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.617033821 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.356314268 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.167629522 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.35482872 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.181103075 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.091159521 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.988199075 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.832878464 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.007404674 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.123448282 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.487958699 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.076081514 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.064484303 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.266016612 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.991317332 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.107611395 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.067135465 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.266357541 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.652263379 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.333749296 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.188918448 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.309010418 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.367005179 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.923262398 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.09792164 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.334750384 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.990684914 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.560514866 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.738055314 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.104382777 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.134476926 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.063607567 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.065363431 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.3345109 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.418644771 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.162418104 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.64630879 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.089642206 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.087372539 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.437730242 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.162856281 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.065798287 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.069594025 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.464937403 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.291378451 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.063655244 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.056237559 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.275182853 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.13934755 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.261830647 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.139802172 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.577764639 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.070284304 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.93544284 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.173265434 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.015261383 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.062805927 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.817727627 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.126026336 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.062694296 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.339201722 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.684808602 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.265562592 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.457197815 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.928457579 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.136701672 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.101128991 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.06809301 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.073174442 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.458353206 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.370348665 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.063140699 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.331314241 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.114661677 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.068668965 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.725611648 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.032419906 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.061803604 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.831896403 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.939181986 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.79690248 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.463203361 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.070169499 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.15558941 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.066747616 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 3.990804304 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.092852809 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.194475302 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.046197129 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.066828336 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.438494001 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.410472279 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.161613583 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.071335454 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.069062992 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.07175198 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.277900522 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.578987178 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.084409742 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.768294733 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.271779619 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.075852987 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.558751141 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.514966919 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.20972959 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.098875082 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.144150153 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.305044304 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.614839547 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.144907151 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.037411173 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.293734445 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.069414624 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.340323015 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.342440395 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.0665468 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.279035466 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.545195638 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.346538862 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.419286125 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.37942384 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.134227976 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.141136499 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.94834306 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.063322577 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.069560892 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.331338218 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.123826413 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.067109991 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.077783751 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.066429449 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.823623353 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.54385857 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.226588492 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.42513049 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.85669903 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.82173029 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.071198869 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 3.994627817 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.066263039 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.091034557 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.068659617 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.995965813 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.770534649 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.792452292 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.282209894 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.380384582 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.994559647 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.264031218 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.635386913 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 3.994216068 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.035427582 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.067502662 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.329490848 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.996469543 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.072917277 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.02367548 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.37147086 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.661698522 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.332932445 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.061314257 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.016021308 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.062850724 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.069533121 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.058943036 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.156722943 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.069701817 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.187994686 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.334323038 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.482648155 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.177826772 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.710612243 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.837603274 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.008426577 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.112798169 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.628811092 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.641314059 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.383030549 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.201115712 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.834615767 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.01452182 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.072791499 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.085182049 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.328525898 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.073283774 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.072891946 seconds)
  done (took 2189.015088027 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.110131644 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.137794157 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.106721162 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.109766723 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.188849518 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.141834874 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.116404821 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.105163929 seconds)
  done (took 59.01549315 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.06798683 seconds)
    (2/17) benchmarking "4467"...
    done (took 2.63037335 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.200238142 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.069540504 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.070042084 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.115359154 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.259944087 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.097825037 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.072151357 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.074037716 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.071266023 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.072904745 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.070172723 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.067674769 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.07510523 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.338198025 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.092002562 seconds)
  done (took 78.500635756 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.12466071 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.927205897 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.070826247 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.843737913 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.093711843 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.364032681 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.06988089 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.07194179 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.393126209 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.368971962 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.130988274 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.082451407 seconds)
  done (took 94.548037971 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.073086906 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.071845573 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.071034441 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.071673512 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.070985256 seconds)
  done (took 12.355419302 seconds)
done (took 2728.960426479 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.315431735 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.157166494 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.142947659 seconds)
  done (took 6.296320098 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.214106311 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.263011905 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.376298597 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.398507768 seconds)
  done (took 11.255320828 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.362141279 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.461715458 seconds)
  done (took 6.824744586 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.442327276 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.079151127 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.463401611 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.074483938 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.076830192 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.075675118 seconds)
  done (took 23.232639194 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.071171673 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.072994879 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.073547036 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.070462384 seconds)
  done (took 10.290958107 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.072025949 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.83118882 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.071142374 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.081523641 seconds)
  done (took 22.05457848 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.231999853 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.126141599 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.835813351 seconds)
  done (took 10.193454194 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.700030971 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.521776885 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.691628969 seconds)
  done (took 9.913800725 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.218396403 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.913254046 seconds)
  done (took 8.131895401 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.217689468 seconds)
  done (took 4.218214595 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.899183795 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.387384525 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.549630917 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.595509332 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.645571773 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.292161871 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.377345155 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.327996013 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.473685747 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.471519957 seconds)
  done (took 27.020130622 seconds)
done (took 155.730905229 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.497108733 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.094702499 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.282271477 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.442580122 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.318787004 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.285042715 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.351441282 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.429827338 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.110795365 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.099196694 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.441578374 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.315449457 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.317299897 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.089831227 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.321749 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.090779278 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.308465316 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.517057019 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.125321875 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.366550082 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.381232798 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.089782737 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.281369649 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.103226338 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.312693497 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.231338199 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.692585776 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.090879353 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.273901882 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.700138617 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.23032421 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.517161225 seconds)
  done (took 175.712349869 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.941517181 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.075589736 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.075589714 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.076184168 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.40560912 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.073543201 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.075290031 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.075434792 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.297565031 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.27787889 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.076549226 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.38987584 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.077366109 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.074219505 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.079228335 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.063738027 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.39290066 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.978077983 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.074816157 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.075967834 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.078533093 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.266077566 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.079574945 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.275066373 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.390047658 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.079790457 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.076592231 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.076170272 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.075731407 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.080712639 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.077315164 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.076225821 seconds)
  done (took 214.294720526 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.077872613 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.077475753 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.076535181 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.077520601 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.077655917 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.079061286 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.079036917 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.077791032 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.80389109 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.79874535 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.075766087 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.084716972 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.08238157 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.078146442 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.079176679 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.076479194 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.078264454 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.07748136 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.076436876 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.081697602 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.081977175 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.929172707 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.075859997 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.945078425 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.079170605 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.078989533 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.079123916 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.07648135 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.078051988 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.078302637 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.080790575 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.074574877 seconds)
  done (took 227.679927928 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.318115071 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.080549209 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.080357278 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.091177318 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.080111827 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.079111756 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.090050771 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.328576573 seconds)
  done (took 21.155101845 seconds)
done (took 640.849696009 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.456467629 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.803375986 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.205192996 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.101780482 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.35452576 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.1425592 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.099808886 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.172949735 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.73934488 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.172258122 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.500430363 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.105514911 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.80582747 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.119906089 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.20904841 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.166162056 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.443920287 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.709788759 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.227563333 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.751174432 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.292435263 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.0173739 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.177573825 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.783921607 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.497594357 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.032463493 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.09947261 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.455155017 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.095612789 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.323983933 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.74351008 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.341845607 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.111214809 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.100343078 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.157608017 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.141425008 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.294447125 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.105969262 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.207795948 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.81004999 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.753621428 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.622862249 seconds)
  done (took 108.460990605 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.086673896 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.088931548 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.087004611 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.085818293 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.094393295 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.086426917 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.085366206 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.083531345 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.088279553 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.085186615 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.084655429 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.094519499 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.086375089 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.094516691 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.087673096 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.056437631 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.088355146 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.095125937 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.088027576 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.089468703 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.087540821 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.086416514 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.082916921 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.088501696 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.087585313 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.089249172 seconds)
  done (took 56.276102382 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.070981602 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.26047731 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.349063438 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.111226865 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.085408461 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.087838604 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.111604763 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.090562149 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.087056878 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.084857178 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.177491982 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.088655064 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.097515076 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.370304426 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.106051419 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.083047907 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.083112212 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.086948436 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.267774137 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.098591969 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.113464224 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.090879714 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.111416485 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.0962504 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.086172827 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.086125286 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.086539684 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.50196798 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.092997581 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.181347743 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.127101257 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.115242224 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.425301253 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.373825401 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.143346158 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.08982006 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.086034202 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.22553494 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.094556139 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.087439838 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.112885231 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.092829496 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.367630887 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.595534463 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.09427311 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.088455622 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.50767281 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.231361516 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.129252561 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.099120078 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.379375856 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.110590094 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.085490638 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.088325849 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.109742253 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.095496268 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.086015601 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.33206302 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.099565266 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.115423558 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.092169764 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.087407781 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.277740367 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.095109476 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.263943414 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.096627041 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.093567836 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.090186425 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.352250816 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.112493646 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.598849337 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.099302905 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.087549972 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.181962091 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.267794247 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.533412028 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.098307132 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.275864577 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.448033434 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.120574157 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.094983682 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.497365016 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.123108361 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.093913988 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.088075287 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.086378551 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.085935494 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.128201596 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.116682457 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.514333911 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.597498373 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.344336554 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.123168458 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.099593413 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.090212882 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.326394536 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.096159268 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.084923602 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.366484193 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.622387586 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.069992508 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.095549584 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.584430257 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.102022388 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.118140827 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.097683025 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.383164742 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.114201959 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.130301122 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.09089373 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.094765886 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.090263973 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.116320925 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.095859433 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.0898674 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.576047562 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.237275378 seconds)
  done (took 257.791110827 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.092686611 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.085514058 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.087976811 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.087662491 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.089127263 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.09131175 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.086559418 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.088609977 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.091491042 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.090179039 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.090501683 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.088649604 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.091227055 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.089345541 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.60158304 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.098763917 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.586688538 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.097484957 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.097245446 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.097275402 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.711163169 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.104876688 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.092995001 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.096297934 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.096598859 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.096118943 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.097668583 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.145364724 seconds)
  done (took 174.290716151 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.096860964 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.164978707 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.110735056 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.147575463 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.109913959 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.09741578 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.121533522 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.115229889 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.101948687 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.098087125 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.097549177 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.129780644 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.104967709 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.237940064 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.133966669 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.127864784 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.180850274 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.106982205 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.099714634 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.098646765 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.146622805 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.113636281 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.125327069 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.154268314 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.08166932 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.149032607 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.113935221 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.098132314 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.098816933 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.209585302 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.120207628 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.128777432 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.133655735 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.099276375 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.192760618 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.194022747 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.181405562 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.128915332 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.107397821 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.098244167 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.099794892 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.102377384 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.147403098 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.11818565 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.102663944 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.192045579 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.12036532 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.098112996 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.123169123 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.099255008 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.111203505 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.120661746 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.135743348 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.205180133 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.147880578 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.126980129 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.12221241 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.119296986 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.100256154 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.172944133 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.108242045 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.190147032 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.123568304 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.101962567 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.104640314 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.106125168 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.152056939 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.138815536 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.176804435 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.106668073 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.176673359 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.155030543 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.114508089 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.101582839 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.098790823 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.149287203 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.190611512 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.156207479 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.160063352 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.13900382 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.112550338 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.101699837 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.105383502 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.128641528 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.107149115 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.192221013 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.193432518 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.109996572 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.103901 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.10207076 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.10229201 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.123055543 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.159393112 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.148193599 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.187809064 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.138021421 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.138244996 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.10992217 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.116970824 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.10461636 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.133546039 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.114265804 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.116139677 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.433010107 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.140740927 seconds)
  done (took 226.024548702 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.467740908 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.151150796 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.174209871 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.39414705 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.492162363 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.17423701 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.139719997 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.162429854 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.159533266 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.266616277 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.208428346 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.218705936 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.138016738 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.122520015 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.150520979 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.159415559 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.181778289 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.454248391 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.247652133 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.815036883 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.150430042 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.41266252 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.440106534 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.493960296 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.190613993 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.563679935 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.76352799 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.235339607 seconds)
  done (took 68.56183309 seconds)
done (took 893.409558812 seconds)
SAVING RESULT...
DONE!
