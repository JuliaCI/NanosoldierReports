cset: moving following pidspec: 31261
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.826445232 seconds)
loading group "shootout"... done (took 1.117874692 seconds)
loading group "string"... done (took 0.662541189 seconds)
loading group "linalg"... done (took 8.652588338 seconds)
loading group "parallel"... done (took 0.167076397 seconds)
loading group "find"... done (took 3.026179781 seconds)
loading group "tuple"... done (took 2.145278645 seconds)
loading group "union"... done (took 15.024775102 seconds)
loading group "dates"... done (took 1.474485463 seconds)
loading group "micro"... done (took 0.224001965 seconds)
loading group "simd"... done (took 4.847565691 seconds)
loading group "io"... done (took 1.105584422 seconds)
loading group "random"... done (took 9.671303372 seconds)
loading group "problem"... done (took 1.532878109 seconds)
loading group "array"... done (took 25.429978455 seconds)
loading group "misc"... done (took 1.907561489 seconds)
loading group "scalar"... done (took 43.877905841 seconds)
loading group "sort"... done (took 3.365835014 seconds)
loading group "sparse"... done (took 12.814161823 seconds)
loading group "collection"... done (took 18.784222515 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.457177736 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.119584577 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.168875733 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.117281539 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.215898146 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.123387138 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.132489312 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.087606824 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.885469612 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.1596323 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.117566596 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.43328728 seconds)
done (took 5.550326123 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.188051646 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.248871672 seconds)
    (2/2) benchmarking "String"...
    done (took 0.166413064 seconds)
  done (took 1.720814403 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.094060771 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.064331595 seconds)
    (3/3) benchmarking "different"...
    done (took 0.06932935 seconds)
  done (took 1.534162992 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.067323123 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.137958728 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.06823362 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.068951684 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.068538451 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.06799003 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.068239338 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.068336037 seconds)
  done (took 1.857451581 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.073917035 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.069371256 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.067365886 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.069245254 seconds)
  done (took 1.586260026 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.067342915 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.123950195 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.06639404 seconds)
    (4/4) benchmarking "different"...
    done (took 0.066503567 seconds)
  done (took 1.626516637 seconds)
done (took 9.903617889 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.163515476 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.876591455 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.874005942 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.146138783 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.275400667 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.33934257 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.126430658 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.208900801 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.114092468 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.077434477 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.148026574 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.079926352 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.484210974 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.479844761 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.072997781 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.176870671 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.655184806 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.088676039 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.136233676 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.465154771 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.079112719 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.089045848 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.08687909 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.072669043 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.323164236 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.15364592 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.679059025 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.094384931 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.069684859 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.096072622 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.072195039 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.079493933 seconds)
  done (took 11.223662448 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.117746823 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.115390641 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.071047356 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.1256232 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.095857264 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.071632346 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.076863199 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.069619354 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.090419452 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.126658516 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.092517107 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.124247744 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.068308569 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.070894373 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.09831981 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.198927149 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.082400343 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.083528559 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.069535346 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.083010009 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.107509111 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.080283322 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.080190243 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.079904303 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.134282576 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.171038354 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.098316401 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.099466496 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.067742021 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.081047307 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.11664988 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.126845067 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.069198852 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.067060758 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.122290831 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.097350042 seconds)
  done (took 4.902857848 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.896280047 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.098322131 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.109339347 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.10020928 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.108370949 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.115211734 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.148249347 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.124731914 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.10678789 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070982143 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.177322506 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.683410062 seconds)
    (12/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.143132541 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.250837516 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.073009125 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.146899616 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.360383693 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.093642142 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.071493416 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069931051 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.09732736 seconds)
    (21/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.066407602 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071003058 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.138387723 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.069858204 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.177371551 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.615439161 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.18404628 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.073763314 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.100142842 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.068239599 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.144200068 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.095988926 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.072412592 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.566968482 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.068320876 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.066551988 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.090579283 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.096117627 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068346493 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.069503588 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.0803611 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.067933243 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.110417855 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.080965151 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.519527154 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.071679285 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.613840819 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.315474566 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.074875546 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.073455023 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.102853759 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.065981954 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069253878 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.949737667 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.148184566 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.068274473 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.274468458 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069265799 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.069487666 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.070224811 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.100749494 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.071677164 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070013498 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.075108918 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.097896091 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.796342098 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.149252483 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.097986785 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068273551 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.412320025 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.075553729 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071127937 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070724629 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.095071892 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.13361499 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068018786 seconds)
    (77/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.065802019 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.110386681 seconds)
    (79/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068705639 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.095620396 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.090594887 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.19846645 seconds)
    (83/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.066851399 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.069330074 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.068762682 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.322866416 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.163935 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068534916 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.069323536 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.491571911 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.066495778 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06837868 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070448812 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.092382826 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068484649 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.065669285 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.06679485 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.100767832 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.072529409 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.331569918 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.068744507 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.499785033 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.070939331 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.10483458 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.123041425 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06999162 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.103984158 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.069596985 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.066587448 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.075307304 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.067558164 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.06638901 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.071412113 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.067707275 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068414844 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.070813833 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069772951 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069153789 seconds)
  done (took 23.729098439 seconds)
done (took 42.059670943 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.404183602 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.081057284 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.081137433 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.080869278 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.080906701 seconds)
  done (took 2.097364097 seconds)
done (took 3.568588511 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.255812782 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.077099146 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.065792251 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.205086044 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.090151285 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.178449108 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.216926962 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.161780597 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.090279324 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.089935195 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.208872211 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.222547849 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.228535298 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.089949866 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.161489911 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.228325603 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.08986172 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.065707202 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.089462306 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.089870529 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.089553973 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.065586353 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.089717017 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.089477354 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.160519198 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.089677773 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.065664504 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.161113652 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.089582922 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.161111703 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.090041893 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.089617281 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.090183895 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.161423999 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.089696741 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.158996551 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.065586917 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.088956009 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.088119446 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.088640723 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.088257215 seconds)
  done (took 6.483307111 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.075840747 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.084144597 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.085010616 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.06357768 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.072605055 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083923898 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063553127 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082997279 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.092786185 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083896364 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084323781 seconds)
  done (took 2.318528726 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071559053 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.084288419 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08578077 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063542832 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.074743349 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.084830287 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063602337 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084719736 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.086917266 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.085086737 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084731278 seconds)
  done (took 2.268007813 seconds)
done (took 12.461519748 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.190971279 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.092086423 seconds)
  done (took 1.664936383 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.262404675 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.526377452 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.969115182 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.120794181 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.099707013 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.113441369 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.229052591 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.095297672 seconds)
  done (took 7.990661941 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.128743216 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.069470103 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.071073409 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.070611084 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.070041363 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.070313358 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.069294813 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.069144156 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.069912403 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.071033454 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.070711346 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.06904783 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.069178902 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.070174659 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.069019464 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.071237532 seconds)
  done (took 2.678691265 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.105015701 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.071224807 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.101346009 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.063251083 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.073386579 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.063612873 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.072296549 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.074435052 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.071794221 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.071652411 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.073873722 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.071692806 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.072684474 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.073008317 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.074252451 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.074485209 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.074357299 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.072166046 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.074351983 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.074766006 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.073996804 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.07428538 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.075191484 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.072658843 seconds)
  done (took 3.316089169 seconds)
done (took 17.049515734 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.17697329 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.07724723 seconds)
  done (took 1.645422091 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.094610783 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.095433536 seconds)
  done (took 1.602724399 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.07433421 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.061481129 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.079503059 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.071193283 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.062624981 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.06264644 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.078342873 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.062470265 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.062692901 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.06277806 seconds)
  done (took 2.094184122 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.064157124 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.069709129 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.067566393 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.066021 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.068105644 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.064113153 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.066279187 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.064186853 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.069827538 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.062766782 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.066846545 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.08448913 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.066684324 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.084730975 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.066040823 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.066818803 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.068523226 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.06640401 seconds)
  done (took 2.64545535 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.062458354 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.062932446 seconds)
  done (took 1.545509367 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.065677758 seconds)
    (2/7) benchmarking "second"...
    done (took 0.063196235 seconds)
    (3/7) benchmarking "month"...
    done (took 0.065298078 seconds)
    (4/7) benchmarking "year"...
    done (took 0.065398155 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.063049317 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.06260021 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.063191334 seconds)
  done (took 1.861730496 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.427773476 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.186950756 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.420670062 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.070518527 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.078007077 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.258822877 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.065488352 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.069963438 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.069917441 seconds)
  done (took 3.106820006 seconds)
done (took 15.92506417 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.083978698 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.182556213 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.113775943 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.415877866 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.09312526 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.06880234 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.114259922 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.206163844 seconds)
done (took 2.7161254 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.260949124 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.177024898 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.315433016 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.150374405 seconds)
  done (took 3.069046314 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.396055166 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.169621672 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.076887775 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.06791608 seconds)
  done (took 2.144649867 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.066370767 seconds)
    (2/2) benchmarking "read"...
    done (took 0.072846491 seconds)
  done (took 1.575392056 seconds)
done (took 8.490816177 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072535391 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.062826021 seconds)
    (3/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.09788667 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.064308606 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.065098672 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.064687768 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.063605453 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.065063413 seconds)
    (9/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.06285343 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.063346514 seconds)
    (11/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.064038698 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.065047414 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.065324026 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065192585 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064788795 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064938599 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065064686 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.064590554 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064777518 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064545 seconds)
    (21/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.06314548 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064784531 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.064394429 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.064834055 seconds)
  done (took 3.048807372 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.081020154 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.06718366 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.068058056 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.067725923 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.068916486 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.068459305 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.068291833 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.067214922 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.068514001 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.066869268 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068686621 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.068808397 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.066711454 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.068580115 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066939267 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.068898457 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.068455253 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067898786 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066762373 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.068850372 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.068395714 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067599026 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.068807811 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.068254653 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.068920534 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.068816968 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.066904518 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.067392136 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.068412802 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.068840499 seconds)
  done (took 3.501839786 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.067354626 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.060650366 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.061242406 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.071008218 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.061348363 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.061476843 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.062127997 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.061047149 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.061588847 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.062543016 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.06188064 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.061287437 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.062275763 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.061214472 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.061628485 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.061611299 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.066376558 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.081578861 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.061346867 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.061026697 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.066147831 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.061569979 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.06126828 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.061050494 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.061646354 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.061632547 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.061019829 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.061657645 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.061586723 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.062009172 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.061822954 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.066057299 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.067053045 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.061591589 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.072176309 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.067029328 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.061459092 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.068331672 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.062524834 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.061201883 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.061622838 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.061398009 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.061080701 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.061371874 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.072359403 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.061940331 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.062175152 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.062354465 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.061453029 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.061177897 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.061201039 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.063282075 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.07037846 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.062593641 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.061163875 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.062432411 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.061282391 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.06212607 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.061213341 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.061148578 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.060947591 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.065634342 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.062778126 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.062070394 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.082285553 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.062644343 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.07208472 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.06172314 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.061732273 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.065473766 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.062488855 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.079806243 seconds)
  done (took 6.036451246 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.072488247 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.072660946 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.080415141 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.071873257 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065404485 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.062210448 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065654377 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062124387 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.071655791 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.066344782 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062355353 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065874843 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.071590883 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066577578 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06351137 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.071891839 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.06618053 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065218065 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.062187216 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.0664424 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063584424 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065845966 seconds)
  done (took 2.941645816 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.141542618 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.067966575 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.107372635 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.071633118 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.07045102 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.071727752 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.067734143 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.067828872 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068085119 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068463134 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06848485 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068271929 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070259085 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068560521 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068916011 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068521124 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068209623 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068624405 seconds)
  done (took 2.798353698 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.078031622 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.067175291 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.091127849 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.066942017 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.067711637 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.067450722 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071038818 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.071741186 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.067111639 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.06766759 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.071848232 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067267097 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.067482606 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067895086 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067466482 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.068065836 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.067236255 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06780309 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.072205494 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.071858647 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.071177771 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.07138706 seconds)
  done (took 2.995315292 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079047619 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066395994 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.081897112 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.068000034 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061720713 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062083894 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.068018131 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.0667966 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.067866804 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.066332347 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066621421 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061786483 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.06857269 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066990979 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.069265462 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066842365 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066686819 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067023482 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066594121 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061866092 seconds)
  done (took 2.7994377 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.099396488 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.06400035 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.064303388 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.069323242 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.075301674 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.064420401 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.069824234 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.064579068 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.064825361 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.087285939 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.064706452 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.064757066 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.069481231 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.067634016 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.064808016 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.070310101 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.070377195 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.070320543 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065051587 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064732111 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.086923331 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.064566252 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.070577764 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.065116993 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.064637472 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.06456497 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064373763 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.067376923 seconds)
  done (took 3.394008467 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.066064229 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064689287 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.065142684 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.065188906 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.064817891 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.065156994 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.065139008 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.065165099 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.065277738 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.065129162 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.065125288 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.065195544 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.067841095 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.064736489 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065039838 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.065077383 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065174863 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.065578585 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065561946 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065558058 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.065186719 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064756149 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.064553801 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.065328295 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065591191 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.065317107 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067294331 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065175504 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06463951 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065270342 seconds)
  done (took 3.420564959 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.074380528 seconds)
    (2/2) benchmarking "in"...
    done (took 0.072518769 seconds)
  done (took 1.602991355 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.06303662 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.078769548 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060786667 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.073862425 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069990869 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065462404 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070534687 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070295196 seconds)
  done (took 2.00337816 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.093338074 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.11892205 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.062978336 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.063743283 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.093054795 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.130782596 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.103688062 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.076067642 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078227765 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.066668651 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.064099059 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.103153521 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.062737131 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.077219787 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064254581 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.072591259 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070779785 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.08139037 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.077001262 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.062011648 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.076043386 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064067509 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.062073446 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.063958843 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.062831904 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.070571044 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.079080231 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.076008395 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071629948 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.060451099 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.082133536 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.061348643 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.06260004 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072026593 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.092788457 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.061693882 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.099264471 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.061935912 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.066739938 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.061208053 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.074327866 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.082778021 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.077193783 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.080277704 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.063611802 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.063637089 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.061119206 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.063475886 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.065650426 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.07170852 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.06106959 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069948555 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.060898068 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.063329592 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.072910329 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.062063982 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.066943027 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.072111939 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.075970689 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.072851174 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.074743009 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.078322484 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.071206709 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.069259051 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.062989634 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.082772755 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.063552554 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.076302066 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.077763844 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.062958575 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.075663138 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.061381394 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.060764396 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.061500863 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.09598794 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.063617647 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.06297614 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.061746961 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.061919211 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.063415496 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072122314 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06715397 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069791409 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065378003 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078424758 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.071735875 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.062056838 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.068499532 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.08071693 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.06598464 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.062091788 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.079402572 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.066100714 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.061231145 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.079877607 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.072224398 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.063294024 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.062328895 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.065569448 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075987878 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.062863045 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060451653 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070226717 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.063108703 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.090504277 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.066014791 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.207482989 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.063937254 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.075289595 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.068861476 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.065352044 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.062273689 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.068603677 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.064318907 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.062091518 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073456268 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.063191372 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.078658902 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.070436949 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.078323182 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.079371305 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.074420683 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.0802963 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.062744152 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.060773144 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.080422748 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.072301418 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.063222801 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.08003756 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.061302094 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.07558356 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.06124499 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.063515588 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.072079277 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.060764793 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063496216 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.061642197 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.066471244 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.063069 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063580906 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.067849954 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.071086832 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.074535859 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.063214123 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.071801368 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.062260485 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.077972558 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.072396638 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.066792904 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065248725 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.062584156 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.074306641 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.068919327 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.071723658 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.061521028 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.062370236 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.062102782 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.073712958 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072333651 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.064156288 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.069195593 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.067109169 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.062409604 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.062247543 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.062975208 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.066084985 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.065155431 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.062629498 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.07075314 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.071317866 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.07614623 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.068774887 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.071407928 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.060725867 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.061198817 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.063341151 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.061215697 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.066806405 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.071980989 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07809519 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.073964197 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.083297218 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.061926798 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.072126661 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.063373256 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.079372941 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.075802397 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.062957093 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066567144 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.060667694 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06337379 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.072076687 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074019041 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.076044153 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077312931 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.06671909 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.06661299 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.061304507 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.077585345 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.062421111 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071342632 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.072652673 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.066471113 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.062092881 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.063511315 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.071279595 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.06675048 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.061641988 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.078066646 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.067502135 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.061063015 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.076327943 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.061579737 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.072813186 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.061250651 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.065956694 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.067086801 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.063135044 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.071572718 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.077417486 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.060477285 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.062125655 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.077585872 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.203587108 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06448506 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.071241564 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.078426315 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.067211641 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.07116694 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073928377 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.072751311 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.067194606 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.072748011 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.062713751 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.072409931 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.064672175 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.074149515 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.061599686 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080349081 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.060578931 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.077819849 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.062145449 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.07354229 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.062810026 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072320604 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.062779883 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.079647217 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.063659343 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.062408638 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.074126103 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.060572698 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.071733231 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.061538852 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.067391659 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.069279005 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.072298289 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.063975586 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.072564123 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.063541133 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.071116044 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.067290934 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.070822397 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.071718217 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.066764071 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.061489587 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.070814238 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073605884 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.070841251 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.063402439 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.063325823 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.062315845 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.072040262 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.063289042 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.063274241 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070651117 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066935871 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.068132737 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063383979 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.064024891 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.063714092 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071384065 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072367854 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080285739 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071455408 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.070182676 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.071945029 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.061598446 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.078112862 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.062465349 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.072671091 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.060716293 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.068063573 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.071931123 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.062038451 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081416405 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.063348402 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.070288042 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.07451753 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071297096 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.066193512 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.080186752 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.065278663 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.070636887 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.070737487 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.066795067 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.06916301 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.063638201 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.071091529 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.071775753 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.073048492 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.063177006 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.07004203 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071455999 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063445959 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.06941363 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.063401464 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.071010998 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.063695233 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060893432 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.067059944 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073504477 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.067032275 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.067241608 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.062075314 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.060809979 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.06193703 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.068781623 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.066707864 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.071128539 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07766155 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060605621 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.062417635 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.061109271 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.065641344 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080012196 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072140336 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.070710436 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.066743895 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.060618002 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.063094268 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.063598216 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.20642297 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.066179711 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.061289666 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.061696047 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.073296888 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.063901068 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.067309353 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.06250249 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.063255936 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.072371923 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.066489718 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.062721778 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.069155632 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.061852608 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.067968349 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.061132987 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.063356968 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.067324873 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.061508914 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.065991453 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.072881865 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.078734529 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.06911365 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.071264138 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.062811035 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.070117832 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.077675188 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.068513852 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063066242 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.071815495 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.061138554 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.080578953 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.071833757 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.07136646 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.072411083 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.062995069 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.078961863 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.066807567 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.072290147 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077624109 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063129029 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.068319314 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.061685563 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.077898857 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.066760594 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.061265982 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.070852893 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070663346 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.068649172 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.074388726 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.062631176 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.070301839 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.066916432 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.065806577 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.063488156 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.063216335 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.071238422 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.078546322 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.062543073 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.06643414 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.07023814 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.071101118 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.06679052 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074732738 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.070970696 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062944433 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.063600142 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.066016886 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.062750662 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.074137882 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062332848 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.066851226 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.066836297 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.0615506 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.068808549 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07876621 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.07187924 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072456339 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.061484809 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.060992085 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.080626138 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.066182355 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.065437366 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.071278062 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.072069359 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074827336 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.072165349 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.079337327 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.062841608 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.068154906 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074868831 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.062576865 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.061839059 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.066037386 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.063448802 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.071429321 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072388432 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.070149885 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063784197 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.069483338 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.075821765 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.063130306 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.06739796 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.066641592 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.062606725 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.07284846 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.070456995 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.073833921 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.063158116 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.060992233 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.066183837 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.071038155 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.069630134 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.071142345 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062353921 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.067831037 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.07568597 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.069552682 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.204788957 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.062144602 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065146376 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.071984746 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.066065278 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.061172652 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.066969809 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.066351068 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.068707354 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.072047653 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.066990754 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.06136107 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.079349178 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.070312969 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.071766962 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.063744177 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.063501162 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062352743 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.060938097 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073753315 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.061172997 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.063301273 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.067006198 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.063552077 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.079831392 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.070719976 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07814681 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062975413 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.067131616 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.061491102 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.072241045 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.066603649 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.061941848 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.072783333 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.060833835 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077586771 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.073748239 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.066776193 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.060916382 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.067563657 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.070490929 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.077002111 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072199054 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.070952288 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064774191 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072010605 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.063740237 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.073341794 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.061461615 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.060786721 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.072236084 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071276782 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074676699 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.061375571 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.072839499 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.064382296 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.07103139 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.070524192 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.063615781 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063751844 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.063706222 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072016827 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.066801085 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.071849452 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.067419037 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.07969094 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.062973545 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.073708991 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.071964892 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.073743866 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07643465 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075101685 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.070272531 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.062916103 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070098426 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.070654713 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.063048293 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.067572524 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.065497449 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.084332804 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.063712423 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.063537798 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.076817826 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.068349859 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.06203024 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.069019441 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.06721845 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.072871353 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.063475133 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.073333362 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.065987837 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062873367 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.067450476 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.067294219 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.060935635 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.061583647 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061832802 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072187162 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.066616601 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.062353267 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081820045 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.063353727 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.07154024 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074005355 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.069445399 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.063826767 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.060774229 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.062973734 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.075622969 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077994369 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.065882293 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070757882 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.063304106 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.07200894 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.060843696 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.071506755 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.069937432 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.211815276 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.062121015 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062480403 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.077550723 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078291172 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.067682641 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.072382337 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.07184111 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.063785835 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.084897669 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.071469792 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063075228 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.073660393 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.06416211 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.061144912 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.061125058 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.063435645 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.074205376 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.061402086 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.064162999 seconds)
  done (took 43.237190769 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.099911584 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062485259 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.06160883 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061847477 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.069752757 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062664095 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061915821 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063036741 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.062782905 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.064309224 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.06171853 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064805402 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.068194958 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.07502148 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.070064118 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065387378 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06178873 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063014023 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061953582 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062708527 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.068199464 seconds)
  done (took 2.937969686 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.065513326 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.065523335 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065447692 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066184238 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065388256 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061916056 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065525811 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061870704 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066532604 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062667436 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.066572212 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062159672 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.062223601 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.062590159 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06271776 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063711566 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.066194532 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065436577 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.061693783 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065575592 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063380925 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065786777 seconds)
  done (took 2.949623276 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063361904 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.062413319 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.071330205 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.061090663 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.061343361 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.064788989 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.06105111 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.06680414 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.066804198 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.06668501 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.071600699 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.062400504 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.061462178 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.067947062 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.061024516 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.062318247 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.105470409 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.062518939 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.062682644 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.060912555 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.064018702 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.07125709 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.061023422 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.061323617 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.066524198 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.065134626 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.061565708 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.063696883 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.062180869 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.066416666 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.062761784 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.060917322 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.071105876 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.07048678 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.066490158 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.066814373 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.06311972 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.062343118 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.061517351 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.061254064 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.07076034 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.062599334 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.061287765 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.063287112 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.071169874 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.061398225 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.060773144 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.071164739 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.061255475 seconds)
  done (took 4.734898023 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.072328878 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.114427081 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.067969167 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.095410149 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.07482064 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.067508453 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.067452381 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.095993297 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.062649364 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.063165215 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.075684477 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.076169415 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064922902 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.065793524 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.06777698 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064090933 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064789553 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063602783 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.067254481 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063591957 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.067344371 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.06860481 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.074482938 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.075528024 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065151297 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063510979 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063874123 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.065448048 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.074409846 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.067330051 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.06594517 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.066357646 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.075185858 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.069605232 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064094996 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.064209657 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.075776623 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.064697847 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.06399655 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.062758141 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.06428165 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.065563607 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.069032658 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.07590372 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064240783 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.069384118 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064456424 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.062312516 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.075288971 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.064217415 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.067807342 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.07647348 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065242735 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064514629 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065544339 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.074766408 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.064146893 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.063474528 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.064566805 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.074964166 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.062567156 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.065031676 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.078309306 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.064160588 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.067644724 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.07563284 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.069599918 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.065182234 seconds)
  done (took 6.401199167 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.071360547 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.097144045 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.077780323 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.077152327 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072247866 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.072344701 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.072388678 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.072434916 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.072556977 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.075425145 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.07235189 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.134479916 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.068954063 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.073831724 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.072731524 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.072563008 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.072489683 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072208697 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.072166606 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072545686 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.072533155 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.077516061 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.072396507 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.077257192 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.07463322 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.06881155 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.072201682 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.072152075 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.077445199 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.072237325 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.074708062 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.072255839 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.072460899 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.077581053 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.07502347 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.072147629 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.062575258 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072176002 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.072306499 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.072419799 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.068614529 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.077375555 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.072135154 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.068980989 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.07238406 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.072337613 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.077647877 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074915467 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.073961457 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.075634239 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.072419566 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.078194714 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.0723807 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.072189922 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.077701634 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.079890691 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.077602696 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.077985444 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072986381 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.077553162 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.077743502 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.079968131 seconds)
  done (took 6.233100067 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075148519 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.06821299 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.080732122 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.061298686 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.06134219 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070936602 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.0617714 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.062046263 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068271718 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.068035549 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.070022405 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.071215343 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.073559282 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.070074097 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.071216519 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.07351301 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.071173702 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.071640784 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06828742 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.071978275 seconds)
  done (took 2.964902979 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.077224762 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.081028854 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.067364383 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.071230677 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.067380077 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.071565161 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.066801705 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067577049 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068182983 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067264877 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.07296141 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.072719933 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067696983 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.071348536 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.072721602 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.071513055 seconds)
  done (took 2.690778557 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.065136336 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.069508799 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.095674696 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.062824456 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.064671734 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.062102096 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.062769344 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.061158547 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.06404474 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.076383356 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.062476699 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.065606979 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.062635526 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.061719499 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.062670942 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.065223334 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.064365448 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.062495886 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.062901625 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.094800503 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.071272566 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.063109354 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.064792873 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.062825111 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.06478472 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.071365045 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.063991661 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.064626281 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.062324274 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.065290754 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.064961607 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.069497073 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.06449744 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.062896592 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.061727553 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.062393106 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.062560676 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.0652887 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.065109974 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.062766289 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.061547412 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.06770476 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.062643932 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.063396263 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.063973807 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.064935542 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.064325315 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.068489554 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.06245612 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.064647312 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.063011498 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.064335804 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.062720884 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.070212014 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.064714048 seconds)
  done (took 5.163532583 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078980801 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.067452486 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061215476 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061060474 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.066615725 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.067796359 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.067499798 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.06703676 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067890996 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.06144871 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067742569 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.066935804 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068162434 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.067766701 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067506862 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067478434 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061275026 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.067375429 seconds)
  done (took 2.778812952 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.068204658 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067530915 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.06622157 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.063880766 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.063077377 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067885858 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061546938 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.062897842 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062881154 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.063620277 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063565981 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.063137379 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063246766 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.063141055 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.067442546 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06361857 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.062881346 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061794979 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.063306398 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061415487 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067784601 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062055976 seconds)
  done (took 2.975326423 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.118130976 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.085576951 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.158054816 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.081600517 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.090438094 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.073160821 seconds)
  done (took 2.172509439 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.095495173 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.099006801 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066645041 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067450621 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071664745 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069905919 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069931437 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070095023 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073203989 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073795309 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069805694 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073684638 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072920915 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075317884 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071735908 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071900362 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069979326 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069897724 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067092124 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077268635 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069836161 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073375216 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06993225 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069708687 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070010576 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075226675 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073147498 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073536107 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069730736 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073700383 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072118956 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070083277 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074040253 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073591227 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066482673 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073468102 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069703614 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077972295 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071874328 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075070566 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066793568 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071579856 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073486977 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072901115 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073874912 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070095188 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07343685 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070398317 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070183013 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079427641 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072421392 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075339463 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072175595 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073828365 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07411921 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079307602 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07420031 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075695274 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072079029 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074047952 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.076114067 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072351575 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075914545 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073899093 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071832036 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07612512 seconds)
  done (took 6.394656028 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105658805 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067737827 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06990828 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073580107 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075621913 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070270541 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070593774 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070361441 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070194881 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067475582 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105977876 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070363309 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075494515 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.078252457 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069896202 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.0706211 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070441908 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075276916 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067221262 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079053527 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069930906 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075139638 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075712968 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075485498 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073888626 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071919842 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069955989 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069807244 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069945522 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070271251 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073399895 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070192811 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075282097 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.067351966 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075436499 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070667537 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069823504 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073216603 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070246361 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071759897 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075321611 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077889595 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07015863 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069924665 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074027741 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070100883 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070233534 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067544992 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070156111 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067520965 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073872592 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074247416 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073889302 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075629521 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070567528 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069981265 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070108911 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070199034 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070432969 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.0723494 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075642213 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070358931 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07906744 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070645785 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070830487 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076134801 seconds)
  done (took 6.412076112 seconds)
done (took 134.022427895 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.233748039 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.199954543 seconds)
  done (took 1.987663222 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075196911 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.194808704 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.076210634 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.075147523 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.108867564 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.108401331 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.104833407 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.07279359 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.075616664 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.07261415 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.139835468 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.12598109 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.072897129 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.072960799 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.072693249 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.072564374 seconds)
  done (took 3.095568163 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.108912591 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.212023765 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.08283702 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.070828796 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.153267424 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.077429112 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.073438396 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.077511767 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.078132758 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.07118569 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.108096722 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.083978549 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.076705085 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.077158137 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.07311571 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.076279088 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.07739242 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.077665398 seconds)
  done (took 3.241382748 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.104690441 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.092314332 seconds)
  done (took 1.786788981 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.15669602 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.106297837 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145738589 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.347760429 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.138066043 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.139381841 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.142602359 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.138299951 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.112625965 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.135567669 seconds)
  done (took 3.139668287 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106855794 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.105891601 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.309180758 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.103507353 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.083263878 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.078405586 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.076059043 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.080498404 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.0763599 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.077250412 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.123056822 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.07595764 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.073166648 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.125534229 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.099469352 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.107262809 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.072144187 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.078638819 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.0805446 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.071555392 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.076272112 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.080684206 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.179343504 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.079118765 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.100680943 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.0760054 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.077559855 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.07535073 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.075363853 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.078764403 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.079507889 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.100342848 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.079405043 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.083840456 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.077160961 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.097443657 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.072213845 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.099424396 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.07571254 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.073412061 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.076061445 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.079428262 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.073526498 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.078679194 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.307561895 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.07817693 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.08072111 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.071770798 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.076022318 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.075018559 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.073695582 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.076727168 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.076627339 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.077653594 seconds)
  done (took 6.641332527 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.120576196 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.113503742 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071541045 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.118034477 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.110235929 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071424136 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.123349147 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.105402279 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.12345805 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070740595 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069856547 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.070478026 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077308931 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.080740223 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.120169416 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.113124235 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072253093 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070924743 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.112435202 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.112508704 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070057621 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.109077329 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.11486839 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.111072947 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.069343698 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070829969 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.069232832 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.070365585 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.078133705 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.076246746 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.070283344 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.079866381 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.081800457 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.076389902 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068985271 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069698775 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069452346 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.076227374 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078962128 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.07924214 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.075500756 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06906405 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069380576 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.06984511 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070721542 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069051634 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.078614603 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076707962 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.078919578 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069837877 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070453205 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.069629267 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070546266 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.076790617 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.075509207 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.077319573 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.080245936 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069615315 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069894702 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.071315031 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.080926067 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077746352 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077404584 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071201415 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.078931459 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069781852 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079718381 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.082259304 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.070082115 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.070519649 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.070061447 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069891765 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070444747 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075693728 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.075786506 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070275659 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069638632 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069778163 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077727174 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076230166 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06979421 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.07787231 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069439169 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069765583 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070311777 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070286981 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.078475981 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.076874313 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070425348 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068982463 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069422195 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069644782 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.06910664 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.077685821 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.076265679 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.0764674 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.214685314 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071048946 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.079348156 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.076172504 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070806419 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.075653336 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.070038472 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070285864 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070496805 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.076332651 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.075368755 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.078138645 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070024016 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069591071 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.076057815 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.07870463 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.070245761 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.07578522 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07809788 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.076358 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.069579182 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.079108772 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.07007217 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.078606775 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070051914 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078108646 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06997811 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076113666 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.07010014 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.069222744 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069620778 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.078699479 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070043894 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070253722 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070175974 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069883632 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.076303038 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.082192575 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070502114 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076462034 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.076147021 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070865114 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.079213839 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070868509 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.078773335 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070192189 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070611379 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06910437 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.081314786 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.070061259 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.06992505 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069966442 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.078304969 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070049539 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.07779785 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075748686 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069323814 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079548243 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.078012541 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.075809546 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.078385517 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070401914 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069827061 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069751201 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.072657026 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.078334017 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.079527037 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070181211 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069827251 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.075102575 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.078537807 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.069120777 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.075615845 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075916528 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.076121211 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.070079842 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.070002554 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078837262 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.080791086 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.076170884 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.078638432 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076439787 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.070028655 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075614229 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078490723 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069858191 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.082320375 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06984821 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.080476332 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.079536109 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.075172944 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078352421 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.079197307 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077946203 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.077712002 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.079894629 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069062506 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069287717 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.214342524 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.070224512 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.07099379 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.07583048 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.07061311 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070510081 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.080242328 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.070081973 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.079125086 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.069429275 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.076457348 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069416297 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070144463 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.081024449 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.070368717 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070510006 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.076002553 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069931842 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.075939249 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078351846 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.075629329 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069787123 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069987764 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.078769365 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.078618988 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069963593 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069888803 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070043581 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.078613597 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.078204626 seconds)
  done (took 19.013877985 seconds)
done (took 40.501677636 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.17012088 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.116524993 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.21177433 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.20070923 seconds)
  done (took 2.385110964 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.102282884 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.06632348 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.109917585 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.119449878 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.066258262 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.105278967 seconds)
  done (took 2.201421075 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.2026025 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.176634092 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.246126461 seconds)
  done (took 2.249990719 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.368638405 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.15047054 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.216588897 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.501683172 seconds)
  done (took 2.959320549 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.139594118 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.12994669 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.078424715 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.141736887 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.085397764 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.063310524 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.134488611 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.070146119 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.100789713 seconds)
  done (took 2.633718153 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.140133707 seconds)
done (took 14.192062478 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.311455421 seconds)
    (2/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.14014728 seconds)
    (3/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.162880755 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.335484438 seconds)
    (5/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.075384487 seconds)
    (6/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.095830251 seconds)
    (7/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.277616069 seconds)
    (8/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.082781864 seconds)
    (9/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.366763978 seconds)
    (10/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.334300842 seconds)
    (11/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.096984383 seconds)
    (12/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.126371487 seconds)
    (13/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.282815142 seconds)
    (14/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.078555645 seconds)
    (15/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.075816719 seconds)
    (16/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.093043709 seconds)
    (17/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.272968172 seconds)
    (18/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.234084394 seconds)
    (19/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.239811459 seconds)
    (20/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.205637553 seconds)
    (21/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.067787488 seconds)
    (22/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.075064487 seconds)
    (23/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.236504456 seconds)
    (24/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.27463883 seconds)
    (25/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.077340245 seconds)
    (26/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.15616659 seconds)
    (27/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.224739341 seconds)
    (28/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.15900098 seconds)
    (29/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.079150421 seconds)
    (30/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.090436595 seconds)
    (31/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.102086484 seconds)
    (32/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.343541562 seconds)
    (33/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.099596823 seconds)
    (34/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.074399399 seconds)
    (35/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.079764338 seconds)
    (36/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.089843075 seconds)
    (37/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.148956579 seconds)
    (38/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.260867887 seconds)
    (39/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.070725282 seconds)
    (40/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.075633706 seconds)
    (41/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.224698794 seconds)
    (42/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.218353978 seconds)
    (43/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.25432723 seconds)
    (44/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.073975939 seconds)
    (45/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.095207518 seconds)
    (46/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.146929447 seconds)
    (47/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.112437608 seconds)
    (48/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.19278442 seconds)
    (49/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.18561335 seconds)
    (50/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.213705574 seconds)
    (51/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.074665263 seconds)
    (52/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.07795103 seconds)
    (53/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.074367133 seconds)
    (54/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.074212635 seconds)
    (55/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.191496114 seconds)
    (56/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.280279276 seconds)
    (57/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.067173916 seconds)
    (58/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.074421652 seconds)
    (59/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.354448715 seconds)
    (60/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.20522212 seconds)
    (61/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.230037047 seconds)
    (62/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.087772537 seconds)
    (63/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.089200313 seconds)
    (64/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.067471083 seconds)
    (65/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.072570602 seconds)
    (66/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.076659403 seconds)
    (67/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.219672291 seconds)
    (68/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.067483057 seconds)
    (69/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.067665817 seconds)
    (70/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.256225553 seconds)
    (71/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.089560096 seconds)
    (72/341) benchmarking ("sort", BigInt, false)...
    done (took 0.266030581 seconds)
    (73/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.14977197 seconds)
    (74/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.164674673 seconds)
    (75/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.071373276 seconds)
    (76/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.077585671 seconds)
    (77/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.069228239 seconds)
    (78/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.075200047 seconds)
    (79/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.228497587 seconds)
    (80/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.249384983 seconds)
    (81/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.067216484 seconds)
    (82/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.075323605 seconds)
    (83/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.254094209 seconds)
    (84/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.121873504 seconds)
    (85/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.095896073 seconds)
    (86/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.075221443 seconds)
    (87/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.239495823 seconds)
    (88/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.16601971 seconds)
    (89/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.078964642 seconds)
    (90/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.067712935 seconds)
    (91/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.07477547 seconds)
    (92/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.236789567 seconds)
    (93/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.273576598 seconds)
    (94/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.075864973 seconds)
    (95/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.077294437 seconds)
    (96/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.148899464 seconds)
    (97/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.167278753 seconds)
    (98/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.075572799 seconds)
    (99/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.110082583 seconds)
    (100/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.085463454 seconds)
    (101/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.086704185 seconds)
    (102/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.114716685 seconds)
    (103/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.067461345 seconds)
    (104/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.170537066 seconds)
    (105/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.166947935 seconds)
    (106/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.165176931 seconds)
    (107/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.074593244 seconds)
    (108/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.200788306 seconds)
    (109/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.089412261 seconds)
    (110/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.067189362 seconds)
    (111/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.094506424 seconds)
    (112/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.074587649 seconds)
    (113/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.09088979 seconds)
    (114/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.184235646 seconds)
    (115/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.067185305 seconds)
    (116/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.08517331 seconds)
    (117/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.069020797 seconds)
    (118/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.085566312 seconds)
    (119/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.078056688 seconds)
    (120/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.084936929 seconds)
    (121/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.067117489 seconds)
    (122/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.067819613 seconds)
    (123/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.067053949 seconds)
    (124/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.204939351 seconds)
    (125/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.088684004 seconds)
    (126/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.089769088 seconds)
    (127/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.076980035 seconds)
    (128/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.07140309 seconds)
    (129/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.213114881 seconds)
    (130/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.148962114 seconds)
    (131/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.067381209 seconds)
    (132/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.158416924 seconds)
    (133/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.194061323 seconds)
    (134/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.068943544 seconds)
    (135/341) benchmarking ("sort", Float32, false)...
    done (took 0.139417029 seconds)
    (136/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.076457398 seconds)
    (137/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.069922054 seconds)
    (138/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.147899926 seconds)
    (139/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.067244633 seconds)
    (140/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.199152895 seconds)
    (141/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.075910849 seconds)
    (142/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.066892214 seconds)
    (143/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.076608617 seconds)
    (144/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.071212407 seconds)
    (145/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.07609945 seconds)
    (146/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.067030307 seconds)
    (147/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.341902555 seconds)
    (148/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.094545466 seconds)
    (149/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.07630199 seconds)
    (150/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.078018353 seconds)
    (151/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.067672674 seconds)
    (152/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.093772239 seconds)
    (153/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.092311797 seconds)
    (154/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.140164382 seconds)
    (155/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.067918127 seconds)
    (156/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.150499698 seconds)
    (157/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.071798468 seconds)
    (158/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.067678355 seconds)
    (159/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.076350478 seconds)
    (160/341) benchmarking ("sort", Bool, false)...
    done (took 0.145897232 seconds)
    (161/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.06699575 seconds)
    (162/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.0965774 seconds)
    (163/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.078087848 seconds)
    (164/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.067149667 seconds)
    (165/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.075894889 seconds)
    (166/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.074001597 seconds)
    (167/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.076876811 seconds)
    (168/341) benchmarking ("sort", Int64, false)...
    done (took 0.068436072 seconds)
    (169/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.066862353 seconds)
    (170/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.183319353 seconds)
    (171/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.068420896 seconds)
    (172/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.154952313 seconds)
    (173/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.067279837 seconds)
    (174/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.074307906 seconds)
    (175/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.075841064 seconds)
    (176/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.068169557 seconds)
    (177/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.080356797 seconds)
    (178/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.156607638 seconds)
    (179/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.09529734 seconds)
    (180/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.067023232 seconds)
    (181/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.159377531 seconds)
    (182/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.074406778 seconds)
    (183/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.067957906 seconds)
    (184/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.146259505 seconds)
    (185/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.067336922 seconds)
    (186/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.086238025 seconds)
    (187/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.149084435 seconds)
    (188/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.066852994 seconds)
    (189/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.068046042 seconds)
    (190/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.08619325 seconds)
    (191/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.06737901 seconds)
    (192/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.068152412 seconds)
    (193/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.076569007 seconds)
    (194/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.06572823 seconds)
    (195/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.222758259 seconds)
    (196/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.085345931 seconds)
    (197/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.079096091 seconds)
    (198/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.087754625 seconds)
    (199/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.065622082 seconds)
    (200/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.067259916 seconds)
    (201/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.067635143 seconds)
    (202/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.068904761 seconds)
    (203/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.096292475 seconds)
    (204/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.075813938 seconds)
    (205/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.067288385 seconds)
    (206/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.066973149 seconds)
    (207/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.163089335 seconds)
    (208/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.110525837 seconds)
    (209/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.067022313 seconds)
    (210/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.14802985 seconds)
    (211/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.067335407 seconds)
    (212/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.087942661 seconds)
    (213/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.082453869 seconds)
    (214/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.070462598 seconds)
    (215/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.094580041 seconds)
    (216/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.159146906 seconds)
    (217/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.082964166 seconds)
    (218/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.066972176 seconds)
    (219/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.078224143 seconds)
    (220/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.06749552 seconds)
    (221/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.076281348 seconds)
    (222/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.073969122 seconds)
    (223/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.07060391 seconds)
    (224/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.074479275 seconds)
    (225/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.066872988 seconds)
    (226/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.065620795 seconds)
    (227/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.067187554 seconds)
    (228/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.066360821 seconds)
    (229/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.067268219 seconds)
    (230/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.071481532 seconds)
    (231/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.067446937 seconds)
    (232/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.08321672 seconds)
    (233/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.067227483 seconds)
    (234/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.067557316 seconds)
    (235/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.069967009 seconds)
    (236/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.074428109 seconds)
    (237/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.149509834 seconds)
    (238/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.074847419 seconds)
    (239/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.068775444 seconds)
    (240/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.152591755 seconds)
    (241/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.07422746 seconds)
    (242/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.125032499 seconds)
    (243/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.074715169 seconds)
    (244/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.134131916 seconds)
    (245/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.210159325 seconds)
    (246/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.068242091 seconds)
    (247/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.083545712 seconds)
    (248/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.069059271 seconds)
    (249/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.06731321 seconds)
    (250/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.067451704 seconds)
    (251/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.066805906 seconds)
    (252/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.065488604 seconds)
    (253/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.142494768 seconds)
    (254/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.078462355 seconds)
    (255/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.077433212 seconds)
    (256/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.0926116 seconds)
    (257/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.068013038 seconds)
    (258/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.067393329 seconds)
    (259/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.241796808 seconds)
    (260/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.076382504 seconds)
    (261/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.068661732 seconds)
    (262/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.070502186 seconds)
    (263/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.068623327 seconds)
    (264/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.075063992 seconds)
    (265/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.072006001 seconds)
    (266/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.066047793 seconds)
    (267/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.15687163 seconds)
    (268/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.067931425 seconds)
    (269/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.068414835 seconds)
    (270/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.067664612 seconds)
    (271/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.075042864 seconds)
    (272/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.0671107 seconds)
    (273/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.069602409 seconds)
    (274/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.072022495 seconds)
    (275/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.06694348 seconds)
    (276/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.156995068 seconds)
    (277/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.069776283 seconds)
    (278/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.149254935 seconds)
    (279/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.074527857 seconds)
    (280/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.066645027 seconds)
    (281/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.068062644 seconds)
    (282/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.071661351 seconds)
    (283/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.065256016 seconds)
    (284/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.144471087 seconds)
    (285/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.065728275 seconds)
    (286/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.067303207 seconds)
    (287/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.071058561 seconds)
    (288/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.074162017 seconds)
    (289/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.06720296 seconds)
    (290/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.067412901 seconds)
    (291/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.152480895 seconds)
    (292/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.093199132 seconds)
    (293/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.06979354 seconds)
    (294/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.067349522 seconds)
    (295/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.065944969 seconds)
    (296/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.067163061 seconds)
    (297/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.067661425 seconds)
    (298/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.067073047 seconds)
    (299/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.074535991 seconds)
    (300/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.067304217 seconds)
    (301/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.208478007 seconds)
    (302/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.071851153 seconds)
    (303/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.067291458 seconds)
    (304/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.067031342 seconds)
    (305/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.124521646 seconds)
    (306/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.165842736 seconds)
    (307/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.066117275 seconds)
    (308/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.078902731 seconds)
    (309/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.071049276 seconds)
    (310/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.068906275 seconds)
    (311/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.092759924 seconds)
    (312/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.069052111 seconds)
    (313/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.066638281 seconds)
    (314/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.066875903 seconds)
    (315/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.067076426 seconds)
    (316/341) benchmarking ("sort", Int8, false)...
    done (took 0.151059095 seconds)
    (317/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.066836831 seconds)
    (318/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.133389423 seconds)
    (319/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.065597065 seconds)
    (320/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.067773175 seconds)
    (321/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.067192566 seconds)
    (322/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.078852644 seconds)
    (323/341) benchmarking ("sort", Float64, false)...
    done (took 0.138914931 seconds)
    (324/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.075408574 seconds)
    (325/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.067523131 seconds)
    (326/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.067933731 seconds)
    (327/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.06685192 seconds)
    (328/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.069596766 seconds)
    (329/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.067356243 seconds)
    (330/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.068089107 seconds)
    (331/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.068043873 seconds)
    (332/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.071577573 seconds)
    (333/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.068187912 seconds)
    (334/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.069098902 seconds)
    (335/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.068705469 seconds)
    (336/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.217374384 seconds)
    (337/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.069355477 seconds)
    (338/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.067353741 seconds)
    (339/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.066549678 seconds)
    (340/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.066349078 seconds)
    (341/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.184756815 seconds)
  done (took 39.59613642 seconds)
done (took 41.246630521 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.124489542 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.080405929 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.078964305 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.07585286 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.078899675 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.077757134 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.078845902 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.076946178 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.078335802 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.078043122 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.107795819 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.066064816 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.074436065 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.082192059 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.075873906 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.081849206 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.079054496 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.082577887 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.067609568 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.080936786 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.09056391 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.079016612 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.075890248 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.080562934 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.067221935 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.076144815 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.121135293 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.086021781 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.07130399 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.076443591 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.074356813 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.085171279 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.074545598 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.073180507 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.076166446 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.072507685 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.076273359 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.073767562 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.120559255 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.072658092 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.066861971 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.078583669 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.074075066 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.074548756 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.075090283 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.078213859 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.072023164 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.080284517 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.066122544 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.077859961 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.120941105 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.07173145 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.071092235 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.074883928 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.071949714 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.075986134 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.070894294 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.078080947 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.071954189 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.078206134 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.07535416 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.075005954 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.066413982 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.075447942 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.073813248 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.074142265 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.065563042 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.07197398 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.066476065 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.066924797 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.065720102 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.075389022 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.073619577 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.071550515 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.065557387 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.066248397 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.065509293 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.079222782 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.072874588 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.075972659 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.066864462 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.07182791 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.071362599 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.067032122 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071615984 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.078250412 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.065725316 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.067068374 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.065945203 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.080893186 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.072810064 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.066651929 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.078242451 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071558079 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071704206 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.066528481 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.065598897 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071672695 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.0745844 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.066700907 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.065507362 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071720629 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.071758848 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.07548364 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.066835561 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071380084 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071591567 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.065415113 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.07522827 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.07401359 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.075161689 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.079215286 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.074923129 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.077891524 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.067102954 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065207752 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.075798884 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.066563483 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071562394 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.221008984 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.072648051 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.075011425 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.066887532 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.065525734 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071566884 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.07321287 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.067208019 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.067426399 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.066947121 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.076085231 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.073554151 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.065303303 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.066804331 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.075423034 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.07565233 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.065795178 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.065537369 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.075997978 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.06713046 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.072798964 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.072754375 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.075359453 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.066343325 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.066759214 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.065729076 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.066280377 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.065999392 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.071805122 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071959924 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.06762266 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.07543456 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.073550513 seconds)
done (took 13.232188237 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067960212 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.109134654 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.11658604 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.112296718 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.080439255 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.068001259 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.070952841 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.085899114 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.071151916 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.091318013 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.092522147 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.088938344 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.132336405 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.066111019 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.067562591 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.06820185 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.065855415 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.078853635 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.115003678 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.090835226 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.103356978 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.067277938 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.083159237 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.086735144 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.081316238 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.084827354 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.068660318 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.067934262 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.070302529 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.085719479 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.092894812 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.066902866 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.068103805 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.085190738 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.082408627 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.075228501 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.067721329 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.072864246 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.070802053 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.067158676 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.068825724 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.084667362 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.073200416 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.073456043 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.068372012 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068557198 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.067689276 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.074028489 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.084452573 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.072501341 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.079104737 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.085859804 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.06878706 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.067231798 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.065879037 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.074685351 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.067382595 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.06798596 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.067891118 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.067285567 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.067613484 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.070733277 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.072411838 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.073693641 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.070594903 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.073356006 seconds)
  done (took 6.876283402 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083761034 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.093436832 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.081821932 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.082151209 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.067241915 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.068044921 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.068114526 seconds)
  done (took 2.3088558 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068652742 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.10717071 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.115882599 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.115324051 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.122146721 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.112925875 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.068118437 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.099317717 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.067191458 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.108705718 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.12229801 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.117044851 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.070604922 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.079439339 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.067802447 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.116365351 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.067981141 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074704313 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.112223277 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.117668039 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071830752 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.098606912 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.081037794 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.068229443 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.114697516 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.108210177 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.069731524 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.068199063 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.069592711 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.067472661 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067492606 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089923356 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.107340083 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.074316689 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068176302 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.066746283 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.105608112 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.06862084 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.104761641 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.07662816 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.105082788 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.0696587 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.069857338 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.067570706 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.068700842 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.109833283 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.068330623 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067604292 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.067304757 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.108568838 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066874463 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.107843183 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.069847576 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.072560029 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.074750013 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.073301245 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.075099346 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.067971467 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.109423839 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.077431851 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06952312 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.119195632 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.11794028 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.105823573 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.118207552 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.076470277 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.10891968 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.106578886 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.067389855 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.067159386 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.068081845 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.119615161 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.070741426 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.070257671 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.07259716 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.075261223 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.110984257 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.122245645 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.122974819 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.080756151 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.070213013 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.06751182 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.073465707 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.273328852 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.073014647 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067945311 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.069029293 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.067086166 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.072729921 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.06996486 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.072459411 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.067798366 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.078102557 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.070342202 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.069951554 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.115897261 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.06808809 seconds)
  done (took 10.234980879 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.06984766 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.07038497 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.068822082 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068993659 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.069780658 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.0690755 seconds)
  done (took 2.201221393 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.091694513 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.068507861 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.079848389 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068252287 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.090134632 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.110525018 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.11063769 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070141272 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.084562613 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.078557761 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.110875012 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.113059898 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.114098415 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.070198881 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.110927698 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.069075994 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.110555602 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.07091133 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.078858133 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070515664 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.084292097 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.069988858 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070695292 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.117560672 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.071051794 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.069201697 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069392836 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.07885625 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.078341761 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.070585035 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.070262904 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.07108578 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.077006114 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.070290267 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.11165952 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.077483997 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068568626 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.073346554 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.07111456 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.071713851 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.113762948 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070550492 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070580209 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.073189966 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.070340873 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.076572886 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.073560114 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.07186522 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.111665635 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.073200237 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.073277896 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.068743896 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.070815052 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.073229372 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.081114082 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070105949 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.073003598 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.111512134 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.069548083 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.076682704 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.06815332 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.070793619 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.070012403 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.071110727 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.073045992 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.073501275 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.076763884 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.070149104 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070487159 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.068683432 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.073515794 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.068228558 seconds)
  done (took 7.500895292 seconds)
done (took 30.872938261 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.54469076 seconds)
  done (took 2.294055764 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.941580755 seconds)
  done (took 2.729708372 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.144798922 seconds)
  done (took 9.941529245 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.339834318 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.415498133 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.74243371 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.134101605 seconds)
  done (took 3.46158852 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.745742466 seconds)
  done (took 2.54629261 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.232744328 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.223102315 seconds)
  done (took 2.261291745 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.375786282 seconds)
  done (took 2.168855582 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.190486983 seconds)
  done (took 2.98031932 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.235554917 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.165767091 seconds)
  done (took 2.204379684 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.635528374 seconds)
  done (took 2.428290737 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.514512999 seconds)
  done (took 6.317573427 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.242497868 seconds)
  done (took 2.082943941 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.23105989 seconds)
  done (took 2.038923032 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.02274749 seconds)
  done (took 3.824366948 seconds)
done (took 49.08458021 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.086690595 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.088517304 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.088557473 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.083035102 seconds)
  done (took 2.106286008 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.076155501 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.071986864 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.075137382 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.075606248 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.073128336 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.074603077 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.075167466 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.071813697 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.073245395 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.071873914 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.070696435 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.072262713 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.074344168 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.071950394 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.074485455 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.075405574 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.071684983 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.071912417 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.073957795 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.071742589 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.074886303 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.071527141 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.070021852 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.071776309 seconds)
  done (took 3.556752613 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.082348223 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.074167091 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.077555625 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.073058938 seconds)
  done (took 2.105260204 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.078446462 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.078138172 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.087171182 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.091916401 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.077516186 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.078283449 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.085311542 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.085957555 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.06731389 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.088480874 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.07005358 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.0685844 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.069037766 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.087902107 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.085538615 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.063631837 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.065523998 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.078841142 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.078038731 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.080840926 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.070352366 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.067360536 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.078130523 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.078463087 seconds)
  done (took 3.656736485 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.084373891 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.068294587 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.083417415 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.092871886 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.093982363 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.067243199 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.081193532 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.094723222 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.130308322 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.067624285 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.073469929 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.067078479 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.106478419 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.06747299 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.082819043 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.112037943 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.114333064 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.071487731 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.100967143 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.067425032 seconds)
  done (took 3.540414376 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.079796981 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.071272336 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.072285217 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.067376011 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.078110223 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.074275394 seconds)
  done (took 2.267609982 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.070578389 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.069512044 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.071890456 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.074016898 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.069742429 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.069743566 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.06909726 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.068193477 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.067918771 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.068451452 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.06847058 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.069190714 seconds)
  done (took 2.651373065 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.214230562 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.070979343 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.073531461 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.067764836 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.069660947 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.068929313 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.08309044 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.07069447 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.085368759 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.068850866 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.068557857 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.070536254 seconds)
  done (took 2.828131625 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106976245 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.112965288 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146778825 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119112481 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119074314 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098247583 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.163021989 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.095008781 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.163402761 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.140189386 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11929967 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095662623 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088187211 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.071468123 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102559961 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.121255671 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14003537 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074842395 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115556994 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.207184979 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133481368 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.135671127 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.149550574 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118451357 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.092086025 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.149332572 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098864066 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104105028 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.126408222 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.128009263 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120718677 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.099694582 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.073221114 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.072502331 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152153261 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.105147531 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122271074 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.094318151 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106587166 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.090006973 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109519656 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.071431817 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.084986547 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.112454781 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086213512 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132778184 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.08941634 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117083669 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082387648 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.139883177 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.282936415 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.137498934 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08807811 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107295328 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139932653 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11331889 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.136859612 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10853377 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084074641 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.120569059 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.104158598 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102157345 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109281812 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082154835 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.179915092 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090368429 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.114062098 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114129409 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.09626164 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.096709449 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.108994456 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.138394291 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.128045472 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.127680245 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141339531 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.097064466 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123770437 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.101873824 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.131666013 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107205859 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.074572446 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.122854007 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.131289844 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100702788 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103158752 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131948922 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093912874 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079154084 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.101556825 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.121153133 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082055843 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.114519243 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082522749 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.111606393 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.13487881 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099208224 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114527111 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120212708 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07999446 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.316102582 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.111208826 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075196016 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.119651388 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11600449 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15940949 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097596078 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.078615169 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.102103662 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105752761 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.149842254 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108493616 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082109035 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111668566 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142830687 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096373398 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.213595592 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097278819 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.143188159 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113622771 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08954706 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.077357505 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.092147994 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114908727 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110386065 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115130972 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092224479 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.085988728 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089431 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114331869 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.0947681 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082774215 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116823066 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.101730434 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.07673855 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090421549 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.081378792 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145459304 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.080116625 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140432769 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12782069 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.078605722 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108657211 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.100251036 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111102402 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.099981455 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119467651 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143587087 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.116212209 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.092144483 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.096447856 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110918607 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.148720419 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.128938838 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.094525772 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.078975007 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102170515 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.276695532 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.100483631 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.128413861 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.097613037 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111340517 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10437578 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.143376051 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.146343291 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102191327 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102914689 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108854148 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.124735535 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077999739 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157922637 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105978755 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120544765 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086418362 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143611128 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.114408693 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091735472 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.089568778 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102495893 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.106680626 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109240048 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146958105 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.098626912 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.07502232 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09542996 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.147951991 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07864024 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112909156 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.093245594 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.095627569 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12110902 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.095813993 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083295659 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.070595183 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129242261 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.160936492 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.07168232 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116758401 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.110388214 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105153735 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.123359269 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.071487857 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121786321 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.14193842 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120628929 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143605384 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148346639 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117872366 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.285541584 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.116243034 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.107961603 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081795282 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.127684366 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.136688094 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097547215 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094201149 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137225242 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120481118 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.138599928 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.118152204 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117090082 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.107733713 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109220979 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105077775 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.104209394 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147153998 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123572667 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.126975022 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.088671224 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108368123 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.120361455 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138007311 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08439072 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144961984 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.085934163 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120725199 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.079645668 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.126719395 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.079469765 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.111566247 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081421682 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.102837686 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.071439223 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.076032 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.145343343 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.114595146 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108256243 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102280748 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.140872531 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.139583118 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.080730939 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.110656278 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118325412 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103164492 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118479546 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.111291579 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.091291679 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097495766 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.111642933 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.087446722 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.083581885 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.27935305 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096986343 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129241676 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.086290492 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.077517079 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142504098 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106076315 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096828072 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079526977 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109087987 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.124110428 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.094169568 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089225482 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116381119 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105868896 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144607323 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.092370625 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.099768984 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.126310623 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081623841 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.093896292 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.071021687 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.087157461 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.077770658 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.129617603 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077598772 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11925695 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.070756506 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.133099494 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.089001995 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.095316555 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10452494 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114136714 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130536449 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097314367 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144453769 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091840809 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120932927 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11013258 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096887698 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.090445859 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106321762 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.103154487 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.125203429 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.098895188 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127115723 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147374603 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106944039 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.145230127 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093614992 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124381366 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108912536 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.12692209 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114197608 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149789055 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139649186 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.273264458 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115091308 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.078230042 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097412533 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107461667 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.113233869 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.176708664 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127310478 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.074331226 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107362025 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09571489 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109368213 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10738315 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083706808 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148849348 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10342706 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.090528086 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114946959 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.092618014 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.106603727 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078121735 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097672159 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.103252413 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096888938 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100484639 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117789611 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.130606836 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116209568 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.147004568 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.101193263 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.094643948 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.121419492 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11341281 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113379571 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088544769 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088604094 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140999157 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.121646891 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.129023416 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.102903899 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112232925 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114391287 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102697411 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12789211 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110367044 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.129848876 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08252061 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.078067757 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.070049287 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.074355595 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.125860586 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111119627 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113678756 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100256448 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.07399712 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.264456601 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109336799 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074340084 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091735022 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0959342 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.097022476 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.093106491 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108470469 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.114019527 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.093529337 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106040575 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101748748 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.148855197 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.103288028 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090371494 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.147479901 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.152102829 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089578285 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094744749 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.073490559 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080974267 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114870362 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151370288 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.153733466 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.079467594 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089076299 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.087630941 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088917933 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.073540069 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.089028614 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.091616854 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107816164 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102676526 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.115492812 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107208153 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077542101 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10516531 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101723142 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09474525 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.107539915 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121369193 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.127854078 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.144536213 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113123434 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109584093 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078170303 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.082867104 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077852375 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081859535 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.10430825 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.081144793 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07807801 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.146102304 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.093832656 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107028723 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111448641 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090770621 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077489266 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136716496 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.230250205 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138839248 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.074060749 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084696145 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.085203524 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081814762 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095903293 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14044586 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111536328 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115540534 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108522154 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106365678 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142756278 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1582152 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081610142 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.146949962 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077557497 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077240716 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077645302 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116197939 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091967086 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116875438 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142585317 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09291317 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105619406 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078951362 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146410192 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.09900145 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106754233 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08908913 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.081104771 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.147066522 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081939182 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.082845005 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.092744022 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.11413443 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.074956621 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107374672 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086816501 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.082127691 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146204128 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.633245785 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092628799 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.077485195 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098038242 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.1461435 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130607272 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097329523 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110861398 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.121511683 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.102029558 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.097523655 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110297262 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.185446505 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075983827 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097010515 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.261242429 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.106094039 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10527 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.101504664 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.088494663 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.094816489 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.089203731 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081541297 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109369383 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090739048 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098678497 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.109426112 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084697617 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.089081338 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.133173126 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.106273107 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.084366915 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090112241 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.105469051 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09043328 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102275354 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.071423566 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115718335 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.093074254 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118971209 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.096689265 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109535824 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.129650154 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092443118 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140656966 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.1094689 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.127143785 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090252002 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.080838936 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128070345 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.090556758 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079858623 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14727213 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.097239396 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.092855333 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106684919 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.099902713 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116082504 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119443635 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114663838 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099915338 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081256045 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102300988 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.10510084 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087551661 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08112616 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.07685321 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.078557131 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11029681 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088129036 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.084861715 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116901257 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090409323 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105170195 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.264368087 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.125896737 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086287284 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104131715 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112769451 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094143869 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112208296 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102713687 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.130840855 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.177342467 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127448466 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130984988 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137219085 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.079042232 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.078015895 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.071212575 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117546108 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.081547724 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.090627298 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084063181 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136213383 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.083998154 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113883481 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.233423414 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.08302699 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096079141 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098933587 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.072346093 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08554829 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110460472 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089732045 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082682442 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122149279 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085609735 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.131074658 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114196998 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102525482 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.097816434 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083356574 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116769237 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105347298 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.13430441 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09692546 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.077257831 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1178174 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.108522645 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144758557 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.076578551 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084429295 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.133589562 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105821958 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135759631 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081709139 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153392615 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.1461825 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.102588727 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.297577741 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073789305 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086407262 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091457789 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.128711676 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086389186 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113017419 seconds)
  done (took 69.753711089 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.158909549 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.144892297 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.083937569 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.106171171 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.190709296 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.20093057 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.122603987 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.098850621 seconds)
  done (took 3.074357908 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.07324106 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.084914369 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.082998475 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.253496123 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.101328364 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.069564686 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.077161795 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.086122987 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.073444179 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.068801801 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.106723031 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.069063277 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.069954596 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.448982039 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.068112974 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.074218598 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.069604205 seconds)
  done (took 3.829082857 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.33962552 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.996306234 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.277578134 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.163072635 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.152208507 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.558804805 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.07879005 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.085781392 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.640521964 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.372765352 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.142419775 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.090148556 seconds)
  done (took 19.856659842 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.080055838 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.124097287 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.122790941 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.077004796 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.077115934 seconds)
  done (took 2.433259383 seconds)
done (took 123.489216483 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.087087164 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.180681159 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.07215602 seconds)
  done (took 2.244834709 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.122432456 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.120400329 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.122550277 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.118892013 seconds)
  done (took 2.451163156 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.07671868 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.078277999 seconds)
  done (took 2.116615395 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.227450221 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.220689125 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.09495862 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.084834584 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.083758937 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.084397733 seconds)
  done (took 2.223984454 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.074087083 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.075542944 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.075568957 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.075716955 seconds)
  done (took 2.257482329 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.170847123 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.068633423 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.07052712 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.073386994 seconds)
  done (took 2.342399293 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.088175207 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.089481002 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.118813918 seconds)
  done (took 2.259842991 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.086312166 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.085345152 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.079587595 seconds)
  done (took 2.21756355 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.112314175 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.098461729 seconds)
  done (took 2.169964562 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.083402686 seconds)
  done (took 2.045017042 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.092639739 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.101095437 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.18617831 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.151568846 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.18629424 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.173064916 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.078311078 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.079270426 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.075160326 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.074143844 seconds)
  done (took 3.156740507 seconds)
done (took 28.076200607 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.086413657 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.3769793 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.361146692 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.08939511 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.674898381 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.358086998 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.998090315 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092649227 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.102884201 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069615079 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086484941 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.690169443 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.991189009 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.328175171 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.976950498 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.327521659 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.656500003 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070711439 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069550345 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070114236 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.986250424 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069185831 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070205998 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070450844 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.651268307 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.375886429 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070588728 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.325986332 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069408413 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073790569 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.358890275 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070576894 seconds)
  done (took 16.607340118 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.078172221 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.130788274 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074531009 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.086379852 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.072227355 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071102866 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.072985049 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.070654134 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.115015127 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070416796 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087944601 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069954906 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.073752775 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.07123384 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.090847837 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.070205965 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.072317412 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.073801714 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070582775 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070561168 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.08843633 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069342739 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070652344 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070593612 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.07059531 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.08298467 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071017455 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069989412 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070155989 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073985327 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.074727167 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071204557 seconds)
  done (took 4.460359873 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.130727762 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.134039393 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074668044 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.110921761 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.120844469 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.072235796 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.153989006 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.093748935 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.118200587 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070073145 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087409536 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069762185 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.106103203 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.0713413 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.090965437 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.072370642 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.074449166 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.072547215 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.072711206 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.073260413 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.09143269 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069968609 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070599993 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070939648 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070553273 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.084943833 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070839274 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070171414 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069987635 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.074373598 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.076235529 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.07083128 seconds)
  done (took 4.73135899 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.07134598 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.073248687 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.079527413 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.082535439 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.068238093 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.070935142 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.071427892 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.068342563 seconds)
  done (took 2.564440279 seconds)
done (took 30.347830598 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080973508 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.069563193 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.072911316 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.089788004 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.07563115 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.111869839 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.0665589 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.076141786 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.073112535 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.073057719 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.074961024 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.068908281 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.072127462 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.066432489 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.073389714 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.067474252 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.115123421 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.071713648 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.112059087 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.113471869 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.070188051 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.07290028 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.076087811 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.112965736 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.112761365 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.113259589 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.077135521 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.073777132 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.069662919 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.072412634 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.177329502 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.192656564 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.079623967 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.123458025 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.06979013 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.069054704 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.073809308 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.072237401 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.120057788 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.078981958 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.072368535 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.078847005 seconds)
  done (took 5.62508376 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.189102445 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.19642201 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.188707641 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.081282255 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.094023832 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.081878598 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.193183843 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.078503163 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.076980157 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.192810414 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.073671993 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.078007189 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.080216001 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.070941226 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.079158973 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.076116067 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.080516469 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.073224814 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.077983418 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.077496264 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.191692227 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.070700311 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.082063244 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.079021378 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.073094419 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.078575083 seconds)
  done (took 4.713652701 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.074901546 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.09082408 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.094227909 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.153420657 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.114351057 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.086987959 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.086502303 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.098388445 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.10598908 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.071972565 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.07561112 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.101134674 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.101028132 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.078783892 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.111338005 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.090649574 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.084192837 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.073451022 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.077318111 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.105888357 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.092987353 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.088175989 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.102562026 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.090256364 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.07005933 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.080954281 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.079352418 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.087788936 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.078907322 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.083822551 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.075627366 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.075336729 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.072068961 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.08414563 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.121907784 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.069204987 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.093825641 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.084091421 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.086542235 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.1110865 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.081118723 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.071918572 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.100009427 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.138177593 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.07078596 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.07381747 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.075297387 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.083825491 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.07258337 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.102179644 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.088425187 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.070688168 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.090414464 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.072801221 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.072619845 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.08602091 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.070835521 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.071052064 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.081058913 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.075457878 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.090427286 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.074812687 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.090904157 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.072696766 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.08040767 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.070855894 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.071107349 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.068264526 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.104004085 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.076877881 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.121536602 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.070543097 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.067084871 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.081755256 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.08055561 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.075897973 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.06882897 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.089395183 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.081691288 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.073573151 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.080241937 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.071820227 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.072528291 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.105225529 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.068233517 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.06780509 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.067463572 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.071810179 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.072446239 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.069469053 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.082507454 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.068801282 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.072655786 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.084836173 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.069565942 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.06985833 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.071586131 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.070141633 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.069124023 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.079873394 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.072858546 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.071137686 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.081975853 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.070193147 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.072369277 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.083978751 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.078883524 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.06905852 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.070187585 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.07148567 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.070730927 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.073653753 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072675746 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.0706954 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.075747258 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.076308389 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.075045624 seconds)
  done (took 11.607144633 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.208634267 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.198105603 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.071206312 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.193209396 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.078453943 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.120580012 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.193650198 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.132928655 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.070499613 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.071272235 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.069363721 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.140810699 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.136444117 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.148482204 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.116889867 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.070596778 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.095510521 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.146463273 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.196432592 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.191170251 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.093821273 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.078965877 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.073999027 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.073397313 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.072797496 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.080878643 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.090254414 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.079390315 seconds)
  done (took 5.314053029 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.077476194 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.085396452 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.073787982 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.094752028 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.08802014 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.069813288 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.071816237 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.070832285 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.088148267 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.078218411 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.07185648 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.076101542 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.074168608 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.070548755 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.072199337 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.078124987 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.078851871 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.070578444 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.075378848 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.076305898 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.082327711 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.159236684 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.074044237 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.07022196 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.074204421 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.071686863 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.079220106 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.079609532 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.069398845 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.103405698 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.067018718 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.074438066 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.086418354 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.073118125 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.071694779 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.072356364 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.071885967 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.071693884 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.072018189 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.069438318 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.069392154 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.077187546 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.070123715 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.077502444 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.085620332 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.078635197 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.070749371 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.074716927 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.071979805 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.066394745 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.073237246 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.072829182 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.072574656 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.07820981 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.073542474 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.072298874 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.070975865 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.098237231 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.07615377 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.069269794 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.070074391 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.070011789 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.073132215 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.080175543 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.088530001 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.073099009 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.069834293 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.071796331 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.079203666 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.083775171 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.069446368 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.075041597 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.06655834 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.069663014 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.071879624 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.07274417 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.070863691 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.067510879 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.069228655 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.069743932 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.070473029 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.069376628 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.069529368 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.073076402 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.066971535 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.0680303 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.070243994 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.070673244 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.075668382 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.068404078 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.072375829 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.071078601 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.068969188 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.074254819 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.077109451 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.074586202 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.091778857 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.080602528 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.072184421 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.069501949 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.086506783 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.073408446 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.071543818 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.07474376 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.076211941 seconds)
  done (took 9.955309403 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.093587928 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.072862992 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.092189274 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.098876681 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.08254542 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.076996664 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.086349442 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.072436791 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.088401965 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.070817663 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.081214765 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.069942392 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.085705696 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.081040052 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.072969989 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.082344461 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.07406523 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.093386838 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.086961378 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.070134285 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.081195974 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.08414712 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.084244837 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.090589881 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.089482966 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.0906764 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.084723528 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.074307832 seconds)
  done (took 4.344210956 seconds)
done (took 43.526609473 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.060894787 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.222063316 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.044353144 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.278500898 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.094259946 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.242702076 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.254780971 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.036589588 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.270769322 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.063978984 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.386180288 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.403604004 seconds)
done (took 70.399989436 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.092672155 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.184345593 seconds)
    (2/2) benchmarking "String"...
    done (took 2.253150926 seconds)
  done (took 6.407880265 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.635414557 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.034059785 seconds)
    (3/3) benchmarking "different"...
    done (took 2.08203431 seconds)
  done (took 8.719270806 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.146682677 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.663882933 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.277961682 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.031878354 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.038409602 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.440932041 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.849519962 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.505310584 seconds)
  done (took 33.777038001 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.221385281 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.234860341 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.782080948 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.82099327 seconds)
  done (took 17.077198834 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.636147345 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.293931079 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.29453647 seconds)
    (4/4) benchmarking "different"...
    done (took 2.286674221 seconds)
  done (took 11.539507979 seconds)
done (took 89.829127305 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.034293494 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.267764062 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.056782198 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.190202387 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.052488831 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.066886187 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.042109063 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.028617982 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.036446176 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.04000849 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.434557947 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.032884421 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.034043262 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.066524102 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.024051917 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.054564884 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.405608867 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.028786209 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.025159825 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.846323784 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.442628084 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.02811228 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.022739196 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.923168844 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.920770807 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.904182135 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.20078728 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.886907704 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.474488641 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.882923074 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.873713758 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.872766931 seconds)
  done (took 211.170679126 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.875180159 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.752693676 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.848749019 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.909206052 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.179104122 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.066012193 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.013264126 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.257804818 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.874922498 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.902264564 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.065639977 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.869002178 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.093809322 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.807008993 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.864311292 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.954120115 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.0235968 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.067338304 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.867380965 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.057435237 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.882880784 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.913205155 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.870510394 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.001918099 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.870422015 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.922177961 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.042304307 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.897391959 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.055303146 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.009671951 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.908063651 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.89179388 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.087724188 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.734159339 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.878013628 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.870417957 seconds)
  done (took 172.99564928 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.040900892 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.887289202 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.928468531 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.999497104 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.555742486 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.539560506 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.868725178 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.869253893 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.869301651 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.877133286 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.872087041 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.937492094 seconds)
    (12/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.869438707 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.495596465 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.887480542 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.871772328 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.870332283 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.490092807 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.874557893 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.870426457 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.869192926 seconds)
    (21/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.870421025 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.93291628 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.245048468 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.998418202 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.872872244 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.883661177 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.992924152 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.879378107 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.870604094 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.994880699 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.872979499 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.947010841 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.999248651 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.880918739 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.951668141 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.877046956 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.328195303 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.870067225 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.872351602 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.871901397 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.92957011 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.870320193 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.917107545 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.958770726 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.869137626 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.883061587 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.941982696 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.559233535 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.871870962 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.869625889 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.869742403 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.87217697 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.870628861 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.277666667 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.872329683 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.893931816 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.372655933 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.872458311 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.86953312 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.87126051 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.869199828 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.870835665 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.877965518 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.910205641 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.578643065 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.555073681 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.261217151 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.596310369 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.87101756 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.823193065 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.932433657 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.871855626 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.947632384 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.869135632 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.870199363 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.872749173 seconds)
    (77/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.86994487 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.940340702 seconds)
    (79/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.872803641 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.937097662 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.870659873 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.991823647 seconds)
    (83/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.871388022 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.871650609 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.869789042 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.878802413 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.524177249 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.874443366 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.885382492 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.931667408 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.872299423 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.870834544 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.878478707 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.960784722 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.877125428 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.871795626 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.87242202 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.914815161 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.873840948 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.106768616 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.098261652 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.94543062 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.120535618 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.042885505 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.875426078 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.875226785 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.887351817 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.874512397 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.872905672 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.886301924 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.875608146 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.875029046 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.873758551 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.878002387 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.873896897 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.877392161 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.886628075 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.874403731 seconds)
  done (took 419.81745511 seconds)
done (took 808.042258867 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.555129859 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.779434541 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.620216071 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.651954427 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.62859626 seconds)
  done (took 15.048986473 seconds)
done (took 16.86524061 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.039922604 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.036831119 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.025168491 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.043665478 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.039087449 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.037782933 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.069610182 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.063543576 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.057966402 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.036636105 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.04576621 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.03990033 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.046599198 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.058403267 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.047536545 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.045318258 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.039855747 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.034299655 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.047043675 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.040025041 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.038786346 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.037744123 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.041631641 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.044790686 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.052216071 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.041263863 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.034295466 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.044885141 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.0419347 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.042998826 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.077032841 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.049484858 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.071564747 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.048473598 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.045445383 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.052241173 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.041876532 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.064132915 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.038611564 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.077650233 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.047646636 seconds)
  done (took 85.885154099 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.031132743 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.174611583 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.246423778 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.063874958 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.032119937 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.257151911 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.089496814 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.160005536 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.166955945 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.252498786 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.259712451 seconds)
  done (took 25.694260316 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.030974927 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.170480388 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.258192421 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.067309891 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.032188922 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.251080476 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.095928829 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.187252861 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.170315735 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.253507301 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.269370873 seconds)
  done (took 25.752621694 seconds)
done (took 139.285437775 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.419302158 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.058916948 seconds)
  done (took 6.435426992 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.024388789 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.04096922 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.168908052 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.023969995 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.027307188 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.025213572 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.02566 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.025680309 seconds)
  done (took 18.32045838 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.025410519 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.024106051 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.023931132 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.024012027 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.025698364 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.02682426 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.02414569 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.024170023 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.023486993 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.024256489 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.024670885 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.024042666 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.024243186 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.023571974 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.022871489 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.026182451 seconds)
  done (took 34.349987776 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.024532735 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.02359756 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.02400391 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.025260897 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.024594579 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.023837463 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.026494942 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.025116232 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.025857623 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.024890914 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.024867183 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.024780481 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.024681441 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.026893742 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.024711334 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.023928399 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.024531769 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.026261266 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.026498343 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.025435646 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.024952418 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.024892324 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.029473022 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.027283141 seconds)
  done (took 50.566147898 seconds)
done (took 111.637091683 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.223633018 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.564331204 seconds)
  done (took 8.74653027 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.026693192 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.025149606 seconds)
  done (took 6.071844989 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.024815779 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.025875916 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.025434372 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.024297792 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.015171136 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.025404208 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.025374639 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.024076801 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.02532776 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.027402082 seconds)
  done (took 22.203540793 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.02519093 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.025453032 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.025477535 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.028919722 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.026479751 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.027433682 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.0264304 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.027448621 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.028459567 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.028580677 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.026949048 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.028734843 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.027811335 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.02919524 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.026855263 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.027115286 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.028001064 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.026876371 seconds)
  done (took 38.451532863 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.027280449 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.026711363 seconds)
  done (took 5.998757287 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.028497664 seconds)
    (2/7) benchmarking "second"...
    done (took 2.028510762 seconds)
    (3/7) benchmarking "month"...
    done (took 2.027270422 seconds)
    (4/7) benchmarking "year"...
    done (took 2.025346306 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.027790921 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.027605347 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.030016816 seconds)
  done (took 16.156705284 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.028690947 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.188977056 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.240881544 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.626103193 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.029406967 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.02954787 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.869442195 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.031391386 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.03194754 seconds)
  done (took 22.038004661 seconds)
done (took 121.624710252 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.850959258 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.029190876 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.322308588 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.101968225 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.038999602 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.3665048 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.052138708 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.574817193 seconds)
done (took 44.298364802 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.11451963 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.028987496 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.058143115 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.059163767 seconds)
  done (took 23.107703108 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.029906596 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.341858297 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.05058757 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.007734197 seconds)
  done (took 23.404622176 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.404702259 seconds)
    (2/2) benchmarking "read"...
    done (took 2.3823847 seconds)
  done (took 6.752151891 seconds)
done (took 62.341489218 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.027977011 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.028029295 seconds)
    (3/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.028671396 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 2.027666834 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.028998379 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 2.028028502 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.027748286 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.028173673 seconds)
    (9/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.027714446 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.028263477 seconds)
    (11/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.028997059 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 2.02903755 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 2.028854512 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.028572095 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.028554825 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.028899307 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.028745665 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.028219771 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.029538205 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.029170414 seconds)
    (21/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.029241549 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.02972701 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.46537842 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.028788624 seconds)
  done (took 51.085758333 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.029975824 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.030209929 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.030930788 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.029021377 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.023716269 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.02997703 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.030117498 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.030757693 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.029380193 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.03008823 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.030160482 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.029881869 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.030320721 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.029893721 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.029918891 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.030253342 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.030169864 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.029335296 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.030061581 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.030407357 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.030270566 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.030675539 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.030638211 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.030213389 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.030804321 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.030066351 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.030757471 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.030271223 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.030148725 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.030941356 seconds)
  done (took 62.863173066 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.031209493 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.030324989 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.030984104 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.030762644 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.031386173 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.031109573 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.030846356 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.031118131 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.031701667 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.030799482 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.030199473 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.030874525 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.031249225 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.031589523 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.030639176 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.032414653 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.031694294 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.031349488 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.031112829 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.031809569 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.031585098 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.031020417 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.03164977 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.03119918 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.019915697 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.031209828 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.031675501 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.031547482 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.03199647 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.031172977 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.032574994 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.032857871 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.031563192 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.032726293 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.032536753 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.032186213 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.032189233 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.035519304 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.038745351 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.031815725 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.032104792 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.032139917 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.032831901 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.032952427 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.032037902 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.032397393 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.033029804 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.032735426 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.032923573 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.032531058 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.033462369 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.032133543 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.0329913 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.03277178 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.032756011 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.032390819 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.0329788 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.033222882 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.033219471 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.033694491 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.034352006 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.032593784 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.033454353 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.032926056 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.034839311 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.033443846 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.033676535 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.032815685 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.033954773 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.036510998 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.033433803 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.034110269 seconds)
  done (took 148.286930924 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.033815588 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.033178497 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.033777765 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.033856079 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.033968296 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.033921619 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.033074339 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.035066964 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.035056866 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.034296734 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.035067923 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.034035411 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.034519757 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.034315849 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.03473222 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.034996809 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.034688534 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.0346024 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.034019764 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.034605633 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.035804089 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.035498702 seconds)
  done (took 46.724783695 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.034098259 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.035162637 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.0354942 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.035372981 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.034615274 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.034944489 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.035400301 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.023918982 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.035987802 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.034045761 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.035673011 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.035994954 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.035628888 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.03549583 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.035914541 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.035103538 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.035488184 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.036281678 seconds)
  done (took 38.594011585 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.036459223 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.035592824 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.036362918 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.035994602 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.036779528 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.036173432 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.036297365 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.036742007 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.03514275 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.036289391 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.036826535 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.035984999 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.037088482 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.036099424 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.036775469 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.036568759 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.037188329 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.035830933 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.036305868 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.037182623 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.03655687 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.037443991 seconds)
  done (took 46.772426077 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.037570479 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.037670188 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.036571638 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.036925804 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.037001638 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.037730151 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.036919403 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.037355278 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.037492584 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.036387138 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.037161079 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.03617154 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.037225904 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.037941158 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.038538778 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.036785619 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.037558745 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.037547538 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.03771505 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.037808903 seconds)
  done (took 42.717402351 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.038046564 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.038609128 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.039133477 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.0380268 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.038752726 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.039304624 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.039064048 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.039181968 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.038931389 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.04016363 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.039072918 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.039389993 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.039676589 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.0392467 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.03872619 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.039819421 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.039324867 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.039115345 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.039168124 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.038802464 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.040215678 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.039316757 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.040153221 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.040071485 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.039724251 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.040067899 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.039618101 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.040152296 seconds)
  done (took 59.072769689 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.039830881 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.038814215 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.039492081 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.040429554 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.039329227 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.04056791 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.04001227 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.039836326 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.040264836 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.039978745 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.0406918 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.039863011 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.040380479 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.040979542 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.039690312 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.040315847 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.039316159 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.040621605 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.040643236 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.040089355 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.040727699 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.039884747 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.040436272 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.040592128 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.040173024 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.040234074 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.041607605 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.040602036 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.040292558 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.040408823 seconds)
  done (took 63.179724591 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.061245026 seconds)
    (2/2) benchmarking "in"...
    done (took 2.061950683 seconds)
  done (took 6.097305485 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.040623471 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.041130697 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.040810392 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.040390784 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.041057446 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.039545938 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.041053 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.040451921 seconds)
  done (took 18.299599648 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.041019414 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.044398296 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.041490301 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.041052851 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.04175131 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.049837056 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.043271367 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.042914407 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.044314049 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.043551162 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.046051262 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.045488021 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.048430873 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.047624552 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.041715318 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.044058532 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.044159885 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.045127605 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.043970564 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.041333506 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.045408041 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.042482812 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.041882715 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.043467791 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.041948734 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.044954741 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.052077431 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.044744958 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.044152799 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.042344129 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.049989134 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.041743351 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.043502526 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.044625668 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.043249933 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.043201311 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.050281991 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.043606481 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.043865097 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.042968998 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.046485222 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.046426948 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.047846131 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.050794189 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.043496738 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.043084224 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.042934991 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.043982784 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.044359747 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.048038306 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.04893023 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.045617536 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.04345426 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.044113228 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.047218119 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.044321158 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.043908982 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.046560902 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.050422536 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.052371357 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.047804327 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.063733204 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.051772515 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.045155142 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.044592721 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.053503891 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.064819926 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.046737491 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.047586739 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.044997751 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.052839288 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.044497013 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.044921851 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.044853146 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.058032872 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.051736653 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.045867576 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.044867939 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.044364357 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.046043565 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.047021439 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.046040322 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.046209386 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.045954063 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.054848795 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.067221969 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.046184397 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.045560639 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.0481355 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.046727344 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.049215911 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.049095875 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.046357173 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.045434291 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.04770164 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.048744955 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.045899017 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.046593718 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.04748952 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.055035088 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.046290301 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.045628198 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.050112145 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.05351229 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.045862008 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.046243228 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.047831237 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.046760559 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.054885727 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.047094435 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.046508689 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.046211752 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.046921348 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.050583857 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.046658159 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.051141965 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.053308724 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.055079851 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.047884408 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.051626648 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.051160949 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.050691844 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.056992122 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.067071942 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.04734708 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.051346445 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.0521298 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.057680103 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.052236922 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.047431875 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.051138775 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.045418686 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.047816343 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.050248341 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.047411934 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.048051588 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.046988125 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.048406961 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.048685198 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.048914119 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.050482532 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.049927145 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.050981204 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.048990729 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.052706469 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.048851398 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.051554883 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.055626969 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.048944025 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.048578988 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.04824008 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.051454953 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.050025041 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.050969005 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.048378885 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.048791651 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.049273201 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.049664604 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.051135689 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.048865366 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.04892343 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.05016298 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.051582038 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.04982617 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.049762043 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.049289173 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.050419884 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.050488743 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.05134189 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.051415051 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.051735326 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.049588365 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.054697658 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.049842953 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.049874159 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.050017233 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.049582381 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.050272993 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.053478334 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.060252633 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.044308571 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.059142991 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.050741663 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.057815116 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.049788073 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.052968161 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.052189474 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.05163107 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.051159966 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.049645329 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.05010154 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.054720854 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.070202664 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.059158428 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.053509175 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.052412136 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.056089687 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.053137142 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.056759944 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.050344083 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.052486384 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.053686151 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.051340572 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.051464582 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.050874256 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.056165496 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.051596337 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.05074321 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.055135934 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.051257261 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.050972557 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.053471522 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.051068443 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.053655367 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.050118797 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.051705848 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.051836133 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.054377206 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.059875878 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.054023385 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.051225996 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.052464331 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.054935147 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.05213721 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.051556081 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.054114751 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.056299628 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.052823744 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.054499323 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.06055017 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.053567423 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.053003683 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.052887254 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.051773298 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.056181589 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.052147767 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.056291666 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.058688796 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.057032451 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.052553602 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.058794292 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.052770727 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.055197381 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.053305948 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.055037875 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.054096775 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.055334211 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.0539696 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.053269156 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.060589698 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.052417429 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.054809 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.053243253 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.056772242 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.055863104 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.05722167 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.053487412 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.057135854 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.060168927 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.059865419 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.054910748 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.057153387 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.056803805 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.054997166 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.05645204 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.056276533 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.067865538 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.062376464 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.053590805 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.054629654 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.055561817 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.057424053 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.055090652 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.055004597 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.062559709 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.056043692 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.056545647 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.057833288 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.054984367 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.055037894 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.061877054 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.057376114 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.058439507 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.057481638 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.056138005 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.055259545 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.055019804 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.057390448 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.05507371 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.058013637 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.058571468 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.055341477 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.05709509 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.055680643 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.064468783 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.055288597 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.056906862 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.063513263 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.057489204 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.055211188 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.058015062 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.055709746 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.058212605 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.056947397 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.057308135 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.057253196 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.057026756 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.059606209 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.066725292 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.059565475 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.063172068 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.058804769 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.066444734 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.056588592 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.056206719 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.056975159 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.061146488 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.063657055 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.056579457 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.056969037 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.06506909 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.057341847 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.057795801 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.0604629 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.056693839 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.057938698 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.057666606 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.058800793 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.061982299 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.060430665 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.056568685 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.058358253 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.057488444 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.057809786 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.060493637 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.059353112 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.058795616 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.058329436 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.057420349 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.057768563 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.05787693 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.058435 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.058212365 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.057972216 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.05732799 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.064745804 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.05877273 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.058862634 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.061790678 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.057931012 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.067875249 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.058782079 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.058602304 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.060546846 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.057956693 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.061562183 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.059118736 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.058781117 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.058942787 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.058047708 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.060492897 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.069826752 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.06633081 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.062601845 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.061048229 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.059823961 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.06107476 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.068525921 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.078761287 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.060334741 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.061916531 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.062179338 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.065963868 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.061971105 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.065500338 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.063026012 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.066164899 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.061328504 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.059052456 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.063783291 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.071738789 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.060186612 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.059235654 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.059755064 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.064805772 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.062347273 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.059168237 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.061318153 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.06361672 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.061227839 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.07142271 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.060465053 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.061284964 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.060419821 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.060132821 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.061106933 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.060432739 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.06322376 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.063284736 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.061036174 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.06121784 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.063298492 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.065564822 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.061681614 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.064725832 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.068765501 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.062185525 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.061231815 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.06421252 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.061623757 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.063917166 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.062404659 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.061739271 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.064311375 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.061513723 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.062652268 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.065801943 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.070134461 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.063983664 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.060792489 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.061333445 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.06579071 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.061818697 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.062212586 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.063824421 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.070618276 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.061413657 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.072397441 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.070521033 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.062419467 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.063742832 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.069598957 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.069003704 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.062973145 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.062540809 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.06200239 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.058739868 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.060885067 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.06454978 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.062875372 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.054515603 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.067362562 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.063115331 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.063369524 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.063107496 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.062252943 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.066075547 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.066112903 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.068210228 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.063839932 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.063063335 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.062948617 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.064776923 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.066191496 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.06655516 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.063479724 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.063230406 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.065999615 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.066118936 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.066953938 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.060029221 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.063970445 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.066426457 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.063212936 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.063799319 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.064516069 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.064973273 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.063534766 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.067613241 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.071089602 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.063127298 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.066658451 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.066321803 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.069176639 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.065459438 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.06544433 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.065095087 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.063809129 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.072710454 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.064852018 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.06551017 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.065277719 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.064691544 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.070823578 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.066951038 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.07029863 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.065529399 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.065785229 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.064164396 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.069148026 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.072859038 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.069255941 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.069301456 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.071419704 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.070081502 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.066665936 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.06576275 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.065040819 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.066080558 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.066308451 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.070318972 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.067899218 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.068526226 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.066437774 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.067240039 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.066494441 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.068574 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.064905061 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.065324028 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.069583085 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.074671298 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.075415085 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.066363206 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.067500653 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.066005958 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.070109158 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.077296178 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.067168995 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.067081843 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.066783581 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.068426166 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.068054846 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.073468949 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.074284983 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.070962763 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.067933787 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.072622141 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.082530138 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.068661322 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.076803692 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.095319294 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.068478222 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.068534701 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.068339039 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.06940638 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.068202329 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.0704384 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.067730111 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.074613824 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.068208376 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.066973988 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.07656606 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.067076072 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.067576791 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.068880501 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.069307299 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.073925791 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.068198081 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.076077341 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.068029416 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.067827615 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.06865611 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.07071007 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.067798394 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.067543369 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.067617134 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.071248928 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.068570088 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.068282238 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.077278809 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.069176964 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.071454808 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.082721981 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.078569032 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.069327426 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.068220303 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.06944197 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.074224119 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.071988439 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.068782577 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.072534176 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.075010177 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.072236906 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.076358517 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.070810934 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.070230429 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.039449578 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.06914311 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.07042841 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.081775726 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.07835772 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.071023834 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.070961358 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.075834055 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.068397434 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.076289288 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.07639137 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.071543265 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.071716722 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.070123503 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.069187234 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.069999145 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.069573386 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.074105942 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.076630137 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.069786307 seconds)
  done (took 1228.6870525 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.070941594 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.070251869 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.069063714 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.070155489 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.069902669 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.0703986 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.070048677 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.070425797 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.069906286 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.070522262 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.070562608 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.070698455 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.070914701 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.069914556 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.069459704 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.070168608 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.070662048 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.070535553 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.071060545 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.071315577 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.070488796 seconds)
  done (took 45.479858024 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.058416657 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.070271887 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.070828824 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.070546067 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.069974637 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.070501124 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.071166395 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.071250336 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.071386623 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.071401867 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.071633114 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.070248649 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.070832777 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.071363598 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.070656555 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.070945483 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.071643852 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.071614317 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.070915142 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.070849301 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.071706496 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.071865755 seconds)
  done (took 47.55334725 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.073152683 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.072600444 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.072905507 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.071577925 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.071836895 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.072763379 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.072327961 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.074549998 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.073189532 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.073043807 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.07910902 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.079485531 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.072116389 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.076676696 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.072152994 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.073224407 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.218704453 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.073853357 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.073559265 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.073365768 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.072698465 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.080301892 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.073367713 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.072320665 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.073648523 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.07443577 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.072076441 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.072932181 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.073590251 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.07447677 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.077385113 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.073169419 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.075674876 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.077209071 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.074103645 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.075118473 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.078006708 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.074904264 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.07326106 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.074048412 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.083783512 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.094291814 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.074576051 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.075019268 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.082774641 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.07404469 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.073768362 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.077512523 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.080719081 seconds)
  done (took 103.834923185 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.074071097 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.074915215 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.074750321 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.074001641 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.074086145 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.073961314 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.07379234 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.074437021 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.073810824 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.074663957 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.07476312 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.075101174 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.075497296 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.073934448 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.075491156 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.075613565 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.07535686 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.074551183 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.075060777 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.074941889 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.0754032 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.075200835 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.075394412 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.075390805 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.075015899 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.075089788 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.07598731 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.074745742 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.075779629 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.075815289 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.075726568 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.075538822 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.075943809 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.075238486 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.075719299 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.075292409 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.075341135 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.075927205 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.075823235 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.075750562 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.075680795 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.075972993 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.075885875 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.077233605 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.076273472 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.075764519 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.07619586 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.076514764 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.076474631 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.075688722 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.076285296 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.076208896 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.07653246 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.073107771 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.050051756 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.07717598 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.07636285 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.076227574 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.076929318 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.077121273 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.077068061 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.07692905 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.078225705 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.0772926 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.077128556 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.077097963 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.078138881 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.077001461 seconds)
  done (took 143.127904226 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.077915069 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.078212678 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.077676919 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.078353472 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.07893592 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.077978295 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.078948762 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.078645279 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.07934548 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.080204618 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.078591423 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.077962173 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.078731125 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.077816217 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.078530456 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.079227637 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.078885315 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.078956899 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.079700213 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.078972532 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.080226116 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.079395674 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.080345704 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.079924662 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.079547086 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.080321197 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.080045705 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.080227131 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.078881789 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.079117724 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.080097529 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.078984788 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.079457802 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.079906656 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.080046958 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.081167731 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.080108529 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.080270362 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.080635853 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.080483622 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.080043076 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.080274931 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.08002404 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.080671297 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.08094202 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.081060345 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.08075188 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.080400061 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.080379822 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.082991313 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.081629718 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.081591969 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.081425507 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.080754623 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.080488561 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.080764779 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.080882398 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.081191974 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.080964202 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.081897341 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.081790351 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.080188904 seconds)
  done (took 130.965531917 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.080672402 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.080198703 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.080723264 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.080630372 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.081307991 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.081982989 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.080742953 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.081250199 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.081170257 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.08113293 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.081219923 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.08177929 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.083859202 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.08112354 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.081610592 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.083118251 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.081535207 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.08123689 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.081268068 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.081227181 seconds)
  done (took 43.641493734 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.08174483 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.081897326 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.081771804 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.082093813 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.081534964 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.081807138 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.081778825 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.081729667 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.082581481 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.082405669 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.082449975 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.08226206 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.082246023 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.082724535 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.08174271 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.082211608 seconds)
  done (took 35.327021433 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.081606522 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.081955533 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.083058998 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.082902821 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.082262109 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.082778173 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.068636069 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.082893621 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.08202498 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.083052778 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.083536851 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.083773184 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.083752626 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.084004245 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.083589086 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.083463791 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.082811966 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.08337278 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.083498947 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.08292314 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.083211305 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.083142006 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.082605807 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.082699006 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.082954034 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.083828914 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.083126972 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.083218274 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.082839697 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.083792662 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.083657518 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.084496685 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.084566916 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.083263937 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.083892758 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.08388355 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.083413943 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.084094772 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.084341372 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.084552525 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.084099621 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.085029881 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.08437117 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.084056012 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.084484419 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.084254732 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.084886161 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.085875203 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.08399944 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.084658328 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.084936807 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.085246529 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.085321177 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.085657331 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.084662816 seconds)
  done (took 116.604249734 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.082722097 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.084845461 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.084013436 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.085259027 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.085177149 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.08539338 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.08493231 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.085557073 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.085691501 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.084791714 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.085272179 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.08573589 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.084935792 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.085977577 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.085762948 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.08534076 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.085450307 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.086227919 seconds)
  done (took 39.550676773 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.085524941 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.084859412 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.086128159 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.086173866 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.085745425 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.085919306 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.08598646 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.08605445 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.086615892 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.086029587 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.086436488 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.085352602 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.085777262 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.086901451 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.08623114 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.086424672 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.086251766 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.086410193 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.086032846 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.086684556 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.086095189 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.086261067 seconds)
  done (took 47.912262957 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.087614461 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.060054255 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.101140414 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.106696665 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.107481254 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.118281204 seconds)
  done (took 14.600362656 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.086825339 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.087216082 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.088769928 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.087545278 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.087208101 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.087643481 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.087223524 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.087508985 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.087761274 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.08818467 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.085514555 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.068804171 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.075412168 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.088114221 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.087942767 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.087349388 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.087765384 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.087847918 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.087633253 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.087932183 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.088428123 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.088329052 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.088098934 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.088067748 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.088083643 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.088356789 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.087513788 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.088385324 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.088243093 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.08828462 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.088809768 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.088891308 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.088215436 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.089080077 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.088802742 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.093268242 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.083133139 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.087836454 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.088010175 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.08752372 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.099947441 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.088636272 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.08793374 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.088348231 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.090008861 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.090049332 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.08805359 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.089057008 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.087817769 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.088438339 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.09035621 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.089018052 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.088785544 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.088636166 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.089168009 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.095156137 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.088570738 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.089793177 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.086724749 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.09440282 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.089727233 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.089194139 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.089798353 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.089952765 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.092321462 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.089437433 seconds)
  done (took 139.845831869 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.089863941 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.089598649 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.095728283 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.0907542 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.090844697 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.091271195 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.090635222 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.091449258 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.090120724 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.090432439 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.090888261 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.091042414 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.094498001 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.091069007 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.090719097 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.091125298 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.093910766 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.090944557 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.089528812 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.090983489 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.09107622 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.091645772 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.091160535 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.090855142 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.091051135 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.091565257 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.092627815 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.091544704 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.091018069 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.091001095 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.090652032 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.094799393 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.09183177 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.091901098 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.091578845 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.09244515 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.09369784 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.091757493 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.092270283 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.08785635 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.094741726 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.092556499 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.092871696 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.09286171 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.092681214 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.094914865 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.092388318 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.093119987 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.093015195 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.09270233 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.096546794 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.093377094 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.093265897 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.092651077 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.092653762 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.096977337 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.092636732 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.09256266 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.092871987 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.195631103 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.946292903 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.946305735 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.946942181 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.946776769 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.946531383 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.946980777 seconds)
  done (took 139.320933919 seconds)
done (took 2862.110193923 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.0190227 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.167004964 seconds)
  done (took 16.068774666 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.116516264 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 6.958064385 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.142793483 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.069979428 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 6.98208554 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 6.969500076 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 1.958270565 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 1.957705724 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.04834541 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 1.957905408 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 6.993504349 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 1.95793869 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 1.957384013 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 1.957522506 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 1.958029909 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 1.958791901 seconds)
  done (took 53.837094119 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.961298604 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 1.959981054 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 1.959942148 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 1.955951331 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 1.97067977 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.11195844 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 1.981418263 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.962396698 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.976066196 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.992577551 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.977421952 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 1.966877974 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 1.968240829 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 1.963687013 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.056231566 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.020217038 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.026322705 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.038088386 seconds)
  done (took 37.737009561 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.039790008 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 6.964640182 seconds)
  done (took 10.8998365 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.951372957 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.975981316 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.97855576 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.976604904 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.969221 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.980934758 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.990619675 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.982802297 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.989405184 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.967490669 seconds)
  done (took 71.6548904 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.958103712 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.959436561 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.212775653 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 1.967409929 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 1.965059774 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.981881972 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.956169574 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.990743188 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.960086748 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.955794948 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 1.968192987 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.21548075 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 1.972414541 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.957387222 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.38888989 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 1.970972172 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 1.964515559 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.991406724 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.992342703 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.964895575 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 1.964858424 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 1.963886859 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.11968684 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.686959153 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.962995477 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.962116397 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 1.965080244 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.954986826 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.95493783 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.958314195 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 1.960370418 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.961091335 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.963016917 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.957970181 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.964963191 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.962766753 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.436818691 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.978997428 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 1.96650978 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.049422397 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.006903945 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 1.967024293 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.686134124 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 1.960805396 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.956247926 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.964365631 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.64916184 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.045958682 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.96106183 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.129737171 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.272142384 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.974842613 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.124376358 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.105904451 seconds)
  done (took 137.686306745 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.956050882 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.291492633 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.10941208 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.958937202 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.266701806 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.169046201 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.43503474 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.002937386 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.958957155 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.168518429 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.094778478 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.067434568 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.960153135 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.958421047 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.958274255 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.955950574 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.110737412 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.02536294 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.959082922 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.948382255 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.980051039 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.113598895 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.060564979 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.960018246 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.973123707 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.17019346 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.006193009 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.064449095 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.457622939 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.95652346 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.019800488 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.141720908 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.96044657 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.957627322 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.999333097 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.059766601 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.047035162 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.959970078 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.956719408 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.956406583 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.606424188 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.153472089 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.061943448 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.08943354 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.09881524 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.16697265 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.496741389 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.957148997 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.468140724 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.129016697 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.152553689 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.17275127 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.058317279 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.962350481 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.941376007 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.958451929 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.343934588 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.184532623 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.100598086 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.063996304 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.961061629 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.958680031 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.958097123 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.186816682 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.961346294 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.055725387 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.961384092 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.96078496 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.056733387 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.065276933 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.09886043 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.183423459 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.990953414 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.689735744 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 3.990668366 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.129205433 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.023425549 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.184169329 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.961171196 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.957896205 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.044511616 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.559185368 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.088101615 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.189920778 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.192474335 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.985942472 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.523492176 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.959449358 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.102892751 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.124892543 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.219611271 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.098814401 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.013237157 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.822815505 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.96019863 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.959956862 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.93203665 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.085829179 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.004766213 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.297401176 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.19993772 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.474879947 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.978638588 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.329481964 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.068589622 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.964055411 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.607642887 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.96163492 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.163899178 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.006160486 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.963791988 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.962363274 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.124529479 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.881814446 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.960095945 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.698901412 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.02071339 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.966251034 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.134630885 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.964164516 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.202720283 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.865749365 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.197630286 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.847152487 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.993626324 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.121412057 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.099551888 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 5.197126645 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.288024941 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.207032034 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.048672421 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.172637265 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.292226349 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.961969469 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.231428523 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.964745543 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.962396212 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.121791365 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.634936387 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.109239687 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.965226302 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.251676001 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.982121195 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.0177727 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.963770597 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.209638453 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.997283638 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.013672079 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.964613433 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.09338079 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.964148882 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.875975522 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.118310817 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.964754268 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.962901725 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.49700225 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.962729328 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.109948386 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.192797774 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.978271965 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.032807629 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.41430485 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.253755026 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.048249355 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.987096373 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.273032471 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.65436214 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.099070428 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.47371618 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.192599825 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.963976708 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.189434177 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.141438343 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.966382954 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.963093179 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.820048812 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 6.099121775 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.964041271 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.115576661 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.73028878 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.07081342 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.169114077 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.966075368 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.015133313 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.967651659 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.735186717 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.288664311 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.838219117 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.963002404 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.964930918 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.964566283 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.966070079 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.154417365 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.997385531 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.50432173 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.093164278 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.224258193 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.271830394 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.177091495 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.000009498 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.969897614 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.241740452 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.968594918 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.026587316 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.967731769 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.974473853 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.242332161 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.970323402 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.171067456 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.167793688 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.902480449 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.012813706 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.968970927 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.967726192 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.957589772 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.098657976 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.056653734 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.840638422 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.966663266 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.004739087 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.068391044 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.147920401 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 5.995279164 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.94010668 seconds)
  done (took 900.10569101 seconds)
done (took 1229.875674176 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.967227648 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.971516743 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.968503734 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 6.972444754 seconds)
  done (took 29.78159937 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.967355167 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.968579562 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.967694735 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.968385277 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 1.968330904 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.962810899 seconds)
  done (took 13.705075369 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.966224957 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.969793177 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.969936591 seconds)
  done (took 22.807131821 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.39801898 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.381286531 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.044748293 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.139547947 seconds)
  done (took 10.894084331 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.971978161 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.967482582 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.969815504 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.974778246 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.969049066 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.96893612 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.97078844 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.969995224 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.970919697 seconds)
  done (took 19.643584876 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.114814981 seconds)
done (took 102.850258492 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.264008961 seconds)
    (2/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 1.971285399 seconds)
    (3/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.037261892 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.103961443 seconds)
    (5/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.069289375 seconds)
    (6/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.150684421 seconds)
    (7/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.077865659 seconds)
    (8/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 6.970808715 seconds)
    (9/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.320497949 seconds)
    (10/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.382957078 seconds)
    (11/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.067615614 seconds)
    (12/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.288275228 seconds)
    (13/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 6.972964097 seconds)
    (14/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.782882622 seconds)
    (15/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.065114535 seconds)
    (16/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 2.978966175 seconds)
    (17/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.071209767 seconds)
    (18/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.372524737 seconds)
    (19/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.292314714 seconds)
    (20/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.108202198 seconds)
    (21/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.390280689 seconds)
    (22/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.050156056 seconds)
    (23/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 5.895011803 seconds)
    (24/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.330978765 seconds)
    (25/341) benchmarking ("perf_sum", Bool, true)...
    done (took 1.98622263 seconds)
    (26/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 6.969821731 seconds)
    (27/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.09120798 seconds)
    (28/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 6.969696984 seconds)
    (29/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 1.986616071 seconds)
    (30/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 2.993628477 seconds)
    (31/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 1.99798708 seconds)
    (32/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.264926246 seconds)
    (33/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 6.972302721 seconds)
    (34/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.105777906 seconds)
    (35/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 1.982996372 seconds)
    (36/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.317893232 seconds)
    (37/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.247079108 seconds)
    (38/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.885988342 seconds)
    (39/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.037911882 seconds)
    (40/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 1.981454266 seconds)
    (41/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.046503112 seconds)
    (42/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.381558579 seconds)
    (43/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.191513208 seconds)
    (44/341) benchmarking ("perf_sum", Int8, true)...
    done (took 1.975356427 seconds)
    (45/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.360509907 seconds)
    (46/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.079156741 seconds)
    (47/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.368844894 seconds)
    (48/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.195466939 seconds)
    (49/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 1.994915582 seconds)
    (50/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 6.970808383 seconds)
    (51/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.069609548 seconds)
    (52/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 6.970337759 seconds)
    (53/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.129698417 seconds)
    (54/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.202505696 seconds)
    (55/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.100816659 seconds)
    (56/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.154529007 seconds)
    (57/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 6.974327071 seconds)
    (58/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.057305374 seconds)
    (59/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.191014344 seconds)
    (60/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.338059341 seconds)
    (61/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 6.972573104 seconds)
    (62/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.361418396 seconds)
    (63/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.888121574 seconds)
    (64/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.300252902 seconds)
    (65/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.071399245 seconds)
    (66/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.207181109 seconds)
    (67/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.288638098 seconds)
    (68/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.069952088 seconds)
    (69/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.377399557 seconds)
    (70/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 6.974380591 seconds)
    (71/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 3.826632374 seconds)
    (72/341) benchmarking ("sort", BigInt, false)...
    done (took 6.976304493 seconds)
    (73/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.070127371 seconds)
    (74/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.095614061 seconds)
    (75/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.054112296 seconds)
    (76/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.723120495 seconds)
    (77/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.827741776 seconds)
    (78/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 1.993363026 seconds)
    (79/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 6.971639161 seconds)
    (80/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.349690698 seconds)
    (81/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.20864196 seconds)
    (82/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 1.987157648 seconds)
    (83/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.099388793 seconds)
    (84/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.104232703 seconds)
    (85/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.009836194 seconds)
    (86/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 1.982675285 seconds)
    (87/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 6.973362162 seconds)
    (88/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 3.842299205 seconds)
    (89/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.138798148 seconds)
    (90/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.181658313 seconds)
    (91/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 1.98677933 seconds)
    (92/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 6.973989634 seconds)
    (93/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.22382796 seconds)
    (94/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.571390355 seconds)
    (95/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.212615392 seconds)
    (96/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.224237626 seconds)
    (97/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.097011881 seconds)
    (98/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 1.987097872 seconds)
    (99/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 2.947799523 seconds)
    (100/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.578954329 seconds)
    (101/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.336997353 seconds)
    (102/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.107213598 seconds)
    (103/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.254662291 seconds)
    (104/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.065381001 seconds)
    (105/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.095678763 seconds)
    (106/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.134251742 seconds)
    (107/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 1.988758678 seconds)
    (108/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.100863978 seconds)
    (109/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.360907761 seconds)
    (110/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.201675327 seconds)
    (111/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.687677187 seconds)
    (112/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 1.995842378 seconds)
    (113/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 1.984937669 seconds)
    (114/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 6.976496004 seconds)
    (115/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.180928718 seconds)
    (116/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.568951115 seconds)
    (117/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.35347301 seconds)
    (118/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.089753678 seconds)
    (119/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 6.976275776 seconds)
    (120/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.729747905 seconds)
    (121/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.286336441 seconds)
    (122/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 6.978372739 seconds)
    (123/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.309205136 seconds)
    (124/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.198749823 seconds)
    (125/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.896895819 seconds)
    (126/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.416353966 seconds)
    (127/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.26896713 seconds)
    (128/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.251926898 seconds)
    (129/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.38175039 seconds)
    (130/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.093709794 seconds)
    (131/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.297899405 seconds)
    (132/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.69709167 seconds)
    (133/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 6.983847524 seconds)
    (134/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 7.734231333 seconds)
    (135/341) benchmarking ("sort", Float32, false)...
    done (took 5.738113039 seconds)
    (136/341) benchmarking ("perf_sum", Int64, false)...
    done (took 1.996664709 seconds)
    (137/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.026544037 seconds)
    (138/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.082983958 seconds)
    (139/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.283406803 seconds)
    (140/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.173095072 seconds)
    (141/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.06093085 seconds)
    (142/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.240151467 seconds)
    (143/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 1.985476619 seconds)
    (144/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.057644289 seconds)
    (145/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.558100528 seconds)
    (146/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.368896996 seconds)
    (147/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.406826043 seconds)
    (148/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 1.985039268 seconds)
    (149/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.066197988 seconds)
    (150/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.211552006 seconds)
    (151/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.299175782 seconds)
    (152/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.857652804 seconds)
    (153/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 6.983974548 seconds)
    (154/341) benchmarking ("sort", BigFloat, false)...
    done (took 8.403606278 seconds)
    (155/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.158428757 seconds)
    (156/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.008369442 seconds)
    (157/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.055919251 seconds)
    (158/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.551668896 seconds)
    (159/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.319793582 seconds)
    (160/341) benchmarking ("sort", Bool, false)...
    done (took 2.193086245 seconds)
    (161/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.268424428 seconds)
    (162/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.756309003 seconds)
    (163/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.000188495 seconds)
    (164/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.170811541 seconds)
    (165/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 1.99155296 seconds)
    (166/341) benchmarking ("perf_sum", Int64, true)...
    done (took 1.990369095 seconds)
    (167/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 1.99016299 seconds)
    (168/341) benchmarking ("sort", Int64, false)...
    done (took 5.582879641 seconds)
    (169/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.373150655 seconds)
    (170/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.195921932 seconds)
    (171/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 6.979854501 seconds)
    (172/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.010378318 seconds)
    (173/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.327126002 seconds)
    (174/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.173660353 seconds)
    (175/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.061181911 seconds)
    (176/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.316138919 seconds)
    (177/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.664866911 seconds)
    (178/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.924701969 seconds)
    (179/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.699407372 seconds)
    (180/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.130116357 seconds)
    (181/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.873505117 seconds)
    (182/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.083682903 seconds)
    (183/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.277786305 seconds)
    (184/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.070945008 seconds)
    (185/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.403790827 seconds)
    (186/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.186686069 seconds)
    (187/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.474807985 seconds)
    (188/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.183043897 seconds)
    (189/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.286612346 seconds)
    (190/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.121769187 seconds)
    (191/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.388773532 seconds)
    (192/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.293605875 seconds)
    (193/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 1.999902552 seconds)
    (194/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.055488215 seconds)
    (195/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 6.979901271 seconds)
    (196/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 4.312816295 seconds)
    (197/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.744233926 seconds)
    (198/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.25076551 seconds)
    (199/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.126410395 seconds)
    (200/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.368198274 seconds)
    (201/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 6.978549451 seconds)
    (202/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.102263341 seconds)
    (203/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.073118655 seconds)
    (204/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.063338207 seconds)
    (205/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.770794465 seconds)
    (206/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.187190885 seconds)
    (207/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.440463531 seconds)
    (208/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.105133993 seconds)
    (209/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.320743999 seconds)
    (210/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 6.981099815 seconds)
    (211/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.194373658 seconds)
    (212/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 1.996915967 seconds)
    (213/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.83945169 seconds)
    (214/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 6.987494493 seconds)
    (215/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 4.881975003 seconds)
    (216/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.768424725 seconds)
    (217/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.855205089 seconds)
    (218/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.331199571 seconds)
    (219/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 6.985151383 seconds)
    (220/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.235121144 seconds)
    (221/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 1.998198072 seconds)
    (222/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.255285515 seconds)
    (223/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.035744392 seconds)
    (224/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.227552225 seconds)
    (225/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.114601352 seconds)
    (226/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 1.994497238 seconds)
    (227/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.23718187 seconds)
    (228/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.268968143 seconds)
    (229/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.697290096 seconds)
    (230/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.085634995 seconds)
    (231/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.261106999 seconds)
    (232/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.116902392 seconds)
    (233/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.194226469 seconds)
    (234/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.386665316 seconds)
    (235/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.03575926 seconds)
    (236/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.124220077 seconds)
    (237/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.602815375 seconds)
    (238/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.102454854 seconds)
    (239/341) benchmarking ("map", abs, BigInt, false)...
    done (took 6.982622802 seconds)
    (240/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 8.73049454 seconds)
    (241/341) benchmarking ("perf_sum", Bool, false)...
    done (took 1.998724698 seconds)
    (242/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.503193442 seconds)
    (243/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.107441825 seconds)
    (244/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.078687783 seconds)
    (245/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 6.979567652 seconds)
    (246/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.749920489 seconds)
    (247/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.087907618 seconds)
    (248/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.328547935 seconds)
    (249/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.861132848 seconds)
    (250/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.166634286 seconds)
    (251/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.266839799 seconds)
    (252/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.091712794 seconds)
    (253/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.136928603 seconds)
    (254/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.578605522 seconds)
    (255/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.267519179 seconds)
    (256/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.011845236 seconds)
    (257/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.509523233 seconds)
    (258/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 6.988262715 seconds)
    (259/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 4.221702023 seconds)
    (260/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.004502304 seconds)
    (261/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.374919505 seconds)
    (262/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.113984061 seconds)
    (263/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.229838674 seconds)
    (264/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.003101727 seconds)
    (265/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.073104612 seconds)
    (266/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.064854047 seconds)
    (267/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 6.982167386 seconds)
    (268/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.321781368 seconds)
    (269/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 6.98577822 seconds)
    (270/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.623824994 seconds)
    (271/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 1.990993549 seconds)
    (272/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.074550445 seconds)
    (273/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.22582268 seconds)
    (274/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.157784685 seconds)
    (275/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.212751916 seconds)
    (276/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.918956307 seconds)
    (277/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.477492967 seconds)
    (278/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 6.983140196 seconds)
    (279/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.004255362 seconds)
    (280/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.092964127 seconds)
    (281/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.364954149 seconds)
    (282/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.213839417 seconds)
    (283/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.002013715 seconds)
    (284/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.114474039 seconds)
    (285/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.061401287 seconds)
    (286/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.145709593 seconds)
    (287/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.366280789 seconds)
    (288/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.06919839 seconds)
    (289/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.143264066 seconds)
    (290/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 6.988624575 seconds)
    (291/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.052344937 seconds)
    (292/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.888115312 seconds)
    (293/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.078761592 seconds)
    (294/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.181929913 seconds)
    (295/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.105416304 seconds)
    (296/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.519969128 seconds)
    (297/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.122588678 seconds)
    (298/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.267650517 seconds)
    (299/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.181867755 seconds)
    (300/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.46752514 seconds)
    (301/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 6.983778021 seconds)
    (302/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.194060012 seconds)
    (303/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.120946474 seconds)
    (304/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.381905358 seconds)
    (305/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 6.986610691 seconds)
    (306/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.331627327 seconds)
    (307/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 1.98868728 seconds)
    (308/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.782211524 seconds)
    (309/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 6.993671756 seconds)
    (310/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 7.744147706 seconds)
    (311/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.983501983 seconds)
    (312/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.025071739 seconds)
    (313/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.221807516 seconds)
    (314/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.108941799 seconds)
    (315/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.074054925 seconds)
    (316/341) benchmarking ("sort", Int8, false)...
    done (took 4.935093753 seconds)
    (317/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.273766895 seconds)
    (318/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.082088901 seconds)
    (319/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.084677223 seconds)
    (320/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 6.986753193 seconds)
    (321/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.018764369 seconds)
    (322/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.917864138 seconds)
    (323/341) benchmarking ("sort", Float64, false)...
    done (took 5.694244729 seconds)
    (324/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.001369998 seconds)
    (325/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.270830279 seconds)
    (326/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 6.985631681 seconds)
    (327/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.123342479 seconds)
    (328/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.456466734 seconds)
    (329/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.898569759 seconds)
    (330/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.384354672 seconds)
    (331/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 7.996807254 seconds)
    (332/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.171083866 seconds)
    (333/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.750547904 seconds)
    (334/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.082849074 seconds)
    (335/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 6.986998316 seconds)
    (336/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.005332841 seconds)
    (337/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.012167616 seconds)
    (338/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.488815376 seconds)
    (339/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.15018716 seconds)
    (340/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.101956078 seconds)
    (341/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.574577549 seconds)
  done (took 1130.563995064 seconds)
done (took 1132.550775845 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.050735706 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 1.987988338 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.484543631 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 1.999685425 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.987121506 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.991687134 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.500376152 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.018340436 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.006012751 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.500220307 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 1.999655654 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.988738837 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.004062803 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.023627176 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.999628483 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.003132806 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 1.993026575 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.010878291 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.022543225 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 1.994739922 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.03963733 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 1.994036309 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.988602526 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.040552184 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 1.989495656 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.002505796 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.010521496 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.040173208 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.040617339 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 1.991830471 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 1.993515095 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.340011723 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.042373392 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 1.994486903 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.999718416 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.00550551 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 1.994624185 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.004954653 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.01011958 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.004561679 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 1.990207444 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.99971423 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.993608227 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 1.991908543 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.989231784 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.988654457 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 1.990827744 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.114368867 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.00458675 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.326003172 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.054767924 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.011653833 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.041475758 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 1.992522929 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 1.991032109 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 1.992959232 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.041464503 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 1.996023389 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.995501874 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.326861599 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.087807055 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.00423907 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.325515037 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.05633668 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.000662965 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.999158317 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.990200293 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.010894199 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.342481847 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.542245711 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.022485828 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.001012055 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 1.972907035 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 1.993808589 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.004044978 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.499242403 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.008986272 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.563920171 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.014930921 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.004585321 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 1.996429606 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 1.993746871 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 1.993046015 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.008725405 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.010469776 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.992055382 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 1.997352588 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 1.997947141 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.005565264 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.343844119 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.037588801 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.487564301 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.001035342 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.012898356 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.012276565 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.563819097 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.018267816 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.012785323 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 1.995177607 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.34265206 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.037582255 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.012710518 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 1.996415928 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.003715304 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.107218209 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.013001247 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.013580181 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.991426229 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.012053741 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 1.998454332 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 1.993028458 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.005909565 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.01295641 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.02824571 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.00928075 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.992776965 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.001830189 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.998514092 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.011586256 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.003916828 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.000054621 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.004593485 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 1.992844428 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.04575456 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.01213411 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.008033449 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.108326312 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 1.998588327 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.118154851 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.006638019 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.000024076 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.992475867 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.331371874 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.040890908 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.014195937 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.00101439 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.015657707 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.015675144 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.011304299 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 1.996988708 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.009218048 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 1.996915437 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.045698546 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 1.994741533 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.017438141 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.046004833 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.006851971 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 1.999777534 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.013618267 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.029009258 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.015716436 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 1.998811903 seconds)
done (took 314.312634739 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.040770797 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 6.991522515 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.068163705 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.99372834 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.059710116 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.04663925 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.993101033 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.9926651 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.994104088 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.375959308 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.99490787 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 1.997998246 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 6.992948122 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.993690019 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.042954135 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.99343879 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.99374674 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.225635406 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.996613758 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.052266154 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 6.99211203 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.995003688 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.992851035 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.381617199 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.995846721 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 6.993024073 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.05447541 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.994323805 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.23487432 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 6.994163354 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 6.994686958 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.234782637 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.053272866 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.007800197 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.002714004 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.002865598 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.062242754 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.00406115 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.043260847 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.042447766 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.070184355 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.028169765 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 6.996243913 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 6.993193402 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.998052823 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.996899577 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.995127329 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.027576842 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.997454051 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.000317667 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.227522889 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.004087769 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.0011564 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.996876104 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.995853903 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.011724723 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.99625538 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.996225433 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.05458458 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.998571808 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.041404738 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.383216785 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.379283322 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.99618108 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 6.996007194 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.996251175 seconds)
  done (took 192.024910841 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.064486264 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.081940277 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.063445137 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.002396702 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.048487258 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.064981705 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.000885 seconds)
  done (took 16.256949493 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.002250738 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.995578035 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.018178433 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.019808279 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.996621769 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.134490106 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.008571935 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.001857352 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.021309616 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.99352492 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.288989349 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.020204383 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.004521815 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 6.996579199 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.008525466 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.025461912 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 1.999502339 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.99816267 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.095683283 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.076166383 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.001988322 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.00456262 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.026223798 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.008783002 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.99724565 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.00012218 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.99827841 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.005246227 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.997282132 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.99747009 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.997126408 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.010786136 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.998442996 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 6.996833829 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.997828125 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.998745494 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.998331158 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.997565538 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.998099838 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.997471983 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.997662992 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.998458651 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.997617891 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.998150374 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.998218235 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.020410684 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.998323422 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.998329749 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.997601158 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.99823638 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.026951196 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.999396683 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.999084741 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.004114647 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.033084768 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.005976648 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.999098952 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.997804502 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.989744416 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.997869083 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.998366009 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.08019462 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.021810972 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.999169625 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.022333138 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.037559939 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.000243558 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.998893485 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.998909988 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.025061479 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.999831084 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.023554405 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.000127937 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.093159611 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.999118176 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.139545221 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.022971436 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.002826688 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.003908005 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 6.999436205 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.007113283 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.001111886 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.002265122 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.007077709 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.005030291 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.000503012 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.000216962 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.001726214 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.008506667 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.999933289 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.045875477 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.000090233 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.001474495 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.090901022 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.001050634 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.098572169 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.02464252 seconds)
  done (took 217.486040636 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.006009783 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 1.998947265 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.013703006 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.003076691 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.001811452 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.006867338 seconds)
  done (took 13.964392891 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.003838542 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.006295835 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.001139524 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.001431322 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.001163058 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.002019335 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.001384456 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.004384412 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.005655657 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.001292452 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.000963959 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.002812053 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.001360294 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.003348226 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.001404767 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.001333169 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.001275681 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.000250017 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.002131492 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.003127406 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.233324241 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.002217871 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.006423003 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.008116353 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.00903719 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.003905135 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.014046466 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.004498533 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.004078943 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.009869858 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.009684439 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.005135937 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.009295587 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.010488115 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.008811024 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.009177196 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.007726032 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.006064852 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.004769328 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.005397165 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.0059445 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.005631435 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.004921493 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.005601138 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.006690565 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.013974958 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.009548856 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.014332487 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.004903626 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.006008782 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.005684832 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.005654868 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.005132859 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.006485164 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.011607824 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.012095416 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.010249302 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.005163647 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.005846711 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.00952917 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.009137409 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.005398785 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.007788454 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.009823037 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.013613544 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.007804212 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.010696743 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.010314639 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.007035825 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.005672702 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.006741888 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.005211314 seconds)
  done (took 147.608566178 seconds)
done (took 589.270432891 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.072413338 seconds)
  done (took 9.011008435 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.110937754 seconds)
  done (took 9.1349167 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.184733204 seconds)
  done (took 12.127043535 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.063455511 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.060739867 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.012219404 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.014574281 seconds)
  done (took 30.102056049 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.212101746 seconds)
  done (took 9.151064678 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.021300207 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.006083563 seconds)
  done (took 16.027732063 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.006748231 seconds)
  done (took 8.9465589 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.005374462 seconds)
  done (took 8.958394832 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.013472702 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.009636713 seconds)
  done (took 15.979884388 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.008217841 seconds)
  done (took 8.948142662 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.681905794 seconds)
  done (took 9.700138248 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.012563628 seconds)
  done (took 8.969040297 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.059349127 seconds)
  done (took 8.998839515 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.832915073 seconds)
  done (took 9.772801065 seconds)
done (took 167.768595238 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.015602314 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.011040221 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.010152286 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.00765034 seconds)
  done (took 29.984311834 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.043230043 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.042649678 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.044884039 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.03959948 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.033005593 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.032627517 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.042714575 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.042507496 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.032675444 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.039808113 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.043451624 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.04033504 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.040909154 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.044467078 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.044641538 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.040122411 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.040655718 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.044478811 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.033327927 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.045280643 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.03975302 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.040141681 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.00896597 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.008742414 seconds)
  done (took 50.850181008 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.189378095 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.074487315 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.161471991 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.054559531 seconds)
  done (took 10.420901782 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.007544783 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.061969904 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.060705374 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.052541146 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.059878617 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.111342348 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.048187407 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.138585069 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.137714866 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.126870174 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.017115137 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.028079582 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.029138924 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.05533145 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.112351346 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.009325323 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.009388053 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.115359405 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.061972603 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.166627827 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.009115539 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.060095397 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.059878649 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.060286173 seconds)
  done (took 51.541391054 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.011213819 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.018254531 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.018299312 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.011152002 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.01094077 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.010298646 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.017350625 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.012259535 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.033128729 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.013255154 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.011324212 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.012334393 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.016917046 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.011076996 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.010232378 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.023245511 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.025644711 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.012189712 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.014980518 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.018821351 seconds)
  done (took 42.256468205 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.009995499 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.855500341 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.356942847 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.261507415 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.009781587 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.007823127 seconds)
  done (took 32.444455799 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.02429186 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.029231295 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.018111431 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.036023705 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.059809624 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.0188046 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.072842509 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.175288898 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.01907297 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.069210997 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.031285842 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.019770624 seconds)
  done (took 26.517874386 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.012460773 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.012973501 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.01415485 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.024441977 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.023014278 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.020702939 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.020282825 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.010412971 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.016513594 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.031490272 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.019984891 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.022333073 seconds)
  done (took 46.173362462 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.20792163 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.237003605 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.217883937 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.478929108 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.333034579 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.986610339 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.28839525 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.22759066 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.653840432 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.686496817 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.30009626 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.985232905 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.962591623 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.937351356 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.886729214 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.249675691 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.014176064 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.813216988 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.264628584 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.053675812 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.01524257 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.012557746 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.01567833 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.292510418 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.334425766 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.017688817 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.224120528 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.028894219 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.012472757 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.232942566 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.683810834 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.066815653 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.215307858 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.270039538 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.349059091 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.1004457 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.015279386 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.099286649 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.057863601 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.047507308 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.022397869 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.024584378 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.531911906 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.029232228 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.285136456 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.014703596 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.049917708 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.986078436 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.939171804 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.303462277 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.117658754 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.926625445 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.049205844 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.379853644 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.134685 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.254102277 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.019033312 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.102558957 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.0718147 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.243094112 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.144597332 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.01766499 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.225581323 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.93965978 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.33487694 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.129128883 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.01662866 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.019541846 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.714865317 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.253901636 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.093935671 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.309695418 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.722417701 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.014957805 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.017458902 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.905905794 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.104173449 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.013283651 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.230068983 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.019124435 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.942579803 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.1316903 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.309348023 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.020170666 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.014521091 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.02297704 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.820319495 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.941147586 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.112201157 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.250791663 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.32882308 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.015889781 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.01552216 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.037430029 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.018411366 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.942204954 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.454676409 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.084097478 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.941906982 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.579543579 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.576710109 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.984055177 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.464452452 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.060343637 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.2828639 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.925766029 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.42082211 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.141314567 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.258808239 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.562851993 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.021518189 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.460336651 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.097075966 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.092390903 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.016484926 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.497470532 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.114226396 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.287750667 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.122473935 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.015979013 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.941942799 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.028094799 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.219489603 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.577890444 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.071663754 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.01733378 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.022304318 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.016922382 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.02034466 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.050218795 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.033527578 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.319492112 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.087170887 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.017836428 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.937080214 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.022258277 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.301590633 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.393858022 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.076871341 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.270010185 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.281908436 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.596447515 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.588833039 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.90404592 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.288628139 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.084897571 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.092677889 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.594725342 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.164673841 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.115057707 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.959345929 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.163118033 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.03047436 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.021315905 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.212074202 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.329135856 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.412632663 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.062564004 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.018157634 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.980047228 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.107921249 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.260043281 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.018753601 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.047555286 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.013867779 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.101218793 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.245509928 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.0196902 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.944116162 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.255661214 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.256138567 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.311029207 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.322966653 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.016501396 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.093278385 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.029422298 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.230245434 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.100661121 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.683741345 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.508377446 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.229067265 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.494981982 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 3.984739992 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.584748068 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.255875717 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.39153115 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.033136594 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.471359224 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.113604781 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.654640143 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.050932578 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.37227618 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 3.946072656 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.024686673 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.350023771 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 3.972680089 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.338080197 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.077693669 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.039330029 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.021645928 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.02157375 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.028557472 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.897876046 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.12653526 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.089944827 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.093143306 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.948314507 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.600474277 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.061069281 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.023016889 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.020636536 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.2755819 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.77039699 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.970773231 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.02118508 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.097368013 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.716763409 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.569321409 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.023632192 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.024880909 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.621115822 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.028338159 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.586097272 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.039337649 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.746915921 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.04707443 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.255039824 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.687771284 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.303123835 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.091520431 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.097876615 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.02264884 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.026700939 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.722306762 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.029973031 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.722092735 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.307751169 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.292910448 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.450034455 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.078189244 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.148811201 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.037022652 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.023442582 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.493178554 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.047814894 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.024746081 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.227255934 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.536777888 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.324371644 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.978723681 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.108897568 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.023229924 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.292933593 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.024952395 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.576049388 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.704139001 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.019512945 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.049165485 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.250430947 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.708284802 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.025512877 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.9066117 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.030914882 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.235509007 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.226277261 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.294953907 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.313060614 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.466267181 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.949164463 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.028358219 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.048312402 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.263570068 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.023319712 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.058609394 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.325595924 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.030662625 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.451307879 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.309695494 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.378509343 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.469167697 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.286489405 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.083116713 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.035371443 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.668754309 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.148558057 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.959049039 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.142974662 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 3.94962622 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.671388503 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.311837212 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.041584872 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.288188048 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.99980276 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.361364612 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.312530848 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.260113961 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.043520795 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.053296051 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.981239928 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.086632858 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.025175854 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.113406102 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.139435643 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.031525195 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.472269886 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.066013104 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.071317817 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.030466366 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.471008042 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.047206112 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.028610775 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.601685374 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.052015806 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.145216556 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.097866274 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.744662677 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.609298743 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.149178455 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.854459957 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.632471894 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.290825855 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.077810109 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.470960975 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.061138701 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.429259398 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.026511809 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.237543566 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.031370112 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.484884593 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.076226449 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.286649833 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.978671058 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.23779267 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.219865475 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.045461556 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.033987014 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.953076945 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.062289918 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.88660249 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.995339453 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.011635894 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.646679494 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.432711881 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.149114811 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.468106995 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.852146638 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.030619326 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.334800158 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.408949074 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.521290352 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.061886939 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.029213915 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.326968822 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.153764715 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.315365189 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.190348425 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.036866842 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.055918076 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.238918818 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.154394271 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.947448189 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.514948898 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.575907837 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.729921675 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.039830036 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.231600268 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.341235788 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.214932738 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.065399826 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.101508039 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.432063895 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.293115866 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.091519722 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.954885646 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.029820597 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.423573101 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.355300755 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.126065752 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.265833743 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.326166351 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.375077996 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.585320689 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.481362683 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.410563299 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.315687247 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.368218427 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.233822474 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.385460382 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.279273736 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.90689663 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.44071658 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.241447617 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.119533618 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.298194735 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.899130873 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.739987999 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.270072074 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.034771959 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.956957149 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.236911389 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.15737186 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.228093483 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.458041092 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.273806885 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.275130309 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.388315451 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.510436155 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.13065739 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.056015604 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.964746918 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.054084352 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.051629257 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.031038502 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.516869055 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.312734391 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.043211971 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.960601169 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.703352325 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.957983456 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.243443728 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.128958999 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.068803914 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.553715006 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.272602136 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.130633596 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.313808449 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.18517262 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.068795235 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.958544089 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.68452991 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 3.978860276 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.040690754 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.455778741 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.047898165 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.034865522 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.235075437 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.958507467 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.078260097 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.037896039 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.22398636 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.552417657 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.304840507 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.152236601 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.276198115 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.332114881 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.830816728 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.047207965 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.305373322 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.959192607 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.62065202 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.72545124 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.072751084 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.104699118 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.032278892 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.036531107 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.303424191 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.321872913 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.200979505 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.604690861 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.068300827 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.057535599 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.34382562 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.114814978 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.035610105 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.037722408 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.494626059 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.26760066 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.034415431 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.01294155 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.245602959 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.118142946 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.228804738 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.106633167 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.547359092 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.038222919 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.82168139 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.125850209 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.985679592 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.987626225 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.779573357 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.093361749 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.035325195 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.30314956 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.640141899 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.237610121 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.432336487 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.898170284 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.137434246 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.077383361 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.038410368 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.122418213 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.326621055 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.328196656 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.036497946 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.303275061 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.078929076 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.040361151 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.638768758 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.000264658 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.035373254 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.685576656 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.91918063 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.765378487 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.432084436 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.043428437 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.03905786 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.039165508 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 3.961958171 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.035345241 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.040728105 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.020835816 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.122427238 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.302377805 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.330975016 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.116398427 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.042519907 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.037634887 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.041942133 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.247579068 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.549535911 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.054176482 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.737309968 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.239519298 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.043676756 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.52362709 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.465963648 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.202063376 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.07759333 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.147229811 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.272821868 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.506874907 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.15576249 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.017497361 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.26397944 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.038167684 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.307870771 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.309980226 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.036664057 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.247900292 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.603008161 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.322615094 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.291526785 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.349326104 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.097518045 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.126868732 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.928324785 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.043035538 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.958773325 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.300093649 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.086285234 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.038420101 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.046705178 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.51935416 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.75741824 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.500775475 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.187740479 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.337593128 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.81091648 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.792054302 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.039909448 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 3.964069938 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.039142594 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.06289516 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.040729107 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.963783936 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.687065413 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.761456253 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.250129249 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.350932096 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.965015804 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.240908518 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.580777329 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 3.964213011 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.003095696 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.008878683 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.30817456 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.964872688 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.042029215 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.966193451 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.29837456 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.729779173 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.305485279 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.039878615 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.965659849 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.04515953 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.042031256 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.039284699 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.110771904 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.040098571 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.157156013 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.302082978 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.38289754 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.134751657 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.642874638 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.687969546 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.976595011 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.083473842 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.634566243 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.609162522 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.294339373 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.159977092 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.692563428 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.985019405 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.960821306 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.057066649 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.235127356 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.044583795 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.043187077 seconds)
  done (took 2163.478516487 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.084940897 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.121617261 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.137740178 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.136104618 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.243040795 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.151539407 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.105186165 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.084495855 seconds)
  done (took 59.037176782 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.040176964 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.015906556 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.049563959 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.041468628 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.053177807 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.08112688 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.2297085 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.069424287 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.040764875 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.085949552 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.053016483 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.085224791 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.04185526 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.084420813 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.065417513 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.309621257 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.062124786 seconds)
  done (took 79.415538643 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.069892157 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.455776501 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.0433686 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.530167644 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.072770687 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.146578717 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.047059677 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.047497891 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.14932141 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.341235134 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.097477338 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.055410004 seconds)
  done (took 93.067386076 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.043829077 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.043106509 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.042094733 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.043132797 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.043496424 seconds)
  done (took 12.19155145 seconds)
done (took 2699.376959921 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.285165094 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.143617078 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.125719708 seconds)
  done (took 6.244250258 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.184817587 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.234685167 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.347576143 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.375777141 seconds)
  done (took 11.12231562 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.329438883 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.412284865 seconds)
  done (took 6.716735431 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.410281147 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.064062817 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.434410307 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.04493716 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.046950268 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.046541696 seconds)
  done (took 23.118803037 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.043980625 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.044880745 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.043498438 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.043514176 seconds)
  done (took 10.147835506 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.045834773 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.836855776 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.046064646 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.062434129 seconds)
  done (took 21.967410991 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.229267876 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.106551865 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.809068137 seconds)
  done (took 9.121854131 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.66572571 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.489972696 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.651024685 seconds)
  done (took 9.782502444 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.93510922 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.029748909 seconds)
  done (took 7.941762592 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.189244823 seconds)
  done (took 4.166369608 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.875882967 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.356923907 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.52231519 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.555537089 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.628720525 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.259307951 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.363037337 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.315333957 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.43979376 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.480568848 seconds)
  done (took 26.773725399 seconds)
done (took 153.27497738 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.452720392 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.390816251 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.108337002 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.354856493 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.126892087 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.107125064 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.303278075 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.332507892 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.062829571 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.052880609 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.352301749 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.124976639 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.25399333 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.390011771 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.253313019 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.389417037 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.113489557 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.451643304 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.855222597 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 3.998243241 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.305620782 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.03975559 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.197512164 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.053505385 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.116734141 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.05939004 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.537486589 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.393406656 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.011187478 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.551799394 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.061713129 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.149178796 seconds)
  done (took 172.929573393 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.894390752 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.046405338 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.047287868 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.046580753 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.315400168 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.045697618 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.048468755 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.046139976 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.258306325 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.251945727 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.046702062 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.305098404 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.049878701 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.04592463 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.04691137 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.046494504 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.379485168 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.917419882 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.0356067 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.047017999 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.049288403 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.190427521 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.047665508 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.184024838 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.374002855 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.048055023 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.000356402 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.048040996 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.047188109 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.020837038 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.052984776 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.049142284 seconds)
  done (took 213.012339131 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.033238465 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.04910762 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.048838115 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.054187723 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.046776469 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.048748856 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.051136346 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.048600998 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.837885019 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.837993934 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.054394959 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.049308119 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.050976042 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.049787347 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.054675293 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.048474481 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.052620297 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.050382069 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.053093163 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.055886565 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.057184967 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.675094926 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.050688844 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.69209029 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.049623166 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.052990883 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.049983884 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.049164493 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.051538621 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.051704912 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.0506783 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.049530504 seconds)
  done (took 226.442313442 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.278288015 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.050222712 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.051304754 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 2.97040861 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.050653327 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.04972592 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 2.956783632 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.282762757 seconds)
  done (took 20.674318363 seconds)
done (took 635.050591309 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.417528324 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.789654994 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.185437871 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.078452109 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.328042297 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.112415768 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.070882477 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.138870678 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.709860537 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.149166991 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.485502713 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.077656328 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.799846026 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.103585746 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.187248154 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.136720851 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.436315392 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.684154192 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.200432156 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.726425892 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.270662428 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 2.975141271 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.155126727 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.755095387 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.488836135 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.995006888 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.075274722 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.440587685 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.077638439 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.30306193 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.768721993 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.320290801 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.084881088 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.071054507 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.130160387 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.115332654 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.231514116 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.081620338 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.182774704 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.775980763 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.734081987 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.597449218 seconds)
  done (took 107.432377223 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.062419149 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.060156801 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.060826174 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.060818695 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.061345481 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.060232138 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.061283134 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.059996574 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.060111943 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.059436408 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.06127347 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.060982862 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.060159316 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.060799016 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.0616799 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.060937558 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.059276766 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.062200907 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.060796259 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.061639385 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.061268904 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.061043533 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.054398803 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.062737894 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.06082336 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.061508671 seconds)
  done (took 55.571458404 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.052233842 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.22799253 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.33216302 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.085890407 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.054336075 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.057842199 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.083288216 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.061301453 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.056650466 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.055134072 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.163885558 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.05845662 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.066484296 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.330899995 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.082415129 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.05501544 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.055739749 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.055838475 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.236459162 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.070343553 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.084619612 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.063089614 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.08435304 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.069085105 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.057902148 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.056096199 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.058526087 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.469556407 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.06772458 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.164430459 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.097044605 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.089121304 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.442417167 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.343146434 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.12208353 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.063063639 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.055802318 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.208053137 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.067489735 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.055856456 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.083467053 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.064560284 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.33037831 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.561093062 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.071885569 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.056180641 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.467816671 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.219259237 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.104369943 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.069177444 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.340934339 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.08605837 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.056004039 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.057601951 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.092574402 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.066699011 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.058254238 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.333843081 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.071060259 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.085019649 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.063341848 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.057594056 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.241421506 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.066888544 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.229083372 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.067020559 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.063378035 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.05805678 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.334780633 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.087910887 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.558079064 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.072420467 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.056896186 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.166985826 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.233807817 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.493284957 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.071501989 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.243554066 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.459421289 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.095165289 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.067818098 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.458642133 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.097944981 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.067645573 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.05753397 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.057109484 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.057940872 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.101143119 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.0846953 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.483432178 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.561428964 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.351410305 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.097406644 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.07180773 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.060064818 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.332493429 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.068913656 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.058998963 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.330181395 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.584773174 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.074652947 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.064304689 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.540964792 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.076132987 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.087775046 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.070219952 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.342344152 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.08868798 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.101914701 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.059105333 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.065022539 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.06229194 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.08831054 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.069293102 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.058942414 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.535830645 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.229409042 seconds)
  done (took 254.613852238 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.063010179 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.058303809 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.058258507 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.058629527 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.05835397 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.059209446 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.057505191 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.038553775 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.060024975 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.057939272 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.058787711 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.059579568 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.060856584 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.059718183 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.547226431 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.063167138 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.529484917 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.060798298 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.059636067 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.062672475 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.635547599 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.068816309 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.059977933 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.063336777 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.060956619 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.05950494 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.069175201 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.108614922 seconds)
  done (took 173.254240437 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.062786536 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.130441125 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.07649703 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.118815942 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.086232211 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.061687554 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.083225905 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.080994082 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.069408143 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.075264087 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.061530783 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.067912312 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.064173265 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.207203019 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.101887715 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.092053311 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.141867153 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.069668283 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.06492951 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.063029722 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.109515464 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.084461664 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.090325946 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.119729964 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.076819012 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.110843294 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.085262423 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.063615601 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.065782214 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.182095099 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.085374345 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.091387548 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.0980701 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.0881806 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.158197924 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.159926777 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.145780013 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.093014024 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.068210324 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.064346045 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.06355017 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.071052658 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.117528762 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.077330662 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.065109629 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.163852681 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.084684128 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.068771119 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.083778013 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.064547582 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.075790559 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.081203323 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.0998335 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.165514744 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.114414802 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.093227109 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.085117307 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.087655267 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.065483314 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.139739587 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.078165385 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.15492977 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.088719193 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.072639205 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.066029352 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.06850637 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.112373425 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.09974553 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.144601622 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.072084365 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.140032644 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.117776898 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.057745046 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.059045287 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.066364877 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.113635538 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.15487048 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.109710654 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.127196223 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.090454044 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.08144796 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.065314616 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.072415477 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.092456021 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.073935616 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.155822388 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.162657276 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.072079971 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.055872265 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.065817681 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.066841225 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.089708051 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.124030798 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.106695775 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.158769135 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.100136123 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.102086117 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.074202676 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.079463659 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.071574088 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.097383687 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.044811062 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.078532829 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.429727188 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.102011902 seconds)
  done (took 222.304417491 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.43151914 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.119064114 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.137074935 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.343414323 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.457837927 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.188331595 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.104251715 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.126494018 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.126204671 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.23481586 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.178233539 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.162956241 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.103571106 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.088951285 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.119696018 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.12674498 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.147678231 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.408215511 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.210153265 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.824048937 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.109659431 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.373559589 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.394998702 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.453791382 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.152697832 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.517590968 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.734499298 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.199829846 seconds)
  done (took 67.578111382 seconds)
done (took 882.739252094 seconds)
SAVING RESULT...
DONE!
