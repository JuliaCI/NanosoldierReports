cset: moving following pidspec: 30959
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.817766772 seconds)
loading group "shootout"... done (took 1.141048388 seconds)
loading group "string"... done (took 0.67369722 seconds)
loading group "linalg"... done (took 8.598566524 seconds)
loading group "parallel"... done (took 0.16529493 seconds)
loading group "find"... done (took 3.056587476 seconds)
loading group "tuple"... done (took 2.128647244 seconds)
loading group "union"... done (took 14.830127729 seconds)
loading group "dates"... done (took 1.446581462 seconds)
loading group "micro"... done (took 0.21976632 seconds)
loading group "simd"... done (took 4.726705497 seconds)
loading group "io"... done (took 1.098566968 seconds)
loading group "random"... done (took 9.559348922 seconds)
loading group "problem"... done (took 1.522743112 seconds)
loading group "array"... done (took 25.198833459 seconds)
loading group "misc"... done (took 1.878359516 seconds)
loading group "scalar"... done (took 43.407248676 seconds)
loading group "sort"... done (took 3.322655767 seconds)
loading group "sparse"... done (took 12.683227358 seconds)
loading group "collection"... done (took 18.319523582 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.429043597 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.115015034 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.128323663 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.114257213 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.18691177 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.121328277 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.127581097 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.082829789 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.904251573 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.134822908 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.113428323 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.426134655 seconds)
done (took 5.333863394 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.167305781 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.090783867 seconds)
    (2/2) benchmarking "String"...
    done (took 0.082197874 seconds)
  done (took 1.393902859 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.072231528 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.062037653 seconds)
    (3/3) benchmarking "different"...
    done (took 0.066021109 seconds)
  done (took 1.420851307 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.064187059 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.136113711 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.06639998 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.06680389 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.066336398 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.06592791 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.066339731 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.066178677 seconds)
  done (took 1.759119033 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072539835 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.067553963 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.065600893 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.067458319 seconds)
  done (took 1.496351953 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.06580955 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.122634512 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.064431871 seconds)
    (4/4) benchmarking "different"...
    done (took 0.064401153 seconds)
  done (took 1.536845876 seconds)
done (took 9.082797288 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.140921161 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.826320605 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.770961815 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.123916399 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.246399892 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.365957826 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.121935476 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.180970831 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.087478417 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.073511947 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.120324537 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.076410934 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.386366441 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.497941024 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.069456044 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.175010357 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.645380289 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.085387551 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.133637308 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.446286284 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.072060209 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.086248598 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.083845141 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.069576689 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.331213161 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.150488062 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.665814912 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.09111084 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.066817198 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.092895725 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.069198568 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.076524136 seconds)
  done (took 10.684994343 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.094522185 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.089163508 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.067418743 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.12247763 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.09259429 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.068406219 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.074197132 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.066389449 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.08739841 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.122638879 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.089091498 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.097585055 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.065175359 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.067390345 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.072002722 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.195717957 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.079134479 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.079811418 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.066000056 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.079775021 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.104157067 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.076667244 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.07668 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.077152768 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.130716335 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.167364604 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.095141768 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.096908262 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.064544968 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.077745251 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.114204034 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.125841101 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.065737905 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.064236668 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.119132396 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.09394374 seconds)
  done (took 4.606035355 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.881402128 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.095066372 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.083212939 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.073687806 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.105171401 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.11185788 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.121677473 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.12103299 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.097554292 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067661319 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.155839223 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.672887463 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.180154182 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070552709 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.119138534 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.356134126 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.066110476 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.068871485 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066675453 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.069886063 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068546923 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.111032631 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.064805531 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.173845951 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.583375676 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069494137 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.06829749 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.094699537 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.064321578 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.138366619 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.090928984 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.068707374 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.542114838 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.064125056 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.062512195 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.087214878 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.202238918 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066177265 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.067206418 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.077981858 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.065658214 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.108525587 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.080197275 seconds)
    (43/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.094925957 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.510467904 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070204492 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.590078751 seconds)
    (47/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.085066242 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.2243575 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072369759 seconds)
    (50/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.073379033 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.10244046 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.064171961 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067705404 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.874811265 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.145051566 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.065636503 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.271417824 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068191575 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066365118 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.067576023 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.097776721 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069202456 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.066960783 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.071291799 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.094685099 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.795825912 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.087548645 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.094855627 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.065263716 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.403147591 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.072693677 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.068095763 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068061922 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.067414047 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.104799286 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065108165 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.064944645 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.109177379 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.093475667 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.087742624 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068223934 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.065734636 seconds)
    (83/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.062512121 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.064438137 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.319599883 seconds)
    (86/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.062413074 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.16064472 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.064565315 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.065337249 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.472961749 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.062776939 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064460826 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.066284396 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.210120107 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066629916 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.062940011 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.06404263 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098927112 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.0717829 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.684048628 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.067852098 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.485074193 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069795893 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.10277013 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.11928697 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067253258 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.102907558 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.068370863 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065592894 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.073854499 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.066029264 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.064965056 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069599768 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.066143797 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066764285 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.069743643 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068490943 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067775491 seconds)
  done (took 22.984991326 seconds)
done (took 40.382589336 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.31959464 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.080101975 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.080064086 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.079327298 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.079373089 seconds)
  done (took 1.909185956 seconds)
done (took 3.28020045 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.258300635 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.07572032 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.064243251 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.205553961 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.087013846 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.173761595 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.211858844 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.157372339 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.087228798 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.087035477 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.087125038 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.21812424 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.223557006 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.086790807 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.157793738 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.224315652 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.086817956 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.063061564 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.086668503 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.086765354 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.086607559 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.062836657 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.086513681 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.086719488 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.155322242 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.086445955 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.062324162 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.155263453 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.085519872 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.155956305 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.085384261 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.084921657 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.085658531 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.155416114 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.085206375 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.274692245 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.061937906 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.08572925 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.084846598 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.084679657 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.08435509 seconds)
  done (took 6.238365685 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.076439419 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083020291 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084923685 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062059113 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071855367 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082422042 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061874935 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082003686 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.091815198 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082790642 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082596271 seconds)
  done (took 2.217379936 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070535223 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083525221 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084546796 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.061584539 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073318184 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083447214 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061647353 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.08313257 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.086299173 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083698749 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.08391501 seconds)
  done (took 2.159666433 seconds)
done (took 11.904601249 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.098188305 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.06630271 seconds)
  done (took 1.447483216 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.226450499 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.496804148 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.897014222 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.092110471 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.072325202 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.085812308 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.198741052 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.066667453 seconds)
  done (took 7.615405482 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.104188815 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.067833241 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.068402913 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.067959247 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.067136889 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.068480922 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.068316541 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.069795804 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.069140031 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.069478339 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.067423599 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.067719203 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.067512533 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.06851494 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.070418759 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.069373496 seconds)
  done (took 2.538062086 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.103708597 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.069317112 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.099840659 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.061880274 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.072067706 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.062422596 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.070718239 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.073183157 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.070566967 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.071747378 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.072829868 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.071992477 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.071992453 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.071738604 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.073313266 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.073716736 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.073603431 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.070962008 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.073898364 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.074134643 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.072715864 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.07348316 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.074113123 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.071556859 seconds)
  done (took 3.199755903 seconds)
done (took 16.103440439 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.176565713 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.075699321 seconds)
  done (took 1.547405898 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.068696334 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.068795972 seconds)
  done (took 1.449626211 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073948974 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.060427921 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.078853473 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.070419538 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.061554695 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061185254 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.078025964 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.061668368 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.061242196 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.06129136 seconds)
  done (took 1.978605059 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.06352544 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.068530792 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.065442974 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.062974753 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.065308873 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.061073804 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.063338995 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.061113337 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.06722702 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.060272517 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.064341029 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.081043746 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.063649755 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.082126112 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.06392772 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.064323778 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.066060999 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.063464906 seconds)
  done (took 2.501451003 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061383047 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.061513 seconds)
  done (took 1.445109618 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064941492 seconds)
    (2/7) benchmarking "second"...
    done (took 0.061746096 seconds)
    (3/7) benchmarking "month"...
    done (took 0.064442845 seconds)
    (4/7) benchmarking "year"...
    done (took 0.063925298 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.06182494 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.061185004 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062015996 seconds)
  done (took 1.754561551 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.43165427 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.124438046 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.351795291 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.069588091 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.076241232 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.254325725 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.062274788 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.067394441 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.068406156 seconds)
  done (took 2.865849648 seconds)
done (took 14.872468497 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.083395083 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.182712576 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.087847479 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.383304263 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.092173664 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.067603311 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.113041787 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.181768999 seconds)
done (took 2.532675696 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.279719145 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.143571346 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.312200398 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.151523167 seconds)
  done (took 2.934552089 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.336966802 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.079320281 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.077230093 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.067544736 seconds)
  done (took 1.896621423 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065244704 seconds)
    (2/2) benchmarking "read"...
    done (took 0.071086714 seconds)
  done (took 1.468229267 seconds)
done (took 7.921893732 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072831282 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.061461477 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.067175281 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.064186417 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.063330325 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.063445676 seconds)
    (7/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.093263387 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.06386581 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.061863265 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.064273421 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.063953816 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064194946 seconds)
    (13/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.061660788 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063923139 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063608803 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064064355 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.063799048 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063479741 seconds)
    (19/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.063164176 seconds)
    (20/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.062155243 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064188889 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064230017 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.063461939 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.064227994 seconds)
  done (took 2.923267966 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.080224061 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.065351855 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.066599356 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.066251229 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.066962312 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.066757415 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.066807413 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.065574475 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.066819208 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.06543987 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067520573 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.067673294 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.065404741 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067772233 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065303619 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.067192233 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.066881488 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065645683 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06515748 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.067408829 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.066877169 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.0659423 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.067696338 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.066930454 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067268356 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067093232 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.065343951 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.065588199 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067073312 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.067681993 seconds)
  done (took 3.361089845 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.067120581 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.059508687 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.059850613 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.070137319 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.059769175 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.060373237 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.060745275 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.059535633 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.060021698 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.061402822 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.060824814 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.060059227 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.060968546 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.060056802 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.059575076 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.06021996 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.065292413 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.08005771 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.061125589 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.060551939 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.064280471 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.060435146 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.059849131 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.060163115 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.060823231 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.059862499 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.06006611 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.060433462 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.05998831 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.061093263 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.060121552 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.064522915 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.065989615 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.060385288 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.070376687 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.065087347 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.060360141 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.066930915 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.061380267 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.059820546 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.060164712 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.060239719 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.060641683 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060391489 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070543877 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.06034678 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.061146471 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.060698969 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.060446132 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.060019382 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.060118469 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062312217 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.069155911 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.061615646 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.059940085 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.061476872 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.060420354 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.06125691 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.060928803 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.060166548 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.060246325 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.06408183 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.062011499 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.061144408 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.080151636 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.061783382 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.070566207 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.060245474 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.060887039 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.064140276 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.061245036 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078817285 seconds)
  done (took 5.851660976 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.072304714 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.072367435 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.079423264 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.070260429 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064365615 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061083457 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.064909592 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061028424 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070679279 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065388406 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061097891 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065130463 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070841376 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065337528 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062346164 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.07064243 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065359548 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064648629 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.06128198 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065769021 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062686873 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065179676 seconds)
  done (took 2.823988713 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.141383251 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066497257 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.106484152 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.070895442 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.069348731 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.071012997 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066992733 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066600259 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067004482 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06772756 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067509599 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066705796 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068845156 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066997774 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067956014 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066787537 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066731079 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066579918 seconds)
  done (took 2.676037051 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.077402445 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.065859301 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089713823 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.065605003 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.066019875 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065243341 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069706025 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070334947 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.065889079 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.065831719 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.070234324 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065665431 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.065787776 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066002383 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066081032 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.066634587 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.06613045 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066457859 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.070252017 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.071042449 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.071278278 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.070552402 seconds)
  done (took 2.866868832 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078218746 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064660795 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080661142 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.06640039 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060008065 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060674857 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.066271038 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.065547598 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.066562731 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.065175004 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065977202 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061020214 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.067760904 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065277411 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.068039402 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06564144 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065266724 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065439039 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065380093 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061218069 seconds)
  done (took 2.674471743 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072556141 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063082822 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.062934005 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.068302776 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063509095 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.063586035 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.068872519 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.063465492 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.063472422 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.086062761 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063579151 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.074464496 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.069035729 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.06708132 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.063833906 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06910812 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.068889668 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069312416 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063499767 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06384339 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.086310024 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.063608345 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.06902373 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063753977 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063625763 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.063639525 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063654054 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.067345949 seconds)
  done (took 3.236324254 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064382307 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.062703154 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.062990594 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.063145059 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.063071261 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.063012209 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.063247698 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.063154301 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.062994974 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.063927798 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.063052766 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.063296615 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.066477213 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.063213724 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.063471728 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.063393462 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063348948 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.063494522 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063761522 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064115621 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.063266288 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063398398 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.063392061 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.063704746 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063800607 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.063170286 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063585062 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.063781578 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062956553 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.063773582 seconds)
  done (took 3.258864828 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073777401 seconds)
    (2/2) benchmarking "in"...
    done (took 0.071279801 seconds)
  done (took 1.496519652 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062150693 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.077737646 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.059440977 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.072419219 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068500176 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063406136 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069263854 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068899848 seconds)
  done (took 1.886315766 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.06876427 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.091387269 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.062053852 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.062674354 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.064796378 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.129019705 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.075218824 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.074407611 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076407199 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.064366008 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.062962431 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.074935963 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.062047758 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.075757887 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06353043 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.071288607 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069506402 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.080085357 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.075145554 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.060390493 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.074556727 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063019054 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.060846956 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.063432506 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.062191661 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.06887919 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.077615087 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.074188426 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070898344 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.059788306 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.081132065 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.06071357 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.061916867 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070138076 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.066018585 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.061485054 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.099355501 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.061976563 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.06702523 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.061008992 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.074048256 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.082570358 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.074641765 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.078079366 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.061188118 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.062013952 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.058897625 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.061388258 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.062650459 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.069065714 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.059476629 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067562365 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.060137105 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.062269077 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.07086536 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.060442752 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.065489037 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.069555013 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073939877 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.071170968 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.069172366 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.075682265 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.069102141 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.067107225 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.060871333 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.079544169 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.060911897 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.072890036 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074325283 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.060258496 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072326357 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.058575573 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.058315018 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.058883619 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.092611467 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.06084997 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.06060957 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.059668196 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.059262974 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.061830793 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069773507 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064942122 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066599081 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062632618 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075557271 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.069110057 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.059429728 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.065905049 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.077394796 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.062833079 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.059354973 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.075780496 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.0629318 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.058498933 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.076983781 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.068833067 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.060914773 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.059917224 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.062464949 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07257923 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.061447797 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.059194148 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.06895312 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.062298133 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.062779226 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.065302206 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068714792 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060535797 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.070643279 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.064063285 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.060748454 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.057729129 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.064696534 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.060601298 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.058860123 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070146689 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.060016512 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074762186 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.065957918 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.073351823 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.072861138 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.068746914 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.074622099 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.058472947 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.057823112 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.07612866 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.067719392 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.059722182 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.076304746 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.057725169 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.071221294 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.057913115 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.059336054 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.205157564 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.059750181 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063046451 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.061126013 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.065540299 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.061376967 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062194857 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.065634522 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.068803215 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.073180931 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.062133941 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.068741219 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.05974089 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.075178651 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.069636319 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.064308809 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062867484 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.060235528 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.071414722 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.066013667 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.068657478 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.059064398 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.059895868 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.059567892 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.070019286 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069453858 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.061181478 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.066575717 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.064331645 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.060073595 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.060077625 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.06082365 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.063400219 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.06257113 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.060190502 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067235426 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.068509415 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.073757465 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.0682407 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.070593066 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.059796428 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.060221289 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.062029059 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.060089396 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.064883959 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.069928763 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076547797 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.072342186 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.081571398 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.060465238 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.070355921 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.062303077 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.076782858 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.072611169 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.060617912 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06398198 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.058350666 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060692814 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.068947689 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.070859548 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.072950053 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074301677 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.063872537 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.064178585 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.058838655 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.074121661 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.059458797 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067892479 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.069342299 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.064172197 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.05961865 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.061360527 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.068616253 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.063692314 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.059307287 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.075257651 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.065104862 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.058873147 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.073716666 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.059657932 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.070011771 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.058652301 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.063146771 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.06568482 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.062554952 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.070383404 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076358436 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.059671381 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.06123869 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.075862824 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.062643585 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062368633 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.068115923 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.074442607 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.063851196 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.067527052 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070125729 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.069188061 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.063538103 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.06868382 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.060257866 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.068700355 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.062171475 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.070555953 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.058963502 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077197696 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.057986913 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.074036155 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.059443267 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.070214859 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.059523726 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068754141 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.059801591 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.07582182 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.060908535 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.059761642 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.070588923 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.05757116 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.068030411 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.058242459 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.063896217 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.065156906 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.067735813 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.060127222 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.067781892 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.060111222 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.067154556 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.062848759 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.0665788 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.067483566 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.062823616 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.05757725 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.066752028 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069354688 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.066419314 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.059469278 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.059404997 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.058460514 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.209052862 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.062345097 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.06184457 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069098432 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.064991102 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.066070796 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061211881 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.061643126 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.061257856 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068681728 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069191055 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077813395 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068242485 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.067471774 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.068718055 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.058796293 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.074577029 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.059083396 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.069980977 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.058133083 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.064760857 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.068776761 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.059537403 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.07793145 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.061067204 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.067307978 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071778111 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068317187 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.06292571 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.076928574 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.062279564 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.067859989 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.06733189 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.064060602 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.066233414 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.062700696 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.069226377 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.069787183 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.070459573 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.060726728 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.067285696 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069292144 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06224777 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.067220895 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.061016364 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.06743837 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.060851361 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.058366642 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.063708734 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.071085577 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.06391761 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.064274561 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.060037417 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.057948977 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.059463751 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.066066216 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.064374179 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.068288643 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074992295 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.058111755 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.060193982 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.058789222 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.062774089 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.076899112 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.069324392 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.067779838 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.064080495 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.05834291 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.061089724 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.061430769 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.059765667 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.062720707 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.058334957 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.058831745 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069900565 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.061024119 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.063987066 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059491748 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.060707098 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.069114893 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.063729251 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.059750341 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.066271909 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.059131577 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.064375082 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.058672311 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.060987711 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.063851982 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.058686861 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.063014391 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.069537507 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.075834537 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.065806781 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.06856084 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.060587687 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.067807439 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075010713 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066392415 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060624992 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.068765493 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.058711329 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077921286 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.069093644 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068207515 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068910279 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.060343864 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.076154474 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.063804887 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.069280869 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074839045 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060591946 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.065838951 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.058868293 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074649599 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.063689636 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.058519754 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067277433 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068262167 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.066058943 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.071141222 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.060632777 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.067235365 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064409145 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.062600018 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.060145012 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.059818245 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.067047836 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.074600642 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.059202539 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.062129684 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.066466395 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.067003093 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.062929567 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.070545485 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.066518079 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059542129 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.059931668 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.062284479 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.059137482 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.069884788 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.058875953 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.0628615 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.062796236 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.057919753 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.064902458 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074881589 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.067512777 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.067683481 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.058025469 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.05732446 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.075380108 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.062046292 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.061496759 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.066764397 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.0680136 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.070558698 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.067740272 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.074799769 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.059078912 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.064039223 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.070584381 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.058821497 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.058235842 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.062096886 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.059433718 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.067199057 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.068277157 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.065999364 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060196631 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.065128148 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.071920244 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.059900771 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.063075604 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.062982806 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.058368357 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.06846762 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.066623121 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.069171051 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.058946745 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.057584389 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.060851097 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.066445973 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.065658075 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.067152894 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.058139174 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.06309024 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.070707165 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.066106247 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060264012 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.056624106 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060323895 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.066496373 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.060787631 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.056563114 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.062382314 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.061158771 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062427283 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.06608366 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.061945015 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.056776268 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.073891947 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.064949315 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.065826017 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.058746614 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.059033204 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.057960106 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.057906529 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.068165187 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.057305781 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.059209828 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.06234277 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.058841016 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.073937595 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.065936268 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072985509 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.058462891 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.061639723 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.057053196 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.06636214 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.061713781 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.057636616 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.067411268 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.056526015 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.072368052 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.068321557 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.061839463 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.056745422 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.062692054 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.06504887 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.071940524 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.06682987 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.067058588 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.05991629 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.066519896 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.058629918 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.068362831 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.0568078 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.056238619 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.067154403 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.066467722 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.069002536 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.057517554 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.067465525 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.059143405 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.065384264 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.065476276 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.059389504 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.059042161 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.058996056 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.06678164 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.06228204 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.066268363 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.062217492 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.073436808 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.058347627 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.067659453 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.067011532 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.068303125 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07091264 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069235165 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.064578671 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.057537263 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.065035909 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.064699637 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.058610939 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.062596254 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.059887592 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078002959 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.059380459 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.058631726 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070621359 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.062916231 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.057563323 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.062089942 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.317074372 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.071654085 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.062378896 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072482417 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.065490641 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.061956767 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.066065461 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.066891363 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.061040916 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.061416336 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061833411 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072381128 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.066742617 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.062264969 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082228417 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.063632044 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.071274602 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072823374 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.068218358 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.062727814 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.059922087 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.062094269 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.07459676 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077363018 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.064532691 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070034109 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.062328576 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.07084433 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.059687065 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.070457458 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.069707871 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069676103 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.060449339 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061094119 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.075887576 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076572961 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.0654486 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.070234646 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.070258253 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.061956417 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082594777 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.069512279 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061551819 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.071713361 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062558318 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.059759323 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.059438862 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.062401637 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.07220463 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.059868881 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.062888697 seconds)
  done (took 41.015774148 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.102685179 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063099411 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.062233012 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.060522846 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.068400512 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06094475 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.060311295 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.061489878 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.061218268 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.06270078 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.060090989 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063278117 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.06673045 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073757664 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.068772541 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.064380678 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.060359265 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061283122 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.060324733 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061030712 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.067304682 seconds)
  done (took 2.895529759 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.066011761 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.064384128 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.06414939 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.064285174 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063432614 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.060401018 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.064110509 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060277548 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065096152 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061000529 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.06501909 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061331473 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.060951458 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.061016754 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060632403 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063011908 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.066857268 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065767176 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.062155222 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.06628736 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063869615 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.066370199 seconds)
  done (took 2.883728851 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063827127 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.062047811 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.070405241 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.060119703 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.059416715 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.062861813 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.059393795 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.06448572 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.064420919 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.065121459 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.069345923 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.06168294 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.059742169 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.066526909 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.059786466 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.061229216 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103414676 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.061198566 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.061187215 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.060025352 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.062686854 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.069920275 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.059585268 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.060185331 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.06492129 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.063476485 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.060063501 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.062739485 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.060626224 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.065162208 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.06144499 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.060831841 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.071803851 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.071306788 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.066322269 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.066660954 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.06341288 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.062595801 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.061371715 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.060975049 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.070268082 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.063214726 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.061603162 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.063042895 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.071197659 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.061410959 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.061094542 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.071839015 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.06169982 seconds)
  done (took 4.647875336 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.072915938 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.115376184 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.066406149 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.093889434 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.07290378 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.066002521 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.06566716 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.094588416 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.060830999 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.061479486 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.074832883 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.074466931 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.062809106 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.064248426 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.067595352 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.062994234 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063487096 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062890082 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.065906095 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.062873364 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.066124534 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.067522849 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.073103053 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.073358207 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.064061829 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062078628 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.062234372 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.064114659 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.072967739 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.066317601 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.064505417 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.064682096 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.073188113 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.066103414 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062248632 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.062520797 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.073626453 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.062815139 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.062414369 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.060715186 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.062363341 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.063614659 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.066671432 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.073811223 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062870677 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.067978106 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.06292058 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.060619602 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.073367845 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.062889997 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.066664891 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.07440758 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.063743234 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.062974038 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.06405528 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.073324116 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.06284725 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.061665381 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.063288769 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.072867759 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.06135679 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.063740432 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.076453845 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.062235758 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.065847611 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.074313322 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.06773913 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.063514073 seconds)
  done (took 6.255421489 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.072291908 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.095488235 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.075481054 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.075490747 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.070233172 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.070356191 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.07074028 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.070333102 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.070166389 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.073527628 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.070632977 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.105465123 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.067029206 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.072116605 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.070795629 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.070487181 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.070997848 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.070438175 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.070635404 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.070177989 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.07102548 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.075979654 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.070744689 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.075351296 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.072792567 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.066794624 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.070474022 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.070298938 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.075383101 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.070288148 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.072805816 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.070227046 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.070600637 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.075677231 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.072785305 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.070295992 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.061214259 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.070198563 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.070387416 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.070393992 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.066806916 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.075486208 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.070673257 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.066490777 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.070336084 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.070201864 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.075398778 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.072866189 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.071899305 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073736932 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.07047834 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.075609626 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07013165 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.070541208 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.07589809 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.077671312 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.075550859 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.075662318 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.070627442 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.075992139 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.075675762 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.077754737 seconds)
  done (took 6.041815969 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07587077 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068018724 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.078652494 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.059447791 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.059393409 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068877588 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.059290696 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.059698448 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066675944 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.067254376 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06851478 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.069112071 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.071478046 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068425042 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068961403 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.071638727 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069238339 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068806474 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066572315 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.069661311 seconds)
  done (took 2.878403236 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.077992051 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.080661953 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.067415243 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070539566 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.06559955 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.069129255 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.064486712 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065432807 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066054567 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065556919 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.070674145 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.070059209 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065928699 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.06900419 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.069942418 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.06931249 seconds)
  done (took 2.61713752 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.06544546 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.069595814 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.067676178 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.061855186 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.063535789 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.060254058 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.061161135 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.05960415 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.062340525 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.074074793 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.0604778 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.063587209 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.06094271 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.0601834 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.06031906 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.06348397 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.062617314 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.06075899 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.061152084 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.065053795 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.069575016 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.061824458 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.063698273 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.060664029 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.063155791 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.069573865 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.062347184 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.062969205 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.060429295 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.06310872 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.063341813 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.067125871 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.06325967 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.06102291 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.059409784 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.060862431 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.060683594 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.063347617 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.063718591 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.060697967 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.05899534 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.065957882 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.061216317 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.061468342 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.062094968 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.062817952 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061952671 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.066453196 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.060827339 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.062797687 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.061669034 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.064183597 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.061247276 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.067712229 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.063106869 seconds)
  done (took 4.978350904 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079235804 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066135049 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060850043 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060551708 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.066063087 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.066233838 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.06455433 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.06537482 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065597893 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.059528359 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065256796 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.064467482 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065700466 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065003223 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065187889 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064821641 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.05956969 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.065315854 seconds)
  done (took 2.694798319 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.068087918 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065543503 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.064131817 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.061540751 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.061404126 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066168408 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.059842178 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.061087839 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06099775 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.061674088 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061607167 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.06115459 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060959784 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.061069317 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065393741 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061453962 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.061344361 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.059990913 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.061639854 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.059785136 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065895468 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.059777865 seconds)
  done (took 2.887946783 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.089979474 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.085111425 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.129398304 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.079028467 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.08804439 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.070837161 seconds)
  done (took 2.060878425 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.095788732 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.097220064 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.06421303 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.064009528 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069259797 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067348887 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067551749 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068021392 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070895215 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071313617 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067570496 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07103558 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071499792 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073314449 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069187091 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069479501 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067846026 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067975841 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.064497837 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075177853 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067881414 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071093003 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067542318 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067240601 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067698748 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072969668 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07142642 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071295191 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067306713 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07116467 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069289797 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067385433 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071180076 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071951322 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.0645945 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071050037 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06744709 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075211029 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069571378 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07316114 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064400288 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069571433 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071164769 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071010112 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071530348 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06793392 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071430146 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067417103 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067920162 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076485885 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06944038 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07294559 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069278317 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071829734 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070891052 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076307916 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071800954 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073083584 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069641279 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071723072 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073314255 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069646527 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07293665 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071854727 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069838046 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073399756 seconds)
  done (took 6.199672873 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.106619384 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066654798 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068093344 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071121894 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072519195 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067693887 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067890671 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067722778 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067581777 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.065238925 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.103359299 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068466559 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072898189 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076063464 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06815809 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068061191 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067769934 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073138216 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.065185207 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076392269 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067970703 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072989088 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072820969 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072948892 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071643199 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069552109 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067857655 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067667845 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067732266 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067402017 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070845024 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067399711 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073062111 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.065222639 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073165888 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067479663 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067764781 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070725262 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067327024 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069008074 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072821254 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075316193 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067425067 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067415914 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071277186 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067772177 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067667649 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065365446 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068136381 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065213843 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071756222 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071844694 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071569183 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073598582 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067950197 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06831162 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067868039 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068177962 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067996456 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069871764 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073473174 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068093108 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076901683 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067737867 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.0680342 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073197608 seconds)
  done (took 6.210078606 seconds)
done (took 128.656898204 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.221212052 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.189061896 seconds)
  done (took 1.913738322 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075359599 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.166328149 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.073365012 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.073156341 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.106639015 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.105956563 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.074384994 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.070554404 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.073299942 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.07148135 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.140406583 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.074869217 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.070634623 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.07182884 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.07088248 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.070748894 seconds)
  done (took 2.915784896 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.109471966 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.183853269 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.102769872 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.068392437 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.150168429 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.075028283 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.070773619 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.07479338 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.074969968 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.068714892 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.105055151 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.081690105 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.073828223 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.074813484 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.07033723 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.073678967 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.074649799 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.074764022 seconds)
  done (took 3.140913774 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.103449234 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.089833125 seconds)
  done (took 1.729146455 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.162606116 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.104546712 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145228823 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.343563954 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.1354008 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.139049437 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.144456398 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.138642569 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.111715546 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.134100753 seconds)
  done (took 3.085456095 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106945069 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.105118592 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.305804638 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.102317738 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.081754846 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.075628138 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.073318123 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.077884893 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.073653393 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.075086787 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.120628893 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.073358172 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.071189963 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.122988762 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.096642803 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.105773168 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.069979667 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.076540361 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.07797437 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.069180003 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.074580975 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.078098938 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.175472503 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.076694738 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.097982207 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.073660047 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.075398026 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.072291463 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.072505841 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.076240172 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.077088676 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.09743839 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.076177717 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.080846564 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.075399004 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.095118155 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.07032073 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.097233197 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.072735925 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.070980172 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.07351841 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.077925373 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.0706125 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.076419082 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.073331178 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.075656989 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.078288699 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.069445794 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.073485496 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.07286411 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.070918169 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.074941549 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.074580686 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.075849004 seconds)
  done (took 6.23836025 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.108824794 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.106702967 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068818821 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.112086431 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.103721208 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068474215 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.103159483 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.099165402 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.106752076 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068251299 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.06752139 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067871317 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074213918 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.077552136 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.114947259 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.106589787 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.07010445 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068294665 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.106092067 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.105690494 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067296261 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.100163936 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.098940517 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.105372474 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.066788986 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068338936 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066969812 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.067527582 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.072559484 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.07335764 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067357387 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.074015603 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.07930664 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.073408309 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.06682638 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066732753 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066682909 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.0741048 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074798071 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.074698996 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.072761363 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066621982 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067485823 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069498894 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069610589 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.067809959 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.07494122 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.07649784 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.075270921 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068946238 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069297741 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.068755529 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069101822 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.07595457 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.07491429 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.077789004 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075281103 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.067760628 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068299083 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.070474089 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077782412 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077791983 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.07713687 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069850918 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077557259 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069195171 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079607736 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.080662736 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.06740784 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.06772884 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067561209 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067099518 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067732143 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.073444382 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.072873534 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.06781008 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.067408091 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067127677 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.075578245 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.07375228 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067364406 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.072298693 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.06698382 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067473285 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067781745 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067887839 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.072843375 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.074463124 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.06797622 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067989846 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.068039447 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.0688371 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.068171114 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.075455992 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.074687463 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.074835419 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.075039127 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068622627 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.073484397 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.072981935 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067735611 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.073001358 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066886375 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067782374 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067850891 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.074341026 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.074640882 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.077205934 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067457876 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066929046 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.072687279 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.074605083 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066210721 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.071744114 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074252728 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.208762466 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.067432374 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076482776 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067441382 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.074905101 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067538942 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07549716 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067696309 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.073424151 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067682154 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.066544982 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067567879 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.073431784 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067744751 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067439856 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067456323 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067117354 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.074067369 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077165221 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068129116 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.073471819 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.073691826 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067557363 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.073473003 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067437482 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.074239307 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.06743119 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067810354 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066517619 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.076421315 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067660695 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.067696558 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.067212709 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.075156958 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067117077 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.075446797 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.072490776 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067934379 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.082036181 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.075207808 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.072879524 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.075593085 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067761879 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067191126 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067195459 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.070356885 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.07246117 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07341134 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067901209 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066830811 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.072831967 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.075459055 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.066933523 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.07268416 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.072809803 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.073264398 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067834226 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067503321 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.077619416 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.07810176 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.074732583 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.073723775 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.074427014 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.067475002 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072906975 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.073443114 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067256522 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.082400314 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06891258 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.079780843 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.07629542 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.073067391 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073879218 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.074845049 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.075622843 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.075646916 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.078144063 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067006944 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067257695 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.073389115 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.067407846 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.06724339 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.073085461 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067373341 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067606352 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.077761279 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067829602 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.075350543 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.066839154 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.074323766 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067081707 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067907143 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078213062 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067688926 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067999538 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.073255905 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.067228897 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.072969387 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075714336 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.073474037 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.06719392 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068018305 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.074346393 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.074739925 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067304846 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067227403 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067682365 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.073054128 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.072127666 seconds)
  done (took 18.137781768 seconds)
done (took 38.707675404 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.169520537 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.112872297 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.208713391 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.197831836 seconds)
  done (took 2.32507373 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.102511163 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.06509426 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.081774267 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.089732441 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.063813445 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.074102429 seconds)
  done (took 2.061609621 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.203452846 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.178473961 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.250077922 seconds)
  done (took 2.206068457 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.374523317 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.150319425 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.220763881 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.507193674 seconds)
  done (took 2.936719441 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.110686412 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.101299621 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.077946093 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.111685938 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.086888197 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.062589689 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.133321492 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.068555342 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.100313767 seconds)
  done (took 2.498498365 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.13838906 seconds)
done (took 13.760905551 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.126074074 seconds)
    (2/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.464435898 seconds)
    (3/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.226818001 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.241562583 seconds)
    (5/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.093072469 seconds)
    (6/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.123674067 seconds)
    (7/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.092928554 seconds)
    (8/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.242795508 seconds)
    (9/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.262510392 seconds)
    (10/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.219297682 seconds)
    (11/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.165324125 seconds)
    (12/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.106295944 seconds)
    (13/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.201755399 seconds)
    (14/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.21657751 seconds)
    (15/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.19906025 seconds)
    (16/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.077097541 seconds)
    (17/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.188669351 seconds)
    (18/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.085965069 seconds)
    (19/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.076398513 seconds)
    (20/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.081422733 seconds)
    (21/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.257477088 seconds)
    (22/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.145066327 seconds)
    (23/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.175303633 seconds)
    (24/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.078680287 seconds)
    (25/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.116913951 seconds)
    (26/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.131969094 seconds)
    (27/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.078864252 seconds)
    (28/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.241088059 seconds)
    (29/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.093404696 seconds)
    (30/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.126447709 seconds)
    (31/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.07434416 seconds)
    (32/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.091566107 seconds)
    (33/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.073067945 seconds)
    (34/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.075427987 seconds)
    (35/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.073504522 seconds)
    (36/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.216194585 seconds)
    (37/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.165756531 seconds)
    (38/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.124408209 seconds)
    (39/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.144161182 seconds)
    (40/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.07353091 seconds)
    (41/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.069973311 seconds)
    (42/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.08697032 seconds)
    (43/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.165774647 seconds)
    (44/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.073443154 seconds)
    (45/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.077469322 seconds)
    (46/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.152169592 seconds)
    (47/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.134439532 seconds)
    (48/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.154108834 seconds)
    (49/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.068121106 seconds)
    (50/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.218383756 seconds)
    (51/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.07472739 seconds)
    (52/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.086979504 seconds)
    (53/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.157205869 seconds)
    (54/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.150809585 seconds)
    (55/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.227688626 seconds)
    (56/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.122482198 seconds)
    (57/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.15190006 seconds)
    (58/341) benchmarking ("sort", Float64, false)...
    done (took 0.13627185 seconds)
    (59/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.179195211 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.073719945 seconds)
    (61/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.154769132 seconds)
    (62/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.07166264 seconds)
    (63/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.194089416 seconds)
    (64/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.072239958 seconds)
    (65/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.085791622 seconds)
    (66/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.141416162 seconds)
    (67/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.194046022 seconds)
    (68/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.096288991 seconds)
    (69/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.071821654 seconds)
    (70/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.074245585 seconds)
    (71/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.071207134 seconds)
    (72/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.150365938 seconds)
    (73/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.06653159 seconds)
    (74/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.346846055 seconds)
    (75/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.084542003 seconds)
    (76/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.068065299 seconds)
    (77/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.076678792 seconds)
    (78/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.065438242 seconds)
    (79/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.067803171 seconds)
    (80/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.090625043 seconds)
    (81/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.211552682 seconds)
    (82/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.072803785 seconds)
    (83/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.077543081 seconds)
    (84/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.140013259 seconds)
    (85/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.087208832 seconds)
    (86/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.064567364 seconds)
    (87/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.072216553 seconds)
    (88/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.066187325 seconds)
    (89/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.194961756 seconds)
    (90/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.076838585 seconds)
    (91/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.072785865 seconds)
    (92/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.142434398 seconds)
    (93/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.085568451 seconds)
    (94/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.08102506 seconds)
    (95/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.08756658 seconds)
    (96/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.162320913 seconds)
    (97/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.081595176 seconds)
    (98/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.067033682 seconds)
    (99/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.082035055 seconds)
    (100/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.064474947 seconds)
    (101/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.142080146 seconds)
    (102/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.178491801 seconds)
    (103/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.067553099 seconds)
    (104/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.146779227 seconds)
    (105/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.072335741 seconds)
    (106/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.065234745 seconds)
    (107/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.22094514 seconds)
    (108/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.074644256 seconds)
    (109/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.064114243 seconds)
    (110/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.140352764 seconds)
    (111/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.091351209 seconds)
    (112/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.076482693 seconds)
    (113/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.064399509 seconds)
    (114/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.074394251 seconds)
    (115/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.072371958 seconds)
    (116/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.072097326 seconds)
    (117/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.168639862 seconds)
    (118/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.079125212 seconds)
    (119/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.066538227 seconds)
    (120/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.06420791 seconds)
    (121/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.217771599 seconds)
    (122/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.064612223 seconds)
    (123/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.072838332 seconds)
    (124/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.064032636 seconds)
    (125/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.130356974 seconds)
    (126/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.070953402 seconds)
    (127/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.064783265 seconds)
    (128/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.062958961 seconds)
    (129/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.064800023 seconds)
    (130/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.074595642 seconds)
    (131/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.067298945 seconds)
    (132/341) benchmarking ("sort", Int8, false)...
    done (took 0.147660363 seconds)
    (133/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.067451551 seconds)
    (134/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.071588254 seconds)
    (135/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.067888495 seconds)
    (136/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.141018355 seconds)
    (137/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.075435865 seconds)
    (138/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.073490548 seconds)
    (139/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.090110882 seconds)
    (140/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.063990998 seconds)
    (141/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.164121727 seconds)
    (142/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.07247219 seconds)
    (143/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.065084675 seconds)
    (144/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.071468887 seconds)
    (145/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.064655033 seconds)
    (146/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.064672938 seconds)
    (147/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.226794403 seconds)
    (148/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.074062628 seconds)
    (149/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.064910174 seconds)
    (150/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.07416513 seconds)
    (151/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.084905092 seconds)
    (152/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.064925662 seconds)
    (153/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.06528191 seconds)
    (154/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.217283386 seconds)
    (155/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.066542879 seconds)
    (156/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.074106109 seconds)
    (157/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.139425734 seconds)
    (158/341) benchmarking ("sort", Bool, false)...
    done (took 0.143767673 seconds)
    (159/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.066328605 seconds)
    (160/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.067291306 seconds)
    (161/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.066291064 seconds)
    (162/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.163090237 seconds)
    (163/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.066235432 seconds)
    (164/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.076594845 seconds)
    (165/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.064610357 seconds)
    (166/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.072138781 seconds)
    (167/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.075549788 seconds)
    (168/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.071570942 seconds)
    (169/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.073544808 seconds)
    (170/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.073768143 seconds)
    (171/341) benchmarking ("sort", Int64, false)...
    done (took 0.065529073 seconds)
    (172/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.143321071 seconds)
    (173/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.127266024 seconds)
    (174/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.06545159 seconds)
    (175/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.062790428 seconds)
    (176/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.162761012 seconds)
    (177/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.155413511 seconds)
    (178/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.066027076 seconds)
    (179/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.069491728 seconds)
    (180/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.198860384 seconds)
    (181/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.080177316 seconds)
    (182/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.063276585 seconds)
    (183/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.136345316 seconds)
    (184/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.064766966 seconds)
    (185/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.090841151 seconds)
    (186/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.06675658 seconds)
    (187/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.086473489 seconds)
    (188/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.079269961 seconds)
    (189/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.07250104 seconds)
    (190/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.254830578 seconds)
    (191/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.085689301 seconds)
    (192/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.174605957 seconds)
    (193/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.06882438 seconds)
    (194/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.064455292 seconds)
    (195/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.084293458 seconds)
    (196/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.069693906 seconds)
    (197/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.064306372 seconds)
    (198/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.16617195 seconds)
    (199/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.202803919 seconds)
    (200/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.084343843 seconds)
    (201/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.074326369 seconds)
    (202/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.064465448 seconds)
    (203/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.065097604 seconds)
    (204/341) benchmarking ("sort", BigInt, false)...
    done (took 0.263101519 seconds)
    (205/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.148833296 seconds)
    (206/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.065183452 seconds)
    (207/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.065144365 seconds)
    (208/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.083908209 seconds)
    (209/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.063253462 seconds)
    (210/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.0665615 seconds)
    (211/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.076808603 seconds)
    (212/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.062727349 seconds)
    (213/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.064954075 seconds)
    (214/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.075771058 seconds)
    (215/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.063813947 seconds)
    (216/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.14486497 seconds)
    (217/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.062692771 seconds)
    (218/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.082909125 seconds)
    (219/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.06526285 seconds)
    (220/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.068114876 seconds)
    (221/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.177397204 seconds)
    (222/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.064796068 seconds)
    (223/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.16267308 seconds)
    (224/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.064641015 seconds)
    (225/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.072268944 seconds)
    (226/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.071523449 seconds)
    (227/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.08208287 seconds)
    (228/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.168711152 seconds)
    (229/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.065696351 seconds)
    (230/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.140934183 seconds)
    (231/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.069073955 seconds)
    (232/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.063871751 seconds)
    (233/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.117117885 seconds)
    (234/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.065954676 seconds)
    (235/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.235316203 seconds)
    (236/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.065606671 seconds)
    (237/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.067013384 seconds)
    (238/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.072858521 seconds)
    (239/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.083678488 seconds)
    (240/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.196796614 seconds)
    (241/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.131859049 seconds)
    (242/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.064230348 seconds)
    (243/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.068801989 seconds)
    (244/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.066185691 seconds)
    (245/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.065934151 seconds)
    (246/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.07207886 seconds)
    (247/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.063921244 seconds)
    (248/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.071454255 seconds)
    (249/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.064145394 seconds)
    (250/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.067524363 seconds)
    (251/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.065066484 seconds)
    (252/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.06458956 seconds)
    (253/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.074248006 seconds)
    (254/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.076349034 seconds)
    (255/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.064363984 seconds)
    (256/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.15100438 seconds)
    (257/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.064662523 seconds)
    (258/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.087213233 seconds)
    (259/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.064497695 seconds)
    (260/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.064539132 seconds)
    (261/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.071390422 seconds)
    (262/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.064014185 seconds)
    (263/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.089576349 seconds)
    (264/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.151382982 seconds)
    (265/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.071467857 seconds)
    (266/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.067092782 seconds)
    (267/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.089144385 seconds)
    (268/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.064428629 seconds)
    (269/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.06413711 seconds)
    (270/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.071426467 seconds)
    (271/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.062864032 seconds)
    (272/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.11413917 seconds)
    (273/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.071813703 seconds)
    (274/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.064150489 seconds)
    (275/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.064435583 seconds)
    (276/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.064566574 seconds)
    (277/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.171068903 seconds)
    (278/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.069389435 seconds)
    (279/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.064291605 seconds)
    (280/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.066751287 seconds)
    (281/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.06442636 seconds)
    (282/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.064561053 seconds)
    (283/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.064300414 seconds)
    (284/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.064590287 seconds)
    (285/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.064023779 seconds)
    (286/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.076451016 seconds)
    (287/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.071101073 seconds)
    (288/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.064242157 seconds)
    (289/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.076385788 seconds)
    (290/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.064617917 seconds)
    (291/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.062637512 seconds)
    (292/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.064426943 seconds)
    (293/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.064164591 seconds)
    (294/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.130419778 seconds)
    (295/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.088716552 seconds)
    (296/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.218547158 seconds)
    (297/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.071468035 seconds)
    (298/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.148973811 seconds)
    (299/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.089958231 seconds)
    (300/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.068076868 seconds)
    (301/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.065423624 seconds)
    (302/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.065125984 seconds)
    (303/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.064235825 seconds)
    (304/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.063844357 seconds)
    (305/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.123979081 seconds)
    (306/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.067889642 seconds)
    (307/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.064476971 seconds)
    (308/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.064736372 seconds)
    (309/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.067403106 seconds)
    (310/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.063791007 seconds)
    (311/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.063296504 seconds)
    (312/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.067864106 seconds)
    (313/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.066466811 seconds)
    (314/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.063615702 seconds)
    (315/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.073454751 seconds)
    (316/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.064141503 seconds)
    (317/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.148171246 seconds)
    (318/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.06353205 seconds)
    (319/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.0634511 seconds)
    (320/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.315581998 seconds)
    (321/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.067048334 seconds)
    (322/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.068767165 seconds)
    (323/341) benchmarking ("sort", Float32, false)...
    done (took 0.13946298 seconds)
    (324/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.065835853 seconds)
    (325/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.065912262 seconds)
    (326/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.065210667 seconds)
    (327/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.077208096 seconds)
    (328/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.066166355 seconds)
    (329/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.06534206 seconds)
    (330/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.152940175 seconds)
    (331/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.063476753 seconds)
    (332/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.065539092 seconds)
    (333/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.065514508 seconds)
    (334/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.087269245 seconds)
    (335/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.064596886 seconds)
    (336/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.068407099 seconds)
    (337/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.065085626 seconds)
    (338/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.06496414 seconds)
    (339/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.064646853 seconds)
    (340/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.064224696 seconds)
    (341/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.113936384 seconds)
  done (took 36.757133 seconds)
done (took 38.354138748 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.091646629 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.079644105 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.076726843 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.07425704 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.076899491 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.074725382 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.075937723 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.073754117 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.075470904 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.074960332 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.074628036 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.062998572 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.071435301 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.078784434 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.072837075 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.07957085 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.076249768 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.079260677 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.064940883 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.078120991 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.091080045 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.07568178 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.072996225 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.077570658 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.064512022 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.073361421 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.088036457 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.08496937 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.070784206 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.073427425 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.071290691 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.083093052 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.071874403 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.070229358 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.074190439 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.070153605 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.073210866 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.071413318 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.08721364 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.069689073 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.064844974 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.076209868 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.071483919 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.072217378 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.073221471 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.079075777 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.071541717 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.079940486 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.065700443 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.07683438 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.090456575 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070451426 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.071593103 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.073787071 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.070753714 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.073975001 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.070708495 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.075006505 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.069437882 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.075271668 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.075005997 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.07257796 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.063851813 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.0728366 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.07095342 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.071018732 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.062513828 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068811547 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.064082086 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.063626882 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.063195563 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.072632441 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.070752893 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.069092209 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.062823376 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.063570567 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.063383008 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.076091529 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.069467879 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.073371495 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.063766651 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.06890348 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.068676 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.063836914 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.068974133 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.075779006 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.064516649 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.065864749 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.06392074 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.079864868 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.071585902 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.065460167 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.077064629 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070003006 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.07043499 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.064324675 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.062826952 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.068633832 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.072060758 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.064709833 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.064274208 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070807074 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.071515439 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.074678969 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.065781602 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070868406 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070849377 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.064175165 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.072978068 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.070995168 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.072611152 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.0765961 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.072722555 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.07584512 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.064035943 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.062337324 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.073406041 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.063825643 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068332337 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.071282396 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.068593902 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.071587258 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.063917221 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.062985079 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068712692 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.069745825 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.064033547 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.064114534 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.064212729 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.073266193 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.070712935 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.062872288 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.063700137 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.072499664 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.072520356 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.062361548 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.062528453 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.072846344 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.063722757 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.069334905 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.069185498 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.072197352 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.063361484 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.063410345 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.062884504 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.062970142 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.065444234 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.06842256 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068223704 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.063604552 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.071580124 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.06919275 seconds)
done (took 12.47555891 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.070380066 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.107353122 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.078554093 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.080769949 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.077456185 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.065922147 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.068193273 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.083098632 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.067617628 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.08869012 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.090084031 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.086025444 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.09595839 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.064854787 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.066036863 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.065870942 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.062919827 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.076429544 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.081188505 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.087808344 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.100609183 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.064575266 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.080486309 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.084219998 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.078964457 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.08211071 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.066125945 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.065550832 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.067601532 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.083161748 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.090651076 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.064183392 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.06545948 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.082199658 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.079924928 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.07257063 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.065247284 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.070899549 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.068209533 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.064815585 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.066685043 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.082249246 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.071309585 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.072073281 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.066075191 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.065568444 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.065258587 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.071645897 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.082220843 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070329042 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.076622078 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.083850531 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.066596822 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.065518202 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.062868735 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.071614125 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.064885828 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.065396491 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.0651112 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.064555224 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.06529833 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.067261467 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.069773944 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.071073254 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.068298301 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.070740648 seconds)
  done (took 6.51824132 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.082068311 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.09028133 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.079116392 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.079494944 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.064555184 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.064956118 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.065702317 seconds)
  done (took 2.227087992 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.067526194 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.074051795 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.07860042 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.079418981 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.087323755 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.074200857 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.065263715 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.096505469 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.064150713 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.073327374 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.080533356 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.078088634 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.068571279 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.077309317 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.06545878 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.077034885 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.066261444 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.072188087 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.072738958 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.07841828 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069362028 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.094810751 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.078630586 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.065528394 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.07831162 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.07242905 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.067498432 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.065628806 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065724048 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.06497673 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064631329 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.086745074 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.071210907 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.077412614 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065546298 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.064307722 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.069148162 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065903622 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.06906431 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.073902786 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.068577883 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.064999083 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.065494356 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.064784424 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.065953652 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.069582643 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.06573969 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.065024221 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.064174833 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.071971468 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.064055407 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.070792359 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.066831602 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.069449504 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.069406081 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069213477 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.071554074 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.064888672 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.07169471 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.070689947 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064134124 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.077013769 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.075868594 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.068313273 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.076400992 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.073108579 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.071215661 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.068017136 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.064395061 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.063968424 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.064770924 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.075719036 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.06778266 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.067002442 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.065366457 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.069860679 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.068883885 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.079585195 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.079566607 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.077596472 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.06736104 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.064435005 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.068585975 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.079525465 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069435936 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064864564 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.065489322 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.064221249 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.069647026 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.065054466 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.069272597 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.064622569 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.071466655 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.06752339 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.067226252 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.072506729 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.065171056 seconds)
  done (took 8.538904561 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.068862495 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.066911466 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.065829501 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.065551499 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.066121597 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.065937754 seconds)
  done (took 2.13128331 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.091113715 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.067091143 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.078556185 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.066697589 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.08928267 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.073261956 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.073257705 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067993452 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.081453502 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.075985879 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.071732362 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.074440004 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.074015772 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.066928762 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.071387523 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.066371924 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.071472378 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.068286061 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.074837916 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067204181 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.081426485 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.067035061 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067045399 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.077090227 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.068131091 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.066021842 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.066078058 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.075080215 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.07496555 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.066790057 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.067437583 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.068469641 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.07368693 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.066834266 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.071693052 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.073276683 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.064899303 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.070506667 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.067445198 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.068074907 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.073895335 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067191653 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.067546952 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.070491377 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.066627586 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.073676103 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.070722971 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.068862059 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.071044257 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.070291699 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.070258992 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.065736889 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.068020633 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.070636092 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.073255235 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066910464 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.07029058 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.070932292 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.066382196 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.073737542 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.065224408 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.06815305 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.066643127 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.067887006 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.06969382 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.070300775 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.073365234 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067227281 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.073033708 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.065020298 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.07082002 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.065092605 seconds)
  done (took 6.786142726 seconds)
done (took 27.915054325 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.543538332 seconds)
  done (took 2.21895235 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.90708104 seconds)
  done (took 2.625892502 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.407116234 seconds)
  done (took 10.132513994 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.338425565 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.398710678 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.734328274 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.129911139 seconds)
  done (took 3.361129837 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.74891354 seconds)
  done (took 2.476935491 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.233707357 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.224706399 seconds)
  done (took 2.193409095 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.337944218 seconds)
  done (took 2.059846184 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.1543319 seconds)
  done (took 2.86863169 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.237196663 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.164902205 seconds)
  done (took 2.13121224 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.537990391 seconds)
  done (took 2.259800903 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.26058935 seconds)
  done (took 5.992905931 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.235184247 seconds)
  done (took 2.00139029 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.230249779 seconds)
  done (took 1.958886471 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.05667861 seconds)
  done (took 3.775178222 seconds)
done (took 47.785409109 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.084696478 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.086886556 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.086987852 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.082103615 seconds)
  done (took 2.036220834 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.074514291 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.069381247 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.071901262 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.071674952 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.069326315 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.070880985 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.07083003 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.0680248 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.069324833 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.067923441 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.066459768 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.068453526 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.072381702 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.068744 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.070764603 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.073029957 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.069877664 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.069655031 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.072275557 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.06981216 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.071006604 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.068247428 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.066822672 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.067938537 seconds)
  done (took 3.404909506 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.078728534 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.070494306 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.073090285 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.068803882 seconds)
  done (took 2.022513086 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.07583833 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.074204932 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.08270834 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.087909547 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.073676734 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.074404677 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.081355504 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.081947716 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.063674045 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.085030846 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.065973358 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.064969735 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.064909894 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083287016 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.081247048 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.060392345 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.061897233 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.075316842 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.074096349 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.077085753 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.066470351 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.063481294 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.074336246 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.075133889 seconds)
  done (took 3.499219586 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.0813829 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.063501578 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.078663382 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.08829632 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.089758298 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.063528666 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.076855773 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.090757567 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.125375746 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.063508737 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.069466645 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063128444 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.10296024 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.063653515 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.07862653 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.106689371 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.110803404 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.069649073 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.098838158 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.065347676 seconds)
  done (took 3.364317599 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.075562682 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.068255893 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.069228767 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.063762022 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.07545756 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.071515768 seconds)
  done (took 2.176129791 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.068610717 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.066304008 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.067976961 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.07018143 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.065920414 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.066081112 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.065344609 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.064057303 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.064354201 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.065292626 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.064930301 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.065273014 seconds)
  done (took 2.536337746 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.150420213 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.069637656 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.06829797 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.065101985 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.065572383 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.064755361 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.078214159 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.066719648 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.081389988 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.065575895 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.065114951 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.06773068 seconds)
  done (took 2.651008762 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105677629 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.110205353 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143562065 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115506009 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11530648 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097264173 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.127100266 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.095660797 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.159106999 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.137282937 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114885272 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.091715039 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084519326 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.069336149 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098724705 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118693022 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137988789 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072998008 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11375848 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.165967151 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133048642 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.135830237 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.149991887 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116351129 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.089132268 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.149350087 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098110019 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102935537 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.12558257 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1269709 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12029572 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.098498358 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.071332905 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.070678896 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150195726 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.103635023 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121650585 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.093034697 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105731253 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088333164 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107042081 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.069191163 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.085792138 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.111424416 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082879245 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128744232 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.08612923 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113337596 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079131224 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.136756167 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122014063 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096172473 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083027216 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101414725 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.286465303 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110224321 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.13184174 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104975883 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080836493 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.11651759 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.100218306 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098394184 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108608107 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078994248 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.174812151 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086747408 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.109480366 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109596672 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.091862315 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.092853713 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.105295925 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.134354961 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123600954 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.124199535 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.13590221 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095236721 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123151475 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.100948287 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.129968598 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10540622 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.073308882 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.121658565 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129757848 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099862403 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102001533 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130490327 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092528267 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077396101 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.098610883 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.117379542 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079860076 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.11228432 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079693044 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.106983293 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131146839 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095119788 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10974695 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114714671 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076177243 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152464389 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106993869 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07106693 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.11524983 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11266791 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154362092 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092982969 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.073804917 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09713275 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.258143319 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.145331014 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105716712 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078415775 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107885486 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137410977 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09275667 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.167030865 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093865615 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13855717 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1094963 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085277118 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073179095 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.088208332 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10984215 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105526832 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109853615 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087933571 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.081431259 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085151828 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109334595 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089634954 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078588093 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.111027096 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.099529107 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.073043744 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086771963 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.077320313 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139991659 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.076382471 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135280941 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123503274 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.077240145 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10446859 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.09616033 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107148065 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.096654635 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117461482 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138290415 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.114011172 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.087758554 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.09173156 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106686884 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.14228594 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127819495 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093374066 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.076852687 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.1013257 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112898296 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098303639 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125262182 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.094598294 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106869884 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100662275 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.14022069 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142547789 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097477411 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097863436 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103078986 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.279343101 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075260202 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155698446 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105401361 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118959498 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08464186 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142086854 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.115156862 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090821695 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.087699141 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101798703 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.10444796 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107025157 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144354831 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.096006185 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.072496485 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093820591 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.145375431 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076414663 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110706631 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.091099574 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.093802286 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119327187 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.093660552 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081228333 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.067552306 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125313995 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.156353685 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.068413686 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112787813 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.109326587 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100870755 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.119039324 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.067731386 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117019381 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.13690894 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116387859 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139314866 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14514463 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114971906 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117984648 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.115463067 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.105113407 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078178325 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.126062294 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.136175091 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09680648 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091736244 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133671944 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116479538 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.135152763 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.113546728 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110213142 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.101708464 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.261679913 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10179874 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.100055197 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142093173 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118559917 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.122404797 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08381281 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103971829 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115369829 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133749311 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080126062 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139285619 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.081573783 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115524205 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.075586355 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120863702 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.077719211 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.109320763 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077271347 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097577568 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.067896669 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.072513566 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.138775841 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.110010772 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103524553 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097738901 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.135738546 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.135147336 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.078925427 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108545336 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113637238 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098982235 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113846338 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.106740386 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.086747074 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092784419 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107035131 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.08314506 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.07989125 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.112759486 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092642995 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124679136 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.081925329 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072992923 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138700485 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103671103 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095148878 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076817205 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105960018 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.119200193 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090867465 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085319981 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113346753 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102894718 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140206227 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.089002319 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.096221619 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.122929826 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077703997 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.089815615 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.067618417 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.082716537 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.073384715 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.283740727 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.074592249 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114149548 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.068249198 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131173867 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087214304 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.093383127 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.102980881 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112559191 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128560297 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094830008 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.142029993 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089899844 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118983896 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108497094 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095247751 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088642245 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104187658 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101296634 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.12285828 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.096581846 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123417025 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143749107 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105100921 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.143556855 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092281639 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122989851 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108149215 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.123946188 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11394129 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149555623 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140475661 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11404473 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112949131 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076157284 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095762003 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104060696 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.109735104 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.172276416 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12335399 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.070545267 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104226528 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091730647 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105567491 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103277607 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080009405 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144021702 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099698291 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.085975652 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111403391 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.089993528 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102361856 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073736467 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092638424 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.096847646 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091208026 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094689146 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111228748 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12318099 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109144409 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.13838151 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.095399586 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.088979131 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.113336333 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105746919 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105549269 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082174365 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082571436 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131110904 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112760781 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.122940542 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.096068061 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103814721 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105997598 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095406243 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118721986 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102641921 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.120784657 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076881963 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.073280073 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.065362318 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.068940831 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.117424635 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103240922 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105788187 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094140239 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.06928638 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098473747 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101500776 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069003113 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084818135 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089520426 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.090927296 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.087230361 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101112337 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.10983243 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.088026604 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.099142058 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094881719 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139513607 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.095496349 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084300563 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137924879 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.142601697 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.083740465 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088045416 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.06912668 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.075989311 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107122101 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142756696 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143628264 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.072948818 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08184232 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.079559472 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.080472673 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.068596455 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.345006554 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.103065881 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106508458 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104934309 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.118855574 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110347677 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079120236 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.107533662 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103042442 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095924156 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.107806845 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122406849 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.128531268 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.146421364 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113866964 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110517863 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078326406 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.083271346 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078043445 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.082125158 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.105370485 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.081326513 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078420397 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.147293109 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.094679699 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107433429 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112096713 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090459814 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076843399 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136655691 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.070495965 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137121974 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.072015768 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082913459 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.083481611 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080135118 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095121937 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141346836 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112190675 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114657503 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108343911 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106349943 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142812159 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.159556991 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081479592 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.144937574 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076948716 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076122294 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076518734 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115775226 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091396946 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.117155021 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142440849 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092471255 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105069736 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078117794 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145029324 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.09873716 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105029385 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085211522 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.077359757 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.301622888 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080912358 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.078780112 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088644954 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.109060424 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.071215601 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.102584558 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083076773 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079779367 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141483181 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.628455708 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087966837 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.074631191 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094070103 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.142393614 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.127348752 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093649444 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106784453 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.118354266 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100708665 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.095603042 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106348581 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.182526446 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07407217 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094996939 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.104966105 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099462186 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102846269 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.099626522 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.084903391 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.094027317 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.087960477 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080020292 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10894127 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089719853 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.096633775 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108022208 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08343907 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.087631066 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131663277 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.10342956 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.08269812 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087259346 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.104209894 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088696696 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099105658 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.067360196 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112116013 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091990889 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117276764 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092420304 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.10515008 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.124742749 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088289123 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135664903 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.104743865 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.120137061 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085419173 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.076457924 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123811788 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.086806913 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075693288 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143157226 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.254162996 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.091429649 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102134035 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.095592314 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112162784 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118147762 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112397078 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.098077426 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07922681 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10159749 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.103228846 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085543457 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078363827 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.074589309 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.076908286 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106901269 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084554301 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08228917 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113107477 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.0893195 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.103157725 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.100837264 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.121836167 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083626434 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10180516 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111015623 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093244425 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111359996 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101926132 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.130229619 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.178048732 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1271696 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130727735 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135965907 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.077495421 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.076622014 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.0687948 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116565712 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080350522 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.089947347 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081339068 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136119567 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.08216462 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113636923 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.230769199 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.079488791 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093013479 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095058995 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.068230125 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083835628 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109100299 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08787836 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080755144 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119062939 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083520424 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.130281274 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112475585 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100892959 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095981987 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0814495 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113073889 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.102618319 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.12667577 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09289703 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.073942017 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111464883 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.259709261 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135677853 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.071478915 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07895753 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127507476 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102337083 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131573599 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078321718 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148267985 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.144182338 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.101449572 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133574173 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070944831 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083168929 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087216433 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.123403069 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082732263 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108626852 seconds)
  done (took 67.353506809 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.153515435 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.142451462 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.080705429 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.101934124 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.185381333 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.195885466 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.118096066 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.101537737 seconds)
  done (took 2.99390192 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.068055802 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.082977801 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.081342302 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.20790578 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.096551697 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.066089954 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.071886392 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.081749362 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.067432524 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.065420907 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.10045113 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.065477542 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.066800267 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.372295332 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.066874077 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.07258851 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.067594828 seconds)
  done (took 3.597691562 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.337344217 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.018949941 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.24835194 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.267735028 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.14380681 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.553796834 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.074613339 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.080966585 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.693809465 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.369973829 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.138141364 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.086465259 seconds)
  done (took 19.921778209 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.077135565 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.077630191 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.077177497 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.073202762 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.072810453 seconds)
  done (took 2.298501816 seconds)
done (took 119.602309676 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.083740737 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.175449844 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.067981842 seconds)
  done (took 2.18173528 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.082724099 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.080409055 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.079952452 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.077463905 seconds)
  done (took 2.232918478 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.075302333 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.07528399 seconds)
  done (took 2.053334593 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.221063229 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.176880888 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.090901858 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.082598184 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.07988027 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.080124111 seconds)
  done (took 2.159828884 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.071955075 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.071479414 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.071070994 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.071423762 seconds)
  done (took 2.188431563 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.068037404 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.06600723 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.068705708 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.071556991 seconds)
  done (took 2.174782915 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.086312396 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.0882337 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.117186723 seconds)
  done (took 2.193717728 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.08329371 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.08149633 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.076709075 seconds)
  done (took 2.150514656 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.110417358 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.095697472 seconds)
  done (took 2.106826112 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.08035272 seconds)
  done (took 1.987664534 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.090902347 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.098418983 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.140903119 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.105425924 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.138170993 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.124284084 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.075522097 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.076074532 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.071567956 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.070932253 seconds)
  done (took 2.895766512 seconds)
done (took 26.795797587 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.078791217 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.372316482 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.358140714 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.086070234 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.685870394 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.354369273 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.994103197 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.089089198 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.099286623 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066163006 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083039515 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.663717292 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.986261705 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.323603571 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.973076516 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.329726866 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.651790911 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068660173 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068116728 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.068669311 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.978852433 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068105984 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066751994 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.066327935 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.650609013 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.382355874 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069864049 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.325376648 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067094839 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070057966 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.355578134 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067168988 seconds)
  done (took 16.441950318 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.071080288 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.122633517 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.072226625 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.084503896 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.070632256 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068563802 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.069868802 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.066709763 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.110278002 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066605144 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083566678 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066005098 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.070287088 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.067683069 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.085923619 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066543541 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069030289 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070106507 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066626388 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067108822 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.085032877 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066224516 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067364126 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.066916222 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067069925 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.079687099 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067637686 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066719308 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066598711 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070344491 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.071177415 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067721404 seconds)
  done (took 4.280834482 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.122328469 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.128091465 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073307345 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.110402797 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.118681149 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068269557 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.149360844 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092870349 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.114823315 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066724421 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083765095 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066468038 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.101879493 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.067694199 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.086945682 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066612809 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.068851204 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.066863124 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066050921 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066727617 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.08546176 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066016867 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066953898 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067161561 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067209654 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.081206491 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.06859325 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066621367 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066527386 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070825086 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.071779575 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067964874 seconds)
  done (took 4.557768419 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.069737455 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.071088443 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.076869915 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.081258384 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.066359025 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.06843071 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.067803533 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.065088533 seconds)
  done (took 2.494005085 seconds)
done (took 29.696314999 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.07948927 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.066417585 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.069105978 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.08622548 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.0738629 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.070434857 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.064196404 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.07421575 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.071198155 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.071737271 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.073601621 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.067030942 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.070081428 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.064361981 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.072209893 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.065789359 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.07217073 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.070286545 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.07047848 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.071864196 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.068343439 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.071067494 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.074138183 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.070282231 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.070755231 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.070652444 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.075141865 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.071365263 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.06504544 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.067998666 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.066011975 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.07874301 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.070846011 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.070708639 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.064981005 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.064122359 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.068536766 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.066719239 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.070817767 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.073525797 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.066748095 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.07329711 seconds)
  done (took 4.850383011 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.089057145 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.094492737 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.087103512 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.082047902 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.108125766 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.081485519 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.090803317 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.079678374 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.077507752 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.090470332 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.073743277 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.078894429 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.08101337 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.075124352 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.075962326 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.072570466 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.077601508 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.071068689 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.076122688 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.076074392 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.088817512 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.069459434 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.07651577 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.077848807 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.071726255 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.077700402 seconds)
  done (took 4.035399457 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.073131342 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.088382963 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.090331251 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.138939437 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.10773216 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.081019128 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.079907395 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.091700467 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.099105884 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.066704186 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.070296802 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.092579088 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.094852 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.072965402 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.104008236 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.084442683 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.078395474 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.067905191 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.074165703 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.103276483 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.091425792 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.086759282 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.101024794 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.088760296 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.06768055 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.076356541 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.074194366 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.082225728 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.073767525 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.078387474 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.070382307 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.069908173 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.06677949 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.078893962 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.073500349 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.063930496 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.087932528 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.078731822 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.080554396 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.10380513 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.075784603 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.068332374 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.093965245 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.132279753 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.066452666 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.07045143 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.071603563 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.079843338 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.067735428 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.096281017 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.084617238 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.067798129 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.086855158 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.069057188 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.069100243 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.082889664 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.067635176 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.109373649 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.077447625 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.071965516 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.088639441 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.072938368 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.089734748 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.067308729 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.078809713 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.068677567 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.068974243 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.065921967 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.102360006 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.075097621 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.120067795 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.06840637 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.065108569 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.079663435 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.078943662 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.074216629 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.067235846 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.087671557 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.079690777 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.07133191 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.078356574 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.070416829 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.070809816 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.103370709 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.066359081 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.06530159 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.065242093 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.070012701 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.070564046 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.067701541 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.081129112 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.067092342 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.070614557 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.083649052 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.066333771 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.066733871 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.069446679 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.068979854 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.066638237 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.078309206 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.071448532 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.069584354 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.0802775 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.068621221 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.07086736 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.082272279 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.076963858 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.066904504 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.068397845 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.069953677 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.069127895 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.07106568 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.069651198 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.067585761 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.072367899 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.072895135 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.072159849 seconds)
  done (took 11.138067882 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.164218852 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.153624599 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.068623633 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.147157998 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.076193919 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.072187022 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.150287448 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.088553508 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.068336996 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.068924987 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.066877818 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.095616233 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.092008948 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.105373791 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.072698634 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.068370402 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.093702182 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.102079435 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.152996993 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.144637344 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.090378321 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.074132131 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.068973717 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.06788106 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.06784151 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.074780621 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.082716533 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.074427767 seconds)
  done (took 4.626687516 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.075237715 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.081793101 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.070603354 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.090351579 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.084265834 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.066222265 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.068116728 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.06751248 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.083549201 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.073353148 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.06644226 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.070922634 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.069888985 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.067127882 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.067044335 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.073023177 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.072843228 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.065208836 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.070106205 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.072404653 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.079171415 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.093690224 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.072442835 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.068224383 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.070913847 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.068176231 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.075380367 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.077200225 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.068087706 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.096952474 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.063244785 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.070296084 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.080214571 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.067132614 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.065901062 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.066488221 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.066048152 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.065991513 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.066752362 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.064078485 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.064068707 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.071495048 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.064611699 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.071637066 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.080730807 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.074465247 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.068745534 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.071978299 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.070255071 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.064708111 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.071143168 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.070783623 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.070079317 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.076400696 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.071145862 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.070113776 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.068979395 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.09883513 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.074169832 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.067184502 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.066884548 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.066025156 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.06941713 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.076478076 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.084288868 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.069494182 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.066004543 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.068224375 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.072956797 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.082076127 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.067277409 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.07297016 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.064839267 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.067893022 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.069980188 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.070784943 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.069037803 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.06619592 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.067792514 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.067951036 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.068569466 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.067728725 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.067921293 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.07048464 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.065489224 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.066262714 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.068357422 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.069244416 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.074550493 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.066793219 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.070616792 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.069357021 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.066186008 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.070339131 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.073220875 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.070776362 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.087597325 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.076936124 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.068162719 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.065742382 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.082804925 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.06995303 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.066869612 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.07363645 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.072667219 seconds)
  done (took 9.494349897 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.090707764 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.069426231 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.087342965 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.09389771 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.078070995 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.07297421 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.080496768 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.067019199 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.082309507 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.065457795 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.075062997 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.06594854 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.081576523 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.07721305 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.069590461 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.077847708 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.070652401 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.088216886 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.082381087 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.066624962 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.076660207 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.080428316 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.080778157 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.086220779 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.086057836 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.086859562 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.080519103 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.070646983 seconds)
  done (took 4.185168456 seconds)
done (took 40.246062386 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.017171837 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.178583645 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.001801662 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.252787033 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.064462442 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.236980469 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.236807329 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.998358694 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.258514333 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.033781218 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.335204433 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.396643688 seconds)
done (took 70.011904163 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.081400354 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.151663252 seconds)
    (2/2) benchmarking "String"...
    done (took 2.227816894 seconds)
  done (took 6.31850321 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.603961666 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.004984347 seconds)
    (3/3) benchmarking "different"...
    done (took 2.054680039 seconds)
  done (took 8.602447745 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.108241646 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.628564452 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.255824768 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.998271889 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.006081831 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.398093842 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.802631577 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.466596318 seconds)
  done (took 33.493006763 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.250472938 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.212472626 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.756793556 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.805169788 seconds)
  done (took 17.010619729 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.608182682 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.262175207 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.266063434 seconds)
    (4/4) benchmarking "different"...
    done (took 2.25676814 seconds)
  done (took 11.392696775 seconds)
done (took 89.047804852 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.002546249 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.051962671 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.997187035 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.154024228 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.010233201 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.035076294 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.99314868 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.036520225 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.993944621 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.992855977 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.43374915 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.993594705 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.004333187 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.030496691 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.994588955 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.006929979 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.563958216 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.994665191 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.025511771 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.844596118 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.50783274 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.998021308 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.00294953 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.054821349 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.125304808 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.028395763 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.004856333 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.001986452 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.607309866 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.996320065 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.992224174 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.994407984 seconds)
  done (took 211.407252267 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.998918584 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.882036975 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.967670223 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.043541722 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.349190437 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.189731229 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.145664511 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.41164414 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.998552633 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.0024791 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.147347328 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.991282315 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.173023059 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.985343801 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.990147336 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.087654465 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.172019165 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.191023433 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.993130569 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.182705438 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.017307584 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.055713465 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.000880467 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.130443796 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.99695728 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.000920565 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.990009346 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.005916477 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.179242134 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.126893262 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.02840014 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.993064466 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.117058239 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.853177444 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.989216962 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.985668646 seconds)
  done (took 177.307113035 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.152437852 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.000462062 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.05126365 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.087899642 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.731350726 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.706987681 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.97764158 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.985213669 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.977334666 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.991985915 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.988584303 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.055992 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.390698422 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.194867955 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.985161462 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.986399602 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.193208478 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.990283058 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.982212896 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.981480548 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.05828068 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.355098092 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.199659462 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.978686691 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.992697422 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.11789738 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.988929041 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.982842486 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.119282581 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.981785585 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.050989302 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.107419204 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.985100722 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.054040797 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.977144812 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.459787315 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.968508434 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.966659907 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.972273381 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.033482658 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.969672055 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.070137873 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.057393615 seconds)
    (43/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.967873465 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.975628325 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.98598435 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.040902943 seconds)
    (47/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.968581136 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.666456547 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.960625974 seconds)
    (50/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.972245411 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.972056179 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.959463416 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.97359342 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.096090643 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.940070799 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.995426699 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.577175679 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.968985774 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.972538731 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.967250964 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.966136135 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.966162134 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.974502353 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.01007588 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.776056486 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.203739794 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.356306758 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.773607565 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.968409265 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.239223076 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.022069892 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.966616575 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.047593126 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.96441544 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.96593418 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.968115204 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.967630518 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.08906336 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.056715228 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.965495051 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.104313373 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.969661325 seconds)
    (83/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.96740688 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.96821845 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.228443416 seconds)
    (86/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.968796001 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.187159835 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.969728999 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.987962769 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.020368255 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.969282583 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.967919604 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.978200301 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.080054314 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.96657447 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.967548528 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.967022176 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.065531716 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.964564888 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.138738257 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.195519285 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.039345842 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.217364152 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.18680995 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.96839823 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.969168182 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.985899906 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.97146294 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.97193098 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.982030311 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.970567231 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.970550343 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.97189704 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.972362873 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.96958233 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.971998404 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.982693856 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.966949632 seconds)
  done (took 431.564958632 seconds)
done (took 824.412939864 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.639757841 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.707515004 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.55305516 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.600140255 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.556370717 seconds)
  done (took 14.963582999 seconds)
done (took 16.865518431 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.994994005 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.98411387 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.97643187 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.993919777 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.989162561 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.989978162 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.018243488 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.011507856 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.007496736 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.986814482 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.988264409 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.985231006 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.994168202 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.005435812 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.997452955 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.001893514 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.992357502 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.982918421 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.002609719 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.988457 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.993241657 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.985667912 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.990113647 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.997766448 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.0030797 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.993412337 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.983974703 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.991778198 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.993969346 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.993406826 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.030277882 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.997367892 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.021531529 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.000910726 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.997604726 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.001260799 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.989933144 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.014249231 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.992683918 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.028383142 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.001848195 seconds)
  done (took 83.79790832 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.982716926 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.117554959 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.196488233 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.016020966 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.982243462 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.198874758 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.040704871 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.107103773 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.119000831 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.216929352 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.214619431 seconds)
  done (took 25.104127686 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.983721811 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.132308519 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.196493236 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.018454296 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.006572108 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.20117648 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.046273982 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.122668808 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.118106105 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.202702179 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.213387191 seconds)
  done (took 25.153891589 seconds)
done (took 135.958745174 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.349331279 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.0038121 seconds)
  done (took 6.258978727 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.980261694 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.98986841 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.119219083 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.977438104 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.977206399 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.97872284 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.977449399 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.974915732 seconds)
  done (took 17.885217047 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.978663801 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.97254302 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.973040275 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.974199653 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.975341613 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.978004551 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.97369881 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.972026228 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.976037217 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.973936478 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.975954654 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.974701708 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.974287817 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.974926459 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.974145754 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.977399959 seconds)
  done (took 33.504383444 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.975244547 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.976855201 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.975317488 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.981424599 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.976744273 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.975537223 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.977687618 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.974365209 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.975005705 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.974827027 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.97320623 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.976883963 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.973762629 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.973854993 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.97845819 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.975850922 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.973543468 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.974399835 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.975894045 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.979494407 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.975019339 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.975876552 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.978567452 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.973347263 seconds)
  done (took 49.329409518 seconds)
done (took 108.892841135 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.237830959 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.607124103 seconds)
  done (took 8.752398886 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.97725851 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.977616549 seconds)
  done (took 5.929454245 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.975457108 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.97437326 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.963994261 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.9765879 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.975953131 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.976836551 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.978987468 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.974834123 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.97573668 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.975408815 seconds)
  done (took 21.647019423 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.97485825 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.976288324 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.976641651 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.977022044 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.976326823 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.974917811 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.976685574 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.976311846 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.97574181 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.976173478 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.975671826 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.977920472 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.975885288 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.978601148 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.97774622 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.976960729 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.976058233 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.978661467 seconds)
  done (took 37.485024114 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.978181513 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.978143863 seconds)
  done (took 5.864494984 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.97727518 seconds)
    (2/7) benchmarking "second"...
    done (took 1.977679256 seconds)
    (3/7) benchmarking "month"...
    done (took 1.977080801 seconds)
    (4/7) benchmarking "year"...
    done (took 1.976459876 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.978496788 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.976732469 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.979037366 seconds)
  done (took 15.753364883 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.978260112 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.132086673 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.184165806 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.591329144 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.978207815 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.980408409 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.859581933 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.979034793 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.981692101 seconds)
  done (took 21.572880216 seconds)
done (took 118.913985716 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.819095491 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.977672887 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.28742928 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.056600875 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.982899355 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.316987262 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.992222108 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.523982815 seconds)
done (took 43.864756242 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.083351961 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.976464271 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.999681701 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.002105703 seconds)
  done (took 22.886713523 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.975527788 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.280671927 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.005973716 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.933646045 seconds)
  done (took 23.118469857 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.358428432 seconds)
    (2/2) benchmarking "read"...
    done (took 2.327925134 seconds)
  done (took 6.600730727 seconds)
done (took 61.596614277 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.977542103 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.979713237 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.976156298 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.980585924 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.979097641 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.977118538 seconds)
    (7/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.981583378 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.976097608 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.975136809 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.975671566 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.97919287 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.986036932 seconds)
    (13/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.977002774 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.977437611 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.977005663 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.977276809 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.985126227 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.978755097 seconds)
    (19/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.977572466 seconds)
    (20/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.979114378 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.979105223 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.979483909 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.979393629 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.977326159 seconds)
  done (took 49.39960773 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.978660339 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.98377874 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.978876283 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.97864826 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.979202537 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.979159534 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.988520282 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.977601759 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.978468356 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.980215727 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.97849291 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.98597833 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.980788554 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.980762863 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.977676471 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.98033852 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.985011802 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.981517542 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.978555782 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.981036747 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.981428257 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.987235442 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.980136072 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.981284881 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.982257285 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.981692946 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.988578179 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.981447246 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.981986661 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.981933133 seconds)
  done (took 61.351913776 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.985716782 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.981448967 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.981819085 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.981132007 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.980722802 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.983434383 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.983852054 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.983348912 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.980573828 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.980678813 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.988246033 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.983916613 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.983665688 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.981562543 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.984962367 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.991356781 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.980855937 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.983686315 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.97745854 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.981393868 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.989102636 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.980666767 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.980833721 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.979973249 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.979876805 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.985713238 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.980262235 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.981329323 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.982058285 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.980802134 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.982686603 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.991329974 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.982121648 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.982421052 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.983379442 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.983017925 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.988853109 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.987145384 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.993131944 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.984535624 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.985594711 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.980528667 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.974021081 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.986888056 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.978041338 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.977074924 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.990987122 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.987690213 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.988945053 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.986546349 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.986230766 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.992012752 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.987928623 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.987676871 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.988362841 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.989172051 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.994998404 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.989696696 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.988129545 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.989879385 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.989657563 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.993385196 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.986930738 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.9856676 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.985388891 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.985840976 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.989291504 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.987113942 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.98945663 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.98930461 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.987409167 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.98830515 seconds)
  done (took 144.842387754 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.986986033 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.989950151 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.987393153 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.99306081 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.988264929 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.987804699 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.987771452 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.987764893 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.993808534 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.987948019 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.987867804 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.987662977 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.989380422 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.991849413 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.988748048 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.986554242 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.987008648 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.986900971 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.99585219 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.989443351 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.986348971 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.988393584 seconds)
  done (took 45.674013935 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.992013232 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.986087917 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.986384412 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.987123965 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.986442706 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.991998843 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.988946545 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.985704114 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.989218016 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.987149603 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.990531953 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.986823957 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.985734458 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.990039516 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.98668115 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.998610985 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.993656768 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.994175451 seconds)
  done (took 37.72673562 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.994567239 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.005052784 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.995065504 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.990920956 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.991762147 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.992602342 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.000887351 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.991491012 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.99214537 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.991232101 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.993972767 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.999348539 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.993193255 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.993335745 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.994944052 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.992865912 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.996446806 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.996351679 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.994256778 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.994933732 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.996603539 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.000540514 seconds)
  done (took 45.817433607 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.993224015 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.992961961 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.99219109 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.995281076 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.99450842 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.990842674 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.994568496 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.993945895 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.996139948 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.993548868 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.990463367 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.98974984 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.992032974 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.002043588 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.992953219 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.994967854 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.994484954 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.993309187 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.999161944 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.994873714 seconds)
  done (took 41.801449911 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.990265012 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.993900155 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.99802737 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.992162271 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.995637898 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.992486422 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.992977837 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.998436504 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.988210941 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.981597956 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.9934468 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.991661259 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.996481451 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.995365545 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.988739382 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.992886818 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.993197989 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.99253958 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.99494259 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.989562304 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.990647951 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.988690186 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.993129365 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.993909741 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.989941761 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.992767266 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.992968329 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.995898228 seconds)
  done (took 57.713594957 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.992220302 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.993943605 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.991842262 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.992307234 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.993028327 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.99322645 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.993155725 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.992843649 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.991335201 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.990269779 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.992488765 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.994204935 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.988639438 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.991911612 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.995512507 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.992925921 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.995080508 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.994541501 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.99109004 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.993697009 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.99486547 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.992851727 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.993148749 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.993875224 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.993966607 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.99288275 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.992531912 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.984606128 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.993747505 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.001895575 seconds)
  done (took 61.709489798 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.011659994 seconds)
    (2/2) benchmarking "in"...
    done (took 2.01185601 seconds)
  done (took 5.945340917 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.994255395 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.995200062 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.995160099 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.994216444 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.996808152 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.99663974 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.992363513 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.99369813 seconds)
  done (took 17.881516751 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.995254831 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.997676059 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.996820276 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.997114081 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.995956694 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.005125256 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.993436214 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.997639026 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.99851592 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.997957529 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.00047114 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.000640252 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.002088092 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.000776514 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.997760424 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.996552791 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.997432418 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.994160606 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.9955696 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.996475401 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.999911015 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.002817802 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.994977921 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.997140283 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.995918315 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.998551579 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.008239593 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.99630654 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.998325704 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.998476498 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.006213191 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.997934784 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.997893075 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.997103476 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.992414423 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.996208129 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.005679108 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.991168201 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.991641229 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.992056212 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.99424927 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.999084861 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.999520993 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.003606417 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.993477679 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.993590958 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.99897463 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.994851528 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.99307609 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.986926696 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.001330794 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.001218478 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.994893365 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.994194571 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.993921915 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.99064586 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.001954959 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.997111033 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.00177021 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.002370558 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.000155892 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.023541914 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.004606213 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.998597425 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.997269426 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.006070614 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.024161676 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.99802461 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.998809517 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.996574302 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.004850707 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.004083397 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.995233261 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.996660305 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.00772688 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.002848077 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.007919787 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.997158184 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.996768726 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.997014109 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.998676559 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.003377015 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.997918689 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.99972495 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.006716953 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.02051676 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.00225393 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.99849729 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.998192695 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.998314158 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.001320729 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.00233648 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.997978357 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.99764041 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.000486665 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.001821504 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.002965373 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.000035225 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.996521724 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.007814716 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.999721974 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.002133092 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.004070939 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.007191788 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.99955714 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.998869553 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.003548988 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.998999604 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.007927182 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.000344342 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.000200666 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.006664544 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.999902774 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.002564901 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.997759414 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.003529305 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.01163749 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.007387605 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.00140443 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.003764743 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.002517661 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.999406208 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.01047493 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.022255712 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.000762716 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.003841839 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.002648187 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.01150078 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.003319143 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.000571226 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.002259175 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.999887476 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.001305006 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.001436699 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.001768831 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.001127017 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.000917881 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.001419622 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.001688846 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.001405382 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.004033628 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.002114991 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.003877061 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.002300974 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.003038605 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.001739064 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.003941691 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.007680652 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.001696226 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.001053292 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.001449108 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.002384314 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.002381362 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.001988989 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.001461678 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.002701393 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.003537963 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.00315309 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.003215782 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.000756333 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.002449924 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.002796744 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.005549 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.002732645 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.001987134 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.002163378 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.00224577 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.002599733 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.004085105 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.00474843 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.00415499 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.00325299 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.006505959 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.001697947 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.003379329 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.003593248 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.003075871 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.004285361 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.006147529 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.012828274 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.007464932 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.01292733 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.004042389 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.010611233 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.003874767 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.005284847 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.005905462 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.005391391 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.003113771 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.003544339 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.003263571 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.0067366 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.022501145 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.012528278 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.006111315 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.005048014 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.008912978 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.006960545 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.010305955 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.003497689 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.006174029 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.007509052 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.005300889 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.005157325 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.005168046 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.006853366 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.004175457 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.003383567 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.008606684 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.005396267 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.005203553 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.006265702 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.005542882 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.00867409 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.004598893 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.005447757 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.00612091 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.007107185 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.013619185 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.007775657 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.003907055 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.003615896 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.009225151 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.005023918 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.005041837 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.005398995 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.007294522 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.007049731 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.008622483 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.012408907 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.00733918 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.005864598 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.007765065 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.006742265 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.007560119 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.006175517 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.009068441 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.014238531 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.007944338 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.005770756 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.011075481 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.00524713 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.009449591 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.005002045 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.005888468 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.006033531 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.006194455 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.006436361 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.00747121 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.01306581 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.005871811 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.005647083 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.007558868 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.009145377 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.008207662 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.008984453 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.007349131 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.011284479 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.013205237 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.013035169 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.008312545 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.0112796 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.009048184 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.008795666 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.009136936 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.006845991 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.019249188 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.015273152 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.007106632 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.999928351 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.005892364 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.010858126 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.008779914 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.007939354 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.015084297 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.008389381 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.007982929 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.012881276 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.006639087 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.007386291 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.013891157 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.010144114 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.011702025 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.009917121 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.008306495 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.005886513 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.009578438 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.010706039 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.007408171 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.00685884 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.012283764 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.009402783 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.008522393 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.002821292 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.01333097 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.009386364 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.008884398 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.015178999 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.009821506 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.007857114 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.01028373 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.010223907 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.010451945 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.008475634 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.009883035 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.010944721 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.007662941 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.011877515 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.019004771 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.01114388 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.017088325 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.009984443 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.020719834 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.00697752 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.009098058 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.009851587 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.01413743 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.016393789 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.0106964 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.009760332 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.015420658 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.012618305 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.00906093 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.013607898 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.010992803 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.008962787 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.010811478 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.010633084 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.013595146 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.013999604 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.011736386 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.011303096 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.010825968 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.010305875 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.013472606 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.01212029 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.010794347 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.011872598 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.010371979 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.012265265 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.010445258 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.009001879 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.011901492 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.010698309 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.011671632 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.017171168 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.009853072 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.01196492 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.014464112 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.011070994 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.019984512 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.013060549 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.011192837 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.012929962 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.013430139 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.016420143 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.011885843 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.009942493 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.01130149 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.01172886 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.014136342 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.024431933 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.019406681 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.016793743 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.011557391 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.011679598 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.012667149 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.020189947 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.033945785 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.014210063 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.013922136 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.015661056 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.019825765 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.014413542 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.016908134 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.015100728 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.020382052 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.016199709 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.012037269 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.015466889 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.025336027 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.01501568 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.01331553 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.012538617 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.017390971 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.016680853 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.013400583 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.0158947 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.016656515 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.014229081 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.023586791 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.014964028 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.014826749 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.014780544 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.014140004 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.014386537 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.013645456 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.017317256 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.014647805 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.015188684 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.014046673 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.015337603 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.018183963 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.015050123 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.017268973 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.024372067 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.013797313 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.014527445 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.018399598 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.015391584 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.0161852 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.015884842 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.013313018 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.016297318 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.015758379 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.015539682 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.018265015 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.021025568 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.015944057 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.0150547 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.014006368 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.018776167 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.01461656 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.014185966 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.016646493 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.025549529 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.018346004 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.025386125 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.023202605 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.015486595 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.017215531 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.021941594 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.021636323 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.015299573 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.014722172 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.015592143 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.017247559 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.017090149 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.017533294 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.015214833 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.014747946 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.020416253 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.017064765 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.015529565 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.014813921 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.016556625 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.018152352 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.01845964 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.024109082 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.015876271 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.015231232 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.016764217 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.017983076 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.017619599 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.02016586 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.015433553 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.018455731 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.017061832 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.01944837 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.021412292 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.017965014 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.017529274 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.018506653 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.017197492 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.017092075 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.018481263 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.020149982 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.016878882 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.01255572 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.025046032 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.018035151 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.018701529 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.016715637 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.021424488 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.017983592 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.018711726 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.019185274 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.018283795 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.024373691 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.018365775 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.018373641 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.018267745 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.017827828 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.022961733 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.019958374 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.022168577 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.01777075 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.01878479 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.018245403 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.021958108 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.025334821 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.021368451 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.02249982 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.024681649 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.02308375 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.020862236 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.018624464 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.018583838 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.01916528 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.019483804 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.022526085 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.017727966 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.020582598 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.018722514 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.019464882 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.019615688 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.019972299 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.018133002 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.019544338 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.006166252 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.026122663 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.026785309 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.018696016 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.020498591 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.019084225 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.023346457 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.030195657 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.018345837 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.019483918 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.018062534 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.020833607 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.020735384 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.025429379 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.027987476 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.024294874 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.019458858 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.023465729 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.036431599 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.024211115 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.029858856 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.048744993 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.020788455 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.019854539 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.021429531 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.021262993 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.021312761 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.024363454 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.013571435 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.027389753 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.019749164 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.020147936 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.028432636 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.021787922 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.02131178 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.021328158 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.020516567 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.027277921 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.020472673 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.028103527 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.019573106 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.020043641 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.020760447 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.024403983 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.021443504 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.021786391 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.020054532 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.023630581 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.022084175 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.02060534 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.030536525 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.020110716 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.022138683 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.033824975 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.03202008 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.021304528 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.021162331 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.021563656 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.027041619 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.024933645 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.019329117 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.023850639 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.028357454 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.024943015 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.029659038 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.024379326 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.025112766 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.020854847 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.022922052 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.021310787 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.033800034 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.032358791 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.024255047 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.022404376 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.028802021 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.022826258 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.02825592 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.027608861 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.025238585 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.024174418 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.022380789 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.021148534 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.023372733 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.022860663 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.026717195 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.030091165 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.023806287 seconds)
  done (took 1200.574083953 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.021845005 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.023192702 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.023516854 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.023457752 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.02516761 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.021190061 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.02556328 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.023014188 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.024180457 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.023388723 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.024539619 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.024489361 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.024410541 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.024356188 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.02457485 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.023696301 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.023439128 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.025720213 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.024743605 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.023625547 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.025550516 seconds)
  done (took 44.442731299 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.024580133 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.024393196 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.024409997 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.024750539 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.024555439 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.023513915 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.024864817 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.023934796 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.022912381 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.025085107 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.025495727 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.025912933 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.02455293 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.024886988 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.024116929 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.024834237 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.024108171 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.026473925 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.02372287 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.023679493 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.025676795 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.023615556 seconds)
  done (took 46.493055711 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.02541482 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.025834489 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.026489575 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.026929895 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.024952961 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.025233389 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.026801731 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.027091147 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.024738748 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.028140714 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.032447106 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.032748236 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.025410241 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.030450499 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.027616327 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.026327666 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.173825226 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.027452124 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.025077947 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.026202704 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.027056225 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.034027584 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.025463838 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.025629025 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.026196753 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.025879145 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.026770927 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.028163537 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.025769047 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.027297448 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.029965739 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.028187507 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.027581547 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.030901167 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.02826492 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.027805309 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.03012326 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.027408643 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.027513927 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.027681116 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.036452286 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.0474033 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.028142801 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.028256863 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.035109005 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.027274737 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.027752874 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.031300807 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.034655697 seconds)
  done (took 101.498230343 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.028943427 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.02793601 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.027793719 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.027657798 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.028333571 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.026046428 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.027223567 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.027969885 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.026108582 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.026229997 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.028337564 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.028602037 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.027213974 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.028601627 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.025762234 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.027247526 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.027628801 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.02576949 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.02809371 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.027966564 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.028150536 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.025842759 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.027229438 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.028582422 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.027006641 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.029230885 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.027706113 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.027993586 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.027638079 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.029688691 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.027358477 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.028144405 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.028463993 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.027748422 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.030012466 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.026690816 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.030231643 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.030404518 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.027321904 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.028588825 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.030578126 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.029773987 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.028110867 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.028835117 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.027685139 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.029494547 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.029571951 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.029004413 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.029911009 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.029144193 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.029323989 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.029385397 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.03251949 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.029377775 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.032207407 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.028951633 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.029940702 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.028992345 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.02888413 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.029619927 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.029922777 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.02907899 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.029868816 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.029212923 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.030434882 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.030216453 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.030421503 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.028696042 seconds)
  done (took 139.900849616 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.023809884 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.029178921 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.030931141 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.029749665 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.031045832 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.031073964 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.031690478 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.031182128 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.030596262 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.029986596 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.031630953 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.030922875 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.031477621 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.032255666 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.031360836 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.031053127 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.031645707 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.031304996 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.031300709 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.031318505 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.031321956 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.030006198 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.031339576 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.032187796 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.030901772 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.032038458 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.032412467 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.032459257 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.031880644 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.031993823 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.031648733 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.033683279 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.032578363 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.032312456 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.031218179 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.030618954 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.032179607 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.031839819 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.032139212 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.033423838 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.033099998 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.032537227 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.032296428 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.032959547 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.033917006 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.032639374 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.033107022 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.033518328 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.034093013 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.034288923 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.031675402 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.034999426 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.032500285 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.024260537 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.032556559 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.032669909 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.032471863 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.032373966 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.03267585 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.033113977 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.03405958 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.033058673 seconds)
  done (took 127.929651785 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.032330644 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.025200687 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.03345712 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.033771017 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.035024429 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.032743867 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.033674078 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.033534361 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.033606998 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.03427698 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.034830456 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.033393864 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.032986271 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.033837651 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.033814732 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.036076982 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.032915778 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.03407927 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.03520267 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.033129754 seconds)
  done (took 42.629597402 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.03494197 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.035544879 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.034697268 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.036084425 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.034732105 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.034090585 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.033173655 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.034728936 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.034586128 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.034564377 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.03534325 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.035131385 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.033385948 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.032928021 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.034648088 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.034092631 seconds)
  done (took 34.516117819 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.034069699 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.035092785 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.034435404 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.036649443 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.034694623 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.03620538 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.03445161 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.034893789 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.035737984 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.036568503 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.035903067 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.035010643 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.034767813 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.035343424 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.036227816 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.037318526 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.036118795 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.035962505 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.036027842 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.036217212 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.034987533 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.035687099 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.035892263 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.035262322 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.035887478 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.035845358 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.035906096 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.036021939 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.036646077 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.035649433 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.036810565 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.034853023 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.037113411 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.036413881 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.036431123 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.03593164 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.035777116 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.036357033 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.03633729 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.037717292 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.035692073 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.036267091 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.037888568 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.035677869 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.035195452 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.036879545 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.035926511 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.036973478 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.037234583 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.037139985 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.035986988 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.038871788 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.039886749 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.038420166 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.037144237 seconds)
  done (took 113.954609048 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.036084452 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.037122288 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.038227552 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.037300067 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.03677712 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.037506597 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.038079198 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.037010456 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.036540671 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.037833474 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.037416238 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.037759221 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.037424125 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.03776741 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.038973242 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.03890397 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.03767877 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.037607055 seconds)
  done (took 38.642306522 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.037780334 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.039645049 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.040217978 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.035847303 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.039308213 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.03873295 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.031562102 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.039342343 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.039655788 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.034030674 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.027302879 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.03812374 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.037687363 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.037876018 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.03851047 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.038792511 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.037838957 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.038836739 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.038287705 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.038635057 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.039633714 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.039543177 seconds)
  done (took 46.793540297 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.038615398 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.038161001 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.054463688 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.059667532 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.060361161 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.074002233 seconds)
  done (took 14.29226825 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.039047235 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.038653153 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.041538198 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.038604576 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.039502381 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.039422494 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.036775588 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.039382765 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.039379626 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.04001446 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.039729487 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.039314355 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.038730671 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.039144066 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.040800163 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.039306425 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.0393768 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.038601087 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.039552292 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.04006058 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.039754941 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.039754058 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.0405633 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.039467508 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.040781732 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.039795329 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.039581148 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.0406825 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.040972502 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.039338145 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.03896952 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.04051589 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.041792826 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.041106952 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.041227255 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.041613385 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.042163048 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.040820066 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.042191645 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.042174089 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.041370824 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.042111645 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.040782026 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.040235029 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.041214817 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.04286429 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.040493879 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.041947166 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.040515291 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.041239513 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.041808417 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.040987192 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.040117752 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.041826248 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.038562667 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.042489585 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.041811283 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.04372179 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.042406365 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.040934374 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.042965329 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.041516664 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.040958235 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.041730498 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.042711985 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.041447362 seconds)
  done (took 136.649791736 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.04241581 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.041282497 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.042499277 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.042245658 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.043619315 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.041041942 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.043363477 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.04165769 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.042714163 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.041849463 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.04306004 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.04394705 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.043158613 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.043342265 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.043080748 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.044104082 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.042661271 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.042426203 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.042206721 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.044355718 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.042373721 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.042394242 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.0420165 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.043493248 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.042978145 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.041900806 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.042836191 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.043991176 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.043190289 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.044254758 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.036748066 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.043722801 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.044100928 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.042323574 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.043773533 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.046055842 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.044827476 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.044043795 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.044786515 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.044572157 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.043185872 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.045047707 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.044348677 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.042565448 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.044341215 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.043386821 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.044133224 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.043632891 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.044670416 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.044917951 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.043508436 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.044865242 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.043710693 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.045428289 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.04461545 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.04372366 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.045198811 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.045032958 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.046280189 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.044485225 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.045046588 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.040353783 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.019363457 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.044591235 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.045314565 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.046089411 seconds)
  done (took 136.821231073 seconds)
done (took 2796.914835158 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.156022507 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.132588068 seconds)
  done (took 16.262458992 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.211575856 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.090181484 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.231808337 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.164176861 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.057630758 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.052685793 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.048138081 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.051144303 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.143410214 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.051129208 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.091427377 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.048548207 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.052936699 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.051954803 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.053405687 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.028027163 seconds)
  done (took 55.410062432 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.054869451 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.055607392 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.048453073 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.050538606 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.062938352 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.124088785 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.067852527 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.053451391 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.064308742 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.083267571 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.069035159 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.056388975 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.059639568 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.055836517 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.137338937 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.092652922 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.106022335 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.120081701 seconds)
  done (took 39.338216269 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.129968827 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.057291804 seconds)
  done (took 11.17075381 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.075152153 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.073728484 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.077350014 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.046154538 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.06466333 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.056558472 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.050270854 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.048333292 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.073298769 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.052161553 seconds)
  done (took 72.611839945 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.055931794 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.053885786 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.357574525 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.041995374 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.059624218 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.079323816 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.051962815 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.083404289 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.053459711 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.051261155 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.060501485 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.362810505 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.062623341 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.051190924 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.406099406 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.059793681 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.059562551 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.079282788 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.081869572 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.053515347 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.058260439 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.057299716 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.212995523 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.725429519 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.050556143 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.051675436 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.061008218 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.049556669 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.049609369 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.052260973 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.055203491 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.051099833 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.055608522 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.055039668 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.056859827 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.056987694 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.544702186 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.07180972 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.060372612 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.12986706 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.094345966 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.054409449 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.832523246 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.051148887 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.05069599 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.058976169 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.729079753 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.126482 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.053631159 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.223831719 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.403147873 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.062567835 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.213802357 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.193798131 seconds)
  done (took 142.800866386 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.050742815 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.286069339 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.204381994 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.049104713 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.30693298 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.261460819 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.049629418 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.096506983 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.052314466 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.249558204 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.300007574 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.150975188 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.052367586 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.049830161 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.050715051 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.046546632 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.20124213 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.115238092 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.054591195 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.048943057 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.077247908 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.251285475 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.171942617 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.052391515 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.075559708 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.258619008 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.1724241 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.151010636 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.822094638 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.050934484 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.114203994 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.05306957 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.052416426 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.047263193 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.20436767 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.140993602 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.137084832 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.051817606 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.050814305 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.051573665 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.728686703 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.253862799 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.148694643 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.174209407 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.295293159 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.263318427 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.663766438 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.052162571 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.680236335 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.216880467 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.255654665 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.257386973 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.16673531 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.052150098 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.604364133 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.052112246 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.051538645 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.271281006 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.268776874 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.148398833 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.0542299 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.054688458 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.050115827 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.291268718 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.051559522 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.140286173 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.05237495 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.049985725 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.146134507 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.150564142 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.27290983 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.270618225 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.083157394 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.390763256 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.53792072 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.256636353 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.115235646 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.270713543 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.052721228 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.052577563 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.132599415 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.895020893 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.305021544 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.290769225 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.247654829 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.080651656 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.703345072 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.044755998 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.239516854 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.242422949 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.286102466 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.291908592 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.287032344 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.404763706 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.054051512 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.053047748 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.354988122 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.167923084 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.433024493 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.411720566 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.279671102 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.539348634 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.080327657 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.338749416 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.181794604 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.055379428 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.702234426 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.054938419 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.25989033 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.093865904 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.056288009 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.055658786 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.242888424 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.960821995 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.056334246 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.998111176 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.112549024 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.055724154 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.260613595 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.055461025 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.29710645 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.058632098 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.286696844 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.685614939 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.083199824 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.282045599 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.29642779 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.691130142 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.341986866 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.296570057 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.167867287 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.328049313 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.057395534 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.056798345 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.314403577 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.057261915 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.054950756 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.223908679 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.055865325 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.19873383 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.060495818 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.323112675 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.074562066 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.28350603 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.060422086 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.293808274 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.08704654 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.104086979 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.057344428 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.180927716 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.057652418 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.973467078 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.21378049 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.055726619 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.055591872 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.859751261 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.055214248 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.208691832 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.281362231 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.075844484 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.126215723 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.620680145 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.055943242 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.145142137 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.077300483 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.329356453 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.058591057 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.305626263 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.02745481 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.54719388 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.05982249 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.29274014 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.289874049 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.058984216 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.055581249 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.904651917 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.059210862 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.057772873 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.211019645 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.506599615 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.958917856 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.257133549 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.059941897 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.182426885 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.06263733 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.138897816 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.403069456 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.057060442 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.058636601 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.061809254 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.060242697 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.057733468 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.318763402 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.085523938 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.493639329 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.195343422 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.312293975 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.362006218 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.258059421 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.096935084 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.061408973 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.28027757 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.06355488 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.118503338 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.061843262 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.079632796 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.285454625 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.064680541 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.262978012 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.293663656 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.038248888 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.104922479 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.063744919 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.059208593 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.041126829 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.204789102 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.146647056 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.062737536 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.061723956 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.173711164 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.180395084 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.243645174 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.876491086 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.218620955 seconds)
  done (took 943.484236691 seconds)
done (took 1283.051567658 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.06280883 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.064263418 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.063514985 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.064779921 seconds)
  done (took 30.24568203 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.062502153 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.062868733 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.063034593 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.065070168 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.061873408 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.063060695 seconds)
  done (took 14.369803771 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.062007188 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.063176164 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.064263535 seconds)
  done (took 23.179151031 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.484035523 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.460433887 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.134614451 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.200142391 seconds)
  done (took 11.271014478 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.069168311 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.064793037 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.064911945 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.064219776 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.063631447 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.066008795 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.065843363 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.063344698 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.066311246 seconds)
  done (took 20.586036921 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.27559317 seconds)
done (took 105.91633863 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.073343615 seconds)
    (2/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 5.501977159 seconds)
    (3/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.823059208 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.1546392 seconds)
    (5/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.384340216 seconds)
    (6/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.82782571 seconds)
    (7/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.21231598 seconds)
    (8/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.26738675 seconds)
    (9/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.435181793 seconds)
    (10/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.300764031 seconds)
    (11/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.330461612 seconds)
    (12/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.323203521 seconds)
    (13/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.223203115 seconds)
    (14/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.392231983 seconds)
    (15/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.466679142 seconds)
    (16/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.457374899 seconds)
    (17/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.086024938 seconds)
    (18/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.030007959 seconds)
    (19/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.086347327 seconds)
    (20/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.06444219 seconds)
    (21/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.451262715 seconds)
    (22/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.150255922 seconds)
    (23/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.190752524 seconds)
    (24/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.084959829 seconds)
    (25/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.862390011 seconds)
    (26/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.197427161 seconds)
    (27/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.080066381 seconds)
    (28/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.441649742 seconds)
    (29/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.41091412 seconds)
    (30/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.067258561 seconds)
    (31/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.211725138 seconds)
    (32/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.370634629 seconds)
    (33/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.078904897 seconds)
    (34/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.064106373 seconds)
    (35/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.24403443 seconds)
    (36/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.063614072 seconds)
    (37/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.526036578 seconds)
    (38/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.101277876 seconds)
    (39/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.156181703 seconds)
    (40/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.147449952 seconds)
    (41/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.146376455 seconds)
    (42/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.074466531 seconds)
    (43/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.161178334 seconds)
    (44/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.147008781 seconds)
    (45/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.293153266 seconds)
    (46/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.063385676 seconds)
    (47/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.196015371 seconds)
    (48/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.028497984 seconds)
    (49/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.067957599 seconds)
    (50/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 9.887178847 seconds)
    (51/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.160712296 seconds)
    (52/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.481727276 seconds)
    (53/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.773778326 seconds)
    (54/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.091967199 seconds)
    (55/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.066150251 seconds)
    (56/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.043155526 seconds)
    (57/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.129230312 seconds)
    (58/341) benchmarking ("sort", Float64, false)...
    done (took 5.77603727 seconds)
    (59/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.22082704 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.315264428 seconds)
    (61/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.827288819 seconds)
    (62/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.16967165 seconds)
    (63/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.386436309 seconds)
    (64/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.082344184 seconds)
    (65/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.456044367 seconds)
    (66/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.318240516 seconds)
    (67/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.357288996 seconds)
    (68/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.14968066 seconds)
    (69/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.18082127 seconds)
    (70/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.101861574 seconds)
    (71/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.444262976 seconds)
    (72/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.065564191 seconds)
    (73/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.065412042 seconds)
    (74/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.141762515 seconds)
    (75/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.769347075 seconds)
    (76/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.774771776 seconds)
    (77/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.070219709 seconds)
    (78/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.44620171 seconds)
    (79/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.071137477 seconds)
    (80/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 8.460857101 seconds)
    (81/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.920833244 seconds)
    (82/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.074622027 seconds)
    (83/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.034720254 seconds)
    (84/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.170310191 seconds)
    (85/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.460160693 seconds)
    (86/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.215573465 seconds)
    (87/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.084045947 seconds)
    (88/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.143432131 seconds)
    (89/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.970682369 seconds)
    (90/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.075057198 seconds)
    (91/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.121200511 seconds)
    (92/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.300208054 seconds)
    (93/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.234436853 seconds)
    (94/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.67449602 seconds)
    (95/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.985307748 seconds)
    (96/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.350537138 seconds)
    (97/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.666376529 seconds)
    (98/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.396828122 seconds)
    (99/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.274378376 seconds)
    (100/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.421630525 seconds)
    (101/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.147862533 seconds)
    (102/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.065376437 seconds)
    (103/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.069209409 seconds)
    (104/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.374508458 seconds)
    (105/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.297065269 seconds)
    (106/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.068358126 seconds)
    (107/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.131997744 seconds)
    (108/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.103284089 seconds)
    (109/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.280196075 seconds)
    (110/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.334664775 seconds)
    (111/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.773357513 seconds)
    (112/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.26443929 seconds)
    (113/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.155737927 seconds)
    (114/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.074756793 seconds)
    (115/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.078549973 seconds)
    (116/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.080061835 seconds)
    (117/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.603832328 seconds)
    (118/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.866650763 seconds)
    (119/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.993470559 seconds)
    (120/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.459145142 seconds)
    (121/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.381103752 seconds)
    (122/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.285233704 seconds)
    (123/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.761869063 seconds)
    (124/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.796860462 seconds)
    (125/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.191793128 seconds)
    (126/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.070641361 seconds)
    (127/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.813447334 seconds)
    (128/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.146882752 seconds)
    (129/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.069361759 seconds)
    (130/341) benchmarking ("perf_countequals", "Float32")...
    done (took 4.087311203 seconds)
    (131/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.337951528 seconds)
    (132/341) benchmarking ("sort", Int8, false)...
    done (took 5.020604821 seconds)
    (133/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.146324941 seconds)
    (134/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.277589356 seconds)
    (135/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.132406442 seconds)
    (136/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.159358278 seconds)
    (137/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.076547852 seconds)
    (138/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.086936203 seconds)
    (139/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.933140935 seconds)
    (140/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.306651572 seconds)
    (141/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.262983527 seconds)
    (142/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.089951897 seconds)
    (143/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.161895055 seconds)
    (144/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.084486841 seconds)
    (145/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.165535342 seconds)
    (146/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.19938662 seconds)
    (147/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.455847056 seconds)
    (148/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.153791574 seconds)
    (149/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.468599866 seconds)
    (150/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.313195991 seconds)
    (151/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.038885529 seconds)
    (152/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.255228412 seconds)
    (153/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.19435218 seconds)
    (154/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.474844882 seconds)
    (155/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.974610566 seconds)
    (156/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.327015425 seconds)
    (157/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.197425918 seconds)
    (158/341) benchmarking ("sort", Bool, false)...
    done (took 2.286071884 seconds)
    (159/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.178893514 seconds)
    (160/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.101987718 seconds)
    (161/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.453561803 seconds)
    (162/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.357059736 seconds)
    (163/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.166586728 seconds)
    (164/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.747119726 seconds)
    (165/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.418773411 seconds)
    (166/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.089289373 seconds)
    (167/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.701791278 seconds)
    (168/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.451209625 seconds)
    (169/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.098362623 seconds)
    (170/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.093532521 seconds)
    (171/341) benchmarking ("sort", Int64, false)...
    done (took 5.841837711 seconds)
    (172/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.400004665 seconds)
    (173/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.963210374 seconds)
    (174/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.525843063 seconds)
    (175/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.172191466 seconds)
    (176/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.389682126 seconds)
    (177/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.00824467 seconds)
    (178/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.334199104 seconds)
    (179/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.090682283 seconds)
    (180/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.386670178 seconds)
    (181/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.223395072 seconds)
    (182/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.311697798 seconds)
    (183/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.222901522 seconds)
    (184/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.279966031 seconds)
    (185/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.086711526 seconds)
    (186/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.73483135 seconds)
    (187/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.56527783 seconds)
    (188/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.366999008 seconds)
    (189/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.099432176 seconds)
    (190/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.341641503 seconds)
    (191/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.224198918 seconds)
    (192/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.019319261 seconds)
    (193/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.205756254 seconds)
    (194/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.244573955 seconds)
    (195/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.991720499 seconds)
    (196/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.164390009 seconds)
    (197/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.087608188 seconds)
    (198/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.173753111 seconds)
    (199/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.528267266 seconds)
    (200/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.319049484 seconds)
    (201/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.710802668 seconds)
    (202/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.43972775 seconds)
    (203/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.508754511 seconds)
    (204/341) benchmarking ("sort", BigInt, false)...
    done (took 7.083822647 seconds)
    (205/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.087171104 seconds)
    (206/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.09068953 seconds)
    (207/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.372752637 seconds)
    (208/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.178124431 seconds)
    (209/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.170997405 seconds)
    (210/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.285925996 seconds)
    (211/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.23734557 seconds)
    (212/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.162553177 seconds)
    (213/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.838370428 seconds)
    (214/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.204901063 seconds)
    (215/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.200442479 seconds)
    (216/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.315769412 seconds)
    (217/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.100245093 seconds)
    (218/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.572696178 seconds)
    (219/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.491236953 seconds)
    (220/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.453810894 seconds)
    (221/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.084131554 seconds)
    (222/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.784362555 seconds)
    (223/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.232841993 seconds)
    (224/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.382566277 seconds)
    (225/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.240648992 seconds)
    (226/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.099675053 seconds)
    (227/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.363942902 seconds)
    (228/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.083485283 seconds)
    (229/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.090215814 seconds)
    (230/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 3.891247874 seconds)
    (231/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.235198841 seconds)
    (232/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.334727772 seconds)
    (233/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.211138481 seconds)
    (234/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.556751038 seconds)
    (235/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.087297326 seconds)
    (236/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.393660971 seconds)
    (237/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.403978397 seconds)
    (238/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.113035497 seconds)
    (239/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.992626366 seconds)
    (240/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.51729041 seconds)
    (241/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.216774568 seconds)
    (242/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.415085379 seconds)
    (243/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.17204202 seconds)
    (244/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.126327693 seconds)
    (245/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.194835528 seconds)
    (246/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 4.256147766 seconds)
    (247/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.389699079 seconds)
    (248/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.109380794 seconds)
    (249/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.086521723 seconds)
    (250/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.207922431 seconds)
    (251/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.08720177 seconds)
    (252/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.202905918 seconds)
    (253/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.38349839 seconds)
    (254/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.713068033 seconds)
    (255/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.201769681 seconds)
    (256/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.116032019 seconds)
    (257/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.344433116 seconds)
    (258/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.004458294 seconds)
    (259/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.408096269 seconds)
    (260/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.211450867 seconds)
    (261/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.096809618 seconds)
    (262/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.347423544 seconds)
    (263/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.808119308 seconds)
    (264/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.094897168 seconds)
    (265/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.111453495 seconds)
    (266/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.175829086 seconds)
    (267/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.80895669 seconds)
    (268/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.215814468 seconds)
    (269/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.873366844 seconds)
    (270/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.095221225 seconds)
    (271/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.168150696 seconds)
    (272/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.219513942 seconds)
    (273/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.100179146 seconds)
    (274/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.347484461 seconds)
    (275/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.29382209 seconds)
    (276/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.541927816 seconds)
    (277/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.089137514 seconds)
    (278/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.295870689 seconds)
    (279/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.204817818 seconds)
    (280/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.193448117 seconds)
    (281/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.285069916 seconds)
    (282/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.179784477 seconds)
    (283/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.402626376 seconds)
    (284/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.896126133 seconds)
    (285/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.325960762 seconds)
    (286/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.876380505 seconds)
    (287/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.109084097 seconds)
    (288/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.485152243 seconds)
    (289/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.899519785 seconds)
    (290/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.589799944 seconds)
    (291/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.103051857 seconds)
    (292/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.20218939 seconds)
    (293/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.236199484 seconds)
    (294/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.097357029 seconds)
    (295/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.986617748 seconds)
    (296/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.492365401 seconds)
    (297/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.284816562 seconds)
    (298/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.092521746 seconds)
    (299/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.110069148 seconds)
    (300/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.479223389 seconds)
    (301/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.087489049 seconds)
    (302/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 4.382969531 seconds)
    (303/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.273290789 seconds)
    (304/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.272030695 seconds)
    (305/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.090441534 seconds)
    (306/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.344456079 seconds)
    (307/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.493415495 seconds)
    (308/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.501557126 seconds)
    (309/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.184937823 seconds)
    (310/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.092361998 seconds)
    (311/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.363290854 seconds)
    (312/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.213843559 seconds)
    (313/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.188474557 seconds)
    (314/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.489640385 seconds)
    (315/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.227741022 seconds)
    (316/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.314918425 seconds)
    (317/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.094659133 seconds)
    (318/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.506476303 seconds)
    (319/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.418885335 seconds)
    (320/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.084806716 seconds)
    (321/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.313549911 seconds)
    (322/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.14820352 seconds)
    (323/341) benchmarking ("sort", Float32, false)...
    done (took 5.759897857 seconds)
    (324/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.23238232 seconds)
    (325/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.291749774 seconds)
    (326/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.49524238 seconds)
    (327/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.944611889 seconds)
    (328/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.089429951 seconds)
    (329/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.335975975 seconds)
    (330/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.094912205 seconds)
    (331/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.176943492 seconds)
    (332/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.299360885 seconds)
    (333/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.400858707 seconds)
    (334/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.111640659 seconds)
    (335/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.49116833 seconds)
    (336/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.093089585 seconds)
    (337/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.875364716 seconds)
    (338/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.275898011 seconds)
    (339/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.47279872 seconds)
    (340/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.58769073 seconds)
    (341/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.220310033 seconds)
  done (took 1166.071270592 seconds)
done (took 1168.167820391 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.118131323 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.095337951 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.618945008 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.107404213 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.098615817 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.099065765 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.624171902 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.126867443 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.113126899 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.631061397 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.106679412 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.087462486 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.112528515 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.133716806 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.107009588 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.110558685 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.099265104 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.120280889 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.132752744 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.104087733 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.146240958 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.101166791 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.095780463 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.149900695 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.095503065 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.110209195 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.118228942 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.149271681 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.14690933 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.099111532 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.101891344 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.464912824 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.158792388 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.103498762 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.107641819 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.103032971 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.104138111 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.115079322 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.118546861 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.113103775 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.098932324 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.108795712 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.10066618 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.100274517 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.099378934 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.099378624 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.103758159 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.224120007 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.111195562 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.446676794 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.168285621 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.120947766 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.148219681 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.099404015 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.100598339 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.103672661 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.146549495 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.103947374 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.102396864 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.447680373 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.201000136 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.11287143 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.447937744 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.168389269 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.111339189 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.105313785 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.097437509 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.119085083 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.465026169 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.677586984 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.129976924 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.119780645 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.10031464 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.102962779 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.112813593 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.624367707 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.116843259 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.693223965 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.134324872 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.115716643 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.105282228 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.10041484 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.104889844 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.109799012 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.116251534 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.100738023 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.106520576 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.112715718 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.115061662 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.470040023 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.152008374 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.621715649 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.107739255 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.121839671 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.122895798 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.689343396 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.136123435 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.120402864 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.105164124 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.466714814 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.149363639 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.125778706 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.10279407 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.112790294 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.21566277 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.123998145 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.122821528 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.098003626 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.121733539 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.108314926 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.106747182 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.114960582 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.120224538 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.136659341 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.119402673 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.103074095 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.112018026 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.109543399 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.122638153 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.111194082 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.104877853 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.111981263 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.101711699 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.152673612 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.124196509 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.116939383 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.21597034 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.106263841 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.229292515 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.118664501 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.109997594 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.100300372 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.450610321 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.147386447 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.1235321 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.110411093 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.124758764 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.125282548 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.121237699 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.105064302 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.116849956 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.107134 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.156038436 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.106172829 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.129085858 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.155898062 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.117716939 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.10996992 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.121180425 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.138399047 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.123770633 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.10945355 seconds)
done (took 331.179599497 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.149810981 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.101705043 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.176406646 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.101038665 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.168655415 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.165542788 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.101701889 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.101530595 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.099072504 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.48568507 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.102631646 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.106701358 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.102066543 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.102677898 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.151230893 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.102515262 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.103325949 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.3382071 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.105359511 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.162428693 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.103739976 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.104521981 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.103480845 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.489049851 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.107292862 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.103988313 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.161290786 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.103460715 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.345354355 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.098022048 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.10290076 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.345623881 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.161575067 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.116202123 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.110922929 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.112161391 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.180194653 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.111868377 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.152603616 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.149231794 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.178831422 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.137459375 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.102411871 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.103572814 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.106360209 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.105993412 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.104087039 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.139603167 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.108768057 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.109503716 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.335187527 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.114190564 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.111390057 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.103488837 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.106584803 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.121904915 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.105203211 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.107031481 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.163142861 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.108846438 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.150036742 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.493102736 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.487632571 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.108917133 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.105484239 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.106618393 seconds)
  done (took 199.345209512 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.173372988 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.19049571 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.172553623 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.115657757 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.157268858 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.170015263 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.112286532 seconds)
  done (took 17.124229693 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.113924066 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.107625909 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.130565672 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.129016743 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.105848608 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.245887296 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.118420614 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.111430072 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.132467714 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.106566027 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.442941046 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.129978762 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.115078477 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.106923794 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.118464082 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.135094941 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.112142936 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.105825323 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.203356155 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.182806039 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.111414123 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.114851767 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.135490269 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.119371681 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.107605083 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.109901879 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.107028482 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.11431391 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.108595233 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.110743846 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.105475812 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.119432983 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.108079189 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.107745144 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.10868626 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.107978743 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.108533611 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.107723111 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.108182956 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.106417053 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.109892604 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.107152558 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.108743607 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.099334978 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.108572738 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.129255365 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.101111958 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.107473752 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.110474114 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.108722265 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.138810281 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.10999711 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.105519641 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.114839954 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.148875857 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.116574573 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.106784344 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.108257712 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.109142285 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.108698372 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.110492757 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.18658798 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.131404993 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.110162836 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.133223666 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.145861461 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.109808636 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.108554214 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.108212015 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.134788569 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.110149163 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.13343844 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.108317126 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.20682075 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.110733515 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.255812886 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.131089557 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.113773676 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.113993519 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.111640345 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.10925908 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.111171321 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.111272356 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.117108267 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.113740804 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.109589755 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.109845799 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.110335087 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.116247493 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.112314408 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.155062689 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.111033082 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.109719367 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.209474301 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.111393166 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.208863194 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.135348443 seconds)
  done (took 228.311248316 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.115870024 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.114184835 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.124910763 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.11309438 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.111774816 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.116374894 seconds)
  done (took 14.733483883 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.115568125 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.114803767 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.111690444 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.108882466 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.112495701 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.110912255 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.111416542 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.112655997 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.115294559 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.112768893 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.111191379 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.09974546 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.111082238 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.111634888 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.110091271 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.111376774 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.112264096 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.111580934 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.113339585 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.111881893 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.354486153 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.114123756 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.110192965 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.11564734 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.118137552 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.113636602 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.120003827 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.11289548 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.112954781 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.116508362 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.115911575 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.112717682 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.117712592 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.119243344 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.11830584 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.118790817 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.116121514 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.111768043 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.11470368 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.112881534 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.114658637 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.114027659 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.113877979 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.116271345 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.117193029 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.123004207 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.120110111 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.122052817 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.113827576 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.11522888 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.114630921 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.112975474 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.115191771 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.114785813 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.120905884 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.120591693 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.118031913 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.113559257 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.112249669 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.116114805 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.118036002 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.114136535 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.115425261 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.119581093 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.121771752 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.114282557 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.117153415 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.118343649 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.114125074 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.115513144 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.115592882 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.115000582 seconds)
  done (took 155.544086677 seconds)
done (took 617.088157033 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.208776468 seconds)
  done (took 9.247871716 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.225629009 seconds)
  done (took 9.371745222 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.834480535 seconds)
  done (took 12.879188054 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.139851191 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.149224999 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.131744674 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.12085842 seconds)
  done (took 30.600801195 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.377999203 seconds)
  done (took 9.420831442 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.128801893 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.110095474 seconds)
  done (took 16.348163616 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.155443612 seconds)
  done (took 9.197500362 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.607469049 seconds)
  done (took 9.679701718 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.121589322 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.150244416 seconds)
  done (took 16.334938318 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.115332617 seconds)
  done (took 9.156826072 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.889083769 seconds)
  done (took 10.010972847 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.116962472 seconds)
  done (took 9.179236675 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.176894039 seconds)
  done (took 9.209034622 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.292168734 seconds)
  done (took 10.33481494 seconds)
done (took 173.009634216 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.125062089 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.117633658 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.116185711 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.117371895 seconds)
  done (took 30.51525319 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.148717723 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.152981705 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.16093621 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.151421728 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.143488709 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.14312389 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.149706765 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.151769629 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.141203098 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.148091311 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.149606627 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.15120711 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.150208964 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.158758941 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.159079108 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.150899801 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.150585884 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.15382163 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.142797018 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.160252023 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.152819406 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.14974699 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.118092567 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.117759057 seconds)
  done (took 53.600895816 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.307516091 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.184613394 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.269102939 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.164574746 seconds)
  done (took 10.966929376 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.116196338 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.179876149 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.169980969 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.163731283 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.166868007 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.221274569 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.172769602 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.254349625 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.24501412 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.244133713 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.124995028 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.139846844 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.145499045 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.165414977 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.220966193 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.116507242 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.119192029 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.232821014 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.179229662 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.28776558 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.117594113 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.171175727 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.16962523 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.170404982 seconds)
  done (took 54.338631811 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.117948862 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.125899167 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.126573143 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.118730293 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.119520506 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.119918243 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.126504524 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.122813378 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.142176049 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.120170742 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.119851748 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.119717755 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.125016666 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.119578768 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.121306982 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.131961073 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.133022213 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.119849905 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.12147989 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.126362043 seconds)
  done (took 44.523026945 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.118188641 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.964894787 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.464432742 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.369333808 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.118126279 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.119529405 seconds)
  done (took 33.197365351 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.131003264 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.134543213 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.126689061 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.143619591 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.170193775 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.128673722 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.179797093 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.280852696 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.130173234 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.17787397 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.140677981 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.127210357 seconds)
  done (took 27.915517779 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.116031753 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.119473655 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.119127334 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.129712231 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.13014913 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.130189302 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.126975077 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.117984677 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.131418693 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.140483254 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.127758833 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.131126497 seconds)
  done (took 47.565816329 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.333135631 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.346003132 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.330799802 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.743446373 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.442924086 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.100501078 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.40777605 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.332904286 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.867328663 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.897561957 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.414790676 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.104129605 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.062122969 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.042922761 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.038303139 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.363336952 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.117712451 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.979712976 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.372926473 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.167241203 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.120002601 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.119719654 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.129481686 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.40595442 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.447448748 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.117285146 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.332781421 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.137039547 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.120973391 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.385167981 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.748816472 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.181178659 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.323196791 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.379800641 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.461651116 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.232784979 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.120203694 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.313011557 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.170065257 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.156836958 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.134077656 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.130571484 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.664155706 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.132439501 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.394379419 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.12157423 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.203601446 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.123660162 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.045533802 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.483878276 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.23900526 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.122039058 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.158229881 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.557237542 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.243446081 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.364237194 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.126275823 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.314981403 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.184479509 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.420039449 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.308794045 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.122459694 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.335967022 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.049955872 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.501913007 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.245514534 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.123778726 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.127993502 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.822373786 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.369468294 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.203619549 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.487598561 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.886384672 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.1251296 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.12472477 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.165236782 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.219629944 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.120969985 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.421761969 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.122396707 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.049729298 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.219146807 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.522518694 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.129961962 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.123615152 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.132730151 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.972761932 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.051110183 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.22154734 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.437555642 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.450890554 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.124281767 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.125027377 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.145849634 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.127692123 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.073842248 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.7076715 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.192682405 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.052628759 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.687923731 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.756541496 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.09454524 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.631210659 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.170642525 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.398720509 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.264404815 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.527238772 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.332512452 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.370456591 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.657756168 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.129745519 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.742089497 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.207563146 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.19962746 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.12427318 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.884911786 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.321758148 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.472810194 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.241892389 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.125081655 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.052505363 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.136629153 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.326212665 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.75260889 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.184004058 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.125262424 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.130584604 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.125550645 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.127397562 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.23304253 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.143187988 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.418911162 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.202474985 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.127480147 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.062196108 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.129043915 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.406405186 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.842263532 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.189509045 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.381766786 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.396608431 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.829423829 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.723247727 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.07584294 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.398753951 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.200387442 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.200261812 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.707110752 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.255333081 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.22310371 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.12629298 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.253535753 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.137606021 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.128574349 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.577433552 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.542391401 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.558816276 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.171477256 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.130538467 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.165502211 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.327625229 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.373666278 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.221712981 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.151229608 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.136750026 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.214226365 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.356776984 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.130399407 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.056101821 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.377766674 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.370770274 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.417625668 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.544196412 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.205406728 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.202087089 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.140116578 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.342874997 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.218294254 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.803613242 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.678140612 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.360653825 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.722304096 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.096120821 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.770486132 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.436021317 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.514339227 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.149500645 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.583079169 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.326100527 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.848885723 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.165043383 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.661172444 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.056921056 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.134585651 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.470189183 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.086431437 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.44288254 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.195368362 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.145189625 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.132701351 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.133401665 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.139262963 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.055197055 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.242357029 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.200296301 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.204868816 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.059477762 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.810367547 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.176423187 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.133984967 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.13048723 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.506090521 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.00860142 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.089821516 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.131951405 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.210933938 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.906171818 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.686122379 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.133366154 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.137254485 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.742678926 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.136121987 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.046447689 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.230121361 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.904733281 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.159692269 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.431649801 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.832685655 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.421753409 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.209583634 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.206636822 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.133291861 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.140598687 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.833781863 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.142983399 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.83535714 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.419179124 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.411103146 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.581645994 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.1947609 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.343578128 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.150082662 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.134803665 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.630316113 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.158808879 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.134885441 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.33795776 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.653006316 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.502270025 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.777072268 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.222562496 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.134739084 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.40195025 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.144510143 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.774033792 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.824869558 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.138818809 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.135046408 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.385826563 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.821433138 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.137575583 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.113181345 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.140872724 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.348248935 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.340518586 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.40706588 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.430792797 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.589219705 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.061939711 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.141962166 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.159334749 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.380385281 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.135604815 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.171458483 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.58436403 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.218567978 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.563906447 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.420635309 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.588381982 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.77328402 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.403860884 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.203401127 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.150466235 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.789634054 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.267904604 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.068811027 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.254351971 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.062988447 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.903546856 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.427125697 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.152326209 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.400350581 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.118338454 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.470619392 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.439449172 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.443807562 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.187796559 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.164106469 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.13738809 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.17329234 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.13567655 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.345275538 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.25597903 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.137438211 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.7134903 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.177207682 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.183706129 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.143372709 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.663692065 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.15860105 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.138716063 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.835377182 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.161462035 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.256581034 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.208835464 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.90990662 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.800462897 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.166468869 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.090722742 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.79146854 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.406476354 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.195797693 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.582668763 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.172504914 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.544259364 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.134617658 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.352600214 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.144677588 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.742936293 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.186633556 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.404946227 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.091240743 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.348159167 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.337108995 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.161817288 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.14110486 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.066599371 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.298554204 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.018187962 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.119552055 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.142678094 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.821531825 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.577458167 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.365384826 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.622821184 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.962981854 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.141647338 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.480042992 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.543304453 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.794381113 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.177503252 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.142364282 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.509488478 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.276225147 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.500293976 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.45799941 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.150569654 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.165256889 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.353609391 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.265484963 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.059487641 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.630563711 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.722498292 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.839625362 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.151557648 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.33703639 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.515888462 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.447798392 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.178931491 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.213279871 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.546455747 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.404981185 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.215176856 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.069119481 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.14293609 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.536558211 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.65822587 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.237061149 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.384908449 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.453112426 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.832116471 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.785478902 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.615866878 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.564949517 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.593138272 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.537792629 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.364084386 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.502960787 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.462423453 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.73432933 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.554154239 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.35383071 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.237961371 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.414740967 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.010999344 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.851328553 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.387813163 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.147088401 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.072858931 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.350189546 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.151289795 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.682431511 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.675759321 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.390455365 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.449218293 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.657444492 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.684455486 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.357531018 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.17068215 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.113249394 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.166779911 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.162388987 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.142502078 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.637271087 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.428469626 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.159360279 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.085570102 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.813153706 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.070758479 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.358451824 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.348510376 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.183136464 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.702611959 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.450625133 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.253759678 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.446116826 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.412520989 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.181926208 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.073553621 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.914730384 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.091632762 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.226179579 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.569315544 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.156672098 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.146563858 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.349526868 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.073718255 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.189429706 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.150666768 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.34220561 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.721887693 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.415136901 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.272543745 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.404741601 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.441463344 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.018190818 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.182392879 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.417903105 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.070824006 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.815461426 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.829646264 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.185944155 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.212782162 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.145795764 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.148802657 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.415631043 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.524061996 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.249342009 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.897984219 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.181937994 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.165006338 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.519214419 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.24110287 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.149936597 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.152180325 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.66460369 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.383627779 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.147996939 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.117933065 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.35947993 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.219879807 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.342242304 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.2208189 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.661913995 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.153429887 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.019219898 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.255704053 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.102537095 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.143675417 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.887598991 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.207907829 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.14816663 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.419919014 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.807934045 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.350089397 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.540706394 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.017221255 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.351973833 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.191637802 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.148733644 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.151516233 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.535550556 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.457486751 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.146579367 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.415745057 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.198146288 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.152206236 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.808656841 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.114224254 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.148768207 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.918024561 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.048923755 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.874337358 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.546320983 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.221740605 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.149043252 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.152556206 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.074838902 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.147434604 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.310415288 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.13918475 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.153693021 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.520809913 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.509870463 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.239822325 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.153172178 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.149656999 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.15826661 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.361242154 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.66182204 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.165176334 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.849911306 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.351216506 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.156376662 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.643911859 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.595184238 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.430073436 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.190941498 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.362804006 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.390210465 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.693908043 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.367023156 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.121900924 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.37327292 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.151919271 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.420238638 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.42361904 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.150524018 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.361816247 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.811254912 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.437902296 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.500966929 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.467437428 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.217392077 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.367710803 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.082407433 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.152217405 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.152907256 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.420354046 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.207542631 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.148889914 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.159392338 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.709704176 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.855942642 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.613423411 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.302408515 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.509104657 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.003867465 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.907336428 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.153128554 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.078078047 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.151212691 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.172686153 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.154508805 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.076733413 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.909915191 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.868164863 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.363553302 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.462925341 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.077806588 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.354405907 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.755093754 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.075138629 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.119951236 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.159684023 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.399130635 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.08381819 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.154359025 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.105437162 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.468429149 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.903245246 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.423479236 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.152233732 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.097141262 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.153010168 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.153128236 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.150600076 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.241328224 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.152734048 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.270143863 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.417295797 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.5663394 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.258211098 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.793352529 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.854292636 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.090302477 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.193476996 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.767403965 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.72169149 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.474058478 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.281634263 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.868190055 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.098803554 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.157145302 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.168200897 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.415260237 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.156800174 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.155020663 seconds)
  done (took 2246.193397121 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.173185242 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.217503895 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.197710785 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.216300491 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.235339946 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.203796868 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.186409675 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.219499206 seconds)
  done (took 59.727008205 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.154486964 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.557819585 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.196977813 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.155267454 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.15227209 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.185661692 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.349985274 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.184113228 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.153482002 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.189240164 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.154670831 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.188724817 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.15437309 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.185942907 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.158377739 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.427273373 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.176467367 seconds)
  done (took 81.810068479 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.209177181 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 11.309175735 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.157222881 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.102719169 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.200076953 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.452122675 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.155511828 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.159833613 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.497549551 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.451671644 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.169524069 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.171421932 seconds)
  done (took 96.154001088 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.158688439 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.155572739 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.156009172 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.156498947 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.153574942 seconds)
  done (took 12.859034875 seconds)
done (took 2801.475840504 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.398347009 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.250687168 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.231908986 seconds)
  done (took 6.563238503 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.297956913 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.350945653 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.462086527 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.469858069 seconds)
  done (took 11.665789501 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.43667535 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.521588322 seconds)
  done (took 7.038121286 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.530506737 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.170518161 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.544160378 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.157908903 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.158099156 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.156164547 seconds)
  done (took 23.557596006 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.157723425 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.157287309 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.156938542 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.158550093 seconds)
  done (took 10.710484039 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.156856453 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.911781138 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.153300958 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.163692827 seconds)
  done (took 22.463715155 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.336777765 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.13708078 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.924143078 seconds)
  done (took 10.476713135 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.782789658 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.605139109 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.76942169 seconds)
  done (took 10.236292362 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.301211015 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.994710143 seconds)
  done (took 8.376487363 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.306544884 seconds)
  done (took 4.389771333 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.991739525 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.468497565 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.637382565 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.678163922 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.753050019 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.382357135 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.482454087 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.431346423 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.555976836 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.557390599 seconds)
  done (took 28.02152309 seconds)
done (took 160.22200546 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.585105926 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.173636597 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.362350051 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.532269986 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.408251325 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.3900804 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.461707778 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.515205854 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.206719063 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.191450103 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.533004295 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.433713496 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.402770932 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.16991998 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.400353021 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.172463988 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.387850317 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.609291095 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.218296959 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.460401558 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.455499437 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.178452968 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.374333259 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.195881649 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.394198682 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.320367796 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.767906605 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.173178318 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.368672446 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.776656375 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.393344233 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.612265911 seconds)
  done (took 178.70924236 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.153176603 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.158367229 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.158086935 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.159156684 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.483465086 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.157008728 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.15844204 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.159360032 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.490862868 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.463072579 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.158574041 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.466887355 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.163995264 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.156496644 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.16471141 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.157296076 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.600145517 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.158777779 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.157905821 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.15726603 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.150657517 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.334937929 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.158003928 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.359898469 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.578053788 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.159069227 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.159586105 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.157790599 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.160374081 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.161695257 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.162581184 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.158221901 seconds)
  done (took 217.67303612 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.163229997 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.159391283 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.159597251 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.1592098 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.160752639 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.160592713 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.163251627 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.158703436 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.014700111 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.007449772 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.159268187 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.165075385 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.167101601 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.158650484 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.168523232 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.160157395 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.167310691 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.165273222 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.16165221 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.161497804 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.163540941 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.802960216 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.159754097 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.84123633 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.162416903 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.16440475 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.159645739 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.16111801 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.158615485 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.158842549 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.16225309 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.16263389 seconds)
  done (took 230.290801022 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.402237546 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.163101534 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.164060701 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.170033388 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.163192906 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.164098966 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.173637485 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.410952171 seconds)
  done (took 21.89936773 seconds)
done (took 650.668921298 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.514355608 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.897499382 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.294856281 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.186500849 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.431607734 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.227383606 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.18306896 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.24918075 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.830009926 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.258337556 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.580244319 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.190272103 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.890237311 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.211458796 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.299238922 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.243794153 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.534171277 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.796778621 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.319623165 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.859456787 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.380829445 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.104516523 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.262644306 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.871777272 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.59096672 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.12170777 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.1962809 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.534824708 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.187611539 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.419723906 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.831167274 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.438497032 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.195650318 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.188326565 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.241453722 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.228789429 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.379251319 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.192595873 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.300084786 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.902431832 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.836978611 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.713372149 seconds)
  done (took 112.204159278 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.171072863 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.171773936 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.169761493 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.172297881 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.180187615 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.16937328 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.171242841 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.169900932 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.171850083 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.172460764 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.171724182 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.180226151 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.173105028 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.179427425 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.169368462 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.172336476 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.172232196 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.178409017 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.170923549 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.170856794 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.172295032 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.172984599 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.169786053 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.174071548 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.172890403 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.172447988 seconds)
  done (took 58.592082159 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.169162727 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.345923009 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.457445227 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.197279693 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.17092536 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.171954558 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.199283564 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.173870852 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.173503856 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.169975191 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.280889908 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.171165634 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.181516035 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.452820564 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.195716637 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.168001991 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.167808667 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.169966542 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.350143544 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.184889194 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.198962891 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.173573094 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.199430947 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.1837686 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.169335398 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.170146855 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.170846263 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.629705882 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.180786507 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.279270842 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.213529445 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.198814634 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.51729255 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.460964264 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.23490635 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.172569545 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.169385286 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.323499199 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.181811166 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.169020994 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.200178978 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.179327347 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.457920986 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.685230722 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.187040444 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.171897983 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.628389924 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.335283445 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.21668451 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.184916289 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.462656646 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.200896402 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.169845498 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.174317266 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.20835341 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.181825072 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.171439762 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.454758976 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.184041158 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.201749525 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.17839805 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.171708342 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.362401432 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.179944827 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.350244637 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.179342546 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.177409141 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.170486456 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.458775084 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.200662188 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.684705197 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.185940181 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.171664927 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.281142119 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.352503551 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.652328207 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.185897272 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.36022571 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.533321395 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.208046474 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.184657413 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.612904728 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.211516486 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.181644917 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.17430878 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.17182944 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.171696404 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.212508721 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.199036869 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.604838995 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.68944707 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.472445177 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.20898756 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.184873606 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.172021314 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.455135459 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.182575606 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.174474432 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.454782996 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.714158681 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.186528424 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.178463316 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.669145472 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.188869446 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.202715564 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.185899356 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.469453572 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.204114118 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.213989198 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.172951591 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.182164049 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.177549015 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.202694571 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.184871807 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.173875563 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.662504929 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.349573731 seconds)
  done (took 268.387433557 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.177751916 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.171948547 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.17172923 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.173837132 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.173985187 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.175058358 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.172378459 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.173598754 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.17492461 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.172549291 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.17321731 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.178129068 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.174611582 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.179650394 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.209492313 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.178116517 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.662373951 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.172986436 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.173653915 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.173511674 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.743912164 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.179882799 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.175227609 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.173657735 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.175385716 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.174209787 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.177960769 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.204829462 seconds)
  done (took 176.122620374 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.177897656 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.222588985 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.187308199 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.223718724 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.185143521 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.176996682 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.197258919 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.190724989 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.184203353 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.177236267 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.177542003 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.200815258 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.184209518 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.248640561 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.20538818 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.207583876 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.24736346 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.18312585 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.178834856 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.175910578 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.226216453 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.190520389 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.205240388 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.232949754 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.18669586 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.224697073 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.190349365 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.178922281 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.177645713 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.268003633 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.198500784 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.205783755 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.211475557 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.192205583 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.264068799 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.270250625 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.254214095 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.205037773 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.181793537 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.178775103 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.177901602 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.180889705 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.226577609 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.187477605 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.182031895 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.266041127 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.197280406 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.179591836 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.200369151 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.178827935 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.19045531 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.195039663 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.213453873 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.271537302 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.226324744 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.203782316 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.201778174 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.196222183 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.178818079 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.249627729 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.186085119 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.265407886 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.202263281 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.183254598 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.180601865 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.181278356 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.227729314 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.211596902 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.250882654 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.187912651 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.24893603 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.235029133 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.191753338 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.178030772 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.180029695 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.227731218 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.264320167 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.234824303 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.239647689 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.216830056 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.187476031 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.179487447 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.182414547 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.209066603 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.187901031 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.265173803 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.269983683 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.186652673 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.181077593 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.178383555 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.180540219 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.201138476 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.236136493 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.220185474 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.259619992 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.213841571 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.213952516 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.1854239 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.19051716 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.184452932 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.212963242 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.187034944 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.192257497 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.521171181 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.215951172 seconds)
  done (took 234.120015201 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.545935359 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.228677156 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.249956642 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.458373284 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.575478056 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.325554113 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.2150533 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.23562985 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.244439832 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.347508602 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.289695657 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.273884865 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.216578064 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.20417701 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.230182857 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.242668404 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.263534516 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.524860926 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.323962865 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.97232498 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.219838739 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.489813532 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.509122897 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.561993981 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.270757197 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.633906048 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.861592642 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.328258236 seconds)
  done (took 70.951677 seconds)
done (took 922.463419527 seconds)
SAVING RESULT...
DONE!
