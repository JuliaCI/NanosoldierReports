cset: moving following pidspec: 22907
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.802083404 seconds)
loading group "shootout"... done (took 1.108582125 seconds)
loading group "string"... done (took 0.665494292 seconds)
loading group "linalg"... done (took 8.552173427 seconds)
loading group "parallel"... done (took 0.164987678 seconds)
loading group "find"... done (took 3.005919747 seconds)
loading group "tuple"... done (took 2.121003499 seconds)
loading group "union"... done (took 14.796453096 seconds)
loading group "dates"... done (took 1.441921291 seconds)
loading group "micro"... done (took 0.216216356 seconds)
loading group "simd"... done (took 4.81091746 seconds)
loading group "io"... done (took 1.079049476 seconds)
loading group "random"... done (took 9.51668645 seconds)
loading group "problem"... done (took 1.520121276 seconds)
loading group "array"... done (took 25.089509105 seconds)
loading group "misc"... done (took 1.877414156 seconds)
loading group "scalar"... done (took 43.35777349 seconds)
loading group "sort"... done (took 3.323482504 seconds)
loading group "sparse"... done (took 12.672948225 seconds)
loading group "collection"... done (took 17.715459846 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.46573812 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.122075434 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.170769512 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.121384508 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.210157735 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.13022118 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.137766741 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.090306024 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.911305953 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.164841849 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.119978149 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.440625095 seconds)
done (took 5.705802036 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.194443778 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.256526935 seconds)
    (2/2) benchmarking "String"...
    done (took 0.169641801 seconds)
  done (took 1.816336232 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.094210578 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.065919745 seconds)
    (3/3) benchmarking "different"...
    done (took 0.07051864 seconds)
  done (took 1.620905737 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.068613293 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.140683037 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.069692479 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.070046715 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.069915983 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.069368378 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.069421175 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.069692656 seconds)
  done (took 1.952274735 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.074928339 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.070292507 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.068448713 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.070324805 seconds)
  done (took 1.674748789 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.067927145 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.125882559 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.067084804 seconds)
    (4/4) benchmarking "different"...
    done (took 0.06752762 seconds)
  done (took 1.715995673 seconds)
done (took 10.450071838 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.16455948 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.838784979 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.877079274 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.146289665 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.272735771 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.371216147 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.126070502 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.209007739 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.113290016 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.077384353 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.147020777 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.080568527 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.483273227 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.50478855 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.072497605 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.175370393 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.652198338 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.088200168 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.136234462 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.464070052 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.07475428 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.089053942 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.085983511 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.072428979 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.316766447 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.15687237 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.670521702 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.094305713 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.069767478 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.096260809 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.072094748 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.079264077 seconds)
  done (took 11.300068612 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.117027146 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.113922159 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.069827796 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.125121026 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.094975203 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.071622789 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.07645384 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.06875972 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.089937309 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.124797378 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.091222948 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.122634571 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.067537828 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.069835973 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.09734545 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.197476684 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.081663757 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.082308748 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.068678833 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.082400074 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.106552422 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.079612468 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.079064196 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078901861 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.133602703 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.170676213 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.09879892 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.099355161 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.067136486 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.080240309 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.116574055 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.125645945 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067740349 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.066511456 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.121001895 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.096513237 seconds)
  done (took 4.956690759 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.886271027 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.097438996 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.108294991 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.099512274 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.107860025 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.114693795 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.145588252 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.123351505 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.105473957 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.073405275 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.174845929 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.672283943 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.215818635 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.071992406 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.144550763 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.357355498 seconds)
    (16/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.097146501 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.117232222 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070755696 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069247219 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.096300212 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070559343 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.137182651 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066825839 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.179063922 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.604301531 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.071830071 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070437736 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.212966172 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.06701298 seconds)
    (30/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.109832034 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.142164526 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.095622855 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.071343882 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.566905695 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.067138176 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.065850299 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.090167427 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.095015261 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067482911 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.06872086 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079345508 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.067251004 seconds)
    (43/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.06515902 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.079473314 seconds)
    (45/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109724164 seconds)
    (46/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.515084897 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070787657 seconds)
    (48/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.605457119 seconds)
    (49/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.312807637 seconds)
    (50/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.074078211 seconds)
    (51/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072644295 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.10283239 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.065681908 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068860098 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.185529002 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.145634788 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.067834542 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.272866614 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068312997 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068595178 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069558544 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.102331341 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067913115 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069461036 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.073471512 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.097284556 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.7963677 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.148371132 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.097032075 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067591434 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.398950822 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.07444459 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069980259 seconds)
    (74/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.064709751 seconds)
    (75/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070017494 seconds)
    (76/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.093859561 seconds)
    (77/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.131119244 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067336839 seconds)
    (79/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067061885 seconds)
    (80/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.10908981 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.095538432 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.2156957 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.072043739 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.069098914 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.067804034 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.322047547 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.217334295 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068073761 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.068833868 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.492006136 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.065701181 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068160181 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069928482 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.091994083 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068269092 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.06535853 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.066283 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.100343183 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.071931342 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.38624619 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.070095869 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.485785252 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.070001594 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.103878192 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.120640778 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069267284 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.102478815 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.069141024 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.066068294 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.074580585 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.066707536 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.065709167 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.070958619 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.067043381 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068207255 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.069891241 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069237092 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068647401 seconds)
  done (took 23.979904897 seconds)
done (took 42.515895739 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.40180199 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.079928168 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.08036923 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.080617066 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.080013489 seconds)
  done (took 2.176454121 seconds)
done (took 3.731554706 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.252069705 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.076716028 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.065338672 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.20158147 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.08878233 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.175479767 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.213729748 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.160220485 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.088810244 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.088644171 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.088883205 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.21938955 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.344211415 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.088621425 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.158757998 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.224930012 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.088868461 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.064983351 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.088572717 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.088070657 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.088096734 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.065288326 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.088333176 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.088395223 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.157385109 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.088570359 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.064918346 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.158321869 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.088756077 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.158872906 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.088806981 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.088227714 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.088625952 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.158614483 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.088645594 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.15655152 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.064620231 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.088199246 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.088354333 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.088671893 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.088138387 seconds)
  done (took 6.498044019 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.075171736 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083239651 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08515436 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063151193 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.072050678 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082913809 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.06296699 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082765596 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.092223964 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083365018 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083415899 seconds)
  done (took 2.398480897 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071055241 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083920963 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.085203887 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062768451 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.074097267 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08410039 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062864869 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083502382 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.086519246 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084632698 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084603565 seconds)
  done (took 2.350652864 seconds)
done (took 12.722724812 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.189472934 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.090399713 seconds)
  done (took 1.750076441 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.260149632 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.519884434 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.947128198 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.118248687 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.098023414 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.111165994 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.22378863 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.093792173 seconds)
  done (took 8.036655644 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.12815483 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069747922 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.068166552 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.069433256 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.068618618 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.070551574 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.068755924 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.069020513 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.069511505 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.069137178 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.068693802 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.068207089 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.068422154 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.070555119 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.069063272 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.070714401 seconds)
  done (took 2.75356331 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.10374917 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.070420737 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.10026603 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.063011405 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.072497285 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.063318415 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.072099214 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.073474564 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.070768167 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.070911963 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.072783649 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.070762931 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.072331825 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.072400928 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.07334382 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.073998481 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.073567241 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.071465979 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.073815139 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.074326253 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.072971892 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.073602691 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.074033772 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.072202212 seconds)
  done (took 3.385725862 seconds)
done (took 17.413372395 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.174913558 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.075350339 seconds)
  done (took 1.733036416 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.093802265 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.093833135 seconds)
  done (took 1.686596992 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.072950393 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.061039744 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.078074035 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.070578181 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.062144132 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061379109 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.076956691 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.061855574 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.061787595 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.061987297 seconds)
  done (took 2.170782066 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.06359727 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.069318164 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.067072938 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.064792544 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.067025606 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.06268195 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065350559 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.06313349 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.06889442 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.062031152 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.065979331 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.083071736 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.065629953 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.084177366 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.065697797 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.066147874 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.06728405 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.065603758 seconds)
  done (took 2.720207595 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061702199 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.062131866 seconds)
  done (took 1.631519738 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064867028 seconds)
    (2/7) benchmarking "second"...
    done (took 0.061819365 seconds)
    (3/7) benchmarking "month"...
    done (took 0.06456009 seconds)
    (4/7) benchmarking "year"...
    done (took 0.064337267 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.062274843 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.061779144 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062883914 seconds)
  done (took 1.94395085 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.423164828 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.184656299 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.418775975 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.069597973 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.076951917 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.256265167 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.065116984 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.069518342 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.069520167 seconds)
  done (took 3.17734951 seconds)
done (took 16.578032123 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082766012 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.181996087 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.112531715 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.410162413 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.092095273 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.068419339 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.113827787 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.204189954 seconds)
done (took 2.793710895 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.277824657 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.166392325 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.312142112 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.149302509 seconds)
  done (took 3.141688223 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.392566753 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.168347084 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.07634261 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.067574387 seconds)
  done (took 2.228741967 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065764624 seconds)
    (2/2) benchmarking "read"...
    done (took 0.071750935 seconds)
  done (took 1.657394376 seconds)
done (took 8.833235511 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072006062 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.062043266 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.067458072 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.063900157 seconds)
    (5/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.093331323 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.063941816 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.063329157 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.064066107 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.062057127 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.064528712 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.064751123 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064672643 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063731137 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063993839 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064283065 seconds)
    (16/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.063953386 seconds)
    (17/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064271849 seconds)
    (18/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.062201738 seconds)
    (19/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.063135951 seconds)
    (20/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.062166796 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063717633 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064225273 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.063453095 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.064448661 seconds)
  done (took 3.112771685 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079843007 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.066599465 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.067473962 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.066803415 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.067925259 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.067612434 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.067393187 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.066044566 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.067583831 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.065826126 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067884306 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.068034721 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.066046315 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067714738 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066295825 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.068153008 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.067680731 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066721391 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066068538 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.067974252 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.067334114 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06639474 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.068350404 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06788125 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067861995 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.068335892 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.066239759 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.066620504 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067644396 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.06803428 seconds)
  done (took 3.566802403 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066978215 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.05997582 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.060953248 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.070996179 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.060547909 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.060643613 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.06133849 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.06029377 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.060652034 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.061587365 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.061419436 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.060913978 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.061396826 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.060289416 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.060556868 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.061126568 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.066119259 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.080069476 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.060517312 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.060625702 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.065442237 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.061051281 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.060676865 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.06075721 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.061263162 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.06079441 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.060328378 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.0607842 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.060204986 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.061521715 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.060560627 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.065751667 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.066251839 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.060653213 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.070961446 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.066356352 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.060620814 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.06746812 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.061629358 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.060440213 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.060460705 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.060164654 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.06063605 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060477341 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.071071791 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.060925962 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.061741939 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.060870346 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.060909763 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.060152422 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.061005727 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062370214 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.069399723 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.062236113 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.06086169 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.061660528 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.060266509 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.061252474 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.06059646 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.060332943 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.060133685 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.064397238 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.062034212 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.06136847 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.080787814 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.061671859 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.07105808 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.060313847 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.060723414 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.064472264 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.061127158 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078450633 seconds)
  done (took 6.06465124 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.071655309 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.072201059 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.079253006 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.070720026 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064395721 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.06156951 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065098677 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061565517 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.07094773 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.06545652 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06165467 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065589306 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070968101 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065370249 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062635933 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.071170029 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065123771 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064658213 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.061239907 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065349196 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06291043 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065053058 seconds)
  done (took 3.010875306 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.139617604 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066979961 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.105689713 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.071420189 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.069442713 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.070759651 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066858144 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.067182268 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067349221 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067706634 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067635732 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067314672 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.06971305 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067671809 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067585707 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067718491 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066827308 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.067321738 seconds)
  done (took 2.870293601 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.077120627 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.066678212 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.090261775 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.06643539 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.066744153 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.066466123 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069831996 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070661423 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.066584363 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.067092771 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.071227454 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067629815 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.066830871 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067158058 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066466033 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.06697437 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.066277225 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066813242 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.070004285 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06975769 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069769423 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.070661701 seconds)
  done (took 3.064705305 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077968208 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065356351 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.081116226 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.06731757 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060763394 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061126868 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.067421188 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.06589711 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.066960068 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.065432387 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066015028 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061091266 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.068129751 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066270852 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067818304 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065907283 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065696243 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066565977 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065566471 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061593922 seconds)
  done (took 2.874875774 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.098696595 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063772071 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063255105 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.068430683 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063814655 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.074598659 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.068873957 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.063996791 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.064074856 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.086066551 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063641585 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063548288 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.068601294 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.067080182 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.064024465 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069229094 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.069411268 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.068837261 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.064034034 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.0634888 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085487096 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.06397019 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068841268 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063777198 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063843527 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.063424126 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063304714 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.066602298 seconds)
  done (took 3.457830708 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.065493744 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064456912 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.064630731 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.064056799 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.064431984 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.064308017 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.064350816 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064318045 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.064241636 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.064549432 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.06382248 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.064094926 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.067018135 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.064160445 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064130596 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.064293089 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064376994 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.064607738 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064947629 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065382606 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.064197754 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064054372 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.063974854 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.064323831 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06417749 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.064136332 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064558143 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064489281 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064214371 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064474235 seconds)
  done (took 3.486032683 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073717478 seconds)
    (2/2) benchmarking "in"...
    done (took 0.07197951 seconds)
  done (took 1.692539906 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.061923861 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.079402265 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060134925 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.07325302 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069048793 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.064660992 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069660187 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068996401 seconds)
  done (took 2.089103175 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.092525376 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.117595441 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.062385293 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.063245111 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.09197177 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.129156132 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.102582424 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.074840714 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077119131 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.065585573 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.063385419 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.101708823 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.061648964 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.076064774 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063570417 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.07144385 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069886582 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.080550311 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.075797603 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.060815656 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.075106907 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06299851 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.061072333 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.062884603 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.061815573 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.06929448 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.078034765 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.07462155 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070955293 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.059784655 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.080988247 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.060731316 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.061953437 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071216056 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.091507525 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.060854077 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.09825463 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.061547746 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.065889183 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.061002686 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.0735741 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.08204911 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.075962091 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.079627988 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.062680245 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.063066064 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.060330351 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.062964534 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.06528726 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.070583261 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.060704016 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068984888 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.060451528 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.062315165 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.071887248 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.061458632 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.066085673 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.071003449 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.075236435 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.07187326 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.070440224 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.077627892 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.070431864 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.068399324 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.061827966 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.081110093 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.062819146 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.075643873 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076423686 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.062195502 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074875461 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.060701076 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.060049857 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.060610021 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094806056 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.062516653 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.06222182 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.061397792 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.061467824 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062184654 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071404837 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066185364 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.06912739 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064079466 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077369403 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070964261 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.061093001 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.067053278 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.079207285 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.0652664 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061264888 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.078167146 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.065043599 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060611568 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.079101854 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.071940832 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.062602354 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.062086314 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.065134829 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075022268 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.062638301 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060119508 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070121269 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.062630085 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.089543955 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.065282702 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.203401869 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.061584921 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.071815153 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.066091133 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.062510159 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.060215946 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.065767236 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.06195701 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.059864922 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070965677 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.061232707 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.076427241 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.068307725 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.076275386 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.076759874 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.072162688 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.077884622 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.061501518 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.059924683 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.079548671 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.071320733 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.06245024 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.079037293 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.060405598 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.074804609 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.060837144 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.06251386 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.071008036 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.060079562 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06276537 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.06063931 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.065896716 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.062659001 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062520459 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.067556144 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.070321715 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.073701687 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.062495257 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.070647508 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.061618738 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.077759047 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.072111536 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.066183806 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064450278 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.061722165 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.073559571 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.06846509 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.071352901 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.060525421 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.062032331 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.061334976 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.072466793 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.07159779 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.06285447 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.068175053 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.066099354 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.061626237 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.061487065 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.06203039 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.065212799 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064534089 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.061853049 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069336034 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.070624978 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.075528173 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.067920101 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.071045555 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.060347554 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.060383083 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.06259017 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.06078856 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.066064814 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.071064381 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076862324 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.073300453 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.08241529 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.061256455 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.071654558 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.062640587 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.078537825 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.074698238 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.062002131 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065423056 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.059839803 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062685352 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.070629794 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072839061 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.075420959 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07665291 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.06621257 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.066457394 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.060515938 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076856751 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061245511 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070370691 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.071106354 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.065052909 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.060948422 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.06227506 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070701696 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.065740586 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.060656187 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.077031129 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.066717128 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.060166699 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075413289 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.061127671 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.07232942 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.060219031 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.065234818 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.066937155 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.063023813 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.071061104 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076979108 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.05988711 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.061778213 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.077339525 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.200496713 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062661818 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.07020161 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.077180617 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.067109603 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.070131704 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072275796 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.072193096 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.066173498 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.071872613 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.062123539 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.07104901 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.064086777 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.073198589 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.061602815 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.07927997 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.060345893 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.077039321 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.061113552 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.07292159 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.061816971 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071060777 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.062222891 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.07860712 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.062810184 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.061789721 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.073128453 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.060507905 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.071083368 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.060416239 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.066825944 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.06878651 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.071540905 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.063019874 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071335691 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.062910827 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.070677017 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.066088585 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.069697476 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.070672181 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.066028584 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.0604774 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.070044952 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.07268339 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.06995027 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.062343471 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.062624455 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.061683617 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.071228033 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.062618259 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.062124034 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070502035 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.06593969 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.067378803 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062637582 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.062745279 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.062824347 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070108735 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071188233 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080022812 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070145409 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.069260653 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.071305799 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.060687104 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.077316869 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.061327771 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.072077941 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.060043243 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.066852729 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.070945355 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.060967521 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080440032 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.062602144 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.069692485 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073889663 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070396604 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.065505003 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.079045191 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.064406276 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.069877863 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.06962393 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.066092258 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.06843422 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.063179827 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.069946102 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.071056165 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.072010372 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.062144925 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.069231718 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070552922 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063045374 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.068259896 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.062710875 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.070181308 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.062547259 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.06069167 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.06631468 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.072763045 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066298143 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066715047 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.061487748 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.059981538 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.061241678 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.067602719 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.066408958 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.070244997 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076877696 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060201718 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.062133871 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.060869008 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.065479584 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.078921726 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.070994836 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.069519857 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.066133214 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.059823685 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.062478523 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.062737295 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.203082819 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.064894429 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.060466032 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.06050645 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072753149 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.063010685 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.066533992 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061352353 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.062123073 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.071247473 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.065302498 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.061819556 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.068590843 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.06052401 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.066827818 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.060079344 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.062799748 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.066762557 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.060583422 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.065806392 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.072421228 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.078568303 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.069250567 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.070825247 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.062495421 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.069395132 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076787307 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.067602862 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062173339 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.071153004 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.060083539 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079921653 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.071278525 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070581858 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071753977 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.062219621 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.078254105 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.066277818 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.071436763 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.076736155 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062255612 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.06720521 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.060382405 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.077040942 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.066203206 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.061126134 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.069661383 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069357788 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.067884415 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.073391123 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.061562011 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.069447464 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.066028921 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.06506789 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.062840651 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.062851587 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.070110902 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.077474995 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.061734681 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.065583034 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.069537403 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.069695774 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.065878024 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073724144 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.069947128 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062336748 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.063489653 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.0652735 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.062414038 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.073690011 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061509803 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.06603875 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.066513275 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.060685524 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.068404327 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077898824 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.071011339 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071273405 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.060738664 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.060719729 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.079361305 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.065589717 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.064380628 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.070023266 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.071078544 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074078932 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.071248016 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078490231 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.061710533 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.067477491 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073924821 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.062233673 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.061265829 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.065450453 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.062791093 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.070787129 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071778745 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069156935 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062999878 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.068495323 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.07528381 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.061978359 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.066267651 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.065791515 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.061692198 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.071657117 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.069758239 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.072891981 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.062166285 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.060479667 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.064880301 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.070527286 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.06913573 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.070662022 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062177877 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.067198322 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.075233894 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.069255895 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.201798119 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.061129206 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064138866 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.071030414 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.065766979 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.060879551 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.066635782 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.065296599 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.067376356 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.070929098 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.065825707 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.060810587 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.078012282 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.069352307 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.070969275 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.062698962 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.062756906 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062247459 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.060493312 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072857075 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.061088978 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.062695706 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.066468114 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.062933489 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.078838081 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.069946781 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.077549562 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062011042 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.066239385 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.060471367 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071242619 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.065983477 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.061718502 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.072129768 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.060313473 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076540514 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.073190136 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.066175835 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.060328864 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.066542836 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.069748252 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.076198012 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070721187 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.070437863 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064785344 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071034263 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.062876866 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.072686989 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.060597527 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.059845736 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.071547155 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.07013158 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.073865068 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.060430506 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.071686284 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.062866245 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.069700553 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.069589112 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.062848042 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062523748 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.062468352 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070822284 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.065991972 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.07110709 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.066265034 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.077936872 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.061962681 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.072906276 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.07051877 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.072200917 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.074901584 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073714626 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.069615771 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.062139076 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069386745 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.069499641 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.062255315 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.06645514 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.064428474 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082504474 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.063014443 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.062392739 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075236025 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.067239571 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.060741619 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.067557027 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.066142728 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.072009972 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.062149328 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072156121 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.065019725 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062012211 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.066457035 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.066089439 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.060399677 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.060847744 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061129742 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071693679 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.066053728 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.060972308 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.08050527 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.062620804 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.070427366 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072230513 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.067957467 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.062707612 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.060196722 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.062272477 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.074692983 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076642247 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.064979602 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070275707 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.062475404 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.071149958 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.060048895 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.070238013 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.07010238 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.208654328 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.061042233 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061460777 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.077138932 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077617073 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.066365715 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.071160162 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.070865626 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.062501787 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082945921 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.071142447 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062439835 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.072433226 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063852394 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.060666489 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.060307777 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.06232182 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.073028149 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.060546664 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.063082279 seconds)
  done (took 42.786065156 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.097968004 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.061760467 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.060780601 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.060640345 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.069709309 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061595414 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.060666862 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.062004564 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.061652761 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.0630799 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.060924646 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063528431 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.066998537 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073933239 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.068959128 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.064392392 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.060871525 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061684405 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061191002 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061736194 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.066954527 seconds)
  done (took 3.003475636 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.064626824 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.064663544 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.064619921 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.064844197 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064232106 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.06090005 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065357363 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061263531 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065673899 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061633335 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065717877 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061378019 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.061870295 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.06134506 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061511061 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062687756 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065314018 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064445656 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.061451714 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064604059 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062503374 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.064959902 seconds)
  done (took 3.014891997 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.062750758 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.06145305 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.070104777 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.060178159 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.060302384 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.063757183 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.060173841 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.065690197 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.065377046 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.0656328 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.070163504 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.061956464 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.059980736 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.066927036 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.060445416 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.061747818 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103116081 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.06199442 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.06194791 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.060497245 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.06335748 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.070359906 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.060517531 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.060876688 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.065481372 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.063539581 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.060188651 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.062926158 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.061070877 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.065659249 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.061670114 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.060248767 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.070262914 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.069296202 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.065771363 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.065493896 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.062627131 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.061425833 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.060384024 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.060470016 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.069984996 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.061957901 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.060983464 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.062133843 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.070164945 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.060800881 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.06015569 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.070539672 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.060328776 seconds)
  done (took 4.776042062 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.071233591 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.113321907 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.066597408 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.093961416 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.073485381 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.066429871 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.066593838 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.094754714 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.061429073 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.063037476 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.074486852 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.074867578 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063421792 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.065034679 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.068231159 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063307022 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.06427176 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062727212 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.066058769 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.062998449 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.066158672 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.067760135 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.073138006 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.073665564 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.064165978 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.06263781 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063130565 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.06450144 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.073363888 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.066055397 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.064583379 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.064799756 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.073590181 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.068233031 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063029232 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.062884329 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.074145326 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.063268238 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.063112459 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.061970289 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.062776082 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.064433588 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.067966163 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.074627511 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063271758 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.068225981 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063256199 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.061441812 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.074075523 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.06279162 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.06673387 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.074910218 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064174943 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.063826481 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064642684 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.073618226 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.063491133 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.062151168 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.06353045 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.073547072 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.061531393 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.063956618 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.077387042 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.062640988 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.066682326 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.074438762 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.068651737 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064275451 seconds)
  done (took 6.4040637 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.069495895 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.095575634 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.076082534 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.07617565 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072252955 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.071278619 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.072105924 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.071476964 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.071377271 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074760573 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.071569364 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.132848276 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.068050542 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.072728429 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071553113 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.071309882 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.071380252 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071154131 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.071375833 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071206566 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.071356993 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.076248783 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.071261272 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.076267431 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074150415 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.067723245 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071223683 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.071121735 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.076274624 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071193377 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.073412935 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.071517714 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071412526 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.076507344 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.073530857 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.070999321 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.061665095 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071253307 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.071368791 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.071228405 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.067740686 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.076097277 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.071209501 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.067673826 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071022146 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071613272 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.07627763 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.073452268 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.072508038 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.07413801 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.071487404 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.075939372 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070999476 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.071734201 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.076353669 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.078584286 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.076415308 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.076643549 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.071600756 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.076365095 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.076553063 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.078606428 seconds)
  done (took 6.249938954 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074157119 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.067126399 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.079519272 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.060554226 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.060626942 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070294736 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061163053 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.060824989 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.067357641 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.067090353 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068578866 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070387864 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.07207286 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068831601 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070408776 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072294527 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070293249 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.070091122 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067126207 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.070155259 seconds)
  done (took 3.029432619 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.075863766 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.07936837 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.06683185 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.069947997 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.066610039 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.070475916 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.066463316 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066547407 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067040332 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06652046 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.071580251 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.07159831 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066577602 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.070761481 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071308679 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.070039446 seconds)
  done (took 2.761931625 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064575671 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.068603274 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.094493236 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.062293855 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.064080112 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.061468068 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.062253276 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.0607929 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.063295301 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.075550717 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.061866037 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.064415325 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.062034007 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.060781645 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.061484129 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.064060713 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.06321827 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.061682745 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.06204466 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.092984899 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.070302413 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.062433984 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.063882185 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.061567709 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.063444817 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.070155421 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.062877125 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.063897251 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.061466936 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.064257273 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.064053219 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.068710262 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.064138047 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.062006639 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.06075163 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.061610679 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.061898439 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.064458026 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.064441688 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.061794746 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.060206955 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.066870811 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.062042175 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.06256231 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.063379609 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.064358654 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.062882695 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.067579517 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.061656428 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.063678508 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.062028837 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.063349155 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.062172222 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.069282047 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.064164242 seconds)
  done (took 5.210432038 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078217509 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066514096 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060453003 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060371245 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.06604939 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.066929368 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066396 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066721178 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067483578 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060632508 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067007844 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.065881018 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066725054 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066525524 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066494447 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066610719 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060446074 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066584929 seconds)
  done (took 2.85177471 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.067089729 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066601624 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.065265307 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.062573534 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.062549767 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067383189 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061075615 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.062400069 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06230244 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.062981592 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062995997 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.062956261 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062312187 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.061940353 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.066379669 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06268936 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.061927579 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06085072 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.06266023 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.060820472 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.06708213 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061066579 seconds)
  done (took 3.04597789 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.117315039 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.084161959 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.155537099 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.079995406 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.088966672 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.072605805 seconds)
  done (took 2.25244355 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.093890094 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.098186366 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.06610753 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066050717 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070682931 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069239478 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068957048 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068958758 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07222 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072900904 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068993098 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072456901 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072086108 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074092899 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070536315 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07051333 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068782936 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06916626 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.065983589 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076056814 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069350247 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072630172 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068969903 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068586041 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069132114 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073968953 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072415855 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07270501 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068853294 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072103828 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070790734 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069149299 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072453094 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072393582 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06583645 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072126808 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.0693075 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076020509 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070793549 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073747976 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06584223 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070355793 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072069979 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07157504 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072355198 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069101888 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07240283 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069278198 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069371745 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077377399 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070902409 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07423023 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070738732 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072376329 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072375116 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077330642 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07301775 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074084033 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070586924 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072938344 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074614988 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070991337 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074261258 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072992889 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070742969 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074580901 seconds)
  done (took 6.410879382 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104185027 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066697116 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069318736 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072701643 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074712088 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069747124 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069298234 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069268167 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069202828 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066722788 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104546608 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069600134 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074141312 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077168498 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06909957 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068959553 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069414623 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074422054 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066727016 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07761105 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069073062 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074130507 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074497704 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073986047 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07250073 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070571956 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069352827 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069005658 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068941575 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069080136 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072181686 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069352175 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073907128 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066166856 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073750445 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069087447 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069000481 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072076276 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068890812 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070734656 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07436655 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076355206 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068880055 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069259751 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073141542 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069398648 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069169083 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066851396 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069188656 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066535377 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073041208 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073291901 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073157571 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074067306 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069329831 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069302531 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069597055 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069092078 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069189398 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070959072 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074454764 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069587043 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077759834 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069267684 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069360208 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07427932 seconds)
  done (took 6.424159457 seconds)
done (took 135.032365368 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.237193361 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.203934963 seconds)
  done (took 2.078784409 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.074345024 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.193024543 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.074299807 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.073988345 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.107918799 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.107764021 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.104344474 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.071727526 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.074745787 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.07198211 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.138326502 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.104021875 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.072058036 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.091797998 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.07144663 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.071822661 seconds)
  done (took 3.164034485 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.107568029 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.210498882 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.08232474 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.070120309 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.151401036 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.076903685 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.072825644 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.076822455 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.076331049 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.070063613 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.106422161 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.083157719 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.075239136 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.076890026 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.07211398 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.075399093 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.07702389 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.076666 seconds)
  done (took 3.312448995 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.102731878 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.090853832 seconds)
  done (took 1.86592825 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.156439868 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.105621728 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145007777 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.343448351 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.136035093 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.137763488 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.140821713 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.136408658 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.110229783 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.133295655 seconds)
  done (took 3.207121274 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.10491656 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.104107985 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.304935881 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.102036281 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.082571277 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.077216443 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.074894132 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.079443281 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.075374371 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.076303386 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.121495624 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.075045091 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.072477525 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.123405654 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.098048792 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.106129555 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.070819879 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.077564262 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.079926322 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.071018089 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.075795019 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.079549408 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.175974555 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.078199473 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.098919149 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.075283547 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.076946688 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.074392802 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.074039921 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.078402995 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.078754841 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.098641205 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.077810418 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.082453167 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.076177359 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.096242059 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.071885556 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.097829231 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.074539124 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.072407772 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.075008134 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.078050882 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.072155876 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.077792585 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.074951738 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.077389363 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.07943069 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.070897438 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.30599137 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.073932451 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.072690067 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.075915828 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.075461171 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.076662249 seconds)
  done (took 6.657794223 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.119338318 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.112037328 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070469827 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.117127794 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.109515173 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070637773 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.122715549 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.104821401 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.122021743 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069801918 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069374453 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.070015055 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076041289 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.079281738 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.11950785 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.112118258 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071667451 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069841631 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.11086008 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.111059572 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069014673 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.1079587 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.113659822 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.109797316 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.068890765 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070133191 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.068773621 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069398047 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.076461625 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075683791 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069103808 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.078373786 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.0808268 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075139157 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068097014 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.068542956 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068614487 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.075457468 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077882281 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077450491 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.074952738 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068634912 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.068591617 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069129998 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069646785 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068118948 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077814324 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.075482674 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.077549005 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068753392 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069397789 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.068499365 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069060175 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075396147 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.074400788 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.076077722 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078712258 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068717933 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069173371 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.070012851 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079332641 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076635871 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.07622511 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069819697 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077319693 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.068929033 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078570035 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.081057433 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.068767693 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.06894031 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069093226 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068839796 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069068605 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074361146 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.074702196 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069050716 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.06867291 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068453551 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076094498 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074952273 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068699083 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.076641853 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068477643 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068837596 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069417113 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069364767 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.076734102 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.075605522 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069475035 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.0682309 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.068936072 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069155376 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.067898676 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.076693332 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075392028 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.076046745 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.211909166 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069942306 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.078247979 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.07527894 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069841654 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.074961947 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.06917144 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069744078 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069181125 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075354474 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.07453323 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.076977892 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069010786 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.068947198 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.075393168 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077545764 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.068936277 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.074143334 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077163191 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.074968235 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.068312582 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.077532765 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069126654 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077536009 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068945217 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077372611 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069344664 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.074845893 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068742346 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.068276348 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.06882882 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.077742811 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069281664 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068760608 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069111782 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068959599 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.075077426 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.081241154 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069943736 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075394061 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.075066586 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069840054 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.077842055 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069106239 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077302878 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069288066 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069364754 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06861893 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.080109108 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069064533 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068736477 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.068689558 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.076816865 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068584704 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.07707292 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074023033 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068312343 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078398407 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076813658 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.074687353 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.07796637 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069443398 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.068989648 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068689482 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.071509835 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077007424 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078455425 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06934653 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069155083 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.074282011 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077674291 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.068766271 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.074373855 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074579322 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.074715923 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.0691132 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.068817854 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.077568161 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.079362448 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075326156 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.077453797 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075586771 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069078177 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.07411341 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.077226771 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068805937 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080921254 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068480164 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.07896854 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.077541704 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.073966162 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.077733903 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.079023333 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.0765564 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.07712896 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.079185456 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.068598097 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.068393367 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.210560135 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069029974 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069142533 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.074753936 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069802441 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069040972 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.079500837 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069277594 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.078092074 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.068582263 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.07532652 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068847409 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069440079 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079788383 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06945239 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069260078 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074472188 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.06906825 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.074278286 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077235579 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.074889438 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069013648 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068999961 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.077962342 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.077402447 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069219367 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068763236 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069464726 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.076984549 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.076702611 seconds)
  done (took 18.852390619 seconds)
done (took 40.819042358 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.167975245 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.114483284 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.209137182 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.198192828 seconds)
  done (took 2.454779384 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.100256865 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.065359044 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.108052073 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.118160778 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.065585201 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.103811174 seconds)
  done (took 2.274145525 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.198757337 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.173684965 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.241965185 seconds)
  done (took 2.325116066 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.366045095 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.148058222 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.213951038 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.496540165 seconds)
  done (took 3.030894317 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.138166697 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.128182992 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.077132519 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.139362343 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.083978895 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.061973277 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.132712119 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.06942937 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.098782727 seconds)
  done (took 2.701849961 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.137932585 seconds)
done (took 14.631964665 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.105566639 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.330816175 seconds)
    (3/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.276380643 seconds)
    (4/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.231583603 seconds)
    (5/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.109005191 seconds)
    (6/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.282385 seconds)
    (7/341) benchmarking ("sort", Float64, false)...
    done (took 0.137159364 seconds)
    (8/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.218819223 seconds)
    (9/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.078388417 seconds)
    (10/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.124186132 seconds)
    (11/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.207417791 seconds)
    (12/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.23616205 seconds)
    (13/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.158237878 seconds)
    (14/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.288465992 seconds)
    (15/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.075202328 seconds)
    (16/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.07613133 seconds)
    (17/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.27740134 seconds)
    (18/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.077842915 seconds)
    (19/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.276813557 seconds)
    (20/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.126567863 seconds)
    (21/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.27285693 seconds)
    (22/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.123028724 seconds)
    (23/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.078216779 seconds)
    (24/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.331347432 seconds)
    (25/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.069240403 seconds)
    (26/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.12776421 seconds)
    (27/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.156479407 seconds)
    (28/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.088224494 seconds)
    (29/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.074372183 seconds)
    (30/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.250550329 seconds)
    (31/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.242166934 seconds)
    (32/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.20443331 seconds)
    (33/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.077119079 seconds)
    (34/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.250221983 seconds)
    (35/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.076274913 seconds)
    (36/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.076870266 seconds)
    (37/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.243580922 seconds)
    (38/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.078387806 seconds)
    (39/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.078751468 seconds)
    (40/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.074810108 seconds)
    (41/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.066751935 seconds)
    (42/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.190521644 seconds)
    (43/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.074742339 seconds)
    (44/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.069340966 seconds)
    (45/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.079331678 seconds)
    (46/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.0732555 seconds)
    (47/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.196783204 seconds)
    (48/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.311817197 seconds)
    (49/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.077667377 seconds)
    (50/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.109584471 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.078638421 seconds)
    (52/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.091218218 seconds)
    (53/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.144643172 seconds)
    (54/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.281679115 seconds)
    (55/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.069963569 seconds)
    (56/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.143162787 seconds)
    (57/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.076879448 seconds)
    (58/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.084864941 seconds)
    (59/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.232235345 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.082248459 seconds)
    (61/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.384121976 seconds)
    (62/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.16220293 seconds)
    (63/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.201944283 seconds)
    (64/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.213337791 seconds)
    (65/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.067239994 seconds)
    (66/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.0948009 seconds)
    (67/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.071197051 seconds)
    (68/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.163289349 seconds)
    (69/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.086395088 seconds)
    (70/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.067973137 seconds)
    (71/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.218665829 seconds)
    (72/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.12376458 seconds)
    (73/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.161332545 seconds)
    (74/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.179077971 seconds)
    (75/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.078744027 seconds)
    (76/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.14383093 seconds)
    (77/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.074009493 seconds)
    (78/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.113968966 seconds)
    (79/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.160647134 seconds)
    (80/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.185785821 seconds)
    (81/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.074080498 seconds)
    (82/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.068153145 seconds)
    (83/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.08412137 seconds)
    (84/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.073991956 seconds)
    (85/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.197141581 seconds)
    (86/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.072447968 seconds)
    (87/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.115699817 seconds)
    (88/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.072693298 seconds)
    (89/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.162804215 seconds)
    (90/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.066137676 seconds)
    (91/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.1512233 seconds)
    (92/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.082359928 seconds)
    (93/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.067892828 seconds)
    (94/341) benchmarking ("sort", Int8, false)...
    done (took 0.148419246 seconds)
    (95/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.074797918 seconds)
    (96/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.216947387 seconds)
    (97/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.065574257 seconds)
    (98/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.089682486 seconds)
    (99/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.071004686 seconds)
    (100/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.169700781 seconds)
    (101/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.074007459 seconds)
    (102/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.123354451 seconds)
    (103/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.224677861 seconds)
    (104/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.217026295 seconds)
    (105/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.064112169 seconds)
    (106/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.197847449 seconds)
    (107/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.161344877 seconds)
    (108/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.066744087 seconds)
    (109/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.204712616 seconds)
    (110/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.06920947 seconds)
    (111/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.065939474 seconds)
    (112/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.088013351 seconds)
    (113/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.073482769 seconds)
    (114/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.072640604 seconds)
    (115/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.065923495 seconds)
    (116/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.085432297 seconds)
    (117/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.088438234 seconds)
    (118/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.066867489 seconds)
    (119/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.097839329 seconds)
    (120/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.12676862 seconds)
    (121/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.091049347 seconds)
    (122/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.110466832 seconds)
    (123/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.094888346 seconds)
    (124/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.066319033 seconds)
    (125/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.162735523 seconds)
    (126/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.152220042 seconds)
    (127/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.164407271 seconds)
    (128/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.066595807 seconds)
    (129/341) benchmarking ("sort", Float32, false)...
    done (took 0.137309845 seconds)
    (130/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.083282139 seconds)
    (131/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.070311703 seconds)
    (132/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.073572352 seconds)
    (133/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.209793624 seconds)
    (134/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.147208074 seconds)
    (135/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.06579335 seconds)
    (136/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.08105657 seconds)
    (137/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.066433314 seconds)
    (138/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.065712457 seconds)
    (139/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.091711917 seconds)
    (140/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.075209607 seconds)
    (141/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.078072395 seconds)
    (142/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.065631552 seconds)
    (143/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.067002384 seconds)
    (144/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.166774046 seconds)
    (145/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.076927708 seconds)
    (146/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.251396817 seconds)
    (147/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.073098832 seconds)
    (148/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.073746892 seconds)
    (149/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.245872234 seconds)
    (150/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.079213719 seconds)
    (151/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.071894315 seconds)
    (152/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.082780741 seconds)
    (153/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.076565396 seconds)
    (154/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.07527352 seconds)
    (155/341) benchmarking ("sort", Bool, false)...
    done (took 0.149277055 seconds)
    (156/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.078202721 seconds)
    (157/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.137554689 seconds)
    (158/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.067169347 seconds)
    (159/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.147712665 seconds)
    (160/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.067824587 seconds)
    (161/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.070013902 seconds)
    (162/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.065791957 seconds)
    (163/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.065801666 seconds)
    (164/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.066229379 seconds)
    (165/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.132570559 seconds)
    (166/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.073231715 seconds)
    (167/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.075564196 seconds)
    (168/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.066769988 seconds)
    (169/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.085817516 seconds)
    (170/341) benchmarking ("sort", Int64, false)...
    done (took 0.067477053 seconds)
    (171/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.06626521 seconds)
    (172/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.162359945 seconds)
    (173/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.06572671 seconds)
    (174/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.087637485 seconds)
    (175/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.066880791 seconds)
    (176/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.066546302 seconds)
    (177/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.064470311 seconds)
    (178/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.157920742 seconds)
    (179/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.065746498 seconds)
    (180/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.066692639 seconds)
    (181/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.142086726 seconds)
    (182/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.074783892 seconds)
    (183/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.065068067 seconds)
    (184/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.154058095 seconds)
    (185/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.074222633 seconds)
    (186/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.068443281 seconds)
    (187/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.088645739 seconds)
    (188/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.066238197 seconds)
    (189/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.07541301 seconds)
    (190/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.067630167 seconds)
    (191/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.153662628 seconds)
    (192/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.067565554 seconds)
    (193/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.067317684 seconds)
    (194/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.065861171 seconds)
    (195/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.064834981 seconds)
    (196/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.082868164 seconds)
    (197/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.0781612 seconds)
    (198/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.083672198 seconds)
    (199/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.066084639 seconds)
    (200/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.07603101 seconds)
    (201/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.163298453 seconds)
    (202/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.065966982 seconds)
    (203/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.184469057 seconds)
    (204/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.146320303 seconds)
    (205/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.079177134 seconds)
    (206/341) benchmarking ("sort", BigInt, false)...
    done (took 0.261606716 seconds)
    (207/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.074045688 seconds)
    (208/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.066599851 seconds)
    (209/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.226607688 seconds)
    (210/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.066518335 seconds)
    (211/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.139793494 seconds)
    (212/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.065691366 seconds)
    (213/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.145274037 seconds)
    (214/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.071317574 seconds)
    (215/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.06603825 seconds)
    (216/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.064273086 seconds)
    (217/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.06641443 seconds)
    (218/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.235051747 seconds)
    (219/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.091222675 seconds)
    (220/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.073745817 seconds)
    (221/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.073053119 seconds)
    (222/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.150707511 seconds)
    (223/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.07282601 seconds)
    (224/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.09339263 seconds)
    (225/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.066477056 seconds)
    (226/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.066050841 seconds)
    (227/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.145844297 seconds)
    (228/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.195167592 seconds)
    (229/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.068225561 seconds)
    (230/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.145957471 seconds)
    (231/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.073245643 seconds)
    (232/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.092216786 seconds)
    (233/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.065394944 seconds)
    (234/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.073123133 seconds)
    (235/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.065520853 seconds)
    (236/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.08231865 seconds)
    (237/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.094478795 seconds)
    (238/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.066085519 seconds)
    (239/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.068064061 seconds)
    (240/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.066437013 seconds)
    (241/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.066083431 seconds)
    (242/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.066924514 seconds)
    (243/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.070968201 seconds)
    (244/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.066619961 seconds)
    (245/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.154610647 seconds)
    (246/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.068748661 seconds)
    (247/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.077557306 seconds)
    (248/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.075886644 seconds)
    (249/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.073029334 seconds)
    (250/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.067648251 seconds)
    (251/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.073101417 seconds)
    (252/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.065237545 seconds)
    (253/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.066198082 seconds)
    (254/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.08496245 seconds)
    (255/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.066447828 seconds)
    (256/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.085548423 seconds)
    (257/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.067524774 seconds)
    (258/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.375168264 seconds)
    (259/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.06858118 seconds)
    (260/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.154003824 seconds)
    (261/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.074160767 seconds)
    (262/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.071156513 seconds)
    (263/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.067313063 seconds)
    (264/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.065822886 seconds)
    (265/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.143180242 seconds)
    (266/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.066185693 seconds)
    (267/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.067346357 seconds)
    (268/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.06855302 seconds)
    (269/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.06508704 seconds)
    (270/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.065469212 seconds)
    (271/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.066255843 seconds)
    (272/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.066353832 seconds)
    (273/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.074639639 seconds)
    (274/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.066518886 seconds)
    (275/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.067037704 seconds)
    (276/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.066892195 seconds)
    (277/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.06672228 seconds)
    (278/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.072852135 seconds)
    (279/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.18898089 seconds)
    (280/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.201363185 seconds)
    (281/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.065693745 seconds)
    (282/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.065083858 seconds)
    (283/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.149356095 seconds)
    (284/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.086036147 seconds)
    (285/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.066611954 seconds)
    (286/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.076864472 seconds)
    (287/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.205753385 seconds)
    (288/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.066643614 seconds)
    (289/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.081395772 seconds)
    (290/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.066978223 seconds)
    (291/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.085794381 seconds)
    (292/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.068978478 seconds)
    (293/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.068192534 seconds)
    (294/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.066338194 seconds)
    (295/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.150292119 seconds)
    (296/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.070566078 seconds)
    (297/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.071140382 seconds)
    (298/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.066556168 seconds)
    (299/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.132323275 seconds)
    (300/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.066769285 seconds)
    (301/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.068359969 seconds)
    (302/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.066370627 seconds)
    (303/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.066696637 seconds)
    (304/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.095035228 seconds)
    (305/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.068669509 seconds)
    (306/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.070833212 seconds)
    (307/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.066954453 seconds)
    (308/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.086765202 seconds)
    (309/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.066262034 seconds)
    (310/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.066315312 seconds)
    (311/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.066627818 seconds)
    (312/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.072851603 seconds)
    (313/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.067755506 seconds)
    (314/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.084218417 seconds)
    (315/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.091371379 seconds)
    (316/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.067423461 seconds)
    (317/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.234781941 seconds)
    (318/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.074536643 seconds)
    (319/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.065747506 seconds)
    (320/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.065569567 seconds)
    (321/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.065631849 seconds)
    (322/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.066168925 seconds)
    (323/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.077473402 seconds)
    (324/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.066328007 seconds)
    (325/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.070425561 seconds)
    (326/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.066033949 seconds)
    (327/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.070301874 seconds)
    (328/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.086028976 seconds)
    (329/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.07017775 seconds)
    (330/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.06602034 seconds)
    (331/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.072471093 seconds)
    (332/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.091432478 seconds)
    (333/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.146521947 seconds)
    (334/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.065976479 seconds)
    (335/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.08592362 seconds)
    (336/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.066536178 seconds)
    (337/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.073265683 seconds)
    (338/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.066294426 seconds)
    (339/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.066580879 seconds)
    (340/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.066107755 seconds)
    (341/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.06563918 seconds)
  done (took 39.176441909 seconds)
done (took 40.91166333 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.122706585 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.078890929 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.077508984 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.074109768 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.078072119 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.076288154 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.077714665 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.075805853 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.077418392 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.076447099 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.106785602 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.064967521 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.073638237 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.080442782 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.074263906 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.080980864 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.077645034 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.081495875 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.066403912 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.079974176 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.089980759 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.077648955 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.074563722 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.079604885 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.066355747 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.074856305 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.119139463 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.084297028 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.069920205 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.07493954 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.073005117 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.084066756 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.073491003 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.071982067 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.074854663 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.071305104 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.075495592 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.072552513 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.118520345 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.071172197 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.065981625 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.077677114 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.072717871 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.07336628 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.073980772 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.077204678 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.070868469 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.078743288 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.065175294 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.076752952 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.118995921 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070421898 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.069922223 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.074012343 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.070779349 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.074560057 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.069895835 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.076845846 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.070683934 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.07691219 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.074199593 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.073798208 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.065331981 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.074141031 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.072988733 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.073033704 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.064428388 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.07048347 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.065530063 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.065657185 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.065111723 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.074391134 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.072520135 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.070221545 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.064646265 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.065296171 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.064788736 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.077418519 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.071971801 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.07480224 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.06560763 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.070818992 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.070300642 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.066143346 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070778899 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.076897969 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.064707124 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.065866491 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.065054607 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.080163565 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.072189814 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.065553704 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.077076951 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070676776 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070499731 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.06568402 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.064778173 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070375118 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.07366099 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.065642935 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.064374789 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070733276 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.070366494 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.074738429 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.06607625 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070497359 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070586311 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.064633558 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.074683478 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.072858921 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.074415892 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.078723422 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.07414296 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.077234437 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.065627092 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.064388141 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.074990713 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.065945371 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070332727 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.216635872 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.071112947 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.073879015 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.066185485 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.06472257 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070673013 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.075595068 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.066382627 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.066621207 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.065912649 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.075003083 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.072771669 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.064644942 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.06550808 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.074534498 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.074264795 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.064668381 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.065025985 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.074966239 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.066210967 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.071622949 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.071519551 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.074431641 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.065601886 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.065795156 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.064780289 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.065527279 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.06501562 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.070837563 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070796291 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.066110962 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.07435497 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.072024668 seconds)
done (took 13.13327456 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.068702847 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.107823514 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.114632416 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.110884187 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.079305277 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.067183299 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.06989375 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.084562175 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.069542783 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.090170117 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.091888413 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.087809031 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.130912149 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.065130411 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.066616346 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.067082688 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.06505633 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.077911618 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.112677846 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.089580742 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.101666317 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.065874276 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.081980018 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.085629239 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.080414979 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083919981 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.067483131 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.066936386 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.069024134 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.084416615 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.091023143 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.065828069 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.067229469 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.083575552 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.080846468 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073679849 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.067079419 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.072147978 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.069646289 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.065865775 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.067938355 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.0832697 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.071815004 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.072196104 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.066746777 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.067153251 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.066236086 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.073071663 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.083227783 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.071048082 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.07741478 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.084306262 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.067820907 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.066160575 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.064807302 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.073186291 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.06632738 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.067584892 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.066941424 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.066352357 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.067072041 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.068815412 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.071618031 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.07255386 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.069873652 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.072267905 seconds)
  done (took 6.87065689 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.084310214 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.092500548 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.080826555 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.081180052 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.06595523 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.066731878 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.066960034 seconds)
  done (took 2.384003914 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068527196 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.105818269 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.113295599 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.115159485 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.121344938 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.11118754 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.067349686 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.098012791 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.066346133 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.106980799 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.117989082 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.11570156 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.069631445 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.078460391 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.066650429 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.114682793 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.067157491 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.073665147 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.110708164 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.116250825 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07056738 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.095421572 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.08040632 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.067397474 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.112727983 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.106987375 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.069005169 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.067273996 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067390859 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.066186795 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066027171 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.088194758 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.105857203 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.078512043 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.06717627 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.065928128 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.10383993 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066891567 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.102867039 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.075193594 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.103938977 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.066216342 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067134083 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.066517184 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.067334721 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.10784763 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.06722565 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.066130359 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.066062513 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.106961411 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.065822176 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.106212947 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.069027418 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.071190579 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.071175824 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.070826235 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.073537865 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.066922682 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.107569118 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.073013342 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06635584 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.117092198 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.116375854 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.103694038 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.11681231 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.07499778 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.106915151 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.105203673 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.06585916 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.06567294 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.06667649 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.11671057 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.070105725 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.06878074 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.067246879 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.071532944 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.109486305 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.120230528 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.120236148 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.079538046 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.068949502 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.066679524 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.072414323 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.26924482 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071897503 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066517566 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.067871227 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.066266549 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.0718676 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.066697688 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.07167445 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.066484425 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.07344857 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.069303417 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.06855823 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.11400671 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.066988307 seconds)
  done (took 10.159962336 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.069781104 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.069149952 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.067588133 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.067906986 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.068191141 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.067848839 seconds)
  done (took 2.274481374 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.090995892 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.067113197 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.078541418 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.067648748 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.088836678 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.108843128 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.108583447 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069151822 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.083207138 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.077640455 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.109622223 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.111977955 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.111930735 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.069040835 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.109638268 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.068362249 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.109482076 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070095596 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.076939463 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069487593 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.082910439 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.068773669 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069581864 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.115213586 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.069664655 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.068097994 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.06873453 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.077772131 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.077313099 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.068891524 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.069657613 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.070036393 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.0758066 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.069373202 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.109866129 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.075980533 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067648263 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.072735725 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069861041 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.070244647 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.112135468 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069260732 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.06934854 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.072268446 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.068454166 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.075199681 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.072327595 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070728489 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.10989951 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.076763217 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.072888453 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.067772712 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.069611076 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.071947004 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.075531653 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068701354 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.071614853 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.109730594 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.068510388 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.075291499 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.067277022 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.069914882 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069228803 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.069070387 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.071871521 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.071923938 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.075541469 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069341185 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069125802 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.067218812 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.072245184 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.067133511 seconds)
  done (took 7.497416003 seconds)
done (took 31.015081326 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.544879185 seconds)
  done (took 2.367546281 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.932383595 seconds)
  done (took 2.802733318 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.075983321 seconds)
  done (took 9.952367828 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.336084922 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.407589322 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.730175644 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.131700213 seconds)
  done (took 3.514369119 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.735656986 seconds)
  done (took 2.618042975 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.229808289 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.219702161 seconds)
  done (took 2.331465963 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.37337357 seconds)
  done (took 2.24392497 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.188027922 seconds)
  done (took 3.063303408 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.235861199 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.161616041 seconds)
  done (took 2.279324204 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.629516739 seconds)
  done (took 2.507475407 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.471898426 seconds)
  done (took 6.358063109 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.246045901 seconds)
  done (took 2.164948187 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.230873973 seconds)
  done (took 2.110017228 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.080567626 seconds)
  done (took 3.956329851 seconds)
done (took 50.159641151 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.085473314 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.08606589 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.085795109 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.081075211 seconds)
  done (took 2.185950549 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.076619886 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.07028957 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.073557921 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.073587083 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.071191363 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.072829016 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.073039929 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.069736569 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.071226987 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.070085271 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.069023773 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.070265356 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.072661718 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.069860741 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.072215195 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.073896546 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.070353045 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.070511638 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.072543879 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.070022269 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.073157082 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.070323554 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.067968033 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.070151522 seconds)
  done (took 3.590594228 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.08027295 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.072169535 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.075259368 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.070733948 seconds)
  done (took 2.186448249 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077951506 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.076508846 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.084802346 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.09009556 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.075462166 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.076822048 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.08370024 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.083801626 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.065690726 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.086624542 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.068142747 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.066984351 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.067093682 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.085654093 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.082912835 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.062566892 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.063613782 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.07708257 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.076099218 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.079126521 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.068603565 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.066039023 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.07580234 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.076577814 seconds)
  done (took 3.702681396 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.084511934 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.065491072 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.081125627 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.090779758 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.091771588 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.065740349 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.079576114 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.092774948 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.127267533 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.065729456 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.071811517 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.065989482 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.104618208 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.065557657 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.080864234 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.109508359 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.111925144 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.070046016 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.098936276 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.065866549 seconds)
  done (took 3.581898901 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.079268045 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.070283519 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.070591014 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.065810656 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.076476767 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.073296858 seconds)
  done (took 2.333518476 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.070534383 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.068222917 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.070481835 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.072545887 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.068417888 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.068230177 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.067618702 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.066438398 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.0664205 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.067485985 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.067000078 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.067352827 seconds)
  done (took 2.708586375 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.210978952 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.070058603 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.070932007 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.066315658 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.068586765 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.067593148 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.080689034 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.069154895 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.084241484 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.067193843 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.067406472 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.069284435 seconds)
  done (took 2.883441835 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105867247 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.110526217 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143597258 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116522028 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116200372 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096053461 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.159740719 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.09274601 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.159425611 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.136546645 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117266166 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093587388 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087906859 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.069534394 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099739722 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117976036 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135709851 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072748295 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.1123724 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.203448424 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130061372 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.131897422 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146361241 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115507252 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08945018 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145718891 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096181943 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101371787 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122961475 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.124783321 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11881039 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.097532347 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.071531277 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.070892845 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147637817 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.102090203 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119479139 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.093001263 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104129521 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.0873762 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106640235 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.069661772 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.083071327 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.109535813 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083823329 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129229394 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.087522875 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114195914 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081056079 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.136294496 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.274091617 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.134661123 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.085980234 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10503683 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136443117 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110789928 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.133073698 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106127592 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082160934 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.118183011 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.101850812 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099687068 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106576433 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079637657 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.175832152 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088517185 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.111274302 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111310023 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.0936038 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094256857 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107215319 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.135033222 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.124777404 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.124202484 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.137285913 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.094598867 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120278555 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.098881414 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.127899128 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104200643 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.073042799 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.119904344 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.128529404 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.098760505 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.100773593 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128757261 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092436954 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077183938 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.098301003 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.118015222 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080295264 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.111232497 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080063811 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.108701987 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130845756 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09666776 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110727921 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116419176 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079019406 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.309305015 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108462237 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073379338 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.116522766 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113130808 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155014995 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094786472 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.076978773 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.099873069 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102779534 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.147388616 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106689832 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079735372 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10932222 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138330617 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094095446 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.207916202 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.095276918 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13949506 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110351607 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086962975 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075060836 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.090566226 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111857181 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107720028 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1126548 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090651872 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.084195721 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08693984 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111445685 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092216333 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080774237 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.113409123 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.099149404 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.075065242 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088464388 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.07950782 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140691384 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.078160451 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136173422 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124112587 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.076750061 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105954724 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.097349421 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108294093 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.097712321 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116248958 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138825597 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.113496331 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089873557 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.093388096 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107675086 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.143261543 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.125517145 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092644235 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.076769321 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099469544 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111299747 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.097231784 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124099385 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.095037585 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10736682 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101048778 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139558407 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142935417 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098656756 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099528164 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104639655 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.119919477 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075234515 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152181323 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101392224 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115525304 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.083342545 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137536432 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.109877343 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088368222 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086070461 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098284892 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.101498862 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104003364 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.139873102 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.094334638 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.071563703 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091044295 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.14026102 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074915691 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105933881 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.088511309 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.090747698 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115228071 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.090033814 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079539096 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.067357255 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120836935 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.152250933 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.068567687 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.110471461 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.107553766 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.097708876 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.11428197 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.067716942 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112899165 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.133009233 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112475208 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134101294 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139684065 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.388878066 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.12297214 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.117228313 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.108822942 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082158924 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.128056664 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.13704986 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097492125 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093761761 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136160329 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120464579 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.137851481 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.116805439 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115446511 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.105726093 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108197291 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103911688 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.102738383 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145241817 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121416784 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.124201284 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08625071 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106301684 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.1184106 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135246756 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082312255 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141395416 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.083888833 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118355259 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.077745657 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.12355423 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.077862365 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.109673831 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079790838 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100800751 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.07015647 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.07447681 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.141811645 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.112302202 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105530875 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100318031 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.13736818 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.135863856 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.079875318 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107540355 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114683505 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.100934521 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11575322 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.108881768 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.088880762 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09529845 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.109441549 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.084736274 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.08130078 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.279187018 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094665156 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126366194 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.084544539 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075308723 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139736004 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103683165 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09483159 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078256445 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106945191 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.120857373 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.092511602 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087698748 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114640792 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104194217 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140993301 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.090626796 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.097261729 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.123285053 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080258067 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.091986307 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.069925033 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.085362145 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.076219863 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.12654767 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076418701 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116199426 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.069196945 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.130460079 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087206689 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.09324324 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.102165706 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111530106 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12724271 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094825097 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140972473 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089954252 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118012735 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107993751 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094347447 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088097739 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104127617 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101030573 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.122527312 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.096127647 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122475758 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143139221 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103997897 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.141203925 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091180923 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120926196 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106259488 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.123705223 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111517343 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145868621 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.299464183 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112719264 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111953611 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075689652 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094668619 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105111069 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.110630869 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.172519613 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124633059 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.072467338 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105069673 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093849255 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106824136 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104578858 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08210876 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144635241 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100691472 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.088366707 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112062063 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.09032538 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.103846163 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076043767 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095184075 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.100754531 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094662043 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098192362 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11489028 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.126896497 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112724838 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.14202614 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.098936089 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.091985092 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.117918019 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110710227 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11016606 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086082386 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086113191 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137165285 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118144858 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.125570382 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.100289654 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108851897 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.111217059 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100159673 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124542143 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107465217 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.12621724 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080418128 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.075825115 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.068597285 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.072092809 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.122321981 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108417486 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110858518 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097794121 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.072696974 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.259626747 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10574637 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072380881 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08870433 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093633752 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.094856126 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.09122083 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1053232 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.111113658 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.091237869 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103024731 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099556433 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144595905 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.100070831 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088208611 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143028737 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14757039 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087484962 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092223349 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.071656487 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078982547 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111870461 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147345135 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.149855655 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.078063747 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087140017 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.085287688 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086959341 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.071814481 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.086787383 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.089491615 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104896436 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099293211 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.112209382 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104777119 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075782639 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.102956934 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09944062 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092156111 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.104643116 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118452023 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.124110128 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.140671734 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11022958 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106703836 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076168066 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.080459588 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.075915988 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079982822 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.101655546 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.079078056 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076274526 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.142907598 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.09200326 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104696706 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108627104 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.088101725 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075521569 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.291121454 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.070362515 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134490304 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.072053561 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082066302 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.082334322 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079491769 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093151492 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137523481 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109023115 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111966157 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106115865 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1039464 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13924896 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154730656 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079761068 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.142228826 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075949611 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075564528 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076296289 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112969292 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089336863 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.113911211 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139112806 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09132616 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103021388 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077346133 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142869386 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.096674068 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104017042 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087152782 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.07924111 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142855888 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079913142 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.080253887 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089936639 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.110703337 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.07291224 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104434703 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084789144 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080115804 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142131239 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.630286492 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090369357 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.075627735 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.095650933 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.142081905 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.127443593 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095104394 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108660084 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.118705014 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10010179 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.095837897 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107920468 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.182751987 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074723093 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095025277 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.262657397 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098598287 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102433864 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.098343625 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.085511342 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.092620241 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.087111436 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079700723 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107246344 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088721401 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.096067292 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106521255 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.082850562 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.087035829 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.129845756 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.103617308 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.081619906 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088561323 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.103143775 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088264635 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100134275 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.069426899 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11325236 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.09107773 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116274309 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.094520272 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106428091 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.126533952 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090275804 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13710706 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.105991923 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.122419421 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08776817 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.078810055 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125410968 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.088198805 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078127407 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143940327 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.095058983 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.091165727 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103806524 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.097350843 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113534902 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116586815 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111888069 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.096926715 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079526197 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099859233 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.102699244 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085497214 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07900923 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.075261572 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.076988379 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107718362 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085600548 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.083214629 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114622761 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.088893097 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.103601455 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.259221563 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.122989242 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083654759 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101062968 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11005593 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092158245 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109192638 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100318966 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.127433574 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.172309106 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123906996 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.128026851 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133232265 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.077686321 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.075852108 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.068890594 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114549833 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079780802 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.088547986 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081303019 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132674718 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.082188856 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110957996 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.229096911 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080528588 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093476131 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096692448 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.070468833 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083167889 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107591309 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087078081 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080404593 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118920766 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083408274 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.127573373 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110869858 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099740403 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095123637 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081002284 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113748096 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.103169938 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.129647376 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.094792253 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.075713497 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114307427 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.103040407 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137728124 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.073428051 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081020962 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.129103038 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104129259 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132683559 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080300416 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149284905 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.14289953 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099789327 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133784582 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071123516 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08384483 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088884344 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.126046351 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084342349 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110514049 seconds)
  done (took 67.906423102 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.159591623 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.146572717 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.086863442 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.108131544 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.195434342 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.201387125 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.125375477 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.101843472 seconds)
  done (took 3.224050479 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.070556319 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.083325739 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.081267126 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.247164054 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.097101083 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.067657842 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.073209747 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.082169905 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.068680756 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.067557719 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.10292043 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.067916867 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.068642855 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.455132021 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.06676086 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.072826884 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.068562491 seconds)
  done (took 3.894503243 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.336617071 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.023365665 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.236797593 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.241229912 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.146314513 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.556377736 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.076872434 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.083418041 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.639497446 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.37305681 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.141953722 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.087934509 seconds)
  done (took 20.006600481 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.077730109 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.120876605 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.120353263 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.07501743 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.074852404 seconds)
  done (took 2.526138297 seconds)
done (took 122.632071494 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.08522899 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.17222609 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.06828566 seconds)
  done (took 2.332826763 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.121796846 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.118644293 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.118877651 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.11676034 seconds)
  done (took 2.53931712 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.076134025 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.076828856 seconds)
  done (took 2.214373918 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.222731454 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.214714566 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.09020063 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.083534521 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.079771494 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.080237797 seconds)
  done (took 2.316183391 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.073559085 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.072046724 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.072282767 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.072471165 seconds)
  done (took 2.345278517 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.168776691 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.06694759 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.069382983 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.071520829 seconds)
  done (took 2.433746403 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.08743214 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.0879881 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.116819769 seconds)
  done (took 2.351954894 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.085157707 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.083067047 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.078609961 seconds)
  done (took 2.30971374 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.112065344 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.097220157 seconds)
  done (took 2.266374239 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.081601559 seconds)
  done (took 2.145642876 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.091693426 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.098227872 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.183340667 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.150143005 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.184974244 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.170083377 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.076987085 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.078207044 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.073544019 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.072591753 seconds)
  done (took 3.236570176 seconds)
done (took 29.168755187 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.086289082 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.373444042 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.360285697 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.087063109 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.671342455 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.356664304 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.00818857 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.091346503 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.10123241 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068424187 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.085535757 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.64969757 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.000188098 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.330860769 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.984353174 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.324631752 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.652135166 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068929531 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.06863254 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069172807 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.992920923 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068648308 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069265436 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069609962 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.649924868 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.374023019 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069108648 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.329375806 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068192878 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072262767 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.357556125 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069762238 seconds)
  done (took 16.661496377 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.077292987 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.128103254 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.072925791 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.084448277 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.071016573 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070175893 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.071696693 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.06895299 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112213459 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068921945 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086687725 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068304325 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.072498553 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.069883685 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088533331 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068811981 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.070534783 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.07245103 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068637559 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069410101 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.087240328 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068451353 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069236645 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069456693 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069089094 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.081498248 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069492213 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068480966 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068914454 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072482203 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072993764 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069850693 seconds)
  done (took 4.509024556 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.129640714 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.131579618 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073453579 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.109438875 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.118379704 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070943262 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.150659851 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.091822214 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.115308278 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069339512 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.085655127 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068238727 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.103910493 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.069859742 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088844017 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068796313 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071403458 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069274921 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068593583 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069449009 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.087765493 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068621966 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069572061 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069941398 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069204528 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083221372 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069743052 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068774565 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068640039 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072666166 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.0738925 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069744614 seconds)
  done (took 4.778771877 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.071961393 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.071929117 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.078374867 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.081418217 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.066734145 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.069430987 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.070619462 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.067597443 seconds)
  done (took 2.665253214 seconds)
done (took 30.697521636 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.081372949 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.068739767 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.071584138 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.088285964 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.07416941 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.110919822 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.065637963 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.07459498 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.071770117 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.071624262 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.07314625 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.067345986 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.070072321 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.065226651 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.072064879 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.066413697 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.112096501 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.070882362 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.110432124 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.112248234 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.06863047 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.071674559 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.074877741 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.110640042 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.110913888 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.111281002 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.075095886 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.072022827 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.066585473 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.068864284 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.168530615 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.181465391 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.075151415 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.116708237 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.066088512 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.066044237 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.070339288 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.068504096 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.113096637 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.074945475 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.068583229 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.075140073 seconds)
  done (took 5.618723144 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.189843617 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.192823867 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.185743094 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.08020204 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.092445201 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.079693808 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.190697466 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.07743393 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.075775852 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.191538747 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.071725707 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.076111053 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.078733046 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.069542514 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.076210317 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.072967935 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.077400274 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.070765174 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.076448519 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.075594556 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.190189747 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.069432922 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.080154853 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.076904542 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.071072208 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.077803476 seconds)
  done (took 4.772157956 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.075286474 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.08901303 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.09242982 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.141939646 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.109455332 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.083335174 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.082771547 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.09376351 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.101353649 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.068705392 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.072578532 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.094916172 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.096972665 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.075208 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.106142037 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.085998895 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.080695252 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.069853356 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.075525023 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.102950577 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.090624582 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.086209011 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.100414483 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.088340744 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.067293346 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.07711889 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.075057252 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.083926475 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.075259906 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.079965868 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.071907407 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.071583823 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.068360409 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.080422115 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.074876479 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.105484191 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.089330581 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.080048195 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.082071 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.105529141 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.078151043 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.069623436 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.095914687 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.132903441 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.067699506 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.070232033 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.072063751 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.080115144 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.069626439 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097715079 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.08410819 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.067844754 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.08670383 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.06954822 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.06928087 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.084200164 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.069599719 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.06998272 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.079740438 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.074191142 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.08848874 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.073652677 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.089123156 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.067782609 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.079279684 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.069638596 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.070170724 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.066526133 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.102233755 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.075157109 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.118763123 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.069072945 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.066028109 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.08031828 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.078693115 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.074601929 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.067841962 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.08731605 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.079926701 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.071793392 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.078733632 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.070438988 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.070955853 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.103034235 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.066951211 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.065739332 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.06682277 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.070065127 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.071200001 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.068439224 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.080753952 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.067295351 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.071018027 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.083282529 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.067680253 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.068663984 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.070392336 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.06927308 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.067177897 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.078372027 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.071709092 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.070047941 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.080271056 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.068965501 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.071032718 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.082772585 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.077203868 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.067352389 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.06909063 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.070126374 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.06979264 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.072427004 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.071367029 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.069955807 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.07463559 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.07502022 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.073972934 seconds)
  done (took 11.413937389 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.206199471 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.193704894 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.069223745 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.188893677 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.076645518 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.118329615 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.191212689 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.130514925 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.068985625 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.070101111 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.067831106 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.138448481 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.134918792 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.144955039 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.11529072 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.069076216 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.093374714 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.143640281 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.192940564 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.187663447 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.091509768 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.07578127 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.070730815 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.070101488 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.069621102 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.077030217 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.084178376 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.076194092 seconds)
  done (took 5.355859111 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.078232157 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.084352634 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.072750461 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.092883614 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.08647624 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.069299228 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.070638056 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.070263048 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.085698101 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.07527098 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.068904889 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.072995334 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.071983792 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.069403212 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.06935972 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.075113283 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.075100626 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.067569177 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.072140996 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.073444206 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.079195103 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.154863542 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.07281295 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.068622881 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.07107314 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.068712027 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.075372261 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.078310983 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.068263948 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.101336697 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.06542134 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.072761489 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.083000808 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.069668401 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.068266607 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.069336124 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.068425177 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.068354392 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.069104106 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.066466613 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.066557714 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.073780741 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.067344438 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.073929847 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.082848018 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.076076228 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.069768204 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.073863501 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.070931407 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.065084892 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.071494466 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.071549721 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.071119206 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.076837084 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.071739498 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.070756784 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.069914559 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.096541264 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.074468397 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.067573026 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.068148619 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.066560344 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.069882578 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.076836664 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.084403151 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.069977108 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.067136559 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.068654995 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.075601201 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.082487114 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.068071843 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.073952923 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.065411038 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.068828328 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.071524942 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.071299534 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.069862044 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.067007682 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.067975712 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.068316968 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.069189778 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.068295098 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.068350502 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.07098752 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.066226279 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.066428959 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.068793615 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.06988727 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.07447097 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.067217937 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.07068481 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.069827002 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.06713424 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.071680061 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.07414305 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.071420929 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.088594261 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.076720385 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.068935942 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.066481655 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.082812211 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.070116073 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.067544285 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.071643243 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.072742493 seconds)
  done (took 9.849321263 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.092917536 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.069977098 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.088601194 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.095036414 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.078618392 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.07359303 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.082465109 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.069426613 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.085008696 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.067226977 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.076786632 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.066710783 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.081543608 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.077910678 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.069634347 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.078803257 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.070632866 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.089612222 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.083614651 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.067066845 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.077370933 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.080916442 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.081265553 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.086294651 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.085733591 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.087156621 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.080952024 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.071090821 seconds)
  done (took 4.368730271 seconds)
done (took 43.454778795 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.17225634 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.340476219 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.174116512 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.440903333 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.226160735 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.407799989 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.394815123 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.166506351 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.33865012 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.198666192 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.481160519 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.561643958 seconds)
done (took 72.062019898 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.27283183 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.31653184 seconds)
    (2/2) benchmarking "String"...
    done (took 2.394625472 seconds)
  done (took 6.810798796 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.765630104 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.162509776 seconds)
    (3/3) benchmarking "different"...
    done (took 2.211778715 seconds)
  done (took 9.236457869 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.26965422 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.910171186 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.416785489 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.164016975 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.168593265 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.562322256 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.951960555 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.631008187 seconds)
  done (took 34.902232193 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.389463787 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.368616454 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.922267079 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.958934415 seconds)
  done (took 17.784821591 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.767448242 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.426718379 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.426311762 seconds)
    (4/4) benchmarking "different"...
    done (took 2.418335132 seconds)
  done (took 12.195064304 seconds)
done (took 93.663005346 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.166044439 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.451635392 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.175630751 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.320953736 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.2333697 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.196042245 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.178067099 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.209300772 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.166038357 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.169528939 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.596125705 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.16401186 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.166490225 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.1994383 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.16718017 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.180475612 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.650709863 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.185144188 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.212236251 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.749897416 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.687528662 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.167684423 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.180333404 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.232700637 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.265309538 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.186059369 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.688685419 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.175244766 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.790509516 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.182580408 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.173170609 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.173432877 seconds)
  done (took 217.540333676 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.170147169 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.064423251 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.139468215 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.198450799 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.305250991 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.363402197 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.317319594 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.590415711 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.173017736 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.199419617 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.315334605 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.169587829 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.369888955 seconds)
    (14/36) benchmarking "dot"...
    done (took 3.163054056 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.165988217 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.267984611 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.338085945 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.368183873 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.167649998 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.358655566 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.196070453 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.169517514 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.113771826 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.253506093 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.196502635 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.230907673 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.183530047 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.180654882 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.359441173 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.279743569 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.177115215 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.22256419 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.307954531 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 3.046097311 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.191573018 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.175287659 seconds)
  done (took 183.592651856 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.368048513 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.18599647 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.240155888 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.312857358 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.924374109 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.899788448 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.177055359 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.177846593 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.172187814 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.18463057 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.177974014 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.245502596 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.714394456 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.379031899 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.173345957 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.172087332 seconds)
    (16/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.173323788 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.681763314 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.182037329 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.171152728 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.170992835 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.250698675 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.548645976 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.391786645 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.17227412 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.183901582 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.309065731 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.181106655 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.172049881 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.310178121 seconds)
    (30/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.173983312 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.173078984 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.250736108 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.310757496 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.181038973 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.255572921 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.182167913 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.665190574 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.173013901 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.171453007 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.175352524 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.23746408 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.17330019 seconds)
    (43/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.174542593 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.266402005 seconds)
    (45/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.261266252 seconds)
    (46/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.171724969 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.188516922 seconds)
    (48/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.251325808 seconds)
    (49/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.857244636 seconds)
    (50/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.175465857 seconds)
    (51/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.176137276 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.174859047 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.175997749 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.179198728 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.18080553 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.173328556 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.197876916 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.783340529 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.17317722 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.173338505 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.175487087 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.173866809 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.174668074 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.183485611 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.214870442 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.977011808 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.465244952 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.563487217 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.980881663 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.176973692 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.735481764 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.233384756 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.176958403 seconds)
    (74/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.176109938 seconds)
    (75/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.257657486 seconds)
    (76/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.174987411 seconds)
    (77/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.175012026 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.174863989 seconds)
    (79/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.178605313 seconds)
    (80/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.308213909 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.279083853 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.178887152 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.315301139 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.178061353 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.177837027 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.358172984 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.746794802 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.185666647 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.190822799 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.234626833 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.177870447 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.176146656 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.183619862 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.291263557 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.182159853 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.178859212 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.177678261 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.268878107 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.182815755 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.35506062 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.410755629 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.252811682 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.427476946 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.409915526 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.183449818 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.179044844 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.193134217 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.181078932 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.176217796 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.187981207 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.179869142 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.174994128 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.178666336 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.177897376 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.176650527 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.17965689 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.190531362 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.177365842 seconds)
  done (took 455.759656024 seconds)
done (took 861.407994304 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.882890528 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.957972174 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.790427704 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.820082555 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.795754237 seconds)
  done (took 16.359866284 seconds)
done (took 18.472181629 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.202917874 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.19787702 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.186227712 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.204553425 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.200286872 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.199661283 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.233281774 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.225336967 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.221084454 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.199186892 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.207771082 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.203004311 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.20637166 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.222492963 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.212498237 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.207907972 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.201770658 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.190497367 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.21169564 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.201581915 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.20163443 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.197788381 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.204293729 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.206978913 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.217487584 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.204424697 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.196751076 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.207370096 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.203066628 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.20670501 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.241178382 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.209103834 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.233368405 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.212594218 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.207077528 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.214852565 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.198687809 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.224609299 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.200523847 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.238732295 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.208365625 seconds)
  done (took 92.684321215 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.193651171 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.332759816 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.41122474 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.223637878 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.191268753 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.409974405 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.244339955 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.31660102 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.32235716 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.421499324 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.422267684 seconds)
  done (took 27.606155256 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.190114543 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.329970516 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.418978024 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.227401999 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.193490812 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.408014301 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.25566991 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.320699495 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.331950623 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.41152316 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.421236012 seconds)
  done (took 27.63014927 seconds)
done (took 150.031762124 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.578724024 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.220578886 seconds)
  done (took 6.915106161 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.182535909 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.203077645 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.334248521 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.191120944 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.18289646 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.184287808 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.185622175 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.184294921 seconds)
  done (took 19.760829391 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.184207267 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.186633967 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.183175932 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.186249687 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.183626869 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.183718286 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.183734974 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.184298662 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.185111609 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.183478135 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.182410768 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.186175724 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.18336023 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.18425716 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.183476821 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.183693116 seconds)
  done (took 37.064443336 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.184604841 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.184018584 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.183081497 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.184529065 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.18619078 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.185618399 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.184021429 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.191825182 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.184808853 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.186455847 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.184781965 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.186284509 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.185494784 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.184425247 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.185559068 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.187148736 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.185309158 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.186596633 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.186032602 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.183979821 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.185847795 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.184675079 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.193776815 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.184850144 seconds)
  done (took 54.575936942 seconds)
done (took 120.436901507 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.43119189 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.773292764 seconds)
  done (took 9.323291943 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.187465659 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.185275351 seconds)
  done (took 6.555674305 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.185223723 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.185774402 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.183702005 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.18490078 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.186601951 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.185102693 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.187610472 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.184693903 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.18635147 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.18604863 seconds)
  done (took 23.9725978 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.188141892 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.185905042 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.187898348 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.186511493 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.187935635 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.160795809 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.186090452 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.185743001 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.187496715 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.188662913 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.185775881 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.187697865 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.185928934 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.187842831 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.186682475 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.186332637 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.18684054 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.188469169 seconds)
  done (took 41.456039193 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.18617229 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.190222238 seconds)
  done (took 6.49509632 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.186420968 seconds)
    (2/7) benchmarking "second"...
    done (took 2.185709096 seconds)
    (3/7) benchmarking "month"...
    done (took 2.187639428 seconds)
    (4/7) benchmarking "year"...
    done (took 2.186915119 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.18828835 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.188038448 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.187008781 seconds)
  done (took 17.427643836 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.187414519 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.357506067 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.410547358 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.793225061 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.188864518 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.188546444 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 3.089926735 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.190162622 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.190646203 seconds)
  done (took 23.715274779 seconds)
done (took 131.061881276 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.034560862 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.193922854 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.477587148 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.260961972 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.269296428 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.536088664 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.214255393 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.749467096 seconds)
done (took 45.853996183 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.295593505 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.190470346 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.224394152 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.224511877 seconds)
  done (took 23.760742474 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.192452011 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.540821513 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.217858858 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.104277814 seconds)
  done (took 24.195125288 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.569346969 seconds)
    (2/2) benchmarking "read"...
    done (took 2.538880195 seconds)
  done (took 7.23121173 seconds)
done (took 64.60433393 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.188271361 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.193430932 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 2.189388092 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.187903094 seconds)
    (5/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.190723347 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 2.188798315 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.189777658 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.188116498 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.189843906 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 2.189595239 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 2.190093852 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.18992598 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.189292376 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.190583609 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.191640569 seconds)
    (16/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.190636035 seconds)
    (17/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.19059073 seconds)
    (18/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.191705174 seconds)
    (19/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.190028039 seconds)
    (20/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.192180695 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.189799961 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.190677268 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.189482291 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.18940381 seconds)
  done (took 54.682327893 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.192966847 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.189843643 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.190951189 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.188363432 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.187898595 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.18741513 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.188316904 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.18878205 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.187185873 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.668017942 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.186367622 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.187202435 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.186910792 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.186599564 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.186757664 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.187037928 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.187271242 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.186287936 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.186471611 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.187028839 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.187778435 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.185857137 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.187823855 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.185538535 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.186798421 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.186767894 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.187319753 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.186851908 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.186802778 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.186427208 seconds)
  done (took 68.228552334 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.186870984 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.185749487 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.186780604 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.187437343 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.185990091 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.18586288 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.185630959 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.185755571 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.185510574 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.171600941 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.18409009 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.184834628 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.184039806 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.183308213 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.182823175 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.183941208 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.183562051 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.184334796 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.184011573 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.183369503 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.18396254 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.185204645 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.179430645 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.17994108 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.179524973 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.180372521 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.18011242 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.179269112 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.179419211 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.179341474 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.181004328 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.178173142 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.178919672 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.178075523 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.179400149 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.17961408 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.178033096 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.183440344 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.186547628 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.178435203 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.178245299 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.179471427 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.178405908 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.179082812 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.18005812 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.1790295 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.179244184 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.179218083 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.17921295 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.180429717 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.178288612 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.179013077 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.180104489 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.179494592 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.179009206 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.179464335 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.178549173 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.178784821 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.180806355 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.178916958 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.178087106 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.178989544 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.180471791 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.183694376 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.176652749 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.180255746 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.178406738 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.178028914 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.176055795 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.179553718 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.179167676 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.177315197 seconds)
  done (took 159.145595959 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.181997632 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.181061004 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.179419481 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.184067692 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.180723559 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.17856385 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.178202991 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.182474161 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.178639934 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.180796786 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.178047342 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.18267496 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.181790497 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.179556978 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.178367394 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.181213062 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.177156091 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.181040965 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.181891008 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.183039539 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.17975656 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.185672404 seconds)
  done (took 50.091267219 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.18301989 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.179964729 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.181394082 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.179650648 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.183013419 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.180963268 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.180919732 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.181526217 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.179404395 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.179730232 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.179664804 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.185600423 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.183978197 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.181389662 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.181881945 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.183765414 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.182529467 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.182616008 seconds)
  done (took 41.382700082 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.183445971 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.180987412 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.18411424 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.185207371 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.182305541 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.184789565 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.18233211 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.186577638 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.180389238 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.180736745 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.185431995 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.184505296 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.185304751 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.184524867 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.183111377 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.187312334 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.184996002 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.18179756 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.184472769 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.181840346 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.184954771 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.184777584 seconds)
  done (took 50.159643847 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.184060456 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.185930118 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.182838161 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.186610055 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.185398092 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.182520771 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.184163968 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.184454449 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.17905062 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.179056611 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.181652042 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.17666225 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.172995165 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.170042053 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.169812796 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.169273309 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.173090025 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.166632206 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.16638653 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.16537758 seconds)
  done (took 45.662066705 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.167927052 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.165179879 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.165055586 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.164877402 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.165625134 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.163716779 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.162027698 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.163482625 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.164018229 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.164932521 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.158458538 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.159994658 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.159487675 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.157369013 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.162676373 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.160805965 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.158131269 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.156396031 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.15917525 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.158785401 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.157751876 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.158954618 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.156137585 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.159054392 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.157094491 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.157453276 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.156762998 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.15519884 seconds)
  done (took 62.595198995 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.155510315 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.157068357 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.155798527 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.156559733 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.156824285 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.156149604 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.155711587 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.157324304 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.155539197 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.156326881 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.157120129 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.15728701 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.155523134 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.15703505 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.156210396 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.156616128 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.156318194 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.157743079 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.158034432 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.157332175 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.156591547 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.13029532 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.156922567 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.15697906 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.146452898 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.156497836 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.1566837 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.158004168 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.156862671 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.156909086 seconds)
  done (took 66.753065069 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.178085544 seconds)
    (2/2) benchmarking "in"...
    done (took 2.178638597 seconds)
  done (took 6.4439457 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.156487239 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.146125708 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.156568732 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.156992208 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.158515486 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.157887817 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.155248563 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.150612642 seconds)
  done (took 19.326545616 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.157806638 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.160150083 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.157661287 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.157116385 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.158481121 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.166602956 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.158640872 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.159552314 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.160528828 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.158514342 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.162466169 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.161966724 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.16475629 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.164019937 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.158121673 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.159207315 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.161228279 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.161349306 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.162239321 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.157678996 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.162366129 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.160032667 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.159516542 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.159355939 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.158655173 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.162127003 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.17020933 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.161202011 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.160247112 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.158363179 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.166307352 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.15798965 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.160159416 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.161841845 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.159746783 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.159370873 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.166759926 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.161405537 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.159765381 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.159278414 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.163883428 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.162012874 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.163975491 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.168861779 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.160455888 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.158076029 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.161025756 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.159527961 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.153349137 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.164782006 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.169150478 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.162809432 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.161360623 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.161164731 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.162846559 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.159996458 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.160545142 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.162684858 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.168448263 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.168363379 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.16413171 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.183785763 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.170943592 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.161312548 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.161077443 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.169727929 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.183104887 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.163512254 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.164388022 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.161633017 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.167423301 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.16013842 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.161959848 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.161397576 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.174064401 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.169494082 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.161339929 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.161907361 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.161502915 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.162473795 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.163509617 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.161667722 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.161731327 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.162503098 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.172237121 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.186507719 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.162846621 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.162863345 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.164360199 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.16318107 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.165463954 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.166170101 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.161532749 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.162316927 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.164088458 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.165751987 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.162439612 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.163530999 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.163124599 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.171645305 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.16278948 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.163311807 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.166654123 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.170839288 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.162042496 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.163002901 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.165334212 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.163628329 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.172808647 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.16240204 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.163802982 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.162175265 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.164376784 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.166777743 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.163081319 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.168227524 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.173123142 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.170998316 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.164887 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.16821058 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.166509679 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.165786188 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.174093492 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.18577239 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.164226673 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.166582738 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.168724229 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.175512472 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.169038633 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.164821442 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.16773254 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.163950806 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.165394432 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.166468955 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.163741442 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.16487138 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.163600174 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.165161751 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.164811533 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.16435588 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.168335318 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.166159402 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.16861956 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.166104409 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.169338137 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.166140527 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.167818481 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.172732833 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.165590539 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.164760997 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.16581245 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.167109658 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.167734438 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.166781005 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.165697936 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.165377631 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.166022193 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.167046847 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.168404233 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.166085177 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.165608836 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.166999038 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.16884192 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.166564657 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.165961282 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.167793669 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.165952767 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.165591899 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.16756218 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.168134003 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.169555716 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.165608535 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.17090645 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.16562111 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.164344387 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.167692911 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.166112245 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.165368655 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.170775122 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.177158459 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.170844277 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.176527384 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.165864987 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.174671982 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.167909933 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.16932121 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.168224468 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.168566533 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.1670969 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.167054615 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.166690512 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.17206992 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.18808821 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.177733282 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.170165109 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.169133029 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.171357011 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.171655131 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.174304255 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.166871435 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.170146049 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.169828416 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.167572557 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.16835255 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.169535404 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.170681299 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.167905349 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.168317552 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.171597345 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.168580139 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.168178974 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.169946451 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.168020728 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.170591451 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.166233296 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.16793993 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.169737327 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.170073601 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.178210037 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.173047767 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.168267557 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.16963568 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.171499329 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.170222217 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.170285347 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.170857753 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.173078124 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.170055148 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.171609051 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.176536733 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.169976455 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.169417915 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.16955095 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.169765211 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.172016485 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.16941219 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.174592696 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.177702967 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.172393754 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.169527398 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.174429305 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.170778558 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.173026877 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.169809706 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.171215415 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.170568014 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.172825173 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.170895009 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.170152332 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.177256054 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.170338426 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.171356697 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.1704316 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.173598739 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.171740833 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.17425316 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.171291286 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.173771941 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.178676245 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.176696751 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.171088192 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.172659932 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.172645414 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.17236509 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.174345204 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.17246484 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.186221801 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.180715396 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.169689765 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.171917465 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.172223727 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.174064611 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.171903888 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.173497838 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.179288081 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.172812991 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.173876633 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.17439029 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.172509862 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.172431846 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.178320598 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.174198051 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.175960939 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.174068682 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.17312817 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.174003752 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.17208823 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.174573001 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.173180647 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.174587821 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.176100912 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.173762135 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.173364917 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.171805276 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.182982952 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.172402932 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.174665198 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.179694118 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.175170402 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.173461634 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.17391922 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.172656315 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.174217961 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.174974983 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.173450545 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.17593412 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.171096439 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.177940343 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.183450403 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.178219263 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.179805482 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.177047321 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.183835331 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.174893338 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.173479029 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.175031325 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.17777548 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.180338706 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.173544816 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.173754911 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.181926989 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.174895152 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.17680213 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.176243729 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.173155504 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.173548042 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.175628836 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.175558876 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.179376221 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.176775545 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.171262846 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.174924536 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.174475019 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.174749816 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.177485328 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.176925747 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.176462143 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.174797779 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.173837547 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.175536631 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.17490171 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.175688533 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.175346688 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.17524961 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.174355204 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.181891819 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.175706168 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.175707958 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.178478236 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.175048193 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.173068875 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.176033939 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.176104553 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.17705935 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.174210923 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.179918612 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.174391701 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.17497129 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.175431915 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.17647418 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.177349338 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.186847905 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.184206168 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.179866442 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.179004929 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.177731498 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.177489516 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.185875087 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.199332915 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.176071368 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.178727109 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.179122513 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.184221897 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.178752695 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.182998508 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.179981864 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.183637845 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.179315837 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.176992425 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.180881793 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.188782949 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.176945965 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.177782907 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.175282346 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.181502811 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.179044073 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.176978216 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.177305236 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.180402398 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.178589634 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.188190519 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.17743817 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.177599914 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.175488179 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.17764068 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.177716326 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.177058931 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.179873017 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.17983827 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.178172457 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.177881335 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.179029621 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.182857114 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.177854023 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.181979531 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.186918427 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.1777053 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.17764917 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.181932337 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.179326058 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.180270198 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.177458058 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.177664339 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.179245764 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.177814902 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.179588384 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.181152327 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.187744215 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.180663739 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.178391363 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.176984696 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.183174291 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.177703659 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.179321516 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.180850729 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.1883641 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.183404365 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.188512412 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.187602609 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.180395362 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.18059186 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.188242585 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.185960436 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.178681334 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.178240629 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.17905233 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.181551112 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.181731896 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.180132557 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.180605203 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.179470972 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.185108187 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.177993144 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.180659803 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.180094598 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.180031815 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.182303615 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.181452761 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.186857833 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.178883749 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.178960186 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.179522053 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.18302033 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.18088154 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.1831059 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.180488301 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.179462731 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.182722501 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.182677986 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.185038075 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.179547149 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.181043302 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.183362625 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.180619266 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.180880055 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.181028387 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.181053555 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.179837178 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.18560371 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.188641134 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.179574743 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.181907677 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.182271825 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.187106882 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.18210316 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.182307689 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.181825749 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.181146805 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.189053135 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.180863679 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.182255536 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.182376402 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.181809087 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.187623524 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.182972542 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.186094996 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.18300021 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.18299583 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.180648148 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.184852437 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.19030651 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.18653177 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.185858936 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.18822526 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.186555702 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.18334008 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.182935182 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.182339239 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.182910648 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.181864828 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.185464164 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.184209039 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.185550847 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.182550638 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.185210973 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.183701478 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.184121441 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.181329434 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.183265312 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.186101816 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.192475067 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.191841137 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.182840139 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.184567305 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.183616978 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.187644779 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.19525994 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.182538535 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.183437008 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.183362312 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.185468265 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.185260063 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.191568418 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.19204615 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.188600886 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.181907188 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.189955465 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.201915491 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.186573479 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.193429382 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.213749055 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.186247959 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.184205855 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.185266407 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.184939765 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.182013174 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.187896161 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.183762062 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.191340171 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.184395425 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.182388049 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.192398654 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.184830393 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.18399922 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.185407299 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.187354832 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.190374694 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.18428871 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.192603535 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.185454142 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.185640699 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.18497811 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.188280828 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.184744234 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.185403017 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.184709692 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.18784413 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.184509688 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.18480581 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.194245972 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.185450431 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.187092041 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.199487967 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.197791757 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.184479447 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.185657956 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.185646551 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.190391553 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.189056046 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.184961734 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.188561904 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.194289844 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.189479521 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.192302773 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.188615654 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.186884681 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.186858103 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.185663733 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.186560218 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.198541997 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.197255905 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.188482116 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.187309853 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.192797166 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.187048451 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.19404237 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.192355705 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.189348496 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.189289862 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.185629814 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.185752638 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.186873296 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.186438846 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.190728739 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.194286124 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.187315842 seconds)
  done (took 1298.492453268 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.187040293 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.185995415 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.18694725 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.187061528 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.18675959 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.186427594 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.186029232 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.186806631 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.186585479 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.185619897 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.187001007 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.187649912 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.187488661 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.187421971 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.186336076 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.187541229 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.186662811 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.187120817 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.187225989 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.188253487 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.188495712 seconds)
  done (took 48.043656053 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.18827926 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.187430061 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.188251992 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.187937096 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.187823663 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.185730971 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.18836702 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.187972985 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.187218786 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.189481003 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.186285292 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.188917953 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.187897174 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.188372933 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.188812559 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.188654755 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.187808562 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.188584763 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.188989922 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.188644387 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.189290486 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.189191589 seconds)
  done (took 50.258247031 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.189802006 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.178181425 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.190741827 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.18806873 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.187726567 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.188315865 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.188619834 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.192478703 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.18853247 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.190137226 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.197394089 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.196420646 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.188143348 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.193115832 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.190910099 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.19013729 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.335464303 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.189457433 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.189601874 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.190101753 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.190419406 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.197057221 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.190346216 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.189117576 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.191433923 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.190226208 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.190270504 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.189918053 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.191105489 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.192485679 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.194540342 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.190022103 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.192909382 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.193073988 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.192044363 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.191734619 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.195804087 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.190059164 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.192470388 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.191819426 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.199751757 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.213850975 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.190952173 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.191798609 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.197468984 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.191364753 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.191098634 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.195404013 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.199632467 seconds)
  done (took 109.671111047 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.191997397 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.192152072 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.191862888 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.192140315 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.191460146 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.191961431 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.192013699 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.191919727 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.192404032 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.191889406 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.191371141 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.194056055 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.19352056 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.192448811 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.191248876 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.19138319 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.194121663 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.193337142 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.189930303 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.192485131 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.192209069 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.192658083 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.192148757 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.192689656 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.192847244 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.191808036 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.191805897 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.193108449 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.191309287 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.192460623 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.192980032 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.192152698 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.193697484 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.192650144 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.194427226 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.193385804 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.193164683 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.193022652 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.192655798 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.192725827 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.193369136 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.193161516 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.193843399 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.193855468 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.193994907 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.19368526 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.194860651 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.162526666 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.194749138 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.192720033 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.193111462 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.193958448 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.194723083 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.19327037 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.192854064 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.194536037 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.193550784 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.195008721 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.194842867 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.195916262 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.193600727 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.194946614 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.19480722 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.194095755 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.194507491 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.194617842 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.195597124 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.194043606 seconds)
  done (took 151.224104696 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.195848924 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.195195278 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.19393243 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.196186282 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.194398455 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.19549694 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.195652658 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.195786379 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.195201823 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.1965415 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.195395595 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.19546797 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.194627607 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.196963919 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.195575166 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.19620631 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.195809953 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.196641957 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.196132908 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.196655179 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.196281208 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.196690414 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.19479142 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.194836047 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.196631508 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.194614663 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.196463714 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.197441906 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.195729328 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.197000674 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.195199943 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.196538037 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.196939047 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.197919356 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.195943713 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.195786915 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.197508678 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.197066838 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.196081766 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.197840625 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.19793586 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.197922805 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.198401602 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.197821468 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.197191638 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.19624783 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.198674706 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.197116681 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.196602841 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.197614079 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.196470794 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.196939311 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.197440314 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.197444622 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.197379376 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.197231829 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.19744075 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.197086378 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.19827721 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.198251475 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.198583043 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.197015655 seconds)
  done (took 138.313240213 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.196368983 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.196980662 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.198600922 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.196634557 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.196357101 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.198241672 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.197462199 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.197476487 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.199118441 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.198101023 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.197739414 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.197873881 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.198244976 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.196982638 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.198898567 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.197910908 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.197410176 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.19856124 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.199502204 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.198799424 seconds)
  done (took 46.084572674 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.199855435 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.199103507 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.197546121 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.198232055 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.198852464 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.198523002 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.198915729 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.19810017 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.19948123 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.197722041 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.199081547 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.199271118 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.199821235 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.199527314 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.198786334 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.198289329 seconds)
  done (took 37.310206908 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.198554165 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.198947603 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.199083216 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.200247214 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.198950249 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.199434267 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.199126033 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.199012005 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.199395925 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.199133499 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.199603694 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.199651986 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.20018696 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.200039493 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.198916538 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.200487004 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.199444157 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.199061747 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.200108768 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.200144588 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.199837841 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.199883827 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.200514146 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.200863449 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.200693635 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.201470797 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.19997376 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.19909452 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.201303305 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.200570963 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.201142105 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.201219506 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.200838058 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.20109803 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.199926495 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.199367477 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.200585098 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.200864095 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.201890581 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.199427348 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.20113665 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.20038759 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.20144875 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.201573314 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.200004275 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.200744122 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.200500514 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.20168542 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.202100973 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.202749715 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.200821496 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.202489134 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.201645769 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.201907763 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.202235919 seconds)
  done (took 123.153576668 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.201956721 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.203342532 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.201761929 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.201978098 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.201657651 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.202418118 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.203478257 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.203399856 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.20318408 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.201404428 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.202060991 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.201781077 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.202661915 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.203064438 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.20322893 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.203834675 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.202744655 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.201834066 seconds)
  done (took 41.777926881 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.203029619 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.202831424 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.204139256 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.203714767 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.202325131 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.202642554 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.202607236 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.203098782 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.203101312 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.203287972 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.202934669 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.203732322 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.202889547 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.203697461 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.203553913 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.204180871 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.205181601 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.203588416 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.203892009 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.20385367 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.203048296 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.2017621 seconds)
  done (took 50.605119165 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.20433886 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.202917221 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.219935086 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.226092842 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.22610663 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.238896134 seconds)
  done (took 15.45195412 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.204225986 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.205739377 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.207218352 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.204291289 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.204074349 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.20370747 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.205000889 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.20575442 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.206313792 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.204998326 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.204763526 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.203960751 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.203638629 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.205163964 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.206063614 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.205849562 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.205010075 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.20618967 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.206159644 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.20497223 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.204757691 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.205384469 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.203828964 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.205471422 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.20518584 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.204893699 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.206800432 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.205252485 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.205513097 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.206234379 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.205986023 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.206534383 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.206155947 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.205561356 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.207072471 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.204766047 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.206167414 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.205545182 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.206804999 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.204343063 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.205393876 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.206176452 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.206154443 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.207665277 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.20863545 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.206472363 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.207171674 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.206974744 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.206935394 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.19378034 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.206339517 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.206621293 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.206352134 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.206360764 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.206063878 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.206310515 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.207495454 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.208024755 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.205929916 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.207108914 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.205899797 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.207385357 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.207300882 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.207366309 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.206047632 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.206931348 seconds)
  done (took 147.714232944 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.207555559 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.206016876 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.208373193 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.207502191 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.207176415 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.208623348 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.20732368 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.206565311 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.208219131 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.207653442 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.208160468 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.208102916 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.208446783 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.208856831 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.207461412 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.207067628 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.207706953 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.207118017 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.207973302 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.209811628 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.209021232 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.208598307 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.207752361 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.207194133 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.208759151 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.210423597 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.208985869 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.208550568 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.207349917 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.209634965 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.209148316 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.207664279 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.207752481 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.210790247 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.208188965 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.211272278 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.207714248 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.207200459 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.209346603 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.209239063 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.208988405 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.207693047 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.211189728 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.209908727 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.209152786 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.208388297 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.208551189 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.208186455 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.208483871 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.209523306 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.209836109 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.209939954 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.21000425 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.209934584 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.209237742 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.211190842 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.209883976 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.20989172 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.211114873 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.208469668 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.209602716 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.209642921 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.210082172 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.207954055 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.210716846 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.211143965 seconds)
  done (took 147.918212442 seconds)
done (took 3032.615590439 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.291405321 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.364745208 seconds)
  done (took 16.795629057 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.375452673 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.250507319 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.401881944 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.330913803 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.222919352 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.218608906 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.213463335 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.216784451 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.303342265 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.212492733 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.238615394 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.213494423 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.213965458 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.216463563 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.215012429 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.213627722 seconds)
  done (took 58.199704279 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.216389229 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.219970908 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.216892379 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.215333262 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.226799665 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.292820467 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.237815662 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.221740549 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.22895746 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.254139318 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.235463936 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.222729571 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.221456994 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.218590107 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.306901987 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.262500547 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.275549976 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.291538854 seconds)
  done (took 42.507579113 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.295223285 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.217066294 seconds)
  done (took 11.659912957 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.210619469 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.228271012 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.246993734 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.237350403 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.237397546 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.208188988 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.228647178 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.220303484 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.225816602 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.230474758 seconds)
  done (took 74.454857583 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.21833714 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.220192257 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.520987085 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.221708696 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.220278407 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.239619175 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.210054245 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.241693411 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.213592446 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.21045788 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.225658647 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.5245012 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.22456296 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.212630406 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.644318042 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.225364814 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.21977064 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.244320306 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.245756653 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.221430636 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.219646801 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.216018839 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.375621395 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.907400455 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.215370869 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.218188849 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.222745626 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.210067457 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.214556971 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.212953164 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.214436161 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.213004085 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.214600286 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.2100151 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.221978604 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.221298808 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.704401728 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.230071978 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.219066326 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.303105683 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.261238816 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.223103472 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.992097863 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.218504448 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.21178885 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.217917144 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.902667336 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.311678861 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.214916278 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.377267295 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.551531794 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.232303707 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.387208536 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.370341121 seconds)
  done (took 151.879728186 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.210627395 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.540116903 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.370516249 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.214126148 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.52365155 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.429256357 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.873869625 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.262504035 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.216383536 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.431333843 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.35261011 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.321740488 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.213685103 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.213846611 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.214887208 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.213348639 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.368948857 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.284406017 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.218352907 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.214708494 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.235869167 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.374109095 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.323648901 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.218709046 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.233011674 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.430667012 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.263325609 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.323555464 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.716430699 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.213292178 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.275400906 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.686022062 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.215837191 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.212578383 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.255151943 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.317850058 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.308080396 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.216804955 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.212954312 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.214914101 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.904607654 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.415296055 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.320058434 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.348757273 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.363508779 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.428689492 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.687651187 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.211656275 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.723452171 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.387164284 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.421049294 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.43956945 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.315145556 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.217893046 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.660605712 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.214042037 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.867682281 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.444311305 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.357173487 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.322177553 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.218413559 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.214062873 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.214914705 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.459086324 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.218004213 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.312511592 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.222338664 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.214744992 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.314088902 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.321579419 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.357450008 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.443802202 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.249275082 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.946829955 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.435365259 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.387902477 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.281944651 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.443120724 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.217656719 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.215237955 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.302240754 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.816798656 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.345447751 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.465465249 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.459288389 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.242563526 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.81459367 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.21842299 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.36250415 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.392835572 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.517436923 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.367151661 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.266716703 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 3.109552461 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.2162101 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.215537539 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.295627628 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.34429469 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.408454359 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.570873537 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.45812117 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.802032583 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.236343751 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.592627695 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.325991631 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.219953894 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.871227592 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.219414004 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.426606126 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.261945994 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.222188299 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.219389739 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.388503662 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.22977986 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.216466704 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.994610026 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.278209441 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.21781512 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.394805947 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.222111982 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.465529259 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.137018491 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.453934266 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.163164494 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.248983636 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.395926329 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.366875144 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 5.513899985 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.551756241 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.468905421 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.307057818 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.450623641 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.122906928 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.220163929 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.490748482 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.221235512 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.216781242 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.385906275 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.138135631 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.36726946 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.221420911 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.553062689 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.240874288 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.274016918 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.223231724 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.471240901 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.249753533 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.269143599 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.223342849 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.349240243 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.226015151 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.149923604 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.377500311 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.224073557 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.219516845 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.822624327 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.218212026 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.367429416 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.453002802 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.234085408 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.288323036 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.71837753 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.815933141 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.307875967 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.245152123 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.592446568 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.933461676 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.351975728 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.195697706 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.710992281 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.219282384 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.459262589 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.415072891 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.227232487 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.219877599 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 3.068254996 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 6.848829193 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.220579395 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.377913066 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.050738885 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.594134778 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.429028459 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.227042342 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.270168507 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.22445394 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.960373484 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.561574969 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.218390435 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.219099786 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.220005449 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.219738863 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.220549754 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.43337519 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.25470178 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.762708315 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.359003256 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.48140729 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.529273339 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.447621561 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.259641129 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.2274066 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.505429079 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.226837203 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.283158105 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.224767658 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.232767675 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.502178639 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.230817827 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.435330661 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.440698991 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.204095314 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.270388209 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.230612178 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.224380886 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.220016453 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.355356588 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.311519358 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.227925787 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.2220554 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.258989365 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.326978798 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.405844569 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.511223099 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 3.226776703 seconds)
  done (took 962.872884261 seconds)
done (took 1320.510936935 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.225474644 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.222914619 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.221814822 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.230025702 seconds)
  done (took 31.047458309 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.221214537 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.225504315 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.22598956 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.226581225 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.22347783 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.226364541 seconds)
  done (took 15.501083911 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.222305651 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.226118128 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.223638878 seconds)
  done (took 23.823699833 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.65611393 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.635135786 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.297696191 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.367381667 seconds)
  done (took 12.107182908 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.231913961 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.224133254 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.224060256 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.224548674 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.222244994 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.224106763 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.228073849 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.224011365 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.225906901 seconds)
  done (took 22.187880494 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.447285143 seconds)
done (took 111.264119839 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.240559182 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.326407567 seconds)
    (3/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.338523336 seconds)
    (4/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.443249933 seconds)
    (5/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.521491644 seconds)
    (6/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.222619978 seconds)
    (7/341) benchmarking ("sort", Float64, false)...
    done (took 5.979030397 seconds)
    (8/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.686972286 seconds)
    (9/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.817382998 seconds)
    (10/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.385027969 seconds)
    (11/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.538998929 seconds)
    (12/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.513559327 seconds)
    (13/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.614702521 seconds)
    (14/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.440090263 seconds)
    (15/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.836892635 seconds)
    (16/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.331253313 seconds)
    (17/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.224877968 seconds)
    (18/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.301479886 seconds)
    (19/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.495323019 seconds)
    (20/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.228328596 seconds)
    (21/341) benchmarking ("collect", "all", Int8, false)...
    done (took 4.373069224 seconds)
    (22/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.112572402 seconds)
    (23/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.248945765 seconds)
    (24/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.549725707 seconds)
    (25/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.822734856 seconds)
    (26/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 3.047766076 seconds)
    (27/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.226394047 seconds)
    (28/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.286526734 seconds)
    (29/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.234516961 seconds)
    (30/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.228439483 seconds)
    (31/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.238263928 seconds)
    (32/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.333013189 seconds)
    (33/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.358210212 seconds)
    (34/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.327743446 seconds)
    (35/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.251139287 seconds)
    (36/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.24251184 seconds)
    (37/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.319931376 seconds)
    (38/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.317027417 seconds)
    (39/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.455234631 seconds)
    (40/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.306173881 seconds)
    (41/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.554414264 seconds)
    (42/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.233631121 seconds)
    (43/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.887036731 seconds)
    (44/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.379487714 seconds)
    (45/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.225948274 seconds)
    (46/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.451771505 seconds)
    (47/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.569841056 seconds)
    (48/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.233153539 seconds)
    (49/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.399673621 seconds)
    (50/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.228679995 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.637623824 seconds)
    (52/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.630879638 seconds)
    (53/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.492681684 seconds)
    (54/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.440484047 seconds)
    (55/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.278832198 seconds)
    (56/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.336329181 seconds)
    (57/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.22541407 seconds)
    (58/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.389091638 seconds)
    (59/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.191907333 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.574228304 seconds)
    (61/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.558532625 seconds)
    (62/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.230659018 seconds)
    (63/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.645994652 seconds)
    (64/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.229586594 seconds)
    (65/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.994022683 seconds)
    (66/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.195847381 seconds)
    (67/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.315504006 seconds)
    (68/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.513703085 seconds)
    (69/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.486179671 seconds)
    (70/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.232075352 seconds)
    (71/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.56572934 seconds)
    (72/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.36719188 seconds)
    (73/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.942813765 seconds)
    (74/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.404091226 seconds)
    (75/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.460647298 seconds)
    (76/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.710517177 seconds)
    (77/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.238333344 seconds)
    (78/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.825169216 seconds)
    (79/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 3.014323654 seconds)
    (80/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.02935808 seconds)
    (81/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.33695416 seconds)
    (82/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.228006365 seconds)
    (83/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 4.887699268 seconds)
    (84/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.2440525 seconds)
    (85/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.359275351 seconds)
    (86/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.319038746 seconds)
    (87/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.357678255 seconds)
    (88/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.354163396 seconds)
    (89/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.508726403 seconds)
    (90/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.866900615 seconds)
    (91/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.228736249 seconds)
    (92/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.728181979 seconds)
    (93/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.95232445 seconds)
    (94/341) benchmarking ("sort", Int8, false)...
    done (took 5.17665075 seconds)
    (95/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.231102373 seconds)
    (96/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.623283588 seconds)
    (97/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.395777067 seconds)
    (98/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.232104771 seconds)
    (99/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 3.943847795 seconds)
    (100/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.455529995 seconds)
    (101/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.237700352 seconds)
    (102/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.12747239 seconds)
    (103/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.332898993 seconds)
    (104/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.64973018 seconds)
    (105/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.306390803 seconds)
    (106/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.44564582 seconds)
    (107/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.334896269 seconds)
    (108/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.631959872 seconds)
    (109/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.190667994 seconds)
    (110/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.293705575 seconds)
    (111/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.356892329 seconds)
    (112/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.545053708 seconds)
    (113/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.245089699 seconds)
    (114/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.237622968 seconds)
    (115/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.544464259 seconds)
    (116/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.622664633 seconds)
    (117/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.243019591 seconds)
    (118/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.529600968 seconds)
    (119/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.333602549 seconds)
    (120/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 3.016884329 seconds)
    (121/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.116253147 seconds)
    (122/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.367263883 seconds)
    (123/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 3.001451053 seconds)
    (124/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.942389706 seconds)
    (125/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.428480483 seconds)
    (126/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.235262774 seconds)
    (127/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.536454382 seconds)
    (128/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 3.009326658 seconds)
    (129/341) benchmarking ("sort", Float32, false)...
    done (took 5.892887148 seconds)
    (130/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.532524701 seconds)
    (131/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.51289626 seconds)
    (132/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.245142461 seconds)
    (133/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.975131784 seconds)
    (134/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.610801282 seconds)
    (135/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.564955743 seconds)
    (136/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.525008472 seconds)
    (137/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.395532209 seconds)
    (138/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.437339554 seconds)
    (139/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.328891255 seconds)
    (140/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.253029666 seconds)
    (141/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.908216211 seconds)
    (142/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.370761176 seconds)
    (143/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.235543684 seconds)
    (144/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 5.057271517 seconds)
    (145/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.241593909 seconds)
    (146/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.361928701 seconds)
    (147/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.361963713 seconds)
    (148/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.326210005 seconds)
    (149/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.450756353 seconds)
    (150/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.230767661 seconds)
    (151/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.544810466 seconds)
    (152/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.630389364 seconds)
    (153/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.46019882 seconds)
    (154/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.307219966 seconds)
    (155/341) benchmarking ("sort", Bool, false)...
    done (took 2.447093135 seconds)
    (156/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 3.029884416 seconds)
    (157/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.237073835 seconds)
    (158/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.235373916 seconds)
    (159/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.285652356 seconds)
    (160/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.29134436 seconds)
    (161/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.413174045 seconds)
    (162/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.35171564 seconds)
    (163/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.420257304 seconds)
    (164/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.659178557 seconds)
    (165/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.33235325 seconds)
    (166/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.247542889 seconds)
    (167/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.246068935 seconds)
    (168/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.62885288 seconds)
    (169/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.478755051 seconds)
    (170/341) benchmarking ("sort", Int64, false)...
    done (took 5.886696969 seconds)
    (171/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.58854044 seconds)
    (172/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.530462014 seconds)
    (173/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.569300213 seconds)
    (174/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.418558595 seconds)
    (175/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.280326631 seconds)
    (176/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.628659924 seconds)
    (177/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.335343159 seconds)
    (178/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.139989869 seconds)
    (179/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.452839562 seconds)
    (180/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.238296481 seconds)
    (181/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.37822906 seconds)
    (182/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.251039821 seconds)
    (183/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.341769352 seconds)
    (184/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.149992533 seconds)
    (185/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.348278 seconds)
    (186/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.687380129 seconds)
    (187/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.567457187 seconds)
    (188/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.404946088 seconds)
    (189/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.256785857 seconds)
    (190/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.235450989 seconds)
    (191/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 8.710376028 seconds)
    (192/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.235015312 seconds)
    (193/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 8.786027933 seconds)
    (194/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.238119255 seconds)
    (195/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.426583977 seconds)
    (196/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.316964399 seconds)
    (197/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 3.004107705 seconds)
    (198/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.326376411 seconds)
    (199/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.502910351 seconds)
    (200/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.995421142 seconds)
    (201/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.419483232 seconds)
    (202/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.453040115 seconds)
    (203/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.239792904 seconds)
    (204/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.275668622 seconds)
    (205/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.842717042 seconds)
    (206/341) benchmarking ("sort", BigInt, false)...
    done (took 7.242317775 seconds)
    (207/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.250382187 seconds)
    (208/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.530672404 seconds)
    (209/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.239387037 seconds)
    (210/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.430919752 seconds)
    (211/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.329939937 seconds)
    (212/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.367597777 seconds)
    (213/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.3202577 seconds)
    (214/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.343373952 seconds)
    (215/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.630408628 seconds)
    (216/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.252459403 seconds)
    (217/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.443325161 seconds)
    (218/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.659836027 seconds)
    (219/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.247605335 seconds)
    (220/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.377549627 seconds)
    (221/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.248825919 seconds)
    (222/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.253003838 seconds)
    (223/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.63063148 seconds)
    (224/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.941577702 seconds)
    (225/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.488466167 seconds)
    (226/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.126957958 seconds)
    (227/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.44803154 seconds)
    (228/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.596006658 seconds)
    (229/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.557926652 seconds)
    (230/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.358990791 seconds)
    (231/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.370955983 seconds)
    (232/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.14289008 seconds)
    (233/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.497365087 seconds)
    (234/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.509623336 seconds)
    (235/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.632683433 seconds)
    (236/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.527742034 seconds)
    (237/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.238762367 seconds)
    (238/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.543896839 seconds)
    (239/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.197435202 seconds)
    (240/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.443108984 seconds)
    (241/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.405905126 seconds)
    (242/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.364338102 seconds)
    (243/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.318889748 seconds)
    (244/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.4588409 seconds)
    (245/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.174757066 seconds)
    (246/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.305092958 seconds)
    (247/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.843331667 seconds)
    (248/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.530426712 seconds)
    (249/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.349562008 seconds)
    (250/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.24203902 seconds)
    (251/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.343844318 seconds)
    (252/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.314565931 seconds)
    (253/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.14379963 seconds)
    (254/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.243402877 seconds)
    (255/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.563859816 seconds)
    (256/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.452753638 seconds)
    (257/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.33859097 seconds)
    (258/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.319867191 seconds)
    (259/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.561806476 seconds)
    (260/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.276153646 seconds)
    (261/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.252059789 seconds)
    (262/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.317100471 seconds)
    (263/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.362747025 seconds)
    (264/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.24334379 seconds)
    (265/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.372484122 seconds)
    (266/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.547967228 seconds)
    (267/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 3.005070658 seconds)
    (268/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.334546642 seconds)
    (269/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.315087124 seconds)
    (270/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.316883441 seconds)
    (271/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.365604206 seconds)
    (272/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.577075042 seconds)
    (273/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.254647225 seconds)
    (274/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.443163615 seconds)
    (275/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.468045986 seconds)
    (276/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.709158799 seconds)
    (277/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.781218617 seconds)
    (278/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.240915926 seconds)
    (279/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.362458438 seconds)
    (280/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.685611319 seconds)
    (281/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.356028546 seconds)
    (282/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.252495813 seconds)
    (283/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.739899263 seconds)
    (284/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.43988854 seconds)
    (285/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.360496656 seconds)
    (286/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.241855474 seconds)
    (287/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.267828328 seconds)
    (288/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.457464409 seconds)
    (289/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 3.082575977 seconds)
    (290/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.761593315 seconds)
    (291/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.21329054 seconds)
    (292/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.310618034 seconds)
    (293/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.24241058 seconds)
    (294/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.649769858 seconds)
    (295/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.239934705 seconds)
    (296/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.337325802 seconds)
    (297/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.622293157 seconds)
    (298/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.426986625 seconds)
    (299/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.35159073 seconds)
    (300/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.374985747 seconds)
    (301/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.256645955 seconds)
    (302/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.244902225 seconds)
    (303/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.406838637 seconds)
    (304/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.95748983 seconds)
    (305/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.436607619 seconds)
    (306/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.719686262 seconds)
    (307/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.644874299 seconds)
    (308/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.325747163 seconds)
    (309/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.595792298 seconds)
    (310/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.546398289 seconds)
    (311/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.241208936 seconds)
    (312/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.314312156 seconds)
    (313/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.242273055 seconds)
    (314/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 5.017284178 seconds)
    (315/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.161885264 seconds)
    (316/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.687529239 seconds)
    (317/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.518466516 seconds)
    (318/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.254023598 seconds)
    (319/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.451057565 seconds)
    (320/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.324004294 seconds)
    (321/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.449577796 seconds)
    (322/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.592523243 seconds)
    (323/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.146655354 seconds)
    (324/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.240843096 seconds)
    (325/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.569618618 seconds)
    (326/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.560046461 seconds)
    (327/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.400450495 seconds)
    (328/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.435726923 seconds)
    (329/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.451533476 seconds)
    (330/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.528341018 seconds)
    (331/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.246127925 seconds)
    (332/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.175919955 seconds)
    (333/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.36101109 seconds)
    (334/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.64368399 seconds)
    (335/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.215884593 seconds)
    (336/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.511394637 seconds)
    (337/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.26350578 seconds)
    (338/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.670742612 seconds)
    (339/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.387938232 seconds)
    (340/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.37540684 seconds)
    (341/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.643520797 seconds)
  done (took 1219.106692824 seconds)
done (took 1221.362322615 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.261436038 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.250223879 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.748771687 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.260138724 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.25000538 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.252655785 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.762747997 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.277668221 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.268263745 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.760524912 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.26021003 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.252346059 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.267475173 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.281807153 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.263386237 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.266947036 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.2566728 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.278199182 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.284009669 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.256393242 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.298589828 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.256915944 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.250928716 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.301874132 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.252027601 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.266065017 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.263649284 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.30135242 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.298655549 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.255351588 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.254468502 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.600539755 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.305113207 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.252680661 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.264115907 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.26668889 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.258626916 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.265896295 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.260849063 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.265350836 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.252078604 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.263224215 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.255683216 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.253147862 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.252095312 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.249778306 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.255390114 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.378309182 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.264384313 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.588083553 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.306310752 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.262604638 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.299326969 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.255209716 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.254561523 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.255231455 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.300533304 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.25625847 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.256113498 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.588996559 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.345792868 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.264609442 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.587331955 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.319960171 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.263088312 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.259607355 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.251083906 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.262379137 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.604066552 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.803854583 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.284388962 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.270150347 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.256301173 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.255498712 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.263932604 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.759412252 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.267909526 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.832625125 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.278564725 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.269055518 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.263254785 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.256319872 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.254670061 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.269233893 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.266798529 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.25378512 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.257892339 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.257622472 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.268951735 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.606530454 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.301388552 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.751130677 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.264745162 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.266512267 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.262661455 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.829415385 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.275896616 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.263326803 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.258780445 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.605521526 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.297986496 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.268484527 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.256494578 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.263761761 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.369863889 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.265184265 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.27019945 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.25093637 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.275291984 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.261942093 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.256868825 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.267526188 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.275064309 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.28967389 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.272487631 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.254639046 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.264290463 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.261169933 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.267030428 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.261304926 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.262489069 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.264999129 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.256133406 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.305574132 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.26500256 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.267380241 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.369599822 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.262605213 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.381963517 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.270808615 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.263535562 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.254981087 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.589228414 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.305483901 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.275066175 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.261804645 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.280807128 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.277164532 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.273046433 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.257571105 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.270107942 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.261648758 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.307654728 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.253580022 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.281467931 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.30786594 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.271772463 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.261564897 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.26863079 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.29470592 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.275917601 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.260602711 seconds)
done (took 354.167071096 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.295413143 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.247922986 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.323522651 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.246632131 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.3151129 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.302666459 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.245546028 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.248854769 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.247119679 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.628592508 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.250898407 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.256086403 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.248638534 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.246553348 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.298976902 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.248125669 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.248514487 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.478815046 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.251174781 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.305018926 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.247652029 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.246168238 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.24691798 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.63775553 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.244805574 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.245147703 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.307727881 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.248259039 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.487139864 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.248092392 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.249345327 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.490767089 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.308975234 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.260122627 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.256796474 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.256876412 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.313957308 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.259237056 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.297310847 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.297265293 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.326256671 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.284912599 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.248949024 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.248455484 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.253641308 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.251194603 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.250481361 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.283086213 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.249760981 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.25553424 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.482630663 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.255582844 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.257052976 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.249391057 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.25241548 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.266782732 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.24945673 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.251988007 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.309035345 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.248925829 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.296832579 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.667215322 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.632402794 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.249460795 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.24858308 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.251311185 seconds)
  done (took 209.081206593 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.320030173 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.338353834 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.31823948 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.255907934 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.304918744 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.319336373 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.257036559 seconds)
  done (took 18.287309748 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.258671907 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.251214465 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.276950724 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.273307746 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.250386098 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.3891394 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.264440247 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.259622825 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.275498093 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.253558609 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.589308525 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.277079634 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.257290601 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.252637861 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.262596011 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.282205385 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.252092175 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.250450906 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.34732704 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.332702353 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.255062516 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.258959253 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.281605404 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.260887252 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.252760837 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.251419069 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.2511305 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.259616732 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.251248187 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.252072241 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.256891809 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.264488625 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.252276155 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.251225875 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.25343301 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.251661749 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.250939469 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.255610935 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.252809428 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.25162237 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.25138508 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.252072358 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.252053754 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.253741483 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.252120716 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.275608797 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.249761857 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.252730619 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.254481563 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.251358078 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.282451938 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.253795674 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.254747605 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.26064462 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.294630357 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.259362367 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.253838054 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.254566158 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.253240836 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.255205937 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.253442963 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.33242765 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.27702588 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.251895824 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.276551962 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.292343403 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.254192372 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.253619616 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.251494311 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.2788383 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.252552557 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.276847529 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.257122189 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.354800693 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.255965393 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.394818801 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.27608271 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.256970647 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.259416007 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.252033603 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.262226123 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.251246843 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.259105173 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.262514075 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.258936652 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.253665053 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.254097522 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.256688075 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.260775602 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.254182812 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.2997119 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.253522445 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.253860067 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.355396567 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.255175348 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.354930869 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.280153106 seconds)
  done (took 242.503928309 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.258896672 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.255396558 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.268088614 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.255219689 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.255056508 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.259323366 seconds)
  done (took 15.73288089 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.256191383 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.259720717 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.256715395 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.255960983 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.255011478 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.254889967 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.257510997 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.25724503 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.257645393 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.256500998 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.25748633 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.259813023 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.258204469 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.257787853 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.256778651 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.255421947 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.254677265 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.258263457 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.257085709 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.254819939 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.504494817 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.253789769 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.257954312 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.266906825 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.259408252 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.25698174 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.26521553 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.257698666 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.254646262 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.263878016 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.257587825 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.256344683 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.269435893 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.262906624 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.260186256 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.266939416 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.262698071 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.259796432 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.257939696 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.256186281 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.258229421 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.257381779 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.258170739 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.259129613 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.261367252 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.273230871 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.265326612 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.266883332 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.258826127 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.259152497 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.260835427 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.257105507 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.256442603 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.260373813 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.267833029 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.261315653 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.266034265 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.256943548 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.256828953 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.269842951 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.264057227 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.258274408 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.259215721 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.260753696 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.264802737 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.259953969 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.268036042 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.261606034 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.257751348 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.259041336 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.26010419 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.260904149 seconds)
  done (took 166.13698341 seconds)
done (took 653.916239002 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.351156356 seconds)
  done (took 9.533737126 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.277171641 seconds)
  done (took 9.557539809 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.528282117 seconds)
  done (took 12.74262257 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.286432096 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.288420149 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.273569607 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.262895609 seconds)
  done (took 31.309502378 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.609194416 seconds)
  done (took 9.793625642 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.273137936 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.257125192 seconds)
  done (took 16.780620926 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.260355262 seconds)
  done (took 9.44471222 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.360063047 seconds)
  done (took 9.584154286 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.278170071 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.280746139 seconds)
  done (took 16.762249127 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.260551538 seconds)
  done (took 9.444413817 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.037790537 seconds)
  done (took 10.310366135 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.264266785 seconds)
  done (took 9.466535019 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.334388789 seconds)
  done (took 9.518823162 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.215278833 seconds)
  done (took 10.400003996 seconds)
done (took 176.831232615 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.266907074 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.259330006 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.258600298 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.258683666 seconds)
  done (took 31.228370978 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.295056664 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.294453271 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.304162821 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.296500847 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.285775792 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.287227523 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.294649222 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.295216283 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.28635006 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.29372625 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.294556771 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.293832805 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.295549114 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.30640686 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.302343743 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.292762216 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.293160778 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.295853821 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.287206648 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.306542508 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.295642053 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.293645988 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.260183653 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.262550388 seconds)
  done (took 57.198483326 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.453268223 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.326169372 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.414893874 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.307887984 seconds)
  done (took 11.687008968 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.259953022 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.323412464 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.313899883 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.309152312 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.312389997 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.366883511 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.314341711 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.400012076 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.388968292 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.384818875 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.268662002 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.283686049 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.28661484 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.308700346 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.364713538 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.260792717 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.261229991 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.376922829 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.322125169 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.437843767 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.261755074 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.315581519 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.313515508 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.313686455 seconds)
  done (took 57.935195262 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.264182843 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.271992587 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.27095457 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.263676839 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.265310592 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.26346082 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.269685184 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.264492366 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.286653321 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.264657063 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.264089703 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.268160022 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.271011291 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.262781002 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.263819149 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.277799355 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.278005402 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.263811533 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.26815375 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.269922736 seconds)
  done (took 47.558331039 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.262482731 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.108608642 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.612677965 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.513580528 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.260206061 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.265628782 seconds)
  done (took 34.210480429 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.276192435 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.280741831 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.270334907 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.286019912 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.312933219 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.268946893 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.321578327 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.425745075 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.269722699 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.320052805 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.281530028 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.273156596 seconds)
  done (took 29.77574434 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.26165042 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.266195669 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.264796066 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.298372229 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.275181034 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.270454642 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.271989585 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.263033453 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.277273955 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.284511311 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.270936755 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.27441125 seconds)
  done (took 49.469003227 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.479918464 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.488842258 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.46878236 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.86336205 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.592450152 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.2507757 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.550453895 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.486673565 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.988799725 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.003697469 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.567245294 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.254339647 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.214962137 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.193405804 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.165672828 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.510690898 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.268181864 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.124445269 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.531133222 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.320546085 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.270136253 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.269381755 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.269658432 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.576555673 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.601764402 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.268870014 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.479718083 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.283307453 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.266278752 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.534605447 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.901415441 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.320582768 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.471205963 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.528184982 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.617683611 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.328495001 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.373920743 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.456351548 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.311289107 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.302648666 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.277960112 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.279219936 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.814557486 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.283413853 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.540348984 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.269237922 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.272299224 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.346316676 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.193392445 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.663282121 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.384487027 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.266517203 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.304043487 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.705756343 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.387309769 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.513869418 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.273670907 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.456929284 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.32386926 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.60131926 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.384270023 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.376276704 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.482728456 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.193983287 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.695693724 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.395506851 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.272881232 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.276751359 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.970792373 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.513299179 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.351392093 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.669235445 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.029032225 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.269847281 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.271468622 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.314611684 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.36616657 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.268582564 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.568425408 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.244154188 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.196233913 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.368885743 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.670536866 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.275499186 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.270366066 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.27677977 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.118673028 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.197170887 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.368889036 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.596725793 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.595056707 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.26951859 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.271400281 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.292319159 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.27401044 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.218350548 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.846261431 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.337890539 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.198345264 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.836402435 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.901860833 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.239791814 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.769146829 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.316128585 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.54034864 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.419528016 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.677538993 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.481340781 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.519368109 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.806459655 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.275501761 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.83072824 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.353145129 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.347416275 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.271515666 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.832742874 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.45627649 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.799798063 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.389630817 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.272657974 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.201587964 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.28334494 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.477432404 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.904273504 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.328014346 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.273204605 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.277446933 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.275859875 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.275645217 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.381443355 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.288058724 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.579530349 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.35416984 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.274754499 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.209695914 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.277430186 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.571265139 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.969455672 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.330595156 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.534403192 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.550498476 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.976062755 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.870841139 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.316931548 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.550306411 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.35269842 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.347364808 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.855283681 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.396572063 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.371188783 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.273125705 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.397219775 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.27836853 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.276891552 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.69838597 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.689571893 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.703361229 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.318531338 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.275553194 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.272179762 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.465739395 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.516978691 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.380388013 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.298263744 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.279351031 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.359392849 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.501336967 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.273161514 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.201043652 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.519699908 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.511125875 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.579402156 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.691114957 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.383014209 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.354121812 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.286038575 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.488165985 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.357193415 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.949767248 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.825780964 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.495618192 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.858925495 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.2414057 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.917228494 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.612227535 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.659444035 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.293096369 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.728811608 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.459506658 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.978769072 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.305212453 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.806002339 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.201120506 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.280264803 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.610844141 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.225258055 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.597931933 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.440852563 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.292756206 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.279247741 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.277407624 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.282890315 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.228252838 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.384819039 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.345696338 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.347300619 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.204651212 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.943997297 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.316779304 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.278562602 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.27963105 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.65300647 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.111736959 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.230342248 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.277927208 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.352536879 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.027288004 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.828861442 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.280857938 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.279420388 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.88047245 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.283053188 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.867589813 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.279339219 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.166355404 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.307832994 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.61112922 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.980073078 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.580977934 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.358920494 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.351140548 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.277853795 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.27870149 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.979307809 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.287041712 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.978695725 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.581290736 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.560671309 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.734969392 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.341383798 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.490084507 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.293583887 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.2796138 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.82551606 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.305740507 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.281305609 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.481542889 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.795426341 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.688880099 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.246253247 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.364615757 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.279331453 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.553812389 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.290257499 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.908814162 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.978017057 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.288792515 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.279374438 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.529612298 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.964321601 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.280720643 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.25614214 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.286361422 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.493178858 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.482030868 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.544899182 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.576981501 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.73732334 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.205550226 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.285700395 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.30710342 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.522903044 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.279301965 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.316813664 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.727700902 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.388165894 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.71027758 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.572816318 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.742917488 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.915605982 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.553142007 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.350235103 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.290893779 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.94577969 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.417615327 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.214028732 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.397375677 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.205918275 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.006377984 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.573506936 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.297274268 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.556592782 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.264718166 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.632073521 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.583457767 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.613088997 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.329723794 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.30902224 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.281358428 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.317402178 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.281274771 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.482284193 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.394919973 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.291111508 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.84467762 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.319560431 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.327395977 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.289092784 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.813458212 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.30534261 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.284962882 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.97775683 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.307011952 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.402093518 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.354985445 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.063348555 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.940919007 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.307425426 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.239452036 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.928425138 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.558345952 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.344949552 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.73184977 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.313768374 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.685602803 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.282089673 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.493526214 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.2867709 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.874006632 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.329771354 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.54510745 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.234080874 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.495574393 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.477022433 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.304456766 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.288561802 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.210626228 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.389332386 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.167278866 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.279062029 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.287160229 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.965393068 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.757084831 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.498665937 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.780892544 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.108992126 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.286312435 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.696425924 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.702440474 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.922306227 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.317844853 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.285432047 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.691946389 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.420685948 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.684784514 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.562675183 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.292956536 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.308985115 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.497575607 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.408035203 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.20494792 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.776048241 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.87106737 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.984498407 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.295340161 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.488705598 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.691037584 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.587272069 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.319788568 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.357434473 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.690639441 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.560068749 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.360077658 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.21306134 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.282933576 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.682340561 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.804215162 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.38223232 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.5265247 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.593659496 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.94358244 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.92562372 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.758115395 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.75558226 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.699614695 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.699695309 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.489953144 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.644506007 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.606793589 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.875640043 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.698704935 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.501550541 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.38126154 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.555525373 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.151950787 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.995748222 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.530753131 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.29080006 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.215218435 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.493612222 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.295028101 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.810825401 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.813307661 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.535233446 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.621822392 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.765610053 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.827481108 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.480344076 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.310361101 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.254663002 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.31302702 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.309343855 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.28847573 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.779129606 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.576738741 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.301935926 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.228703425 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.960505639 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.214628343 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.500309621 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.485816963 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.322239031 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.845915081 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.627308137 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.398224608 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.599588195 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.550425603 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.322531054 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.213865763 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.06893626 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.235284977 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.383166929 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.714474406 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.305026742 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.290190363 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.492096867 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.217831497 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.332421258 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.29635026 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.479546125 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.864599547 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.567702316 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.419293862 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.521114817 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.584488221 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.191460087 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.317984989 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.560402871 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.217487414 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.947241729 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.968394081 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.328819312 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.362295289 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.287081083 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.29303167 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.55999566 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.691558703 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.388285485 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.023506795 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.320443306 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.314821171 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.696201448 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.384402116 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.291487333 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.293259093 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.803582187 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.523132096 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.289650053 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.258917159 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.504040819 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.363110785 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.486416395 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.36666815 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.804315826 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.295743436 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.19626127 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.393039423 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.244731408 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.291539719 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.023379725 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.351596349 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.291143692 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.574280776 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.922780542 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.494247744 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.684529829 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.226483437 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.52165219 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.333062553 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.295355809 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.291450399 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.682953761 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.600049261 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.289824955 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.568859557 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.34442261 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.297345045 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.955108781 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.259429951 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.290551788 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.070597667 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.28574983 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 5.061483495 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.690236891 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.296011986 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.38042305 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.293213284 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.220333965 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.290335056 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.459666272 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.291991105 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.296521034 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.663519868 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.684260224 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.386134392 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.299111464 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.295901527 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.300811848 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.506599544 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.806114808 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.30910979 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.992390944 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.496912069 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.295068018 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.788363078 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.758933078 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.564952655 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.333587682 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.492387684 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.526807933 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.865695634 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.496417314 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.270150852 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.519836321 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.29628456 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.565252494 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.568888599 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.296186934 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.507200125 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.923377512 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.578359337 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.648758808 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.615032945 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.366380385 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.493857103 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.306652157 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.348524361 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.297596893 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.569852509 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.355686682 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.29492137 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.303724262 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.856817374 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.015817493 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.763748098 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.442003968 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.695162726 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.168109012 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 5.050583087 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.298768162 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.222434683 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.293318396 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.318610581 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.299048209 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.222068683 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.075095117 seconds)
    (567/608) benchmarking "2d"...
    done (took 3.023377892 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.509106459 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.607424121 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.222023612 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.499189165 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.900240213 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.224588328 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.266500772 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.313697072 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.541567915 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.224564946 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.298383473 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.250576474 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.65206364 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.045947196 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.565503081 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.297546341 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.240630654 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.301530574 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.298641194 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.296476613 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.382810227 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.296586285 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.414596704 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.569584731 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.756694523 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.407230443 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.936211994 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.090887606 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.234912944 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.339581605 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.855315359 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.866994155 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.649628766 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.429236586 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.086145102 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.242004776 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.29925835 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.312904851 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.541682667 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.301159281 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.299233518 seconds)
  done (took 2335.819748081 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.308143877 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.33004356 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.36910359 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.424707549 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.422911848 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.393575124 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.363514754 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.385764132 seconds)
  done (took 61.219143206 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.296715013 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.552273923 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.746332893 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.308093472 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.332651089 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.370619174 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.550215571 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.344888003 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.310276175 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.314773617 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.309239166 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.311803357 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.3093325 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.355898679 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.334626328 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.607141945 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.334648647 seconds)
  done (took 84.97910132 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.365665834 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 11.39537102 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.314121894 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.121718119 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.369189211 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.646466198 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.313354412 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.314223706 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.675427555 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.614797567 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.340658672 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.326024093 seconds)
  done (took 98.08434835 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.313446111 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.312868535 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.310623047 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.311784071 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.312304767 seconds)
  done (took 13.794296371 seconds)
done (took 2915.207810994 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.556749291 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.418809487 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.399461592 seconds)
  done (took 7.052272021 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.453535341 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.502694809 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.616727506 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.622536496 seconds)
  done (took 12.434601875 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.594795779 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.678858105 seconds)
  done (took 7.506909721 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.753639837 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.321470618 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.715789438 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.314041197 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.313237711 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.3138623 seconds)
  done (took 24.180566628 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.313769292 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.311570235 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.312533352 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.31194535 seconds)
  done (took 11.484060752 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.31353511 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.096822815 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.31434334 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.329057827 seconds)
  done (took 23.287022672 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.519096914 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.312108813 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 3.07817856 seconds)
  done (took 11.143879101 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.935336721 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.756576637 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.92878233 seconds)
  done (took 10.854656079 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.458503804 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.152227166 seconds)
  done (took 8.842783156 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.452570527 seconds)
  done (took 4.684261145 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.145239105 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.625221923 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.787722459 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.811531917 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.894192833 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.529847259 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.657634282 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.604128098 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.697972794 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.724781773 seconds)
  done (took 29.713859358 seconds)
done (took 168.76613357 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.771247445 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.338411788 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.523576843 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.695981398 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.561273387 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.524660732 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.615380494 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.68890024 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.377804626 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.359319754 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.693561814 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.557614809 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.554887529 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.338595341 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.560943983 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.339718286 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.562838946 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.797077546 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.374185657 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.622283466 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.624762794 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.344219238 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.535132138 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.361066357 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.562417157 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.478954339 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.963615759 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.335522157 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.526524713 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.977505934 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.477133458 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.770563269 seconds)
  done (took 184.051295621 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.315994841 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.313754363 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.316463805 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.314452976 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.757025381 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.314538528 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.314989603 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.313054731 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.567371047 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.557170507 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.315354778 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.74863229 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.316068604 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.315148552 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.315418117 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.315010683 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.688443227 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.312805788 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.314691353 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.315300105 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.314546312 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.617159771 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.333535562 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.63467163 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.674245433 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.313976408 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.315245106 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.315779674 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.315225055 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.314985327 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.315535916 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.314268625 seconds)
  done (took 223.059013677 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.319192174 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.315551356 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.314814837 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.314807358 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.317967062 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.318192929 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.316561774 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.315699348 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.027969725 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.007458708 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.320198242 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.320544645 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.322122024 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.316235604 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.323708756 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.314768139 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.321895267 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.31522766 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.316880031 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.320675074 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.31804874 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.182586947 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.319149921 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.207241584 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.319233726 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.321900032 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.316276573 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.315462517 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.317648571 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.315411426 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.319010774 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.317578317 seconds)
  done (took 235.570631664 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.557440153 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.318103716 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.319509002 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.331413007 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.320245042 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.319194782 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.32265525 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.566557119 seconds)
  done (took 23.297583643 seconds)
done (took 668.22567185 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.710830792 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 3.08399178 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.456786159 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.351540734 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.59124091 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.386302778 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.339423123 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.406125881 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.979373777 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.419149692 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.739385943 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.348257101 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 3.047180388 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.37589641 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.460495248 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.401171644 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.687370299 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.960357327 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.474359638 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 3.00158271 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.54664152 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.264693466 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.42348328 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 3.014931217 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.746222966 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.286701787 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.357579488 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.693836252 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.349946439 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.579324333 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.047916753 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.610832001 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.360625429 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.343428728 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.395887644 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.386356487 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.535707585 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.356306097 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.459380296 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 3.061434462 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 3.001479372 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.872243528 seconds)
  done (took 119.156688058 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.331834768 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.332730138 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.330368231 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.330971245 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.333459619 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.331562034 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.332151182 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.334213566 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.332699429 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.331539427 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.332882715 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.332812922 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.333592801 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.332742129 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.332457774 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.333731781 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.334332229 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.331888971 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.331058422 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.333778364 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.333168387 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.334054946 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.326187629 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.332942701 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.334441908 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.334288036 seconds)
  done (took 62.897886702 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.322626775 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.474262447 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.619609543 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.354863941 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.324503199 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.32812831 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.352873685 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.334469864 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.327654519 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.32885307 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.419164456 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.330387949 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.338498184 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.618612535 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.353340018 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.325918937 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.32681518 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.32631591 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.482654499 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.343296584 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.358279769 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.333794601 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.356537359 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.340120039 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.327901789 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.325618277 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.331131547 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.732883885 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.33955852 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.41892004 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.384192325 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.360097361 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.682782566 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.627227691 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.392843956 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.332619838 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.3244273 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.461477517 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.339944504 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.324973548 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.351926217 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.332831137 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.61778351 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.84113448 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.340442751 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.323656411 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.726054353 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.473772097 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.374995557 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.339567915 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.623850572 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.357570725 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.324980769 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.326301012 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.361182091 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.337784296 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.325066261 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.576514905 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.340615384 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.354634956 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.333903266 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.326989133 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.490625091 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.339097638 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.479431284 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.339883669 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.331732183 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.327895147 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.622004404 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.358821491 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.831471552 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.340533513 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.325742671 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.420244988 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.482363206 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.759471402 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.341193533 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.494655351 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.700611989 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.364915945 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.339027015 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.718283798 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.368924679 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.337378584 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.328049288 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.329091278 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.326809759 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.373185711 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.353600299 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.757104024 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.840115615 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.593804201 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.368440081 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.341901875 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.328510534 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.579773066 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.339666607 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.325837908 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.613535899 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.861045365 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.34217147 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.334879738 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.823557247 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.341766243 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.356172241 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.340072537 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.631538364 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.360499217 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.374005671 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.329560278 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.334972505 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.333018094 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.359574523 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.339185981 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.32623695 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.81413681 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.480806076 seconds)
  done (took 286.28528298 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.331520629 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.326275938 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.328412575 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.326573029 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.328350416 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.330186868 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.326440955 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.329865854 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.329112827 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.328109488 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.328068851 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.329129528 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.330537339 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.330417926 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.371619759 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.332698357 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.817604053 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.332159935 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.32937751 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.328261498 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.898881029 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.333254626 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.329068901 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.325677662 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.332626756 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.331080349 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.334069699 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.366621232 seconds)
  done (took 180.622867532 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.331932072 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.377440565 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.34453438 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.379154637 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.34096661 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.330726248 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.351296774 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.345692268 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.335645228 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.328618018 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.33067909 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.356884855 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.339452189 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.407417435 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.362114742 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.362246446 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.447672011 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.336791568 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.330594507 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.329644526 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.37814023 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.351615384 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.357282706 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.38510287 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.343816064 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.377147605 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.349701906 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.332476255 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.332941715 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.424364785 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.35402494 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.360939981 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.365225184 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.347162283 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.423406787 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.42947674 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.412592948 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.35983031 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.335439862 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.333129466 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.330779915 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.337468065 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.379970843 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.343965188 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.334104659 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.430626631 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.354425895 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.330772534 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.354812299 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.32821484 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.344283668 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.346287223 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.364756667 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.429769326 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.38335155 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.359674437 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.356996627 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.354826995 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.33184402 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.407168557 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.34753578 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.423139157 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.359272312 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.341507321 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.335538037 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.338626045 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.380730644 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.36959959 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.411324448 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.341553026 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.406666055 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.387068669 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.342924179 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.332602624 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.334440187 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.380087901 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.419314495 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.388694926 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.394841599 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.369969947 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.346901591 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.334218108 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.340511477 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.361829438 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.341377923 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.425267594 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.433007944 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.342112605 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.333441225 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.332366436 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.335908802 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.357432096 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.390931767 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.375526101 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.428685305 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.370626006 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.371725874 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.346194048 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.347780095 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.342124865 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.365084778 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.346673042 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.349258269 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.680755069 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.370112025 seconds)
  done (took 250.657248179 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.699766966 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.389361758 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.406533408 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.624396782 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.731418367 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.440172938 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.375698039 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.390750071 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.392576684 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.504693423 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.444478324 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.430112229 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.369651826 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.358072814 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.388096964 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.395296297 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.414134372 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.680090383 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.480514328 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.124977664 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.379748994 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.6457907 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.673475056 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.728822286 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.421815192 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.778281275 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 3.005362958 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.47615469 seconds)
  done (took 75.408531752 seconds)
done (took 977.256101148 seconds)
SAVING RESULT...
DONE!
