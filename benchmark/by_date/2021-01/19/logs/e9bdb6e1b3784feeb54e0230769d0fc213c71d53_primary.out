cset: moving following pidspec: 2830
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.795457467 seconds)
loading group "shootout"... done (took 1.131699341 seconds)
loading group "string"... done (took 0.669374017 seconds)
loading group "linalg"... done (took 8.606609835 seconds)
loading group "parallel"... done (took 0.165592872 seconds)
loading group "find"... done (took 3.048121047 seconds)
loading group "tuple"... done (took 2.142866428 seconds)
loading group "union"... done (took 14.931712894 seconds)
loading group "dates"... done (took 1.453340676 seconds)
loading group "micro"... done (took 0.220798781 seconds)
loading group "simd"... done (took 4.789004423 seconds)
loading group "io"... done (took 1.082859111 seconds)
loading group "random"... done (took 9.54243165 seconds)
loading group "problem"... done (took 1.518883373 seconds)
loading group "array"... done (took 25.266656602 seconds)
loading group "misc"... done (took 1.79071157 seconds)
loading group "scalar"... done (took 43.716086435 seconds)
loading group "sort"... done (took 3.388888921 seconds)
loading group "sparse"... done (took 12.877701665 seconds)
loading group "collection"... done (took 18.642426379 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.450669712 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.11638829 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.164461535 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.114556176 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.213091058 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.122026276 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.130107643 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.085633309 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.909109035 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.158841701 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.118964367 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.43269859 seconds)
done (took 5.490569921 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.189645666 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.251866433 seconds)
    (2/2) benchmarking "String"...
    done (took 0.165674714 seconds)
  done (took 1.686628662 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.095545756 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.064108501 seconds)
    (3/3) benchmarking "different"...
    done (took 0.069685274 seconds)
  done (took 1.497546091 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.068235587 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.140017729 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.067787527 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.067955611 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.069343259 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.068340683 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.06761881 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.067639458 seconds)
  done (took 1.821944822 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.075779169 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.070733072 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.068371053 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.070580265 seconds)
  done (took 1.552614762 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.068902083 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.126185067 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.06746232 seconds)
    (4/4) benchmarking "different"...
    done (took 0.067605469 seconds)
  done (took 1.592546503 seconds)
done (took 9.695530651 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.163682654 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.843362908 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.868006563 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.148983186 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.272445755 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.367860939 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.12455755 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.207355721 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.112680357 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.07666368 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.145354622 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.079322245 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.479479194 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.501267574 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.072480287 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.170439241 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.644562853 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.090201366 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.135923519 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.433774085 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.074638176 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.089079197 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.086623035 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.072473342 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.336387364 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.152855101 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.674997784 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.093756176 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.069508025 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.096482098 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.071663544 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.079042754 seconds)
  done (took 11.136583217 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.118537785 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.114651099 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.070402372 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.125147029 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.095268278 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.071745969 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.076720595 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.068953775 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.089696407 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.125312771 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.09193965 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.12346285 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.068142429 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.070345085 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.096790473 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.198753049 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.084575085 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.082968926 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.068999316 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.082594085 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.107011109 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.079807211 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.079665493 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.079526202 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.133480453 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.170564376 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.098020687 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.099285319 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.067509924 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.080021272 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.116518424 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.12626616 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.068231019 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.066478346 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.121273994 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.096812283 seconds)
  done (took 4.847300628 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.894236134 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.09885622 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.108594861 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.099883624 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.107919757 seconds)
    (5/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.140201959 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.114313268 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.145923148 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.132689742 seconds)
    (9/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.066749896 seconds)
    (10/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.100615748 seconds)
    (11/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.07066667 seconds)
    (12/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.175524375 seconds)
    (13/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.673400339 seconds)
    (14/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.222605453 seconds)
    (15/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.072715054 seconds)
    (16/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.145774259 seconds)
    (17/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.359312299 seconds)
    (18/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.083505049 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.071291456 seconds)
    (20/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069616115 seconds)
    (21/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.096560903 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.07104019 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.138243597 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.070024699 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.176424844 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.602255407 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.183326225 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.073590466 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.099619637 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.067687906 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.143577492 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.096858302 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.071844224 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.563953798 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.067680255 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.066297836 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.090168656 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.095348699 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067830997 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.068905875 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.080005894 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.067517503 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109974823 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.080693106 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.514755959 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.071133003 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.609318805 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.313182573 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.07422333 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072934124 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.102865838 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.065360044 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069212993 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.92352017 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.148242325 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.067801363 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.273484912 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068634341 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.069728723 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069793246 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.099795806 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.071460006 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070048961 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.074251051 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.097055805 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.885678843 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.149122211 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.097646413 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067872887 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.400463591 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.075029002 seconds)
    (72/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.065481478 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069993281 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070056363 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.093235757 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.130264147 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066900689 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06705354 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.107513455 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.094427032 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.088717519 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.200269447 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.069734453 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.068061543 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.335298496 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.186537601 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068797518 seconds)
    (88/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.066144407 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.069226527 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.489601511 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.06588925 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067852258 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070045189 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.092258872 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068857864 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.066088553 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.068039464 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.100812684 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.07221426 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.355405172 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.068207105 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.499754181 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.073204867 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.104453277 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.121919079 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069535246 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.102966301 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.069346325 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.06677098 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.075486951 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.067542976 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.066416434 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.070875908 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.067322437 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067810501 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.070207299 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.06971782 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069029272 seconds)
  done (took 23.679922681 seconds)
done (took 41.829001286 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.404225792 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.080244898 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.080765533 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.080245182 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.080475156 seconds)
  done (took 2.052365584 seconds)
done (took 3.480815821 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.261012184 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.078592719 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.06558609 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.202569003 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.089067072 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.176608882 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.214376872 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.160300711 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.089217337 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.089242614 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.089041171 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.221180334 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.344901562 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.089285653 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.159374421 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.226057935 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.088935377 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.065132999 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.088934898 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.089226258 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.088963949 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.06536671 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.088803784 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.088894092 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.158002134 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.089271866 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.065404128 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.159735694 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.088145565 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.158121455 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.088207905 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.087340478 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.087985265 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.157443876 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.088028111 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.157034107 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.064877655 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.087669057 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.087102075 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.087259112 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.086831444 seconds)
  done (took 6.387172583 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.079460005 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.086081827 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.088152949 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.06553016 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.074913683 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.085542182 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.065600841 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084998368 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.094844307 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.085824318 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.085687832 seconds)
  done (took 2.304724582 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.07373457 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.08589595 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.087264707 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.064744111 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.076140745 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08633796 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.064871447 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.086055677 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.089094885 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.086359618 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.08689783 seconds)
  done (took 2.24241606 seconds)
done (took 12.279956849 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.196205585 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.093602846 seconds)
  done (took 1.624682182 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.268421594 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.523919219 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.935637325 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.118588383 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.098250138 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.111923056 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.223108774 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.092895161 seconds)
  done (took 7.905916715 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.133143716 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.070440931 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.072505375 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.071651536 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.069075839 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.070229719 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.068835899 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.068635937 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.070039514 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.068681412 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.069924272 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.070742587 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.06917721 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.070583874 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.069536021 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.069898737 seconds)
  done (took 2.649863566 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.107286333 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.072657908 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.102875654 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.064493981 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.075218349 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.064921497 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.074111205 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.076009447 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.073399289 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.072318243 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.073431296 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.07155822 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.07235535 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.073112108 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.073888096 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.074043629 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.074207556 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.072340077 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.074126233 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.074938066 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.073228918 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.074174147 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.074895928 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.072534839 seconds)
  done (took 3.293674611 seconds)
done (took 16.827917508 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.181423115 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.078766754 seconds)
  done (took 1.610202774 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.097380948 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.097739784 seconds)
  done (took 1.56588691 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.07655721 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.063121294 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.081180325 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.073182765 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.064395067 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.063583386 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.078474462 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.062436994 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.06256415 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.062586744 seconds)
  done (took 2.061780812 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.066138746 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.071224352 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.06878145 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.067849348 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.06957282 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.063577039 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065881372 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.063458992 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.070123912 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.062779629 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.0662388 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.084327942 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.066066189 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.084739341 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.066048179 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.066609042 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.06831882 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.065777931 seconds)
  done (took 2.611639741 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.064262305 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.06400264 seconds)
  done (took 1.499419393 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.067718311 seconds)
    (2/7) benchmarking "second"...
    done (took 0.06445339 seconds)
    (3/7) benchmarking "month"...
    done (took 0.065650274 seconds)
    (4/7) benchmarking "year"...
    done (took 0.064846748 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.063041077 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.062368143 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.06290904 seconds)
  done (took 1.814884317 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.432968136 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.186141918 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.420957857 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.07028982 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.07757189 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.258766872 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.065246959 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.070001135 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.070002016 seconds)
  done (took 3.06101306 seconds)
done (took 15.609537383 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.086358572 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.182925378 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.112666404 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.41519036 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.095302211 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.070094355 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.114316081 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.206163834 seconds)
done (took 2.675805317 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.2822211 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.199014936 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.321056832 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.155992224 seconds)
  done (took 3.061930196 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.404701161 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.172708554 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.078755099 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.070009433 seconds)
  done (took 2.126226087 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.068431381 seconds)
    (2/2) benchmarking "read"...
    done (took 0.074602141 seconds)
  done (took 1.534228233 seconds)
done (took 8.404556252 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074915786 seconds)
    (2/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.099851708 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.063764124 seconds)
    (4/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.06520781 seconds)
    (5/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.064171003 seconds)
    (6/24) benchmarking ("one", "Float64")...
    done (took 0.064436432 seconds)
    (7/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.064695809 seconds)
    (8/24) benchmarking ("zero", "Float64")...
    done (took 0.064177607 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.063963872 seconds)
    (10/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.062088542 seconds)
    (11/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.06465942 seconds)
    (12/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.062746274 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 0.064805299 seconds)
    (14/24) benchmarking ("one", "Float32")...
    done (took 0.064750811 seconds)
    (15/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064615775 seconds)
    (16/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064468522 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064139728 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064955034 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.064259331 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064471326 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064301033 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064752393 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.063656067 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.064378218 seconds)
  done (took 3.001236534 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.083528837 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.06686373 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.067990931 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.067920513 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.067970556 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.068076428 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.067980453 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.066877485 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.06805545 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.066358975 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068533648 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.068579188 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.066488745 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.068943967 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066623999 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.068700207 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.06824538 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067214927 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066795939 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.068742566 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.068276055 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067151632 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.068367015 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.068536614 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.068329297 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.068711024 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.067068879 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.067467262 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.068228667 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.068498442 seconds)
  done (took 3.457757779 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.06973241 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.061023489 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.061094625 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.071440022 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.060874653 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.061673779 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.061515724 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.060716394 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.061128949 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.062529465 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.061901069 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.060847641 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.06214677 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.061386066 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.060953774 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.062098214 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.066754167 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.08130414 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.061673816 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.060908305 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.066143071 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.061164742 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.061041931 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.061375254 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.061563976 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.061358951 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.061337957 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.06187426 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.060884765 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.062099878 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.061254151 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.065724245 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.066777514 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.061295918 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.071958247 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.067112127 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.060912615 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.068362373 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.062535636 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.060813775 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.060642782 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.060926271 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.061476149 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.061047531 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.071824783 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.061248169 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.062151081 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.061757974 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.061600531 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.0609378 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.061015077 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.063318891 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.070324475 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.062564377 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.06086253 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.062270118 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.061023985 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.061877474 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.061178906 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.061094502 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.060765956 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.065171679 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.06244839 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.061716713 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.081309654 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.063065941 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.071991397 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.061214126 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.061787778 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.06549535 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.061799035 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.079772049 seconds)
  done (took 5.985224584 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.07528586 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.074282522 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.081552692 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.073143101 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06536655 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061900694 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065370945 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061863835 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.071578282 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065708211 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061949865 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.0652987 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.071304132 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065912081 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063602396 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.071488253 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.066450297 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065073674 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.061995279 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066040121 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063936446 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065553546 seconds)
  done (took 2.904208444 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.145239009 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068243229 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.106943903 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.07153092 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070145274 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.071451511 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.067811089 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.06735929 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067692609 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068671665 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068192502 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067776934 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.069897066 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068226887 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068015206 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068085593 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067987337 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068092023 seconds)
  done (took 2.75756836 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.079885949 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.066937018 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.090780052 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067026688 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.067353405 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.066808339 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070604377 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.071158715 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.066816614 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.067335329 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.07217995 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066895885 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.068560299 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067524284 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06724404 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.067749794 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.067142032 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067536054 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.071323821 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.070805642 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070925882 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.070896746 seconds)
  done (took 2.946459097 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.08137448 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066176473 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.081624687 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.067819324 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061424119 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061786144 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.067882441 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.066981825 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.067910055 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.066203114 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06706061 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061600071 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.068390248 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066818901 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.069234516 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067126402 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066562955 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066719148 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066750861 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061431106 seconds)
  done (took 2.757318992 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.103218862 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.0657044 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.065874712 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071089408 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065939671 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.076646049 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071262645 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.065959445 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.06421556 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.086402716 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.064557013 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.064709915 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.069639946 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.068010146 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.064374225 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069344221 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.069496543 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069586371 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.06464165 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064193983 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.086364906 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.064236903 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068629536 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.064022438 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063770311 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.064177594 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063770182 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.067220566 seconds)
  done (took 3.356420979 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.067807356 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065870433 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.06578743 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.064880464 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.065188621 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.06474976 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.064898623 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.065374615 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.064399631 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.064965676 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.06458786 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.064616708 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.067718288 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.06466159 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064871568 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.064837244 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064588644 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.065196809 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065315228 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065269231 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.064848726 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06500721 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.064504849 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.065118489 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06525965 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.06491688 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066505161 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065683337 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065413061 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065889375 seconds)
  done (took 3.377741111 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.076708113 seconds)
    (2/2) benchmarking "in"...
    done (took 0.07436063 seconds)
  done (took 1.564329909 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.064696718 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.080765822 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.061428064 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.075764223 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070216596 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.06526111 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070421947 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070260159 seconds)
  done (took 1.966346613 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.096523707 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.122002933 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.065113521 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.065462281 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.095144431 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.13275757 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.10560401 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.075521862 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077402152 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.06600283 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.063517323 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.102526575 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.062455965 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.076693934 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063967682 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.072422927 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070366782 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.081334804 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.076392864 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.060788062 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.075954331 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063387459 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.061208761 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.063328187 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.062725264 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.070242012 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.079429792 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.075984056 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071914656 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.060469324 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.081510181 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.0613287 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.062380552 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071473793 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.092244801 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.061609742 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.09953749 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.061924985 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.066577622 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.060960265 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.074248484 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.083432414 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.076536327 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.08026922 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.063135622 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.063497752 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.061215582 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.06364211 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.066186355 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.071445028 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.061051967 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069870366 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.060981958 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.06293141 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.073013392 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.062430701 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.066840731 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.071561649 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.076116964 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.072780163 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.074812392 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.077787069 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.071119829 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.069168639 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.062918759 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.082279148 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.063208118 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.075590208 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.077151564 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.063024474 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.075794255 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.061042338 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.060506205 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.061368547 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.096458266 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.063422453 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.062697285 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.061212838 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.061352273 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062790724 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071589311 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066412023 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069803242 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064990746 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077749999 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.071133856 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.061537276 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.067361337 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.079874678 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.065838355 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061462673 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.078858033 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.065301507 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060863394 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.079244377 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.071494211 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.062689105 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.062315347 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.065882287 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075455362 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.062236261 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.059316786 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069550527 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.061816228 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.087373997 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.064166052 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.210976958 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.064011065 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.076301733 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.069426037 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.065858614 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.062644943 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.068658806 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.064498403 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.061971447 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073367878 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.06336805 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.078892266 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.07110429 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.078771483 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.079217005 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.074790743 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.080663812 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.063352121 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.061376828 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.080877754 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.072027972 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.06333535 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.079915744 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.060965724 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.07609039 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.061314238 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.063126313 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.07169788 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.060755583 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063566177 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.061893157 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.06732658 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.062933319 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063553759 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.068493888 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.070993492 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.074541495 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.063112818 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.07142285 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.061982568 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.077676377 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.07230357 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.067170261 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064896118 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.062717887 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.07460792 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.069482289 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.071787158 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.06164781 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.062197083 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.062025954 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.073062201 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072029895 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.063533676 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.068833723 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.066676237 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.062100551 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.062152078 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.06280137 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.066222127 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.065060302 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.062731559 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070255724 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.071225206 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.076045323 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.068950908 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.071705704 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.061106692 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.061353251 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.063224793 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.060978387 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.067042495 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.071535356 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078088875 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.073988451 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.083686717 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.061885982 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.072038423 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.062806348 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.079300704 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.075767787 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.062694314 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066284098 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.061001351 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06339575 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.072015859 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073712588 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.075481396 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076948376 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.06680657 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.066468437 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.061137376 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.077212296 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061947723 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070434954 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.071271446 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.065649966 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.061427429 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062785654 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070916196 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.06647114 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.061511092 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.077910697 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.066833173 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.061137902 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.076682372 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.061638562 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.072272378 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.060587544 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.065547503 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.066457238 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.062309854 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.07117376 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.07667468 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.059540534 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.061155422 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.076785229 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.207718025 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06494645 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.072389012 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.078599228 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.067522615 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.071134287 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073485954 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.073101371 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.067435415 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.07256524 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.063042677 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.072712359 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.065098497 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.074386245 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.062188784 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080405316 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.060685656 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.077568156 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.061905134 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.073703999 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.062309294 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071813657 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.062583185 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.079403147 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.063295628 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.062735315 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.074371281 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.060654929 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.072111429 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.061380675 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.067728668 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.069569003 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.072277576 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.063710361 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.07226198 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.063491711 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.071027409 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.066889729 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.070389165 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.071695294 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.066787037 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.061399866 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.070777982 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073478961 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.070837627 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.063179537 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.063565153 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.062170368 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.071964754 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.063274935 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.062870416 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070950364 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066895125 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.068077696 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063228806 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.063846231 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.063691698 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070819177 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072071661 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080458938 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071435796 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.070346657 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.071626811 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.061441957 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.078142707 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.061964803 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.072836325 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.061001824 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.06784661 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.071603899 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.061976529 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081412554 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.06317097 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.070256452 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.07417335 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071559216 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.066430633 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.080327777 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.064893115 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.070875905 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.070381002 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.066938321 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.068821381 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.063491148 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.071238051 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.072107134 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.073037001 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.062769069 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.070163348 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071622249 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06323529 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.068569913 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.063143562 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.0707125 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.062994604 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060366841 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066514441 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073299942 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066571747 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.067014341 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.061829706 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.060303506 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.061607332 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.067946298 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.066440066 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.071139585 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077426141 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060566944 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.062333421 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.060438729 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.065220357 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079619897 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071101951 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.069580063 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.066363298 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.060311064 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.061999583 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.062089297 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.20889264 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.066337529 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.06205293 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.061785946 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.0736387 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.064290768 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.067397436 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062333442 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.06298277 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.072859833 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.066462218 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.062664015 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.069341017 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.061709516 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.067622041 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.060938389 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.062956128 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.066910073 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.061601902 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.066141193 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.072805297 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.078669889 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.069146845 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.071239683 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.063027808 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.070587944 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.078024213 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.068753235 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063277767 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.072180517 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.061109854 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.080849646 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.072188202 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071081292 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.07239261 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.063120937 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.079278031 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.067361648 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.072277686 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.078171234 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062965801 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.068161742 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.061236661 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.078471572 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.066835079 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.061349487 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.070597997 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070609449 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.06822576 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.07504306 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.062440252 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.070371271 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.066868676 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.065781624 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.063741881 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.063411574 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.071207439 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.078621184 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.062634487 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.066108122 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.07082941 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.071239342 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.067067082 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074820206 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.07072105 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063219739 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.06348718 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.066014315 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.062547489 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.074439156 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062433529 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.066989959 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.066922433 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.061591955 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.068799082 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07873994 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.071770672 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071764209 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.061347463 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.061045958 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.080086632 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.06599913 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.06524631 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.070347903 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.071971936 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075005182 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.072082922 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.079394855 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.062713573 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.068745899 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074898572 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.063023835 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.061861788 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.066048287 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.063445537 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.071772658 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071879813 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069652901 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06370883 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.069151984 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.07596195 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.063309159 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.066858507 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.065750116 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.062272417 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.07278527 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.070115319 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.073932584 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.062516352 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.061168365 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.065822668 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.07057591 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.069175571 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.070487239 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061726606 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.066478376 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.074152046 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.068638571 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.207600822 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.062351241 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065331077 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.072129519 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.066623232 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.061473626 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.066936564 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.065959273 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.068211559 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.072201777 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.067276573 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.061492741 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.079125047 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.070850199 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.07173734 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.063560333 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.063526943 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062183715 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.060974926 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073507769 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.061126733 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.062982391 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.067085161 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.063228033 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.07973279 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.070569819 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.078428585 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062991478 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.066822411 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.061354011 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071757647 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.066680739 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.06186472 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.072976051 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.061025779 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077846371 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.07402193 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.067132005 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.061191884 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.067253925 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.070111502 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.077378965 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072161273 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.071462152 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064801782 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071965769 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.063350405 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.073298454 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.06125262 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.060630261 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.072179941 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071301706 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074670853 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.061185401 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.072509074 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.063772705 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.070985361 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.070456031 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.063644681 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063633647 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.063506955 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071818175 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.066970858 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.071811412 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.067283894 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.079225606 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.06259564 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.073657761 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.071250007 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.073129701 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.076299619 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.074704951 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.070144258 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.06221328 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070103965 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.070262481 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.062964825 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.067437359 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.06508314 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.084232017 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.063773272 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.063454018 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.076643179 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.068366158 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.062277431 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.068228735 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.067299812 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.07253662 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.063024849 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072845056 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.065813818 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062625929 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.06681325 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.06677098 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.060486795 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.061111631 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061591441 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071623683 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.066484629 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.06156932 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080606215 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.062966864 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.070922903 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073546608 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.069094721 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.062834883 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.060492545 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.062491572 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.07520191 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077389367 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.06530029 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070309008 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.06250342 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.070796821 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.059965314 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.069943723 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.069044966 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.215521874 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.062383466 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062942566 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.078003267 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078383932 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.067458275 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.071681953 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.071564453 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.06344835 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.083467038 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.071569308 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063385094 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.073176056 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064000185 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.061586876 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.060850194 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.063118655 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.07416457 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.061173848 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.063705137 seconds)
  done (took 43.130793851 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.10243469 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062054471 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.0613109 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061631767 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070168406 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062265128 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061793805 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.062343568 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.062205226 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063789019 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.061356278 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064053493 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.067723223 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.075006872 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069822478 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065062564 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061186194 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.062454169 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061579961 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062381906 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.067671163 seconds)
  done (took 2.903924124 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.066902213 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.065515426 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065210217 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065552519 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065223518 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061379076 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065587935 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061953695 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066017852 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062031094 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.066120992 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06174531 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.061835961 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.061870716 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061919401 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06333289 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.066117574 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06516083 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.061695971 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065518685 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063158884 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065098409 seconds)
  done (took 2.904198765 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.065156939 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.062273385 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.071074399 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.060857038 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.061150801 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.064573839 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.061054776 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.066484515 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.066379262 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.066107877 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.070923867 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.061912384 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.060622899 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.067454232 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.060704241 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.062066592 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103814863 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.062367363 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.062567063 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.061200238 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.063760587 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.071093013 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.06079555 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.061025929 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.066132108 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.064625696 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.061150005 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.064089581 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.061850796 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.066071476 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.062275881 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.060809443 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.070891302 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.070536077 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.066144541 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.06622175 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.062847104 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.062038596 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.061135539 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.060980023 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.070040498 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.0625238 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.061247113 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.062511389 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.070768103 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.061233398 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.060777227 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.070705509 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.060656901 seconds)
  done (took 4.689391545 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.074459834 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.116048822 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.067720133 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.094961017 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.074241407 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.067077784 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.067320745 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.096115057 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.062064623 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.063304929 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.074860132 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.075495611 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064280616 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.065485101 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.068686616 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063973775 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064722904 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063069911 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.066377232 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.06405237 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.066316156 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.068466558 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.073958124 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.074464659 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.064801689 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063093916 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063440909 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.065505318 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.074126722 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.066881844 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.065225133 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.066092506 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.07485546 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.067478189 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063376918 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.063447561 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.074918387 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.063811047 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.063748313 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.062403929 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.063561124 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.065199841 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.06873124 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.075621854 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064316003 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.069179069 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063788438 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.062068625 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.074719165 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.063777563 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.067965751 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.075848559 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065031743 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064085259 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065441014 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.074725092 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.064132392 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.063058959 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.064103169 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.074488143 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.062363873 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064559569 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.077487941 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.063613842 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.06705568 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.075116048 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.069473159 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064944557 seconds)
  done (took 6.346278927 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.073332433 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.097118559 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.076794686 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.076770294 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072025011 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.072273031 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.071993429 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.072029592 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.072220563 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.075416992 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.071948778 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.133120136 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.06878488 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.073674596 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.072416069 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.072347843 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.071827767 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072063928 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.072102307 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071789442 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.072362641 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.077297454 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.072010936 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.076661934 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074518722 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.068541101 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071921619 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.071972352 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.076939062 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071722003 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.074384137 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.07172497 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071996739 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.076948503 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074000738 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.071531128 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.062283579 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071480635 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.071566387 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.071676202 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.06824885 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.076983328 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.071755849 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.068754081 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072040327 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071888589 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.077056744 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074470251 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.073406753 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.074924273 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.071817306 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.076964999 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071833554 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.0720145 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.077228931 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.079426322 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.077050816 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.077293078 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072246589 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.076644034 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.077246039 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.078960811 seconds)
  done (took 6.176135105 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077495321 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.069649056 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.082409878 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.062085364 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061737255 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.07079877 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061126455 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.062134763 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.067619371 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.068287875 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069359313 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.071014166 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072857258 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06942106 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070838812 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.07264126 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070835666 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.070970777 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067644656 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.07068679 seconds)
  done (took 2.932856918 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.079543516 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.080536152 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.066805003 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070707887 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.067319494 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.070935137 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.06700069 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067225902 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067510114 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066983992 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.072000602 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.071851863 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067612155 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.07070175 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.072058747 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.071051784 seconds)
  done (took 2.654445591 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.067127313 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.071602844 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.095159266 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.062463004 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.064304644 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.062112264 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.063028087 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.061129645 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.06396691 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.075868713 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.062122601 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.064747463 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.062296213 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.061399557 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.061533292 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.064821849 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.063703463 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.062360371 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.062196698 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.093836593 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.071109589 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.062614173 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.064383376 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.06226054 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.064104272 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.070953807 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.063300993 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.064014304 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.062046645 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.064734671 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.064287082 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.069024458 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.064331606 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.062444674 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.061210938 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.061962712 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.062546873 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.064539573 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.064843603 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.062665999 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.061246351 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.067538431 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.062755064 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.063270674 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.064195993 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.065213058 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.063968317 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.068292743 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.062180624 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.064334458 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.062475193 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.064003226 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.062497939 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.069722058 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.064616127 seconds)
  done (took 5.122546619 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.081595883 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.067407254 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061060846 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060853818 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.066610406 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.067337705 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066809809 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066848501 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067652118 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.06118175 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067399371 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.06649955 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067362178 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066745422 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067084663 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066918381 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060931069 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.06735933 seconds)
  done (took 2.744170056 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.070380827 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067396793 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.065832412 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.062834847 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.063196005 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067804396 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06162719 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.062880318 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062977082 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.063083406 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063145031 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.0629252 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062249278 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.063186771 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.066677355 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063163796 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.062729453 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061382551 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.063085991 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.060995445 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067305989 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061430282 seconds)
  done (took 2.936923833 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.121373223 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.086967467 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.160222686 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.082593504 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.091915934 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.074659938 seconds)
  done (took 2.149871484 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.097217732 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.100819669 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066907408 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066515738 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070968017 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069439684 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069481014 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069496369 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072731025 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073084325 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069338457 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073070093 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073070647 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074801331 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071314183 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071480629 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069964393 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069702535 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066628306 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076948313 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069790648 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073004371 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069886881 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069226366 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06986952 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075034887 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072870647 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073739008 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069539761 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073200662 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071331318 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070482265 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073442055 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07376716 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066739594 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073098516 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069857451 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076998452 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071312081 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075276171 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066700663 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071330443 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073053056 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072974355 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073435334 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069632195 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072813801 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069795135 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07027133 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078652073 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071467149 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07492616 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071473003 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073122725 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07297994 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07826837 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073812059 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074740712 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071598294 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073651775 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074929104 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071508193 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074976881 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073834415 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071688436 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074811425 seconds)
  done (took 6.351145961 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.108525644 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067139136 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069789422 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073337551 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074865931 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06979255 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069997311 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069707076 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069648929 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067022492 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104916864 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070286824 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074923043 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077781671 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069770486 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.0699192 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070231812 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07483485 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067459908 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078573715 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069954364 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075066611 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074938613 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074671818 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073494848 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071509975 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069966153 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069860453 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069614764 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069510714 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072682981 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070042083 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074733482 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066996542 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074769442 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069988731 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070058292 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072892287 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069688809 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071418599 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075342586 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077368428 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069909656 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069895861 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073544062 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069759394 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069713824 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067032034 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069807012 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067272567 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073614106 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073591967 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074007725 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075010238 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070329243 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070148666 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069937608 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069927843 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07012422 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071481522 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075497598 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069594988 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078624725 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070070222 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070212856 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075410204 seconds)
  done (took 6.359130802 seconds)
done (took 132.864286843 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.237726059 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.202235574 seconds)
  done (took 1.959609987 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.077052229 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.193804136 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075358372 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.075245804 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.108884074 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.107849367 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.103887003 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.072563647 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.074710997 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.072630753 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.139577865 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.104582129 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.093274756 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.072889064 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.072534293 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.072214051 seconds)
  done (took 3.058857949 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.11156994 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.212221682 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.082745656 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.07093999 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.152893096 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.077557484 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.072939666 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.077112948 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.077212548 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.070863056 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.107500028 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.08377358 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.075989527 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.076865138 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.072791628 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.076294953 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.077023653 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.077316848 seconds)
  done (took 3.201981858 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.106555579 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.092164563 seconds)
  done (took 1.7550677 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.159381681 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.106117793 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.144994285 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.345353767 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.136586928 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.13964462 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.142087946 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.137760563 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.112030165 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.133754786 seconds)
  done (took 3.104162427 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.108709511 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.104893169 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.308747946 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.103327664 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.083053814 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.077771297 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.075807657 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.080266452 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.075876059 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.077072425 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.122220608 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.075899714 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.072877761 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.124800188 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.098693096 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.106757471 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.071258895 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.078483085 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.080526492 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.071378227 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.076129861 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.080338034 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.177777579 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.078735298 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.099862019 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.07574415 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.077968128 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.074770991 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.074713978 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.078451212 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.079140021 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.099266428 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.079073 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.083204188 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.077270069 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.096981514 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.07223641 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.098981906 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.074723117 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.07329339 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.07575665 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.079242731 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.073064538 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.078423914 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.075702864 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.077952853 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.080628926 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.071605403 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.309802628 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.074649335 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.073471437 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.076938754 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.076057544 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.077626475 seconds)
  done (took 6.59250899 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.122859421 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.112904025 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070752372 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.117410587 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.110089589 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070715253 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.122533483 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.105061716 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.123526221 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070520257 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069787955 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069988556 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077173915 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.0798076 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.120059258 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.112476785 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071971756 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.07059469 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.11169378 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.111663417 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069944075 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.108248263 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.114009823 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.110673562 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.069450632 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070813348 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.06908002 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.070038833 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.077369026 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075982875 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069585156 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.079078128 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.081437538 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.076019719 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068845369 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.068951476 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069695629 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.076401095 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078226197 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.078284871 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.074947718 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068589231 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069129809 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069555166 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070058765 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068713993 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077822369 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076078055 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.078378594 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069559663 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069724196 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.06942276 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070033426 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.076070137 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.075282067 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.07685098 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.079578834 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069297664 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069789148 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.070952648 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.080383815 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077501741 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076700628 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070612 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.078124183 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069451232 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079198615 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.081735647 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069352264 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069746247 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069759505 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069642352 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070009821 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075100959 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.075394838 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070330857 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069816772 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069529072 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076721664 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075350726 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069004791 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.076877981 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068782045 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069270655 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069730424 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.06957229 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.077055488 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.076573907 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069988969 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068890269 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.0694889 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069519472 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.068476932 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.075951924 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.074246601 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.074598854 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.215863868 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070942128 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.079487546 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.075764053 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070735897 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.075285713 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069515687 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069797907 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069729122 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.07615138 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.074624886 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.077304223 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069783513 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069159647 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.075521867 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078016573 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.069511538 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.075297806 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077885647 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.076227461 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.069289381 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078363917 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070024875 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077971376 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06978218 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077683086 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069924199 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075390162 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069830205 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.068884626 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069440144 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.078413123 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.06997146 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.06975817 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070217801 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069574129 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.076005912 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.08187668 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070780456 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075859059 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.075909074 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069905328 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.078064563 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069667819 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.07818686 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070068189 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070022619 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069191695 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.080886397 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.070142211 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069539577 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.06954858 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077612256 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069517162 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077633322 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.07477615 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068842178 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078943544 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077300681 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.075057038 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.077872013 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070543045 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069547157 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069360738 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.072095874 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077570046 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078910309 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070126638 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069528269 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.074914587 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.078153839 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.069355317 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.075147974 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075204997 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.075797446 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069918186 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069551924 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078305618 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.080306924 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075799295 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.078149357 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076330617 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069159612 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.074594186 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.077586874 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06899935 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.081375505 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06921773 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.07945167 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.077907943 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074571672 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.077940645 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.079319549 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.076594554 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.076792541 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.078870322 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.0680534 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067898009 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.215682582 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.070593372 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070343169 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.075816768 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069969506 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.06992894 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.079814113 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.07005339 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.078531317 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.069398092 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.075821658 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068855642 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069962542 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080513325 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069709625 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070204642 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075615925 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069715927 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.075371954 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078140932 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.075202551 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069884861 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069766149 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.0786336 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.07823167 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069533004 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069501192 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069857805 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.077834856 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.077495471 seconds)
  done (took 18.8755342 seconds)
done (took 40.111351787 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.173469622 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.115586243 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.215278544 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.199655289 seconds)
  done (took 2.356340292 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.104463188 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.067713853 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.11221579 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.122622501 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.066661978 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.104004274 seconds)
  done (took 2.176376243 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.205009619 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.175739996 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.242655677 seconds)
  done (took 2.216084939 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.376197945 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.154481926 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.215698871 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.499880483 seconds)
  done (took 2.94351939 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.143093671 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.132723 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.080568329 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.142308229 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.084680043 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.06307355 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.133025119 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.069847447 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.099191064 seconds)
  done (took 2.605372828 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.139467684 seconds)
done (took 14.029279831 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.334333118 seconds)
    (2/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.125131856 seconds)
    (3/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.107319227 seconds)
    (4/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.075209355 seconds)
    (5/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.072086609 seconds)
    (6/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.314469546 seconds)
    (7/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.287005478 seconds)
    (8/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.233134619 seconds)
    (9/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.077275859 seconds)
    (10/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.109355375 seconds)
    (11/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.279492742 seconds)
    (12/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.1594845 seconds)
    (13/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.074830335 seconds)
    (14/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.293584295 seconds)
    (15/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.276648384 seconds)
    (16/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.07865417 seconds)
    (17/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.206735386 seconds)
    (18/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.066771682 seconds)
    (19/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.079365058 seconds)
    (20/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.145246794 seconds)
    (21/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.079821414 seconds)
    (22/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.185174307 seconds)
    (23/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.154589284 seconds)
    (24/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.090813996 seconds)
    (25/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.164313207 seconds)
    (26/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.148500459 seconds)
    (27/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.237442886 seconds)
    (28/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.095001047 seconds)
    (29/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.20605968 seconds)
    (30/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.152258367 seconds)
    (31/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.076139595 seconds)
    (32/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.202772442 seconds)
    (33/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.216648499 seconds)
    (34/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.097789685 seconds)
    (35/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.293772484 seconds)
    (36/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.067630324 seconds)
    (37/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.246993256 seconds)
    (38/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.289877309 seconds)
    (39/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.108842519 seconds)
    (40/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.11052404 seconds)
    (41/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.094619073 seconds)
    (42/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.073968075 seconds)
    (43/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.125547217 seconds)
    (44/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.319947069 seconds)
    (45/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.141524982 seconds)
    (46/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.073792224 seconds)
    (47/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.11142165 seconds)
    (48/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.087799921 seconds)
    (49/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.243288391 seconds)
    (50/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.086149258 seconds)
    (51/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.067454599 seconds)
    (52/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.290076827 seconds)
    (53/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.174330449 seconds)
    (54/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.074483873 seconds)
    (55/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.102871155 seconds)
    (56/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.096880951 seconds)
    (57/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.085284449 seconds)
    (58/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.144316581 seconds)
    (59/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.209868306 seconds)
    (60/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.397490818 seconds)
    (61/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.077546718 seconds)
    (62/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.076824288 seconds)
    (63/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.07520977 seconds)
    (64/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.223525057 seconds)
    (65/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.086602204 seconds)
    (66/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.080855848 seconds)
    (67/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.076078509 seconds)
    (68/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.076689621 seconds)
    (69/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.150449628 seconds)
    (70/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.218189989 seconds)
    (71/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.067213677 seconds)
    (72/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.094253404 seconds)
    (73/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.18368703 seconds)
    (74/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.073475586 seconds)
    (75/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.075923148 seconds)
    (76/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.077722074 seconds)
    (77/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.066320762 seconds)
    (78/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.066486971 seconds)
    (79/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.06897734 seconds)
    (80/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.146630873 seconds)
    (81/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.144811514 seconds)
    (82/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.184062341 seconds)
    (83/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.09175907 seconds)
    (84/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.079634014 seconds)
    (85/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.075058294 seconds)
    (86/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.067138154 seconds)
    (87/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.278393523 seconds)
    (88/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.088919195 seconds)
    (89/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.155888935 seconds)
    (90/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.074617939 seconds)
    (91/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.075530969 seconds)
    (92/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.185256076 seconds)
    (93/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.067590546 seconds)
    (94/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.067557539 seconds)
    (95/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.165955967 seconds)
    (96/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.211055567 seconds)
    (97/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.14801295 seconds)
    (98/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.067631288 seconds)
    (99/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.19927479 seconds)
    (100/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.067168201 seconds)
    (101/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.191773367 seconds)
    (102/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.219830939 seconds)
    (103/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.068806613 seconds)
    (104/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.066476135 seconds)
    (105/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.073892449 seconds)
    (106/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.145659264 seconds)
    (107/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.133291783 seconds)
    (108/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.066232278 seconds)
    (109/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.094000478 seconds)
    (110/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.198821918 seconds)
    (111/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.065284157 seconds)
    (112/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.156581833 seconds)
    (113/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.066701074 seconds)
    (114/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.066749251 seconds)
    (115/341) benchmarking ("sort", Int8, false)...
    done (took 0.150650478 seconds)
    (116/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.077467377 seconds)
    (117/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.152153956 seconds)
    (118/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.196459951 seconds)
    (119/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.074271398 seconds)
    (120/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.068031829 seconds)
    (121/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.078003394 seconds)
    (122/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.067037108 seconds)
    (123/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.074464377 seconds)
    (124/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.075149351 seconds)
    (125/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.121290494 seconds)
    (126/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.075831858 seconds)
    (127/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.0669948 seconds)
    (128/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.066431182 seconds)
    (129/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.169291027 seconds)
    (130/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.066585299 seconds)
    (131/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.071449016 seconds)
    (132/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.22924514 seconds)
    (133/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.074841764 seconds)
    (134/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.076527308 seconds)
    (135/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.070644122 seconds)
    (136/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.073572913 seconds)
    (137/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.086764149 seconds)
    (138/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.116410789 seconds)
    (139/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.199899302 seconds)
    (140/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.228073277 seconds)
    (141/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.067623034 seconds)
    (142/341) benchmarking ("sort", Float32, false)...
    done (took 0.139021047 seconds)
    (143/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.086437822 seconds)
    (144/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.07492109 seconds)
    (145/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.087118759 seconds)
    (146/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.131985636 seconds)
    (147/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.212058041 seconds)
    (148/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.073411183 seconds)
    (149/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.073467039 seconds)
    (150/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.075231762 seconds)
    (151/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.25887476 seconds)
    (152/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.066950911 seconds)
    (153/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.068235773 seconds)
    (154/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.149497055 seconds)
    (155/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.203767045 seconds)
    (156/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.069554836 seconds)
    (157/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.077056393 seconds)
    (158/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.154978758 seconds)
    (159/341) benchmarking ("sort", Bool, false)...
    done (took 0.149995111 seconds)
    (160/341) benchmarking ("sort", Float64, false)...
    done (took 0.139758231 seconds)
    (161/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.086227701 seconds)
    (162/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.146122208 seconds)
    (163/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.160158838 seconds)
    (164/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.067196704 seconds)
    (165/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.0944436 seconds)
    (166/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.074137938 seconds)
    (167/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.076225434 seconds)
    (168/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.066552147 seconds)
    (169/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.066408932 seconds)
    (170/341) benchmarking ("sort", Int64, false)...
    done (took 0.067952706 seconds)
    (171/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.1529494 seconds)
    (172/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.153415391 seconds)
    (173/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.124692034 seconds)
    (174/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.211298632 seconds)
    (175/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.07149676 seconds)
    (176/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.160374527 seconds)
    (177/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.067186759 seconds)
    (178/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.066226973 seconds)
    (179/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.075022965 seconds)
    (180/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.201761194 seconds)
    (181/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.067619886 seconds)
    (182/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.066102864 seconds)
    (183/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.149286218 seconds)
    (184/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.085061813 seconds)
    (185/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.06876702 seconds)
    (186/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.148560307 seconds)
    (187/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.07671787 seconds)
    (188/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.074877894 seconds)
    (189/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.066352607 seconds)
    (190/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.181516034 seconds)
    (191/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.065611336 seconds)
    (192/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.093407856 seconds)
    (193/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.067130762 seconds)
    (194/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.095056721 seconds)
    (195/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.164968665 seconds)
    (196/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.066658304 seconds)
    (197/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.066927932 seconds)
    (198/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.067316565 seconds)
    (199/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.067475702 seconds)
    (200/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.07966134 seconds)
    (201/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.06765176 seconds)
    (202/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.074510464 seconds)
    (203/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.067618025 seconds)
    (204/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.069562239 seconds)
    (205/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.068814594 seconds)
    (206/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.066636863 seconds)
    (207/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.147697701 seconds)
    (208/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.087077937 seconds)
    (209/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.189631701 seconds)
    (210/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.202763986 seconds)
    (211/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.073923981 seconds)
    (212/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.076229128 seconds)
    (213/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.066610262 seconds)
    (214/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.070002475 seconds)
    (215/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.066609042 seconds)
    (216/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.067398105 seconds)
    (217/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.065142304 seconds)
    (218/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.06600612 seconds)
    (219/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.088611973 seconds)
    (220/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.070449514 seconds)
    (221/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.071288566 seconds)
    (222/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.073761053 seconds)
    (223/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.164453538 seconds)
    (224/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.132845111 seconds)
    (225/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.073746739 seconds)
    (226/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.074550648 seconds)
    (227/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.06662835 seconds)
    (228/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.164372555 seconds)
    (229/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.073592326 seconds)
    (230/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.067192825 seconds)
    (231/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.086522563 seconds)
    (232/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.068799395 seconds)
    (233/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.066588193 seconds)
    (234/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.070583688 seconds)
    (235/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.065490262 seconds)
    (236/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.066271559 seconds)
    (237/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.09368597 seconds)
    (238/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.077997674 seconds)
    (239/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.076875862 seconds)
    (240/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.06713103 seconds)
    (241/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.097815932 seconds)
    (242/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.081021971 seconds)
    (243/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.073499525 seconds)
    (244/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.073964647 seconds)
    (245/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.067037059 seconds)
    (246/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.073195606 seconds)
    (247/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.070355392 seconds)
    (248/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.197176386 seconds)
    (249/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.070539591 seconds)
    (250/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.092603701 seconds)
    (251/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.072826828 seconds)
    (252/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.069893381 seconds)
    (253/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.084363276 seconds)
    (254/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.072735432 seconds)
    (255/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.0660368 seconds)
    (256/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.066824363 seconds)
    (257/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.235814757 seconds)
    (258/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.067805731 seconds)
    (259/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.068004883 seconds)
    (260/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.069945747 seconds)
    (261/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.068360458 seconds)
    (262/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.155637283 seconds)
    (263/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.068158647 seconds)
    (264/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.070260992 seconds)
    (265/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.067013898 seconds)
    (266/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.067840724 seconds)
    (267/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.067262276 seconds)
    (268/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.068833433 seconds)
    (269/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.066690644 seconds)
    (270/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.066734574 seconds)
    (271/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.067294402 seconds)
    (272/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.066481392 seconds)
    (273/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.066824321 seconds)
    (274/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.06681754 seconds)
    (275/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.064857995 seconds)
    (276/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.088700582 seconds)
    (277/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.067122553 seconds)
    (278/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.067356806 seconds)
    (279/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.06691743 seconds)
    (280/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.067019431 seconds)
    (281/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.066647254 seconds)
    (282/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.066863522 seconds)
    (283/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.073650481 seconds)
    (284/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.070874108 seconds)
    (285/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.073727424 seconds)
    (286/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.15239778 seconds)
    (287/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.071130806 seconds)
    (288/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.077948109 seconds)
    (289/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.173132421 seconds)
    (290/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.067034666 seconds)
    (291/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.08666971 seconds)
    (292/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.078974657 seconds)
    (293/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.068878869 seconds)
    (294/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.088885348 seconds)
    (295/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.069533854 seconds)
    (296/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.06674352 seconds)
    (297/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.222846949 seconds)
    (298/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.066856558 seconds)
    (299/341) benchmarking ("sort", BigInt, false)...
    done (took 0.264967724 seconds)
    (300/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.065846978 seconds)
    (301/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.069227142 seconds)
    (302/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.067813572 seconds)
    (303/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.06892728 seconds)
    (304/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.067930403 seconds)
    (305/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.078930216 seconds)
    (306/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.067783449 seconds)
    (307/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.071340022 seconds)
    (308/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.228401685 seconds)
    (309/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.068393039 seconds)
    (310/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.067117717 seconds)
    (311/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.091938587 seconds)
    (312/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.066033975 seconds)
    (313/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.066776431 seconds)
    (314/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.088002478 seconds)
    (315/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.071479554 seconds)
    (316/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.067068072 seconds)
    (317/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.25182452 seconds)
    (318/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.092537055 seconds)
    (319/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.067044121 seconds)
    (320/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.083414715 seconds)
    (321/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.078246728 seconds)
    (322/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.067098679 seconds)
    (323/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.110282871 seconds)
    (324/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.068224667 seconds)
    (325/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.067423727 seconds)
    (326/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.078155477 seconds)
    (327/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.066455598 seconds)
    (328/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.066653285 seconds)
    (329/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.123102013 seconds)
    (330/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.067113172 seconds)
    (331/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.066046224 seconds)
    (332/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.067244213 seconds)
    (333/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.066451932 seconds)
    (334/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.068309616 seconds)
    (335/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.066106422 seconds)
    (336/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.065655026 seconds)
    (337/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.067190579 seconds)
    (338/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.152313252 seconds)
    (339/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.077768587 seconds)
    (340/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.066829247 seconds)
    (341/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.066427775 seconds)
  done (took 39.335373091 seconds)
done (took 40.944488749 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.126793048 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.081480924 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.078804559 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.074697032 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.078138352 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.076990615 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.078455598 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.076151848 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.077780362 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.077140082 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.107240823 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.065478667 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.073889996 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.081177303 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.075275916 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.081376047 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.078365723 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.081359715 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.066774866 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.080459323 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.090181406 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.078236276 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.074871297 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.080456015 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.066580677 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.075345917 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.119616828 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.085110461 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.070838543 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.076064562 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.073922389 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.084889696 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.073947622 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.072343826 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.075641728 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.071726248 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.075437502 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.072922835 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.119088455 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.071909665 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.066635036 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.078082115 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.07299573 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.073752005 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.074439284 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.078161359 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.071292394 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.079847951 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.065694208 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.077157176 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.119348253 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070793829 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.070394291 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.074637653 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.071088143 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.075164496 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.07050919 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.077583673 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.071106631 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.077853996 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.075430872 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.074445244 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.065832159 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.074380564 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.073560847 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.073460849 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.064766017 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070995456 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.066165127 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.066285439 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.065189722 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.074428508 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.072580659 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.071173823 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.065504767 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.065831037 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.065206352 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.078307376 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.07228197 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.075861863 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.066384184 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.071161585 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.070910017 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.066524697 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071388874 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.077867886 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.06523574 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.066571382 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.065340044 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.080754971 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.072657536 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.066087329 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.077740052 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071263544 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071143085 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.066087443 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.065153393 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071025898 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.074011173 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.06620445 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.065110809 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.07125577 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.071251453 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.074724056 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.066144953 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071285189 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.07093796 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.064598795 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.07467755 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.072867003 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.074622199 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.078706687 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.074125806 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.077460034 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.065930849 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.064031776 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.07413486 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.065245698 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.06977035 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.222126559 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.072214958 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.07487875 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.066683021 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.065130275 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071175514 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.072441342 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.06631223 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.067344758 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.066716553 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.075669204 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.073482707 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.065069376 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.066179888 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.075201155 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.075246534 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.065222704 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.065397169 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.075263574 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.066618363 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.072250924 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.072114413 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.074604359 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.065958777 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.066695918 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.065927841 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.065485189 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.065252619 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.071254563 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.07145324 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.066498616 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.075123186 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.072215533 seconds)
done (took 13.09393733 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.069475877 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.108225434 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.114310922 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.111072211 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.079502519 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.067861798 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.070415238 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.085375271 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.07035371 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.091043072 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.091695998 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.088058831 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.130652182 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.06594503 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.066992807 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.067564959 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.065246831 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.078619881 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.112914993 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.090486708 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.102898646 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.066338676 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.082218762 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.086493521 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.080596049 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.08412301 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.067713384 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.067547879 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.069658465 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.085214606 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.092455317 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.066437728 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.067825921 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.084162704 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.081859134 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.074574848 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.067478683 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.072628981 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.069899612 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.067036583 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.068737011 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.083902609 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.072643532 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.073107073 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.067600097 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068049521 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.066854789 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.07390558 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.084014844 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.072282337 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.07840484 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.085123947 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.068117184 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.066648767 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.065190402 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.073321407 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.06709528 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.06732995 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.067213073 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.066722432 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.067514218 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.069418101 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.071878996 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.073463903 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.070282718 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.072971913 seconds)
  done (took 6.790883191 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.085976915 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.092871684 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.08143064 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.08176079 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.066390646 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.0687667 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.067641371 seconds)
  done (took 2.275841934 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.070091417 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.106320318 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.114434107 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.113932415 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.121282267 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.111930483 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.067819549 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.098810848 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.066511911 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.107269922 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.11744422 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.115774744 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.070576878 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.079181383 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.067554403 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.114695241 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.067469079 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074343495 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.110415018 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.116030548 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071200642 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.09618446 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.080768068 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.067983612 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.112531928 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.107068855 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.069287826 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.067606417 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.06784393 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.066874346 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066804217 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089570898 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.106222965 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.07951043 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067961042 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.066746957 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.104318142 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067688231 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.103953072 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.076343413 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.104362216 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.066924163 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067668901 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.067168877 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.06796316 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.108335246 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.068111703 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.066862564 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.066799911 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.107314601 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066058107 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.106703857 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.069086642 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.071949344 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072339571 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071876371 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.07459593 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.067451938 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.107894486 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.073476606 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067005717 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.117245147 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.116693628 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.104465784 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.116477943 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.075818718 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.107547211 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.105340703 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.066862337 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.066974219 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.067326098 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.11679376 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.070198473 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.069717569 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068132687 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.071799905 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.10838107 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.119281727 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.119315706 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.079098823 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.068859078 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.066339823 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.071746236 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.118216898 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.070684234 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065909717 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.06717419 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.065320124 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.071136712 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.066024182 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.070790859 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.066098962 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.072759979 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.068636205 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.068149938 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.111359079 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.06616695 seconds)
  done (took 9.909253149 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.075507962 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.070922281 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.069409021 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.069038323 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.068971165 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.06910892 seconds)
  done (took 2.230645471 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.094243385 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.069512321 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.081379913 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.06924857 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.091075203 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.112780104 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.109621143 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070113961 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.083493219 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.07791361 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.109168548 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.11193032 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.112054215 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.069650036 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.109490894 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.068593215 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.109440072 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070541372 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.07755603 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069600035 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.083410277 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.069166999 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.06959872 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.115757319 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.070347498 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.068654966 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068721927 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.078188937 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.077720792 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.069272661 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.069199027 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.070288994 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.076119861 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.069886917 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.110308044 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.07602701 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068023908 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.072939029 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.070270747 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.070820875 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.112771952 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070002566 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070019758 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.072965184 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.069663959 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.076357782 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.073100983 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071705998 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.11459721 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.072689543 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.07297883 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.068551735 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.070608878 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.072484503 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.076101202 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069339379 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.072746107 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.11037244 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.069059036 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.076104936 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.067839418 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.070037896 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069686095 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.069908691 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.072380254 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.073157041 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.076282354 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069416705 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069467981 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.067802065 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.072884015 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.068040462 seconds)
  done (took 7.429364869 seconds)
done (took 30.34440319 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.54862369 seconds)
  done (took 2.258897133 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.952835966 seconds)
  done (took 2.708651376 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.486716212 seconds)
  done (took 10.246456419 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.357265005 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.420389493 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.742796452 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.133601799 seconds)
  done (took 3.45059276 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.762138032 seconds)
  done (took 2.52800815 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.238669347 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.224034936 seconds)
  done (took 2.233717414 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.380297094 seconds)
  done (took 2.136697736 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.201816872 seconds)
  done (took 2.958612127 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.242090362 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.163970875 seconds)
  done (took 2.180620307 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.641369196 seconds)
  done (took 2.403449149 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.515897588 seconds)
  done (took 6.287805929 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.247663265 seconds)
  done (took 2.0665523 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.235513315 seconds)
  done (took 2.013700053 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.037414101 seconds)
  done (took 3.810459809 seconds)
done (took 49.055669279 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.088785885 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.088324763 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.08762981 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.082528794 seconds)
  done (took 2.093740595 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.07814962 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.073316532 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.074618239 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.074934822 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.072346411 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.074167055 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.073730154 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.071139706 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.072490188 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.071596208 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.070030002 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.071452447 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.07356794 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.071113313 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.073659834 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.074802298 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.07109398 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.071462964 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.073696802 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.070990475 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.073865452 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.071437534 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.069444337 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.070963489 seconds)
  done (took 3.518614986 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.082412087 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.07380269 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.076589427 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.072144163 seconds)
  done (took 2.078103405 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.080049848 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.079061365 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.086319842 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.091644034 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.077137192 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.079003724 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.084932005 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.085094657 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.066815632 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.087979858 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.068983413 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.068262739 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.067901372 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.087086194 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.084586757 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.063564128 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.064656622 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.078336692 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.077640412 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.080224144 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.070197882 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.066920437 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.077194748 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.07818833 seconds)
  done (took 3.621913717 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.086339187 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.068439119 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.08236817 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.092358409 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.093323897 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.066500997 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.080464117 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.094350593 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.129088482 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.066944559 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.073148559 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.067195871 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.105966857 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.066848975 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.082189667 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.110792215 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.113442765 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.071112879 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.100258831 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.067389589 seconds)
  done (took 3.500286193 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.083195681 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.071281662 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.071797666 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.067360376 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.077811925 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.074511722 seconds)
  done (took 2.232376999 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.072085526 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.069839947 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.071191907 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.073971133 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.069392977 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.06949614 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.068546929 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.067530364 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.067854606 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.068075126 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.068310556 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.068857573 seconds)
  done (took 2.609409796 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.218384362 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.070708748 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.071572199 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.067239618 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.069500973 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.068245316 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.08189518 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.069945926 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.084921866 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.06799802 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.068300991 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.070540539 seconds)
  done (took 2.78605037 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.109017312 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.115337014 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.147494176 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117952379 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117527139 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096979823 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.161152997 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.093940915 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.161867071 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.138428885 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118613885 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094627779 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087996894 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.070998318 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101241671 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119373509 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138376888 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074331642 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114492771 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.205030576 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131912216 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.134165491 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.148217014 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117012777 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.090635348 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.147740936 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098698075 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102816392 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.12523115 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.126717202 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119652941 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.09897108 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.07294911 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.072059322 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150387958 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.105107173 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120978782 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.09429891 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105931313 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089227813 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10829543 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.070763817 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.084625721 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.111312403 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085466847 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.13152244 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.089372926 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115887806 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081245632 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.136371611 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.281266045 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.135414629 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.087246886 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106353725 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138738173 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112465106 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.134221955 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107553909 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083522315 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.119750932 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.103686093 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100702147 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108085054 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080842223 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.177875702 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089630657 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.112655033 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11294966 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.095031549 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09583095 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.108347696 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.136768571 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.126633932 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.126460882 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139110465 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096284486 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122590401 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.100595801 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.13061298 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106462585 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.074013739 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.121732567 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129985557 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099735284 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102617544 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129783898 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093117323 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079018336 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.100252118 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.119853102 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081370792 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.113365522 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08146463 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.110208867 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133132919 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097687156 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112933557 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118099794 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078408791 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.312742285 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110302869 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074584306 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.118208819 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114671296 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157290849 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09700367 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.07761308 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10136827 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104446383 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.150277004 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107803472 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080974193 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111783793 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140281347 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096211894 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.209632766 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096566188 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141181204 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112777878 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088907702 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076096181 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.091438947 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113361852 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108797212 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114018312 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091622023 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.085486184 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088445545 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113088927 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093765633 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081616603 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115231752 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.100177067 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.076021052 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089145569 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.080220192 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142993571 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.079907126 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13874181 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126262923 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.078133654 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107301539 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099334266 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110033104 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.098755078 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117832453 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141066808 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.114692124 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.090826485 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.094749312 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109459327 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.145907162 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127793368 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092679685 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.076609939 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099614167 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.277030152 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.100531603 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.130001504 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099525703 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112611916 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.107189534 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144963997 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145670623 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101105203 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101965546 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10730964 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.123496005 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077314822 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156833572 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105122223 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119356236 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08564017 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142213837 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.113136221 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090524685 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08826638 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101245717 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.105288764 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108257885 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145547456 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.097701934 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.073642273 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093916894 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.145216087 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077913846 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110708745 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.091888931 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.094386039 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119806629 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.094401291 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082324905 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.06943992 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127716864 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.159009804 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.070983127 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.117290484 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.109201596 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103747143 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.121725913 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.070744477 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119995803 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.143768344 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119213896 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141273258 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145502225 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114226166 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.284512799 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.116987931 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.107871002 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081376783 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.126572622 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.135814826 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096911932 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093342515 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135555573 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119393165 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.136463033 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.116684199 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115699622 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.105804842 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108799687 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103769632 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.103291495 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144907587 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122040354 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.124986033 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087209586 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108050235 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118952164 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136929456 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083437527 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143215872 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.084782403 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119207749 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.078673102 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.125133984 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.078447469 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.110257742 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080582294 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101263492 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.070882402 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.075180135 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.143003856 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.113823608 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106853818 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100834794 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.138896003 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.137437576 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.079674256 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109362838 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116336831 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102187604 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117072506 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.109949253 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.090350428 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095998798 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.109329907 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.084849299 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.081150217 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.277796835 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095685624 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127855651 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085320314 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076105977 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140941681 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105224965 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095676325 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079139643 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107545246 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.121840983 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.093870769 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088113034 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115202044 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105348625 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141748449 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.091471066 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.098483312 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.124390123 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081406899 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.093808377 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.070651949 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.086659861 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.077193811 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.127723966 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077027037 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116930146 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.070510637 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.132538396 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088234668 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.09452421 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103485329 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112894972 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129213718 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096559571 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141815002 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090422656 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119158556 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108782208 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095667296 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089165098 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104708492 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.102126989 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.122961621 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.097088701 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123898231 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145040045 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104965612 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.142626052 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092303291 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122444219 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10820021 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.125000203 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11293389 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145358743 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135822862 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.272691197 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115204151 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.079326209 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099246727 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109762309 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.115593367 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.178452114 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125903542 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.073605258 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10660974 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.095347649 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108465879 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105548436 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082979142 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146678358 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102327393 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.089309062 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113870238 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.091684887 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.105004976 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077712587 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096393193 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.101940898 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095819426 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099563975 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115909624 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.129996154 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114400423 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.143699694 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.100374755 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.093410617 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.119269616 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111310153 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111343688 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086873929 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087144466 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138859109 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.119281034 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.126545145 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.101749928 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110377216 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112632082 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101628816 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126408744 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109319124 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.128044006 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081277945 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.077366308 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.069923903 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.073366834 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.124241059 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109642484 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110398785 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097567077 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.072743251 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.265755372 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107961353 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073941465 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089958279 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094857881 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096277157 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.092263647 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106513916 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.112749277 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.092196318 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104822023 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100748675 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.146255485 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.10113602 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089452827 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143913125 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.149198909 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088130236 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093217455 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.072434883 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080191938 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112403313 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149128137 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.151450592 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.07884498 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087993284 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.086632929 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087692265 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.072563933 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.088040745 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.090390619 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10633616 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100515244 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.11410609 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106356316 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076636537 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104139391 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100690809 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093112739 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.105425935 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119572424 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.125920357 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.14198244 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111655434 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108096177 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077313152 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.082005778 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077015351 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080503874 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.103054685 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.079991501 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077418094 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.143918225 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.0927251 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105298764 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109775006 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089558861 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076066979 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13266284 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.231005676 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136028607 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.072946274 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08363044 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.083900677 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080778956 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094266458 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138428072 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110184327 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113464204 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107004605 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105039691 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140135613 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155610326 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080044358 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.143339693 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076335148 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076246591 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076748366 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114037269 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09094526 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115404294 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140016084 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091924843 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104124769 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078086957 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143761738 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.097806701 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104820039 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087982984 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079980673 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14446235 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080900956 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.081616095 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.091141515 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112020401 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.073658322 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105374103 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085209571 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080805612 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143730341 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.631159705 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091219029 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.076337228 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096619077 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.143835206 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12880433 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096140462 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109792537 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.119854528 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100936712 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.096696356 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109335154 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.183457908 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075571984 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094629881 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.261455347 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102912626 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103543624 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.099639699 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.086884305 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.09365375 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.088470948 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080615295 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108343025 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090165613 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.096845863 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107512923 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083475451 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.08746014 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.130355752 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.104426406 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.082438468 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088840662 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.104491838 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08939675 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10095167 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.069929328 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114170265 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.09135648 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117387062 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.095887842 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108060307 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.127252255 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091085597 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138315694 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.107291083 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.123525088 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088194959 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.079464172 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125772995 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.089067628 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078691145 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145025308 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.095755918 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.091992228 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104861904 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.098338305 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114499779 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117798443 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112576965 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.09814718 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079903447 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101270606 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.103445274 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086356143 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07961886 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.07557902 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.077746943 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108590667 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086845369 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.083962956 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115196364 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089544382 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.104172153 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.26455373 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.124188974 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085421159 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102293985 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111090613 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093198605 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110933139 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101642746 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.129165084 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.174538825 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125038275 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.129540368 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134269022 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.077403069 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.076643873 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.069906802 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116717984 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080393561 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.089582063 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082052366 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134267437 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.082962537 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112088254 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.23231259 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081673788 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094781671 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09738084 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.071071569 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084237331 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10918652 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08841447 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081225552 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119836624 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083992774 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.128818643 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112441257 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100647007 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095836141 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08183847 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114864909 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.10310679 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.130196649 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.096032344 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076129419 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115152684 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104594152 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13937193 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.074163998 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081982041 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130730579 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105433108 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133878353 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080891336 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152460729 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.143750304 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.0996073 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.297436298 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073312389 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085021972 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090251089 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.127574734 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085487422 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111244071 seconds)
  done (took 68.909277885 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.15906367 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.145859526 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.083769427 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.105090809 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.189362724 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.199927908 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.121577293 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.097727026 seconds)
  done (took 3.032899493 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.072266548 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.084522298 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.082138531 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.248619051 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.097740342 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.068323622 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.074242348 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.082844912 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.068235685 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.068195244 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.102829897 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.068797041 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.068576263 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.45584786 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.067099207 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.07308969 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.068524429 seconds)
  done (took 3.765443879 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.343839894 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.988328221 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.272024675 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.163952565 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.15097941 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.557260254 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.077692029 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.084534683 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.639211253 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.373911896 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.141280085 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.089506935 seconds)
  done (took 19.810913047 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.080512894 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.123057239 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.121019326 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.075984107 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.075731331 seconds)
  done (took 2.393405698 seconds)
done (took 122.148067198 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.087406551 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.180631091 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.072286119 seconds)
  done (took 2.21055412 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.126258152 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.124289989 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.124830864 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.122064521 seconds)
  done (took 2.432554209 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.078789742 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.079420248 seconds)
  done (took 2.086013257 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.227100688 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.221781959 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.091167248 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.085947349 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.082318833 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.0808717 seconds)
  done (took 2.185220623 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.075357599 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.074014018 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.073162602 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.07346463 seconds)
  done (took 2.213751653 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.173760638 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.068129658 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.07006628 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.072462381 seconds)
  done (took 2.3038148 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.090391471 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.088311251 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.118535554 seconds)
  done (took 2.224369165 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.086656071 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.086359148 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.081648834 seconds)
  done (took 2.18463929 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.114374061 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.099373542 seconds)
  done (took 2.137217038 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.084159041 seconds)
  done (took 2.012268599 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.095430354 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.103232346 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.190342987 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.156999123 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.189586392 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.16993607 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.078000783 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.078702718 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.074530377 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.073580514 seconds)
  done (took 3.135162993 seconds)
done (took 27.680238344 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.088831902 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.384214962 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.36337387 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.091696877 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.67577405 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.360115312 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.005584842 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.095218302 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.105932055 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.071909234 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087690432 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.650070998 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.993195015 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.327405733 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.979177051 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.326237844 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.65281702 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070230494 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068819153 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069576847 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.986552083 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068940585 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069356867 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069955819 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.650477867 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.375197677 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069971834 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.325364106 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069059493 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073447293 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.391711016 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070140221 seconds)
  done (took 16.587134857 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.079953019 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.133646573 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.075779515 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.088464313 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.07400017 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.073133075 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.074697343 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.070992112 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.115944015 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.072099861 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.089787204 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.071276824 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.075684426 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.073140465 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.092100494 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.06925176 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071593725 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.073608128 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069592048 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070501126 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088278528 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.06873761 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070013636 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069875577 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070011949 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.08249964 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070750001 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069362163 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069827013 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073019222 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.07400177 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070864242 seconds)
  done (took 4.436115951 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.132414831 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.137184806 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.076652736 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.114057046 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.123448725 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.073880479 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.156789499 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.096134311 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.119202432 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069676528 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.088024954 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069257798 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.105392958 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071973751 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.093808795 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.071172973 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.072269622 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.072218836 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.071055517 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070152633 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088583829 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069622404 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070057639 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070079694 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.06971 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.084264418 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070466662 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070010369 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.06951153 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072911598 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.074091889 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.0703897 seconds)
  done (took 4.709290048 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.073434739 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.074810374 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.080871877 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.084365977 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.070266485 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.071978749 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.072594828 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.070381198 seconds)
  done (took 2.54617134 seconds)
done (took 30.226773625 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.082994703 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.071083413 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.074121215 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.090764152 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.076845571 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.116523757 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.067779448 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.075812363 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.072484275 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.072508854 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.074264134 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.068247757 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.072363867 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.065943376 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.072954188 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.067140082 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.112994699 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.071132751 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.110945628 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.112434061 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.06924128 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.072820869 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.075711757 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.111246833 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.111359775 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.111457327 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.075922002 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.072911215 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.067870145 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.069930953 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.168900679 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.182107925 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.075381813 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.117013765 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.06664908 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.067146897 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.071270256 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.069430603 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.113229752 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.075803495 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.069048172 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.075930212 seconds)
  done (took 5.524444445 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.193373242 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.197660658 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.187504543 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.080579205 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.092708094 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.081124389 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.191264129 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.078120611 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.076681695 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.191474439 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.072391023 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.07670936 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.079532558 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.070481427 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.077334289 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.073435795 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.078855755 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.071335596 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.076722374 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.076845395 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.19069851 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.070491977 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.081485671 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.078026526 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.072170177 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.078393192 seconds)
  done (took 4.66205945 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.07693054 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.091840563 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.094233744 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.149215233 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.113171472 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.086234949 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.086263379 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.097562289 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.104969717 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.071396698 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.075669346 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.099450982 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.100277047 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.077972748 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.11050584 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.088652482 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.081372827 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.070749439 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.075995722 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.103549198 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.091459364 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.087406419 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.101458079 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.089192111 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.068152793 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078286641 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.075605358 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.084695788 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.075823871 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.080753689 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.072878986 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.072310279 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.069553887 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.080886875 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.076106776 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.107521421 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.091017506 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.081393058 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.083582436 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.10720153 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.078761538 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.070416542 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.096749431 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.134712822 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.068335049 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.071383387 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.072831043 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.080872286 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.070387121 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.098773711 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.085050797 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.068527227 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.087451998 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.070095773 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.070639343 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085576506 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.070546729 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.070885473 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.080606065 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.07502228 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.089688049 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.074539266 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.091464922 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.068883913 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.080339356 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.070543327 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.0708925 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.067530356 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.103806264 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.076265971 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.120297162 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.070191633 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.066759372 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.080896785 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.080265742 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.075746396 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.068685557 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.090102611 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.08231508 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.073576995 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.079932804 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.071347455 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.072148299 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.105102202 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.067626849 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.066882967 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.067075187 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.070811481 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.071899572 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.069108044 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.081770397 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.068249064 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.072480395 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.084338489 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.068520671 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.06912562 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.071311471 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.069880856 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.068199155 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.079279498 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.072538914 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.070787927 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.081439004 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.069827808 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.072150494 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.083749555 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.078562643 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.068792774 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.069891563 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.070860401 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.070703115 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.072642238 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.071373843 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.070520707 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.074922423 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.075780258 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.074317081 seconds)
  done (took 11.43248825 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.214145766 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.1965908 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.070478705 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.190036549 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.077390124 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.118099313 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.191717231 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.130914098 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.069498451 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.070388226 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.068807598 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.139139273 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.134806737 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.145867009 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.115251894 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.069786378 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.094670695 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.14442671 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.193782639 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.187747722 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.09256005 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.076721876 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.071447275 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.070517846 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.07021256 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.078213867 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.085140407 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.077415656 seconds)
  done (took 5.256990554 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.079688645 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.086828721 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.074070867 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.093698755 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.087242777 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.069695253 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.071610648 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.070497989 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.086542334 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.076179349 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.06920506 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.073886103 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.072998147 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.070082563 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.070536369 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.076007216 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.075945471 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.068240946 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.072955516 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.07406478 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.080020947 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.155712134 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.0736016 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.069367112 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.071885808 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.069803571 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.076406406 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.078659392 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.068833154 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.101995498 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.066530288 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.073284449 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.083553465 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.070393896 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.069244052 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.069885641 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.069270635 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.068805609 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.069580117 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.066991453 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.067228927 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.074705824 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.068133866 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.074797331 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.08361698 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.077402211 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.070225844 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.074800611 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.071791757 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.065875317 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.072765562 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.072730502 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.071720568 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.077568989 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.072579653 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.071636832 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.070660881 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.096869693 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.075107169 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.0686506 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.069322076 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.06734302 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.071080657 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.077221578 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.085831125 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.07186796 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.067417593 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.069034128 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.076413265 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.083516081 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.068576236 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.074472538 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.06632827 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.0692645 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.071429366 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.072103109 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.070971042 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.067289428 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.069044895 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.069250824 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.070303145 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.068876815 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.069169078 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.071765945 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.067046251 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.067434638 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.069871194 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.070383825 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.075171386 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.068427646 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.071836716 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.070523963 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.06818733 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.072123639 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.075430438 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.072266278 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.089050105 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.077686992 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.069749842 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.067257258 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.084188045 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.071502861 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.068383331 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.072704417 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.074316887 seconds)
  done (took 9.799741952 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.095396448 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.070903152 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.089190347 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.096093848 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.079908133 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.07446046 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.083449712 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.070094913 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.086039651 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.068061416 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.078106579 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.067453933 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.083107763 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.078239586 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.070660283 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.079857599 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.071801808 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.08998584 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.084159351 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.067811948 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.078324691 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.08172741 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.082097781 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.08760391 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.086729913 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.0877619 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.081274275 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.07155209 seconds)
  done (took 4.256535012 seconds)
done (took 42.870022963 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.035701818 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.255577788 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.021080882 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.305995616 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.069352015 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.134719428 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.105845342 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.01182439 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.293020868 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.041291794 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.342887726 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.357689142 seconds)
done (took 69.990766909 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.103502209 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.163869338 seconds)
    (2/2) benchmarking "String"...
    done (took 2.22141994 seconds)
  done (took 6.334274402 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.61390766 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.019587689 seconds)
    (3/3) benchmarking "different"...
    done (took 2.069211092 seconds)
  done (took 8.642894043 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.112632096 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.631648608 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.242979358 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.01701891 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.019150452 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.427654225 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.822728954 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.477325433 seconds)
  done (took 33.587273778 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.224000071 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.213572003 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.767462745 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.803260756 seconds)
  done (took 16.989228913 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.621590811 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.281025133 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.2794672 seconds)
    (4/4) benchmarking "different"...
    done (took 2.270667924 seconds)
  done (took 11.462531195 seconds)
done (took 89.276716171 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.01984436 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.31462591 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.04196937 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.172151004 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.058665259 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.048125078 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.021942128 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.029910209 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.018045009 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.018437156 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.42961788 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.01603033 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.994717812 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.056195486 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.029233146 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.023532779 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.295313271 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.026999593 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.06821026 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.537531001 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.525311974 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.027834874 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.023763637 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.078607537 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.049407123 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.064046251 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.583601246 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.0333028 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.634614647 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.018857381 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.17440751 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.018265201 seconds)
  done (took 212.397304456 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.02174149 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.141489267 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.195299998 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.033836258 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.534044924 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.198607801 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.161307597 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.575037504 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.012321667 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.020783579 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.258220306 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.002304656 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.224002586 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.971900899 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.01096777 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.04684795 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.18665886 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.224899189 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.010114651 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.209016651 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.041258005 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.064493292 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.021014224 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.172570388 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.02840847 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.105842409 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.020906345 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.019577026 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.194822177 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.152705746 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.041086963 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.008785263 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.209565249 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.872647435 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.027339331 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.020349417 seconds)
  done (took 178.990820275 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.178774398 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.013884409 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.070783688 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.143158005 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.774958149 seconds)
    (5/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.005750494 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.728992895 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.003976127 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.0017227 seconds)
    (9/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.004547698 seconds)
    (10/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.006764 seconds)
    (11/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.01685947 seconds)
    (12/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.001378149 seconds)
    (13/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.066968378 seconds)
    (14/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.434418732 seconds)
    (15/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.014119543 seconds)
    (16/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.998723784 seconds)
    (17/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.994168084 seconds)
    (18/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.422455131 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.991726817 seconds)
    (20/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.992138852 seconds)
    (21/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.991809162 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.062265379 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.369278644 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.127412458 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.994221615 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.00729115 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.131758171 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.003616221 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.992494968 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.135837423 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.994851203 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.074380074 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.127566639 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.004823826 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.075046393 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.999316756 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.478034006 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.992955794 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.996085862 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.999723071 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.059688624 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.991624056 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.098593934 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.084048945 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.996647687 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.011489321 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.188925326 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.681621566 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.995071224 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.993983905 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.996302774 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.99731898 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.001405279 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.013459523 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.995287122 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.028264721 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.60599315 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.997101012 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.000435264 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.002199229 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.998662 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.996436319 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.008414042 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.03362639 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.78339362 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.018792228 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.386293834 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.809701567 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.993748577 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.575608642 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.051477109 seconds)
    (72/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.996158765 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.99858475 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.076197875 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.994352237 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.996521412 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.998461036 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.997068305 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.091582686 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.080155936 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.994502568 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.134779652 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.998609445 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.998537751 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.09652395 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.698200485 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.997289721 seconds)
    (88/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.992315474 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.004958381 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.049986448 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.990422409 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.991792505 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.999339195 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.081821213 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.989709885 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.99001796 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.990426816 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.084826864 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.987678388 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.099918252 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.21295793 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.06111185 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.235300502 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.225843741 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.989994492 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.99345971 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.007472841 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.993439649 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.993415637 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.00383684 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.992371353 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.99281055 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.994712255 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.994846583 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.993281317 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.996057404 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.005123562 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.988847557 seconds)
  done (took 433.684571504 seconds)
done (took 829.250230853 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.639863645 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.820062952 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.58940099 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.630251696 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.594300634 seconds)
  done (took 15.196464006 seconds)
done (took 17.118057942 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.015303073 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.009925135 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.998846341 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.019258499 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.015351179 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.011889305 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.043084171 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.034203199 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.032177092 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.009689498 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.020085443 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.013863454 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.017618087 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.035634089 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.021839091 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.022049915 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.01433245 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.005537472 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.021798142 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.017507272 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.011904562 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.011569044 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.014726178 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.019670091 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.028622255 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.017570431 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.010029615 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.016646001 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.017015124 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.018798122 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.052777296 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.022797629 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.046690673 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.022920145 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.022163256 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.026367089 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.014823242 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.039123552 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.01613934 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.052236354 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.024118176 seconds)
  done (took 84.811326313 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.007876637 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.152205333 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.220248588 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.033572317 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.005961339 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.219747233 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.062207312 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.150731796 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.139665415 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.225608278 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.225043516 seconds)
  done (took 25.371828796 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.007679417 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.143225959 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.222162988 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.040739433 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.008202318 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.224045993 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.066415245 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.136309377 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.148222948 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.223378325 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.230669543 seconds)
  done (took 25.38722628 seconds)
done (took 137.494201276 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.397707358 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.031122275 seconds)
  done (took 6.355689169 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.999028798 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.016914989 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.147626271 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.999149822 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.999777243 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.001819407 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.000747132 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.997711525 seconds)
  done (took 18.089448271 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.999450298 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.997924777 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.997985035 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.99804492 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.996903782 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.998201551 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.997712801 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.996985147 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.999462401 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.998062152 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.998577485 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.000029791 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.999781008 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.999180087 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.999849633 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.997154311 seconds)
  done (took 33.903637 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.997616582 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.99821437 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.999487797 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.998446242 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.999685703 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.999057182 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.001330825 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.000349232 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.998642804 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.998664925 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.99908259 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.99857725 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.999300651 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.998536463 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.998649846 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.999653354 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.997967084 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.999999014 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.000476502 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.999855784 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.999811459 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.000053316 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.004451059 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.999458471 seconds)
  done (took 49.916211257 seconds)
done (took 110.199499902 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.177940753 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.804424603 seconds)
  done (took 8.910461201 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.008603068 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.998794072 seconds)
  done (took 6.003481104 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.005553753 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.008516982 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.010771708 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.00839736 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.010665803 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.007206982 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.006835253 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.012175475 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.008620602 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.008822427 seconds)
  done (took 22.016924391 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.009306229 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.010262889 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.007854663 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.009083817 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.01123671 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.010274976 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.010032212 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.007029606 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.006603433 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.007987611 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.006023919 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.00594899 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.007787918 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.008068213 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.008164321 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.008418571 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.00665553 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.007202929 seconds)
  done (took 38.087269604 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.008604906 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.009027117 seconds)
  done (took 5.955284643 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.005366966 seconds)
    (2/7) benchmarking "second"...
    done (took 2.006538708 seconds)
    (3/7) benchmarking "month"...
    done (took 2.006317442 seconds)
    (4/7) benchmarking "year"...
    done (took 2.006378226 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.00916027 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.003536875 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.971456442 seconds)
  done (took 15.950843203 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.005622852 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.189684569 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.227079985 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.596964706 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.005988214 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.009384044 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.870546098 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.006529785 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.008078819 seconds)
  done (took 21.855065434 seconds)
done (took 120.706810968 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.867593038 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.001632347 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.305354303 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.079143591 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.071670419 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.340243062 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.021740899 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.551519703 seconds)
done (took 44.168762256 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.121074791 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.001811626 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.032763654 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.032779646 seconds)
  done (took 22.999563737 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.00126588 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.348219336 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.019167349 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.000946462 seconds)
  done (took 23.31073722 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.375893965 seconds)
    (2/2) benchmarking "read"...
    done (took 2.35608554 seconds)
  done (took 6.665502793 seconds)
done (took 62.029331472 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.000409311 seconds)
    (2/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.001857483 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.998742732 seconds)
    (4/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.997842469 seconds)
    (5/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.000026703 seconds)
    (6/24) benchmarking ("one", "Float64")...
    done (took 2.000083011 seconds)
    (7/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.003170927 seconds)
    (8/24) benchmarking ("zero", "Float64")...
    done (took 2.000368281 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.001022596 seconds)
    (10/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.999530056 seconds)
    (11/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.998386429 seconds)
    (12/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.00010153 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 1.997729693 seconds)
    (14/24) benchmarking ("one", "Float32")...
    done (took 1.998165087 seconds)
    (15/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.99652598 seconds)
    (16/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.998866824 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.001888898 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.996876643 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.998822107 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.001777861 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.997841653 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.000137282 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.999694938 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.997850736 seconds)
  done (took 49.91538486 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.998855058 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.000536866 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.998294634 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.997689134 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.996714818 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.997293523 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.999381922 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.995321271 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.456318529 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.99901362 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.995744555 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.9977554 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.997337788 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.996562331 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.996348415 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.996285622 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.999747124 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.996425532 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.995346928 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.997152324 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.995506371 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.000670492 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.996812315 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.997131075 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.998333275 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.998390972 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.995890284 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.99817753 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.99861735 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.99421416 seconds)
  done (took 62.309903875 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.999690001 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.994445611 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.996438002 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.997136499 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.997294239 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.996712896 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.994177195 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.99665182 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.995739614 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.994071189 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.996442578 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.995612467 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.99507225 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.99416673 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.995956097 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.996565583 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.996736177 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.995359757 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.995624118 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.994606063 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.996424063 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.993839794 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.995332158 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.995730998 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.995177822 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.995729309 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.994306563 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.995805541 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.995147789 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.993624264 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.999947468 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.996433757 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.9945161 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.990656108 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.994947238 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.997939008 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.997230932 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.996928345 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.001523235 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.994199008 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.998452674 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.996580454 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.994644834 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.995985519 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.996161412 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.998957401 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.994429381 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.992874225 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.996529572 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.995173649 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.000328146 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.994998206 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.994151002 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.993830627 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.994337869 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.001968827 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.992600327 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.995574589 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.994947752 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.994330895 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.999370627 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.99347486 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.993222947 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.99278165 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.994723973 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.998780916 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.993180056 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.991331737 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.992563372 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.996247534 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.996543901 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.993953103 seconds)
  done (took 145.615399776 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.993785953 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.995070291 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.998382113 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.995445603 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.993590877 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.981939617 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.994182036 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.998671152 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.996956199 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.995856665 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.996245408 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.997256343 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.996589423 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.995698516 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.996714429 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.994403997 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.996479071 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.996879866 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.996128378 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.996077549 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.995681146 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.995961816 seconds)
  done (took 45.823026815 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.997442612 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.994927645 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.997255434 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.997531408 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.998363021 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.996854747 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.997834358 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.996576107 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.996933716 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.999294625 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.997029664 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.998707704 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.998373581 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.999074575 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.99898662 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.998913246 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.996814122 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.997844019 seconds)
  done (took 37.887673854 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.999625336 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.998857742 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.996777947 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.995114528 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.997042351 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.99761574 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.998158518 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.997447311 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.994649031 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.998399981 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.001347829 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.997910108 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.997495077 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.997700289 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.997739035 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.000154285 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.999047877 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.996262064 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.997028324 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.998239824 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.99057007 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.995691941 seconds)
  done (took 45.872240269 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.99808646 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.996970905 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.00045882 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.995323371 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.998973096 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.995789212 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.995957663 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.999502691 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.996529621 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.997202503 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.997799151 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.999970893 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.002015353 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.99825812 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.997877129 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.996456634 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.997408028 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.000530114 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.998661441 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.999295631 seconds)
  done (took 41.889104557 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.999255545 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.002471911 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.998164554 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.99840325 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.967615904 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.993721198 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.000886823 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.999437382 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.997884098 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.983793952 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.998660106 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.998214101 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.00050395 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.998771006 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.000894194 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.000035463 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.00012822 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.999304794 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.000798596 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.001040503 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.00112948 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.001951084 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.999388261 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.999685719 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.001665325 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.000779281 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.001284855 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.001997824 seconds)
  done (took 57.876312311 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.999489496 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.001242369 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.992468651 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.999272211 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.000091016 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.000623714 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.001648796 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.00036743 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.000211988 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.002480144 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.00016567 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.998598802 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.001144775 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.001179866 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.001194448 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.998759177 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.999912161 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.003442049 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.999776467 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.001263319 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.999232394 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.001201475 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.003550209 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.002774897 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.999479518 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.997874062 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.001711072 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.002839342 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.00087114 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.002042905 seconds)
  done (took 61.944049814 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.020399696 seconds)
    (2/2) benchmarking "in"...
    done (took 2.02165588 seconds)
  done (took 5.973074111 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.001819025 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.999649448 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.000209909 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.001578905 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.003447639 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.001457066 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.000412378 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.002738365 seconds)
  done (took 17.942487039 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.001878387 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.005560842 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.002879186 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.001574993 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.001600781 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.009981348 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.00474252 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.001868209 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.00602431 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.004532704 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.004973344 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.007002353 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.010294308 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.007710262 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.975691221 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.997449109 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.00317413 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.005149981 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.005957612 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.991552466 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.005813504 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.001727744 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.002665465 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.004199891 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.002229112 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.003572357 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.011561274 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.987725888 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.00523555 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.002569713 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.008751041 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.002888224 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.003375745 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.001958421 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.00313733 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.000797861 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.009046746 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.003470955 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.00292033 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.002429055 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.005134264 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.006159693 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.008397439 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.010928018 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.002646298 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.003769952 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.000500643 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.002741887 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.001823179 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.00878595 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.011128688 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.005127883 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.003661434 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.002274397 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.005965081 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.002732516 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.005083581 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.005071402 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.008959075 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.003457617 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.00666883 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.024151923 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.010564642 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.989736864 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.003398733 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.014379046 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.023778616 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.006536264 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.007474844 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.003632205 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.011408165 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.002736391 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.004721567 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.003826506 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.018629359 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.01215698 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.004409591 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.004313945 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.004086891 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.004224612 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.006271747 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.002257865 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.006122831 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.005240954 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.014539424 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.026678441 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.007115853 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.007546745 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.007957492 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.008922914 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.008887917 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.009331497 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.005712281 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.004098156 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.008075408 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.009162452 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.005984367 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.006398257 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.006855675 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.014649695 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.004952247 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.006056403 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.009581314 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.013853874 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.006013806 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.005529504 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.008513183 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.006501781 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.014918727 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.007852524 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.969136856 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.006230163 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.966555715 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.008591541 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.006435066 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.010603703 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.014242518 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.001475273 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.006729376 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.012002873 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.01187757 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.00870558 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.01582015 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.026878611 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.007270055 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.012101422 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.010575867 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.017779033 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.011897845 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.007713316 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.011947406 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.006992424 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.007200515 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.010326747 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.00663265 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.006144347 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.007422587 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.006740323 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.007439122 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.007192634 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.009730256 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.009560405 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.010767991 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.009951728 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.013220452 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.007619019 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.010757136 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.015523971 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.008496723 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.008699153 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.009330224 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.01215658 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.011869405 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.012855826 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.00865925 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.010314583 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.009037039 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.010180921 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.013220551 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.011188688 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.008854438 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.011303378 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.014777712 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.008190641 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.008715858 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.011876073 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.008962832 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.008331222 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.011316683 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.00906881 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.010651135 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.010142069 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.013468398 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.009798084 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.00886184 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.007924241 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.008596669 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.010264188 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.011661746 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.021159948 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.014114561 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.018067305 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.009531005 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.016748602 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.00794982 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.012131886 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.011960409 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.007880419 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.010025951 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.009255822 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.010382646 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.014027935 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.029319602 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.017869894 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.011616068 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.011851736 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.016889983 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.014546601 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.016385805 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.010189975 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.009895486 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.012204935 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.011422785 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.0126524 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.011640089 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.012067128 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.012486992 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.010369837 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.013413454 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.01292066 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.010301016 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.01241342 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.010646155 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.015234704 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.012132105 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.012595192 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.013594607 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.011368424 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.021902104 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.014538479 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.010414031 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.01322722 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.014388713 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.011932258 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.011868802 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.013100825 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.016284011 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.010800001 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.011202586 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.017586466 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.00984619 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.014697965 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.011764162 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.011218929 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.013366131 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.012211838 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.018530534 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.019267349 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.016104352 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.010777934 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.018238363 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.010211717 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.013795345 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.011870542 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.013921779 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.014588237 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.013882619 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.01300374 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.01303948 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.02045889 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.012588773 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.015321033 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.012937729 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.016005438 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.014138397 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.016933725 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.012713657 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.015401305 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.020399691 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.020159395 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.014679146 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.015182911 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.017890932 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.015080571 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.015927218 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.013963397 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.026125025 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.022070675 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.011962473 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.014209513 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.01312 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.017886225 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.013495579 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.01453534 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.022290719 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.014515802 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.016518108 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.016206822 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.014898607 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.014856689 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.023201407 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.017047569 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.019446377 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.014816827 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.017621662 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.01656931 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.015163312 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.016207729 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.016606526 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.017519932 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.01939382 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.014335859 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.016524692 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.015121932 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.024325557 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.015133251 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.016510035 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.02413279 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.004761509 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.015545045 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.016691103 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.017259868 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.017133264 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.018400252 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.016102936 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.018693186 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.015414765 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.018564794 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.026304714 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.02013528 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.024172288 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.019087653 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.026257365 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.016782845 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.016557066 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.016388474 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.0201527 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.021587973 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.016482745 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.014814361 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.025131849 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.015138206 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.017402586 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.020317897 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.015901984 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.015535999 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.015820153 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.018910199 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.020361115 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.020106007 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.014195 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.01422125 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.01642578 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.017127408 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.019335604 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.017325169 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.016220251 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.017920742 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.017850797 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.015696499 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.018411733 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.014624618 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.019638928 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.016050833 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.017565276 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.023945149 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.01613895 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.017793966 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.020831905 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.017628916 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.026586264 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.015809359 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.015705834 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.018254332 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.017588824 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.021467106 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.018683743 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.018421637 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.018656014 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.019412619 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.020682164 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.028192208 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.02538503 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.019320244 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.018578568 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.017397898 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.017012964 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.040202939 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.039446447 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.019249881 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.021834965 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.02132781 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.029582125 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.019339291 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.026621129 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.020566162 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.027878692 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.021215373 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.018810687 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.022685299 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.030375029 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.020706875 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.018613205 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.020405929 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.026064004 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.022034864 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.018791974 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.02113489 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.026020385 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.022401683 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.034058012 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.021120111 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.024554849 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.023857076 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.021578517 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.018302601 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.021037887 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.025119496 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.023106546 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.022045059 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.022982873 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.0229134 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.028391108 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.023483147 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.025777994 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.02988353 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.022393769 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.020552083 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.025161421 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.021276548 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.025170926 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.022879718 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.022554401 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.02376713 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.022080782 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.024987522 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.026524277 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.031980694 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.024438198 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.022375522 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.022021388 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.026886704 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.021836251 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.024012391 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.025496868 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.033906608 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.026561376 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.036784752 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.032779942 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.023753003 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.025615735 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.030017281 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.029863294 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.022466368 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.021788516 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.024014228 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.025231339 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.023746345 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.026267533 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.023600397 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.024734364 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.027599496 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.024467607 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.021695685 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.026440655 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.025989039 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.027683234 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.025740066 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.031413069 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.024386052 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.024479428 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.025093475 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.024437938 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.027627569 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.030555855 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.02582955 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.02172708 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.027149629 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.023806322 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.030282817 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.023024034 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.023188966 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.026613988 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.025207936 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.025410187 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.026277338 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.025045281 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.024116008 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.02939107 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.03198912 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.023701812 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.028205264 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.027794459 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.029153418 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.025113728 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.025351106 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.02584917 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.026311231 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.033248782 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.025423165 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.026850299 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.025997506 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.024175342 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.032359651 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.027906397 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.03227057 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.026638535 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.027795407 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.023631363 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.032772635 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.035568733 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.028809012 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.0297069 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.031224243 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.031934569 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.027764423 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.026325645 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.028390787 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.028286307 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.02949505 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.031182909 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.027753365 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.030242075 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.027932197 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.032021148 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.029311763 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.02983297 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.027116925 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.027841546 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.031092242 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.039045226 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.03897967 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.028434908 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.029820112 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.027595874 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.030189402 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.038645103 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.02732614 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.029961889 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.027574853 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.031195066 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.029571465 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.036122439 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.035700468 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.0349584 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.026604133 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.033617766 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.045238684 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.029076507 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.039726271 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.059903942 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.029918736 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.028994197 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.028159352 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.029410997 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.027068599 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.032219415 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.028086295 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.037340096 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.027706889 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.031094654 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.034620998 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.026482612 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.028775529 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.029327558 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.033055748 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.037992782 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.028949039 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.036430047 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.030624304 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.028975172 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.032069546 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.03267072 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.027884293 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.029059211 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.029167627 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.033411666 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.027576492 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.032058686 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.039118842 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.030378356 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.032603011 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.043003575 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.040886995 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.031644467 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.029089765 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.030348826 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.035989524 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.031877203 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.028169576 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.02921947 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.036913045 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.032740623 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.035921914 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.033101713 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.031293541 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.028328933 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.029174593 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.029543366 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.04321483 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.038369062 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.032361547 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.031644825 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.03626474 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.029479939 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.03661628 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.036954545 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.030597673 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.033816644 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.031035934 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.031140059 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.032040733 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.031463169 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.034071708 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.03697436 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.988846308 seconds)
  done (took 1204.736638491 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.030044226 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.031556769 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.030575806 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.032843794 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.02989494 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.030833438 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.028702106 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.032263784 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.028744823 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.032440357 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.031924798 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.027348688 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.005168357 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.030834742 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.029564034 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.03262494 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.028344699 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.027933257 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.030815506 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.029324547 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.029631862 seconds)
  done (took 44.571136075 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.031401726 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.030263288 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.033563876 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.030196431 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.032884939 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.031381501 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.033387469 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.03005624 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.033824367 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.033515266 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.029710712 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.031627574 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.032468645 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.031754887 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.029480046 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.032631118 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.034029351 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.0336819 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.032404911 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.030943862 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.030225278 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.032504356 seconds)
  done (took 46.661734611 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.034430181 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.03414666 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.033547179 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.034290435 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.03162069 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.032120307 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.034256707 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.035875287 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.034320906 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.032928679 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.040110701 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.040606273 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.036159154 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.036563904 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.033323389 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.034824854 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.179559417 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.034157117 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.034129209 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.034473502 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.035007168 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.041069861 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.032790256 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.033684803 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.03433791 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.032714011 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.033233765 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.03108785 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.034094075 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.035918513 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.038504041 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.031434058 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.036364644 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.035887584 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.034493685 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.033660106 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.038858157 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.035195184 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.033256126 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.034978523 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.045978998 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.055931175 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.03003955 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.033741889 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.042236482 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.032972932 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.033642942 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.039695457 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.040385493 seconds)
  done (took 101.854873819 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.033979287 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.034199873 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.034618699 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.034656247 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.037741072 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.035618729 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.037560817 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.038380625 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.034468933 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.036556714 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.03604262 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.037356819 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.038144382 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.036707291 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.03693114 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.037546195 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.036243534 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.033222301 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.033741296 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.03312839 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.034654475 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.038665247 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.03538952 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.037398161 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.036605863 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.036337229 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.036277772 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.035540171 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.033194619 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.034503783 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.036267052 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.037103183 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.036771169 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.034037963 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.035299673 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.034942108 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.035673467 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.037049335 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.033536928 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.033268885 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.034025161 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.036019047 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.034990533 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.038167571 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.03637845 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.037419802 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.038430203 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.036247742 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.040576011 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.037363555 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.038509613 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.038645811 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.036402438 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.036088374 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.036349048 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.035797327 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.036203771 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.037470709 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.037654062 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.027113433 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.035415583 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.038471755 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.039682565 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.036921197 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.03723868 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.037664889 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.037914877 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.039283327 seconds)
  done (took 140.425599043 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.04066795 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.038723295 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.040750812 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.038964735 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.037373548 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.039204801 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.039144431 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.040646147 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.037903709 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.039151145 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.037864856 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.040095693 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.04014648 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.040022112 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.039069995 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.039408815 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.037912061 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.041149093 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.041596402 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.039484896 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.038103098 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.040935966 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.040555665 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.041159436 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.042742165 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.036627602 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.041069736 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.040380649 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.04064164 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.04042346 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.039292309 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.040297515 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.039759542 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.040483109 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.041760222 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.040208411 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.041871292 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.041965833 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.039942444 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.0400912 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.019582486 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.036581488 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.041219843 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.040805627 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.040911711 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.044757029 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.042878575 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.039222563 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.041264607 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.039958647 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.039999901 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.042814783 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.041721369 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.041421169 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.043808577 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.041679508 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.041731957 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.04287779 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.041040916 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.042136716 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.041100228 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.043154496 seconds)
  done (took 128.455472537 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.043231865 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.039077238 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.043133625 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.04182965 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.040764144 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.043947982 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.044581888 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.042443208 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.043334522 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.044360015 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.043375798 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.04132091 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.044873505 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.043573817 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.044681903 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.044754752 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.039312081 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.043369836 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.042017506 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.04365335 seconds)
  done (took 42.827012378 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.042954964 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.042553838 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.042711422 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.043340778 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.042275581 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.043320348 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.042673246 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.043303078 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.040406037 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.042456222 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.043261355 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.042717189 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.026398811 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.043621341 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.041917764 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.043282724 seconds)
  done (took 34.637726869 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.042242497 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.041548313 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.043588473 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.044084985 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.038968353 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.043470514 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.04344557 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.03893224 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.044238485 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.042408096 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.044365948 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.043943639 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.044161123 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.043651947 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.044781324 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.043457494 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.041047575 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.044635908 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.042481066 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.044649386 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.047087489 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.043656806 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.044308835 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.044375626 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.045566996 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.043884339 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.04549983 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.044286366 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.041283289 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.044635973 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.042438892 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.047220896 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.045413519 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.045721833 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.045247873 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.0465691 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.043158983 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.045900785 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.041488674 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.045855497 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.044427603 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.045335834 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.046630115 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.045431274 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.045819779 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.045484475 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.046994065 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.046004218 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.045398608 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.044611931 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.046129828 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.046885745 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.046523804 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.043845244 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.045016903 seconds)
  done (took 114.409842983 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.048344344 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.047234495 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.045566911 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.045548861 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.04306323 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.045890954 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.046168875 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.044079821 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.045494 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.045529897 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.047466412 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.045536791 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.046941314 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.048550398 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.050491744 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.045461796 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.044889964 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.045895594 seconds)
  done (took 38.804803542 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.045979931 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.047153042 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.049120285 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.047697334 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.042972078 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.045530769 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.048657537 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.047782248 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.04589231 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.044986482 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.046285439 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.044455847 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.047392908 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.047661754 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.048260474 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.046456401 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.041201937 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.046908731 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.048243828 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.049324442 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.048580425 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.046778055 seconds)
  done (took 47.002402376 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.047089514 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.048640197 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.062235286 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.069181736 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.06608487 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.07982679 seconds)
  done (took 14.349136598 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.04625904 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.049510257 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.048591687 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.048327152 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.049538555 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.047243541 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.046797201 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.049364913 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.048999632 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.048148326 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.049812713 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.048955059 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.048511883 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.050240527 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.048491245 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.047619936 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.048531431 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.047204258 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.047384002 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.049978674 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.048674802 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.052229895 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.05086948 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.047970186 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.04912181 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.049737124 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.048527395 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.050290013 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.049000515 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.050126358 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.049897111 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.048126287 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.050398134 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.048299247 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.050099178 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.049448511 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.045437548 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.036241799 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.049288523 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.050049352 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.048404489 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.049292901 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.045014401 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.048224899 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.047584165 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.051040636 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.049729337 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.045748749 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.049490645 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.052307996 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.047425424 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.051269754 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.047970948 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.052486359 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.050096689 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.051110749 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.045856215 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.049509605 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.050774916 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.050759789 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.050786997 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.049258011 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.049975366 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.050080297 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.049287741 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.050357934 seconds)
  done (took 137.20484704 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.051069283 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.051801168 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.050248796 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.05051896 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.050919025 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.049887748 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.049483256 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.05136848 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.050266934 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.050469928 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.048435101 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.052197388 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.051100822 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.050688826 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.052383075 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.051424615 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.053251541 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.052703369 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.052362195 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.051283917 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.050721047 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.048233987 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.053005367 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.053750476 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.05036039 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.051505338 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.051136432 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.051430472 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.039760114 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.050715472 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.050151217 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.050687641 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.051852525 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.050248316 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.038215949 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.051937594 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.049275177 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.053660715 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.052346352 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.050622409 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.051225383 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.05147386 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.053201786 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.022680267 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.045252265 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.053404967 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.051352605 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.052550832 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.052474514 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.053513077 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.054210474 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.055266249 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.053255524 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.05389909 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.053329531 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.051016424 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.053503266 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.053342152 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.052896329 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.054423459 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.051803541 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.05324022 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.053189638 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.05310347 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.050634249 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.051806629 seconds)
  done (took 137.335576919 seconds)
done (took 2808.258384298 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.091040298 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.134778632 seconds)
  done (took 16.206595606 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.21314881 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.088137597 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.233550067 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.165381518 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.080572956 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.058820395 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.045878709 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.053054022 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.13991566 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.050836835 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.081290051 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.04802051 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.050863995 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.05311528 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.04721859 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.050669488 seconds)
  done (took 55.438302759 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.054722102 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.063411863 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.052931373 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.051066324 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.063976986 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.128838994 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.072038695 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.055772048 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.062357008 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.086509299 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.074114039 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.059771954 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.059483504 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.056731425 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.140496895 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.099384499 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.107910342 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.124891098 seconds)
  done (took 39.389665015 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.131257903 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.065284797 seconds)
  done (took 11.181965922 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.076637499 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.069655456 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.087818125 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.081903368 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.057669224 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.081942712 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.085651034 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.047796596 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.070509278 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.084849649 seconds)
  done (took 72.727204919 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.060725039 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.057098925 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.359960704 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.066266725 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.066990884 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.082996203 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.058062721 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.088357063 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.061256484 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.057324969 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.065319427 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.367778415 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.067723654 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.05875162 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.486420495 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.069368688 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.063595102 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.08690702 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.088524527 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.062848769 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.069447548 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.061196295 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.220643534 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.763512072 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.059855619 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.061130359 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.066305643 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.05612465 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.056972315 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.060999275 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.060584048 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.057458934 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.063841128 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.066195438 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.063703008 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.06501451 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.54118594 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.073247944 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.069670973 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.146605429 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.101641397 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.068109831 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.844529612 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.060130229 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.0562062 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.064151142 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.741397767 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.146479221 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.063306923 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.220867944 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.400256346 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.073957615 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.228346169 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.228453435 seconds)
  done (took 143.345182644 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.059522709 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.391403241 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.210825977 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.058891536 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.354563319 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.2682146 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.759110411 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.105667764 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.058385491 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.278859476 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.19721585 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.167626834 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.060808577 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.06590436 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.054238745 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.056007892 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.220315147 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.128719822 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.057978576 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.059843444 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.082398544 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.218582167 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.16299285 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.062962776 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.077238617 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.27547241 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.106077537 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.167788374 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.562109841 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.058638477 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.127621961 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.525732928 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.066083513 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.058691722 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.100628366 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.159749438 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.147149604 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.064933696 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.057780271 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.056663038 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.749207365 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.259379553 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.162202748 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.191751064 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.210499636 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.270719667 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.531040725 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.060920671 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.573016387 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.231643113 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.270624984 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.278524679 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.159515346 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.061985243 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.358657043 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.063882379 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.712306935 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.289004109 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.199619008 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.165209004 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.053390487 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.062383339 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.060848865 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.308157907 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.061910512 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.164179495 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.062194081 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.062972189 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.16245892 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.167558553 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.201507595 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.285000546 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.091961616 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.789459343 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.277948437 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.232983919 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.125381421 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.288772422 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.062510611 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.06615067 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.146680724 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.660815369 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.189456173 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.304980899 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.298198983 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.08585724 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.649790592 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.060557919 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.212138395 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.235507266 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.347413512 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.207642419 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.113099068 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.960417403 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.063054532 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.066099292 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.109610114 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.187290579 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.285190155 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.418827887 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.302320288 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.649581936 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.086200776 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.439000823 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.171468182 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.064224928 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.720813336 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.065845171 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.269508252 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.109132493 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.067405971 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.055467244 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.230070918 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.080702758 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.066305246 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.844494596 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.122967319 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.065982885 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.24359405 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.064386208 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.313858033 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.055061675 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.295831293 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.008396376 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.091308424 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.234640287 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.205297794 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 5.357124344 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.395026776 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.308740866 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.152802982 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.290931467 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.956680868 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.06522224 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.334829745 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.061325276 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.067187518 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.234588498 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.985268839 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.209488952 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.071829759 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.382946652 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.071888072 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.097474637 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.065982962 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.317285233 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.095704698 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.108835551 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.031446716 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.199329931 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.062654017 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.98893732 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.192302581 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.062902579 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.057394154 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.649439777 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.057160887 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.202365374 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.28751203 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.072624065 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.126878522 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.552388428 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.464495991 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.144864449 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.082861453 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.428198876 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.776122233 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.199074305 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.019118929 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.541186378 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.06395494 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.302511812 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.252120558 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.059123806 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.062861688 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.912509486 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 6.69723838 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.061134655 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.218018087 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.877665627 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.463292696 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.265074229 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.06735563 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.11079103 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.068045864 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.798763715 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.410767917 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.056220925 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.062881364 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.063194761 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.064658047 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.070052161 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.279542345 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.096092919 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.599277228 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.20494678 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.327913043 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.370187981 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.28935989 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.101688258 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.065761345 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.346783758 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.070207497 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.127188428 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.068153465 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.076788414 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.341837142 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.075663929 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.283897189 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.280666163 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.039312679 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.110534832 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.071773199 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.071314082 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.066989848 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.205925659 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.157517036 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.071320739 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.06922422 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.105325618 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.169444584 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.249312389 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.351383911 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 3.06365353 seconds)
  done (took 928.311148801 seconds)
done (took 1268.580475661 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.065251156 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.068762009 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.073945468 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.066469181 seconds)
  done (took 30.266467815 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.064626222 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.06314658 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.064124675 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.064756091 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.065512972 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.067186645 seconds)
  done (took 14.382398335 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.067768489 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.062833594 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.064027668 seconds)
  done (took 23.184791416 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.488305537 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.460817384 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.136189491 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.204815337 seconds)
  done (took 11.283793671 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.069592142 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.067617434 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.067976745 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.068924121 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.067989809 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.064040868 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.067892877 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.066052303 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.073555142 seconds)
  done (took 20.616820871 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.262573686 seconds)
done (took 105.988590291 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.204965236 seconds)
    (2/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.306730545 seconds)
    (3/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.644037586 seconds)
    (4/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.181711154 seconds)
    (5/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.163219704 seconds)
    (6/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.106184928 seconds)
    (7/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.292461498 seconds)
    (8/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.070370271 seconds)
    (9/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.079855733 seconds)
    (10/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.356200619 seconds)
    (11/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.378292758 seconds)
    (12/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.865437375 seconds)
    (13/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.079182473 seconds)
    (14/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.979712769 seconds)
    (15/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.317233607 seconds)
    (16/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.077184742 seconds)
    (17/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.061648927 seconds)
    (18/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.167767689 seconds)
    (19/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.070629579 seconds)
    (20/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.172919611 seconds)
    (21/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.064492629 seconds)
    (22/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.324128405 seconds)
    (23/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.069513102 seconds)
    (24/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.078255831 seconds)
    (25/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 3.999523816 seconds)
    (26/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.184911688 seconds)
    (27/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.447721243 seconds)
    (28/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.831296152 seconds)
    (29/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.018316374 seconds)
    (30/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.274709551 seconds)
    (31/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.076361986 seconds)
    (32/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.382279992 seconds)
    (33/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.67242441 seconds)
    (34/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.246234496 seconds)
    (35/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.301294538 seconds)
    (36/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.100541589 seconds)
    (37/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.168745582 seconds)
    (38/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.286494907 seconds)
    (39/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.835824595 seconds)
    (40/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.072544617 seconds)
    (41/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.919120723 seconds)
    (42/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.363553048 seconds)
    (43/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.302762605 seconds)
    (44/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 7.938595522 seconds)
    (45/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.290372541 seconds)
    (46/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.149473981 seconds)
    (47/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.295317433 seconds)
    (48/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.963202544 seconds)
    (49/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.211072872 seconds)
    (50/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.331681685 seconds)
    (51/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.065866812 seconds)
    (52/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 4.295128827 seconds)
    (53/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.452908262 seconds)
    (54/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.142248934 seconds)
    (55/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.077137522 seconds)
    (56/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.480600778 seconds)
    (57/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.48248919 seconds)
    (58/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.341439182 seconds)
    (59/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.066021023 seconds)
    (60/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.06919542 seconds)
    (61/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.085014721 seconds)
    (62/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.076757965 seconds)
    (63/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.143142706 seconds)
    (64/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.236101929 seconds)
    (65/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.797151907 seconds)
    (66/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.662191243 seconds)
    (67/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.154428706 seconds)
    (68/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.310086611 seconds)
    (69/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.064890972 seconds)
    (70/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.273538993 seconds)
    (71/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.155659349 seconds)
    (72/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.411672949 seconds)
    (73/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.070923515 seconds)
    (74/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.124043522 seconds)
    (75/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.703414926 seconds)
    (76/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.305882024 seconds)
    (77/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.309249154 seconds)
    (78/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.384931648 seconds)
    (79/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.788579528 seconds)
    (80/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.156392634 seconds)
    (81/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.225844964 seconds)
    (82/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.194247249 seconds)
    (83/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.939505513 seconds)
    (84/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.073380629 seconds)
    (85/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.13147105 seconds)
    (86/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.476011431 seconds)
    (87/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.278659303 seconds)
    (88/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.396448891 seconds)
    (89/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.999415341 seconds)
    (90/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.084206339 seconds)
    (91/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.079831192 seconds)
    (92/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.224130451 seconds)
    (93/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.576536667 seconds)
    (94/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.69354223 seconds)
    (95/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.294218716 seconds)
    (96/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.069451927 seconds)
    (97/341) benchmarking ("collect", "all", Int8, false)...
    done (took 4.291263455 seconds)
    (98/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.178818702 seconds)
    (99/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.282371032 seconds)
    (100/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.157079075 seconds)
    (101/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.072413092 seconds)
    (102/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 4.010169699 seconds)
    (103/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.079705792 seconds)
    (104/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.36472474 seconds)
    (105/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.159704491 seconds)
    (106/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.20286407 seconds)
    (107/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.167832242 seconds)
    (108/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.349638162 seconds)
    (109/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.711786741 seconds)
    (110/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.35866814 seconds)
    (111/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.197687033 seconds)
    (112/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.98839692 seconds)
    (113/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.340634167 seconds)
    (114/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.359590265 seconds)
    (115/341) benchmarking ("sort", Int8, false)...
    done (took 4.983539829 seconds)
    (116/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.073036821 seconds)
    (117/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.137389199 seconds)
    (118/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.376405799 seconds)
    (119/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.083741333 seconds)
    (120/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.070692828 seconds)
    (121/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.591988943 seconds)
    (122/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.913767749 seconds)
    (123/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.079778139 seconds)
    (124/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.617782797 seconds)
    (125/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.297520517 seconds)
    (126/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.088457564 seconds)
    (127/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.347419806 seconds)
    (128/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.375113061 seconds)
    (129/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.192888963 seconds)
    (130/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.385024228 seconds)
    (131/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.210982312 seconds)
    (132/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.38356844 seconds)
    (133/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.175123986 seconds)
    (134/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.365528622 seconds)
    (135/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.353372002 seconds)
    (136/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.182245102 seconds)
    (137/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.470213342 seconds)
    (138/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.201227084 seconds)
    (139/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.287009612 seconds)
    (140/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.069657562 seconds)
    (141/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.167037913 seconds)
    (142/341) benchmarking ("sort", Float32, false)...
    done (took 5.737494407 seconds)
    (143/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.532084171 seconds)
    (144/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.077009414 seconds)
    (145/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.926537886 seconds)
    (146/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.209115734 seconds)
    (147/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.069696167 seconds)
    (148/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.209797315 seconds)
    (149/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.165398367 seconds)
    (150/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.320338294 seconds)
    (151/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.047412762 seconds)
    (152/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.15239767 seconds)
    (153/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.461278448 seconds)
    (154/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.270482871 seconds)
    (155/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.5028974 seconds)
    (156/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.0713293 seconds)
    (157/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.323590828 seconds)
    (158/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.067054263 seconds)
    (159/341) benchmarking ("sort", Bool, false)...
    done (took 2.292176733 seconds)
    (160/341) benchmarking ("sort", Float64, false)...
    done (took 5.779115905 seconds)
    (161/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.004674743 seconds)
    (162/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.579324343 seconds)
    (163/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.789747059 seconds)
    (164/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.503444389 seconds)
    (165/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.468469337 seconds)
    (166/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.088791299 seconds)
    (167/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.083652888 seconds)
    (168/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.197877458 seconds)
    (169/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.070835419 seconds)
    (170/341) benchmarking ("sort", Int64, false)...
    done (took 5.752162972 seconds)
    (171/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.067983524 seconds)
    (172/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.10220837 seconds)
    (173/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.069915116 seconds)
    (174/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.516489482 seconds)
    (175/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.168116703 seconds)
    (176/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.958026373 seconds)
    (177/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.184886166 seconds)
    (178/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.242591927 seconds)
    (179/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.088508127 seconds)
    (180/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.847343711 seconds)
    (181/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.29423329 seconds)
    (182/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.286970006 seconds)
    (183/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.099240018 seconds)
    (184/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.194278235 seconds)
    (185/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.549267465 seconds)
    (186/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.193719021 seconds)
    (187/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.091373245 seconds)
    (188/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.081686851 seconds)
    (189/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.480158501 seconds)
    (190/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.292072599 seconds)
    (191/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.227345787 seconds)
    (192/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.107199233 seconds)
    (193/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.07144755 seconds)
    (194/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.811634572 seconds)
    (195/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.369433589 seconds)
    (196/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.398057138 seconds)
    (197/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.504675752 seconds)
    (198/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.076237972 seconds)
    (199/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.523969264 seconds)
    (200/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.667604342 seconds)
    (201/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.39414344 seconds)
    (202/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.101746406 seconds)
    (203/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.043743726 seconds)
    (204/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.763915179 seconds)
    (205/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.98646143 seconds)
    (206/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.473987326 seconds)
    (207/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.070686869 seconds)
    (208/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.096369728 seconds)
    (209/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.208581481 seconds)
    (210/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.477447149 seconds)
    (211/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.080973411 seconds)
    (212/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.082069558 seconds)
    (213/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.783697798 seconds)
    (214/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.481733154 seconds)
    (215/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.181368954 seconds)
    (216/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.074621398 seconds)
    (217/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 3.756474639 seconds)
    (218/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.236342199 seconds)
    (219/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.087944074 seconds)
    (220/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.132978527 seconds)
    (221/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.278974111 seconds)
    (222/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.213292107 seconds)
    (223/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.219047032 seconds)
    (224/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.072575954 seconds)
    (225/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.084789815 seconds)
    (226/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.083730587 seconds)
    (227/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.408342486 seconds)
    (228/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.288632871 seconds)
    (229/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.08414315 seconds)
    (230/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.822347554 seconds)
    (231/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.182495233 seconds)
    (232/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.406465294 seconds)
    (233/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.477092781 seconds)
    (234/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.264643978 seconds)
    (235/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.196927731 seconds)
    (236/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.392202911 seconds)
    (237/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.978732967 seconds)
    (238/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.683328794 seconds)
    (239/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.365961693 seconds)
    (240/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.851758912 seconds)
    (241/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.153469035 seconds)
    (242/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.928872284 seconds)
    (243/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.1589902 seconds)
    (244/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.090494679 seconds)
    (245/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.49105337 seconds)
    (246/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.149344071 seconds)
    (247/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.198702564 seconds)
    (248/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.204301737 seconds)
    (249/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.31358749 seconds)
    (250/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.075709374 seconds)
    (251/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.139536482 seconds)
    (252/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.152942047 seconds)
    (253/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.364168933 seconds)
    (254/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.08071538 seconds)
    (255/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.164881189 seconds)
    (256/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.350353691 seconds)
    (257/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.259119235 seconds)
    (258/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.173875459 seconds)
    (259/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.165212166 seconds)
    (260/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.157905531 seconds)
    (261/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.318057311 seconds)
    (262/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.076060889 seconds)
    (263/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.327605314 seconds)
    (264/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.137141865 seconds)
    (265/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.185029006 seconds)
    (266/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.392444467 seconds)
    (267/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.413339987 seconds)
    (268/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.454996048 seconds)
    (269/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.383178012 seconds)
    (270/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.342220192 seconds)
    (271/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.075757716 seconds)
    (272/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.219522361 seconds)
    (273/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.161758946 seconds)
    (274/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.382786833 seconds)
    (275/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.088518605 seconds)
    (276/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.082427104 seconds)
    (277/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.190359517 seconds)
    (278/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.841559683 seconds)
    (279/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.466498424 seconds)
    (280/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.196974128 seconds)
    (281/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.415028353 seconds)
    (282/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.46077561 seconds)
    (283/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.283659143 seconds)
    (284/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.468947828 seconds)
    (285/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.463628837 seconds)
    (286/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.073073428 seconds)
    (287/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.230102838 seconds)
    (288/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.077555951 seconds)
    (289/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.580624379 seconds)
    (290/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.295184817 seconds)
    (291/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.096308128 seconds)
    (292/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.762856234 seconds)
    (293/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.172360167 seconds)
    (294/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.278616288 seconds)
    (295/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.133380978 seconds)
    (296/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.339827042 seconds)
    (297/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.081442509 seconds)
    (298/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.172575977 seconds)
    (299/341) benchmarking ("sort", BigInt, false)...
    done (took 7.076153364 seconds)
    (300/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.174737969 seconds)
    (301/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.091865883 seconds)
    (302/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.390813836 seconds)
    (303/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.21242499 seconds)
    (304/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.082581693 seconds)
    (305/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 4.155648025 seconds)
    (306/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.359490769 seconds)
    (307/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.175456887 seconds)
    (308/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.07745035 seconds)
    (309/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.078436951 seconds)
    (310/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 4.092502283 seconds)
    (311/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.08638703 seconds)
    (312/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.258867253 seconds)
    (313/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.278127161 seconds)
    (314/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.330037289 seconds)
    (315/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.135011267 seconds)
    (316/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.230255552 seconds)
    (317/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.205998561 seconds)
    (318/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.978968106 seconds)
    (319/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.545732177 seconds)
    (320/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.556565537 seconds)
    (321/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.893995037 seconds)
    (322/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.204350882 seconds)
    (323/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.201685557 seconds)
    (324/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.141592708 seconds)
    (325/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.169472689 seconds)
    (326/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.844857948 seconds)
    (327/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.180752886 seconds)
    (328/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.436676629 seconds)
    (329/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.020769628 seconds)
    (330/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.440915618 seconds)
    (331/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.314760103 seconds)
    (332/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.486672597 seconds)
    (333/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.773022102 seconds)
    (334/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.127393765 seconds)
    (335/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.548719505 seconds)
    (336/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.08082216 seconds)
    (337/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.385042178 seconds)
    (338/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.080846574 seconds)
    (339/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.082288258 seconds)
    (340/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.118791918 seconds)
    (341/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.173655116 seconds)
  done (took 1161.453610064 seconds)
done (took 1163.549376758 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.107846995 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.082267993 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.565768702 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.093313194 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.082637812 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.084118828 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.571906233 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.110762213 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.101512127 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.575392787 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.088943445 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.084343415 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.094913709 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.116806162 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.094125315 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.095655644 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.089271334 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.105271393 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.116200863 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.085000656 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.134372822 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.087279646 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.082366785 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.134033068 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.084382933 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.097032281 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.102957373 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.135265962 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.13129903 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.087746104 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.091789264 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.427805056 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.128669994 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.089200335 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.094149322 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.100114454 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.090683385 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.099251478 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.108826174 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.101691333 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.083922999 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.095035998 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.089239198 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.08816336 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.082241536 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.082407166 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.086015507 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.209047106 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.097449345 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.414486559 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.139130378 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.105024946 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.133569413 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.086022725 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.086142527 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.086470872 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.136275132 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.088503134 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.08907819 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.416160857 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.176834862 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.099492278 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.41407872 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.145804989 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.093930559 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.093608846 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.083243743 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.104169709 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.427696483 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.615612754 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.113521725 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.105187448 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.084196752 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.09288206 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.097051442 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.572757985 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.097212901 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.644437626 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.103009673 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.099181614 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.090909921 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.086179012 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.087151443 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.104873964 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.103750569 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.085565394 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.093788278 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.091038056 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.100380424 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.432438728 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.124814641 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.568920758 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.091799788 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.108276671 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.105510514 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.641889903 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.109995451 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.104594517 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.093693896 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.43461317 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.121558049 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.111212274 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.090370506 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.099287529 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.203556909 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.108912053 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.109383208 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.089776022 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.113745367 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.095700026 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.092227245 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.104694588 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.109496263 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.122562136 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.108877921 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.092723194 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.100544047 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.093432845 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.107667107 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.098755468 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.095766153 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.101668063 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.093751551 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.140253962 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.110830853 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.107150979 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.205128709 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.093659203 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.218694087 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.106513418 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.098805527 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.089849931 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.418410336 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.125050376 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.111681196 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.096792544 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.113049897 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.112069841 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.109852902 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.096150191 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.106063751 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.094705718 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.142408604 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.092686218 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.114153797 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.142143814 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.104042931 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.101448214 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.112338268 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.127302772 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.108756753 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.093367831 seconds)
done (took 328.571972037 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.134207693 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.086367128 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.169327304 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.091496836 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.157605179 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.138648499 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.089297362 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.087908297 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.089783404 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.47190038 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.088540438 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.093007665 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.087582107 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.090225343 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.137023242 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.089854872 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.087904322 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.325270047 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.09066147 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.152074211 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.090518451 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.093820495 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.089919745 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.479034277 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.090590268 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.090503718 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.150037432 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.091091143 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.346340558 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.090031224 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.091107728 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.33014443 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.151084791 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.108877084 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.102103075 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.095377502 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.157594616 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.096536237 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.141593188 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.137511041 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.165870444 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.123992229 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.092598981 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.089673701 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.097156212 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.09241589 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.089289795 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.127201637 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.095726581 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.096623032 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.332900742 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.097136241 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.098018222 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.092170823 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.093843623 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.111294361 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.095837387 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.093554524 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.153056468 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.098091065 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.139579206 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.479106091 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.478144586 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.097807805 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.099327312 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.093904504 seconds)
  done (took 198.524140099 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.157712818 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.178767211 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.164420446 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.096855781 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.148448229 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.16360232 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.095665596 seconds)
  done (took 17.020680891 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.099611403 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.098241061 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.11761183 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.11421847 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.093185711 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.234922297 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.107589588 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.098502902 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.120599634 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.077125911 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.433062027 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.115386546 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.103388632 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.09431599 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.104649116 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.123459253 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.100422922 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.097867283 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.194103077 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.175744216 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.103312721 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.104962865 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.13525672 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.104374617 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.096356676 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.093806025 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.103972126 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.10624897 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.098814455 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.101227932 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.104524581 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.12403241 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.104819877 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.102233754 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.100164255 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.100677362 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.103612896 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.098371023 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.10395386 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.106235504 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.106137027 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.11387 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.108237543 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.105943902 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.106176959 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.133648901 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.106523409 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.106880895 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.105601719 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.105448595 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.142736792 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.105690558 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.103464977 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.112179641 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.139692574 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.117235703 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.108114054 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.107268975 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.107235027 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.092201463 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.112559755 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.18955477 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.128548955 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.106748002 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.13360446 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.145243953 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.108546388 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.107535643 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.107421316 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.133693152 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.107032698 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.130101061 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.109561213 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.205712628 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.114220589 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.250208719 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.132182489 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.112645075 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.116132265 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.107059957 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.116571157 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.112490108 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.110932906 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.115549895 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.116142567 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.108697689 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.117731304 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.110259646 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.11572176 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.109551404 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.158634786 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.109234112 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.111457241 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.208282019 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.109338235 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.21256345 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.136274786 seconds)
  done (took 227.896078761 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.114353399 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.110299031 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.125223826 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.111373545 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.110778313 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.114254312 seconds)
  done (took 14.720193729 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.081595686 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.112515449 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.110730847 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.110355711 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.115105892 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.111899298 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.108817187 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.112166677 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.113431691 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.11733929 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.111295086 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.1104768 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.109894284 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.110606622 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.111155799 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.109517196 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.110773793 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.110441254 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.11199567 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.110684797 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.352915167 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.110655374 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.110543874 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.114009853 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.11483423 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.110458768 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.119236198 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.109995474 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.110863478 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.116001376 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.11354604 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.111634844 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.117741047 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.115763692 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.113480221 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.116386921 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.11444473 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.117332101 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.107312372 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.110250899 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.111118471 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.112265277 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.110418355 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.111598596 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.113316127 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.118668008 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.121425386 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.116112527 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.109613927 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.111125072 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.111044396 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.110746665 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.108367544 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.106499967 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.109653301 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.109821858 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.114919902 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.107297616 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.101553295 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.108320714 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.114635211 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.103307702 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.110271541 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.104484801 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.111649325 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.113466032 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.109613298 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.111142239 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.106006148 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.107036928 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.117224784 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.104252118 seconds)
  done (took 155.270689452 seconds)
done (took 615.443662662 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.24475287 seconds)
  done (took 9.278159906 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.234641856 seconds)
  done (took 9.380640315 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.045822635 seconds)
  done (took 12.079781117 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.13655301 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.149163672 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.099161949 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.106394272 seconds)
  done (took 30.528822268 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.454791512 seconds)
  done (took 9.479599476 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.119396914 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.094679558 seconds)
  done (took 16.311577119 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.133833126 seconds)
  done (took 9.158462133 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.119185496 seconds)
  done (took 9.171389052 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.118505678 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.14565849 seconds)
  done (took 16.320567988 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.116385599 seconds)
  done (took 9.149830572 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.875174743 seconds)
  done (took 9.998888498 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.116087946 seconds)
  done (took 9.144397272 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.120174714 seconds)
  done (took 9.149512916 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.866836189 seconds)
  done (took 9.903162648 seconds)
done (took 171.089866677 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.118934473 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.108457854 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.111601915 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.109289965 seconds)
  done (took 30.479612564 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.146493049 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.13952631 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.15282862 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.148465257 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.134696898 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.138207102 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.141443526 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.148954823 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.138756906 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.140900814 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.143875221 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.143226705 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.144037621 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.158657286 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.152074915 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.145317059 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.144822601 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.149745244 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.140021038 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.156746132 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.142231386 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.144396996 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.107931189 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.112500121 seconds)
  done (took 53.451132472 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.303784569 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.180451466 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.264800192 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.162466837 seconds)
  done (took 10.947910783 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.111066814 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.160290138 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.166039122 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.153688377 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.163374982 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.219467447 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.166041254 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.247291864 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.243314821 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.24382361 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.122515176 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.129642595 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.140516574 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.161390188 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.212395856 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.115433231 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.112304786 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.230777864 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.178502541 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.373219293 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.113379006 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.171016353 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.165919485 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.164249664 seconds)
  done (took 54.304714428 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.113177083 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.121673562 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.12041864 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.110995606 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.115529559 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.112787056 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.123373067 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.112504144 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.139520102 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.111530811 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.114925521 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.116895901 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.115587094 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.118209544 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.115340992 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.129906029 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.13210297 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.113420831 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.12055526 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.122325911 seconds)
  done (took 44.39786749 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.11638392 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.959366809 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.456609112 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.366850639 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.098941682 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.109851673 seconds)
  done (took 33.148328302 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.129376745 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.127145049 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.10930912 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.138327976 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.156837591 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.116894965 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.172679942 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.274237184 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.118615276 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.173629898 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.123898738 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.1128236 seconds)
  done (took 27.794040796 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.100274254 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.11119397 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.121996891 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.123168612 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.124336691 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.124584766 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.125842084 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.114771486 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.127862026 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.136509096 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.123794406 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.125528981 seconds)
  done (took 47.500348803 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.332065477 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.344766631 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.336570472 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.558448517 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.430145191 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.105339516 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.403823627 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.33402681 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.895581136 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.920173095 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.417677364 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.096466134 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.068682385 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.040307804 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.036375651 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.357957068 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.1208409 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.976511736 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.37867697 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.169556558 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.117823139 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.117721098 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.118095468 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.414570191 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.442981713 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.112000885 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.331494843 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.134894985 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.118135058 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.342383952 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.58454145 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.160575402 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.319151823 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.375163554 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.461094108 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.174923519 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.225083207 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.146481751 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.148144091 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.153754596 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.12960295 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.128996216 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.667237082 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.134787673 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.390671877 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.121494531 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.129283537 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.196981374 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.042533485 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.516137103 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.233380243 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.117177708 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.154066019 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.55129393 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.236286735 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.362599821 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.124983259 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.141908796 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.166162091 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.454104904 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.226305231 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.223131117 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.331852751 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.045551539 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.547666532 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.246167223 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.122297304 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.126078033 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.820375692 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.361698852 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.200132827 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.516524666 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.884522791 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.121885964 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.123681707 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.164157327 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.222387081 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.119051168 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.418107927 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.103181456 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.044142838 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.218607352 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.516877439 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.123515154 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.121213269 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.126054405 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.967698405 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.046311825 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.22031033 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.454539572 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.447666958 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.121897244 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.121054418 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.144134577 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.124285907 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.070847222 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.526161466 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.176092729 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.048223204 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.68702456 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.579879597 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.076116352 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.456911197 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.154428141 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.406954244 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.269268375 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.525014861 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.329107307 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.358960377 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.641318411 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.127299447 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.737030179 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.201531664 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.199942778 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.122093025 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.677855661 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.148971556 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.456708757 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.240071031 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.119203927 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.047939016 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.135086866 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.327464959 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.583848724 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.167613068 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.119343663 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.125734868 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.122677153 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.122673032 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.216313415 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.137339051 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.425302691 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.202917454 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.12319474 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.060688017 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.124521702 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.416375147 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.527964562 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.174570469 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.383052176 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.398488432 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.821535553 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.718246525 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.065916205 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.398891179 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.196561359 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.197964578 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.713628639 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.259061046 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.221496247 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.124072976 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.25664917 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.131912065 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.126632946 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.257455115 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.534494081 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.552075823 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.166199092 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.123264842 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.115847709 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.156214242 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.354188616 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.224602516 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.148235509 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.129140405 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.210794365 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.351574287 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.125457893 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.050638893 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.388251947 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.370372916 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.424376664 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.536185005 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.225966622 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.198756199 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.133697194 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.337563021 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.207216696 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.767222275 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.672844689 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.348703524 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.551297428 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.07722208 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.790765737 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.446125277 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.510072189 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.142842323 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.575305501 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.156410022 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.656656582 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.145364877 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.65478779 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.051877553 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.130553621 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.475022155 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.08519505 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.447686283 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.189306515 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.23747438 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.125565495 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.129391959 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.135062656 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.080138629 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.233089787 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.196709634 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.197520205 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.053043097 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.617998631 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.153993927 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.12767462 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.127048382 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.517994566 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.966522875 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.079633389 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.127517839 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.205729524 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.870003974 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.669467944 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.129575308 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.129094428 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.717830983 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.116158809 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.03335091 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.123136738 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.020005277 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.140038367 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.460647468 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.816899779 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.412432335 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.190658534 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.189412469 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.113329219 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.114417754 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.818455214 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.12996979 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.818287336 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.412777318 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.401408234 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.578819493 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.182590703 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.333365508 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.133190783 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.130012077 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.664332804 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.145634726 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.117719674 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.333803466 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.633435249 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.529039203 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.776082542 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.210780886 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.124978366 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.397556286 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.123753286 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.579561041 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.809009238 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.134310743 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.172164282 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.337645282 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.797844728 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.114137317 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.090837235 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.115238748 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.321976804 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.315930604 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.389185648 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.41738114 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.561396709 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.03440201 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.111270947 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.130043694 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.35750069 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.101557014 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.13528971 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.549335266 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.191596992 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.544574376 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.409526358 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.580817068 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.754294743 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.385491975 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.180458059 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.121399269 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.781723806 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.244981619 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.038034781 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.223546141 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.032927742 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.830034784 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.403339462 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.13040841 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.391402394 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.081178962 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.456646823 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.412392262 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.452499678 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.160590205 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.141042515 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.113841757 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.164607651 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.11311663 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.147449713 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.221232305 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.120454827 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.51537823 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.141280537 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.157421859 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.11567268 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.642525778 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.132860859 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.116903764 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.80813877 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.13599223 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.232684553 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.186293795 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.904072843 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.597757563 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.13313939 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.993667599 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.940983919 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.392416798 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.170813365 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.573757724 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.15508737 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.519789428 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.115660111 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.325457613 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.120417768 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.525822212 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.145849537 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.387519379 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.06867534 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.320140482 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.319277345 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.131830907 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.112183526 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.035524674 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.216268105 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.973862501 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.091720457 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.111153451 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.791678866 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.578499395 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.168981744 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.605881738 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.936222155 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.118004901 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.534058329 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.521403618 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.583007498 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.139844151 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.114206073 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.526006648 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.250439833 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.505870741 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.410412463 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.122239823 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.141853568 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.329791616 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.241294233 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.035238487 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.600913152 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.698179656 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.816844656 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.128881819 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.318915492 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.529467042 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.252210901 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.143479114 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.189286933 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.521867532 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.394552355 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.187281283 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.043431085 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.117369347 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.512313226 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.632599015 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.215836918 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.359819414 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.452356979 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.489437128 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.579379795 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.422166931 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.588375513 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.533945593 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.513702066 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.338881231 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.497826251 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.450318697 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.004259601 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.531787371 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.332199824 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.217195689 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.404209296 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.993486441 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.828753485 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.363130861 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.124453506 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.048990793 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.32693979 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.12518905 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.341071658 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.640007339 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.368186731 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.46997772 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.59976366 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.656321268 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.157568484 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.137030151 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.085496403 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.144201183 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.141152123 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.12094235 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.605832444 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.41092286 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.13445135 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.062838451 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.791193924 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.047626141 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.334245413 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.15530716 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.147316766 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.67838744 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.465729656 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.229025363 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.421108353 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.20706435 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.148406931 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.047131584 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.852826787 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.066568992 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.221665818 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.544603465 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.135719475 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.12502822 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.323656006 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.05094176 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.166678886 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.126499346 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.337537375 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.705799832 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.400294085 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.252549391 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.375105308 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.413056614 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.029240917 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.14982035 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.393375835 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.048348775 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.597557357 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.818901306 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.162256987 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.193026505 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.110248864 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.125276145 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.394298139 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.523688699 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.229343017 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.692803144 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.146935262 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.146381412 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.529085397 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.216841169 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.125126982 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.12735753 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.476450455 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.346879293 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.110320238 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.114666733 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.335546278 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.204085017 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.306369921 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.195833846 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.637478027 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.128777895 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.062059829 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.225068539 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.074298359 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.122102527 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.944009749 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.184672379 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.123339351 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.407117304 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.783476303 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.326614343 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.519736715 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.050371157 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.170062488 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.164131812 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.123387947 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.129720768 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.516970839 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.42909307 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.122990608 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.403550021 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.166538138 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.128213349 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.785781735 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.090784003 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.12307125 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.848136753 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.057858737 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.879176574 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.520907214 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.134983673 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.208573147 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.127637903 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.051984842 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.138768802 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.256317609 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.145062468 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.127026048 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.500903627 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.538917736 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.217430925 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.130031188 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.127191713 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.124512991 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.338454036 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.64007518 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.141651147 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.825541157 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.310539551 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.127564779 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.610691971 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.587532056 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.238404179 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.156734322 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.156365754 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.368595771 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.6586576 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.164255478 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.095438996 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.350515752 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.127853638 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.398103543 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.400846807 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.127326506 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.339852942 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.595655957 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.404192048 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.508647689 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.447534011 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.194582585 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.167595305 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.093177963 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.162006616 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.12849513 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.404103549 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.184542062 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.126467657 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.134953393 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.681901348 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.919700483 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.605831038 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.284962271 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.538338655 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.950289777 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.879112731 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.129639751 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.052161595 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.125116361 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.149109952 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.130203591 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.053773466 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.856823535 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.852337671 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.340793266 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.441584881 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.05429775 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.332648313 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.711789382 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.052227379 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.096975046 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.127561217 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.389133862 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.054696595 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.131190848 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.083084016 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.498595933 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.716993471 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.391259841 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.129717572 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.074489404 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.131253783 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.132402804 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.129140259 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.214638036 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.129370584 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.245474566 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.40449443 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.603531191 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.236648439 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.769542632 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.859357935 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.063311417 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.170700304 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.748098308 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.699619673 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.499980742 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.263208052 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.865114589 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.072157007 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.131637446 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.146225076 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.370730225 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.1297176 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.132141666 seconds)
  done (took 2230.316038639 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.153507141 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.209968757 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.204874484 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.184247737 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.269002712 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.259397288 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.184630635 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.2765667 seconds)
  done (took 59.794257341 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.130385293 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.098334651 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.137088105 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.131681582 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.128478822 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.132848237 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.317580698 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.153192393 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.132194236 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.133935904 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.134751038 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.600556701 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.149471559 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.160507085 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.157362839 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.477076031 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.172443265 seconds)
  done (took 81.409630778 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.205587394 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 11.363685855 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.155387977 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.935532952 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.152345885 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.478186565 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.141709065 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.146492369 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.49033556 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.42149846 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.161916836 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.146706367 seconds)
  done (took 95.887556066 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.131158644 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.130814498 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.13096017 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.131902726 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.130559614 seconds)
  done (took 12.709035565 seconds)
done (took 2784.23178252 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.373404209 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.23494576 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.213032464 seconds)
  done (took 6.499123704 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.268853648 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.319517489 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.429073827 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.443119713 seconds)
  done (took 11.522947175 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.409634148 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.5043717 seconds)
  done (took 6.962589688 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.556813465 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.137900688 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.512185949 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.123603619 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.12552665 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.123021727 seconds)
  done (took 23.42541019 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.120875731 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.119594438 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.123306685 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.120233087 seconds)
  done (took 10.529959978 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.117689712 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.897166698 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.115662406 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.12601354 seconds)
  done (took 22.299524585 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.309017615 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.173417948 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.875513655 seconds)
  done (took 9.395015511 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.733599909 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.557920535 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.714908448 seconds)
  done (took 10.042469726 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.00076204 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.093773417 seconds)
  done (took 8.128849423 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.257077771 seconds)
  done (took 4.291271548 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.944622966 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.422651265 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.590815956 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.63783566 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.695712762 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.330478396 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.450216406 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.391088534 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.511034044 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.562446737 seconds)
  done (took 27.561290377 seconds)
done (took 157.295898513 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.539536264 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.134369514 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.396667169 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.489382463 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.357435309 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.329335728 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.41022582 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.489444526 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.166070402 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.159076466 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.483017142 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.353067852 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.357354365 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.126624429 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.366562393 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.129091036 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.348980481 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.55689614 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.170928997 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.417739961 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.412782312 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.138681135 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.321233248 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.139076259 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.336640751 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.257127266 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.713714843 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.113539049 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.303163138 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.728226586 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.247428481 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.539211348 seconds)
  done (took 177.069265851 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.087610193 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.096710519 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.091017196 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.090672511 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.433996284 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.090325875 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.092303065 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.083589777 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.382840857 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.287725373 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.075751272 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.417877451 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.079490786 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.077453328 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.080735159 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.079572174 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.503223177 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.079884598 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.079655787 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.077473751 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.080995915 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.282022573 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.078471011 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.314356057 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.486024855 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.079457842 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.077368306 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.078556296 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.080149561 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.079856574 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.075847037 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.07845129 seconds)
  done (took 215.092856764 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.078942617 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.081858088 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.079973419 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.081451298 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.079794214 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.080783473 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.082479244 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.080130477 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.965134113 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.947246576 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.082600895 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.081027874 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.081336691 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.081079572 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.079218411 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.079000336 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.079391789 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.080214944 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.079046711 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.080510728 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.081100892 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.804582759 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.082002263 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.824839363 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.081996042 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.080901644 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.081377992 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.083528409 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.085480591 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.08456373 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.081734942 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.081177306 seconds)
  done (took 227.824271368 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.318607382 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.082660698 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.082706056 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.091558525 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.081307371 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.081413435 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.083999762 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.328089735 seconds)
  done (took 21.159914687 seconds)
done (took 643.195773331 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.457312622 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.825984299 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.216406135 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.10873949 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.358437427 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.146442294 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.10422019 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.175138396 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.766827379 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.18564676 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.507299811 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.111540515 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.808155152 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.138392592 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.224114938 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.171467507 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.45281205 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.725127579 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.241577492 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.789732791 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.314712495 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.067173792 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.191607647 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.80469931 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.510801967 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.084291261 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.150313531 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.461863064 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.113098704 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.342397555 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.752058873 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.39076086 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.120263935 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.103711448 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.163261212 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.148271355 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.319857018 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.118145106 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.205743245 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.84772032 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.763572015 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.636527699 seconds)
  done (took 109.135559194 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.084987208 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.081336986 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.083028763 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.079889025 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.084541083 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.081068516 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.079359166 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.079961091 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.08797057 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.071486666 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.07091396 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.072176465 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.070926297 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.074593241 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.070522879 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.070388998 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.071037483 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.070950069 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.070542728 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.070333765 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.070423921 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.070586613 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.063804615 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.07100973 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.070257202 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.070919142 seconds)
  done (took 55.963921942 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.064078957 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.243720507 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.351798749 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.097517733 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.065002941 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.069300347 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.093474149 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.072982274 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.066808168 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.066827818 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.157224143 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.072614702 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.077049836 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.349216126 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.095036728 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.065656343 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.0641835 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.065333364 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.250436405 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.085096812 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.097339641 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.073539256 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.095644561 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.082355044 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.068580721 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.065803727 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.068728365 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.48527454 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.079598428 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.161140474 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.131527827 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.099125055 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.45626798 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.362982805 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.131147458 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.069039788 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.061287575 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.199865412 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.080000891 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.060664196 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.088630571 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.068777373 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.346084858 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.591052303 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.076672679 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.055642312 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.476609392 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.210553102 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.10364556 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.071485356 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.348070979 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.087508996 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.056262638 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.056074643 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.092185345 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.067524793 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.056066271 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.343474965 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.070143426 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.082850354 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.061085305 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.051994855 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.235747081 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.059768621 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.226473701 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.061248147 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.058725356 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.0484113 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.332290891 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.080108697 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.568756896 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.073061577 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.044528138 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.137238838 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.226207563 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.486823671 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.060444528 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.233800707 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.454018775 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.084223904 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.055637354 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.447350664 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.087041853 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.056963591 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.045422209 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.045305245 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.045135396 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.089582913 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.072621929 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.485509662 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.573641816 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.352621495 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.087845851 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.060467882 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.046884552 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.329077771 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.05742352 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.04525215 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.325429856 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.597109117 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.06433998 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.05216342 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.549321871 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.064972517 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.075450222 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.05724672 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.340995573 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.078556485 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.088854509 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.04558857 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.052028951 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.049010939 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.075412988 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.056871964 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.045077333 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.544719951 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.20024921 seconds)
  done (took 254.680760235 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.049231225 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.045303202 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.044303566 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.045816916 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.045222752 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.046222151 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.045149836 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.04548579 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.046295724 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.045208469 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.045316478 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.04409174 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.048113385 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.046302917 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.089327457 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.047815832 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.534259846 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.03776938 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.045138282 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.037605102 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.618455425 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.042143263 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.04568034 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.048170721 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.04626424 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.047990484 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.053961354 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.086054309 seconds)
  done (took 172.404840976 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.047353214 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.09547605 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.060468115 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.094877067 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.060245635 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.047618785 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.068558017 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.064176069 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.054527355 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.046839123 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.048091992 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.076078406 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.05531775 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.121678299 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.079402282 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.07902038 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.126460442 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.05547911 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.048496871 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.047956358 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.096288426 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.067708741 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.075441813 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.103580896 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.063393001 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.095948881 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.069685979 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.04862503 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.049269781 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.14099808 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.070718634 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.077208838 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.082954808 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.067801832 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.143864043 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.144403434 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.130345056 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.077674384 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.053177394 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.049168338 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.048699277 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.055617571 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.098356971 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.06297541 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.051808291 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.150246933 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.071917087 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.050394256 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.072963954 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.050385687 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.062451733 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.067238758 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.08411606 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.152830893 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.100119897 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.076176395 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.071672799 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.072646195 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.051321864 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.123948606 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.06437362 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.141292118 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.073782079 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.05747205 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.053279925 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.054671789 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.099368527 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.086507618 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.128756954 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.058794254 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.123659912 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.105708691 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.065017716 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.050899654 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.051434958 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.099506249 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.140347424 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.106963985 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.111770188 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.088070726 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.067458095 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.051134965 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.058561801 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.079097258 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.059312053 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.14149252 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.146841527 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.059480642 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.052321042 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.051626062 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.052698285 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.075335736 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.110078897 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.092864755 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.143030677 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.087299457 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.087141982 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.060329643 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.064286158 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.058195213 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.083390686 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.060197962 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.064363828 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.389116823 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.089398117 seconds)
  done (took 220.690551591 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.401703298 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.10503539 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.122082543 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.320090949 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.423088859 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.138343665 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.091559177 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.112206475 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.112315781 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.217891855 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.161500881 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.144127271 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.089271054 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.075489108 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.104883379 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.111980034 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.131311004 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.420395478 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.208683805 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.753457432 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.100348176 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.348265572 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.410546612 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.440621649 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.14302867 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.491340941 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.716306259 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.192305721 seconds)
  done (took 67.073732596 seconds)
done (took 881.958230292 seconds)
SAVING RESULT...
DONE!
