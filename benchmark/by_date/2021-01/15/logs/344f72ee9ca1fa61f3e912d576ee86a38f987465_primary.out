cset: moving following pidspec: 18870
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.823596933 seconds)
loading group "shootout"... done (took 1.115349714 seconds)
loading group "string"... done (took 0.670214752 seconds)
loading group "linalg"... done (took 8.608192108 seconds)
loading group "parallel"... done (took 0.165193772 seconds)
loading group "find"... done (took 3.007644645 seconds)
loading group "tuple"... done (took 2.114881772 seconds)
loading group "union"... done (took 14.812703733 seconds)
loading group "dates"... done (took 1.444073672 seconds)
loading group "micro"... done (took 0.218035859 seconds)
loading group "simd"... done (took 4.788886174 seconds)
loading group "io"... done (took 1.076767752 seconds)
loading group "random"... done (took 9.521393153 seconds)
loading group "problem"... done (took 1.513379782 seconds)
loading group "array"... done (took 25.205005043 seconds)
loading group "misc"... done (took 1.896990525 seconds)
loading group "scalar"... done (took 43.663500869 seconds)
loading group "sort"... done (took 3.384022974 seconds)
loading group "sparse"... done (took 12.826220611 seconds)
loading group "collection"... done (took 18.954690712 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.447880808 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.117208086 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.166070931 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.116208682 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.214398917 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.123460114 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.131045176 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.086542736 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.885778506 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.159043423 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.116558264 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.426188955 seconds)
done (took 5.491908325 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.191835283 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.250049121 seconds)
    (2/2) benchmarking "String"...
    done (took 0.168891367 seconds)
  done (took 1.694717784 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.094696103 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.064924679 seconds)
    (3/3) benchmarking "different"...
    done (took 0.06941232 seconds)
  done (took 1.505651351 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.067670309 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.138380262 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.068539712 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.069326092 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.068714446 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.068716088 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.068420948 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.068701361 seconds)
  done (took 1.830960701 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.074913993 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.069908667 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.06770485 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.069671647 seconds)
  done (took 1.556997688 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.067915646 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.124557634 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.067019854 seconds)
    (4/4) benchmarking "different"...
    done (took 0.066880471 seconds)
  done (took 1.596695222 seconds)
done (took 9.744656933 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.163950677 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.84566887 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.858854733 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.144263187 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.268550717 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.366285616 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.124167885 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.20566461 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.111788887 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075877316 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.144063185 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.078640973 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.478508821 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.496497081 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071465155 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.170367438 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.653085829 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.089238544 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.13674163 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.453093074 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.073678386 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.087680492 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.084883476 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071158756 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.334478816 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.152521056 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.661997001 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.096077293 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.069754239 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.096130108 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.071855739 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078110508 seconds)
  done (took 11.118901357 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.120311388 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.115624945 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.069958787 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.124590641 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.094399738 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.071035359 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.075897129 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.06846484 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.089203212 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.124676751 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.090867359 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.122119586 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.067584723 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.07030499 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.096614481 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.197437963 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.081403284 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.082232535 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.069584997 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.082012682 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.108493796 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.078959385 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.080835516 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.079369796 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.132889296 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.172254049 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.097860113 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.099053095 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.067022457 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.079376987 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.115937856 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.126029823 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067590412 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.06624494 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.121339275 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.096122006 seconds)
  done (took 4.849960575 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.876209375 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.098908134 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.110240062 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.101552413 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109920461 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.115796038 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.14433512 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.12334821 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.107137978 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.0697848 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.176606062 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.680575092 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.21774497 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.072241117 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.144493219 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.356029758 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.106054651 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.07095536 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069219398 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.097095325 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072344611 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.140142446 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.068828585 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.179062986 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.609371681 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070685264 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069691749 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.096526519 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.181367581 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.144171937 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.094933187 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.071404803 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.567311948 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.067526319 seconds)
    (34/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.138695885 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.065604015 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.091685785 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.096594172 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068939787 seconds)
    (39/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.066096248 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.070168264 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.081180884 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.068669883 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.111398693 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.08281157 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.523478155 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070447104 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.603985631 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.312024617 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.073666435 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072638799 seconds)
    (51/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.065640587 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.101858658 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.065779769 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.070172247 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.25737702 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.142314103 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.067356362 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.273441911 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.070722059 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.070044078 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.071378436 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.105285247 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069454808 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070494971 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.075118673 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098524703 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.888038426 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.149790118 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.097833616 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.070183232 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.403439982 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.076821616 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071345554 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071289239 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.095190598 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.132280112 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068144652 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068354786 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.110697066 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.095310103 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.219659328 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.073053137 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.071138985 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.06972869 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.326299685 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.160573672 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068009123 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.068815907 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.489025175 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.065725075 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067860298 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070930346 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.09340993 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.070691242 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.066252788 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.067270636 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.101911863 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.071253108 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.33706498 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.069978309 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.490720683 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069591743 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.103507849 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.121006594 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068554395 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.102358147 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.068793152 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.066073132 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.074440861 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.067770909 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.067604659 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.072596437 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.068349459 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.069181589 seconds)
    (115/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.071098684 seconds)
    (116/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.071013404 seconds)
    (117/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.06740934 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069792448 seconds)
  done (took 24.030771087 seconds)
done (took 42.153307252 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.40723669 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.082249652 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.08175839 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.081227541 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.080203291 seconds)
  done (took 2.063931148 seconds)
done (took 3.504375356 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.258964198 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.07787016 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.066567827 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.203456547 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.088954703 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.176232344 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.213134771 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.159038699 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.088562221 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.088626609 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.089084192 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.219225413 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.3443352 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.089121576 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.158542311 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.224767427 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.088574254 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.064863999 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.088551526 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.088425086 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.088454315 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.065091269 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.089248128 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.090348642 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.159672978 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.090369305 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.064883179 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.162417127 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.090898397 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.158656651 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.087353358 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.08675913 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.087106304 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.156394039 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.087331553 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.157329315 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.065145995 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.088609416 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.08850422 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.08788745 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.086822918 seconds)
  done (took 6.391515758 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.078909639 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.085123243 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.087107929 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063994866 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073736827 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.085023227 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.064171845 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084162358 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.0937294 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084609012 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084897445 seconds)
  done (took 2.305928135 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.072872181 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.0848515 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.086614096 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.064199004 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.075565685 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08581227 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.064183578 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084712207 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.088258232 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.085875382 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.085870609 seconds)
  done (took 2.246462575 seconds)
done (took 12.298151463 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.19461691 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.09348468 seconds)
  done (took 1.633748637 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.266245475 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.525504413 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.939368957 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.118544047 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.09753604 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.111462533 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.222609632 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.092619027 seconds)
  done (took 7.922901016 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.130465243 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.071636015 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.070309073 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.07099854 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.069760285 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.071365709 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.069914375 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.070818973 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.070249335 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.070034932 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.0716399 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.071827749 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.070857267 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.0712119 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.070424324 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.07017201 seconds)
  done (took 2.670287768 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.106446828 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.071221691 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.101460946 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.063660136 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.074200164 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.064668835 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.073238081 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.07495041 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.072306365 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.072539968 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.074506702 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.072381862 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.073726302 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.073774818 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.07536855 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.075049787 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.075458337 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.073317742 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.075711817 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.07642374 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.07441009 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.075574891 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.07593822 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.074224844 seconds)
  done (took 3.30884051 seconds)
done (took 16.902526226 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.178655817 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.077677056 seconds)
  done (took 1.619382519 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.096315702 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.096809274 seconds)
  done (took 1.575488873 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.075097325 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.062474412 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.080167872 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.072062923 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.063427204 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.0629667 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.079174497 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.063326483 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.063398821 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.063239337 seconds)
  done (took 2.071706474 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.06483785 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.070980633 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.068323007 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.066851593 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.068874605 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.064534223 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.067100191 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.064777011 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.070539703 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.063681534 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.067710248 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.08565551 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.067348314 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.086152616 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.067356865 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.067999861 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.069301 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.066858529 seconds)
  done (took 2.634558111 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.063499978 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.063523551 seconds)
  done (took 1.513823959 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.066964984 seconds)
    (2/7) benchmarking "second"...
    done (took 0.063295286 seconds)
    (3/7) benchmarking "month"...
    done (took 0.066099926 seconds)
    (4/7) benchmarking "year"...
    done (took 0.065760975 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.063766159 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.062937315 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.063855004 seconds)
  done (took 1.83132398 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.428394741 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.184312994 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.417298689 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.069641847 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.07702394 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.255527032 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.064942029 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.069234902 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.069210602 seconds)
  done (took 3.057940955 seconds)
done (took 15.703939007 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.085466233 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.184125397 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.114920402 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.417633494 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.093914872 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.069097821 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.115168934 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.20584544 seconds)
done (took 2.695240208 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.281576326 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.180499211 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.316911329 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.154034452 seconds)
  done (took 3.045666719 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.399343221 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.170175875 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.077043805 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.06967521 seconds)
  done (took 2.116354939 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.067420688 seconds)
    (2/2) benchmarking "read"...
    done (took 0.073147394 seconds)
  done (took 1.537693245 seconds)
done (took 8.390331057 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074120799 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.063391153 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.068985552 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.065419537 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.065227457 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.065023142 seconds)
    (7/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.065621475 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.063175881 seconds)
    (9/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.095062477 seconds)
    (10/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.0632949 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.065864506 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.065894164 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065961125 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065615546 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065474059 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065743384 seconds)
    (17/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.064796103 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.065659481 seconds)
    (19/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.063892955 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06554775 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065259358 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066115524 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.065212531 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.065790893 seconds)
  done (took 3.022602232 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.082299005 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.067678746 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.068797194 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.06848531 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.06883552 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.068821155 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.068690657 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.068226419 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.069229309 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.067907032 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069456454 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.069339259 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.06709793 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.06970663 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067564945 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.069422328 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.068952014 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068138678 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067848622 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.069373942 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.068861739 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068190328 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.069970449 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.068989945 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.069328842 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069830911 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.067808922 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.068047834 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069297084 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.069358818 seconds)
  done (took 3.489034972 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.068962505 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.061201956 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.061878627 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.072098623 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.061513486 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.061914034 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.062264773 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.061656007 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.06176114 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.063144621 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.062289776 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.061582598 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.063005449 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.06178304 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.061928592 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.062733612 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.06701494 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.081514523 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.062283144 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.062334377 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.06669108 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.061879224 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.061946987 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.061824992 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.0623412 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.062476517 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.061976007 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.062536452 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.061802022 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.06266498 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.061934633 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.066717833 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.067523246 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.062342704 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.072845568 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.067937834 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.062305183 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.069213858 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.063238165 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.061800016 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.061676565 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.061684374 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.062242911 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.061932901 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.072510761 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.062176895 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.063218324 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.062579959 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.062220035 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.061969605 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.062359926 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.06405229 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.071499886 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.063550689 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.062026983 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.063374636 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.061791478 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.062803708 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.061979853 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.061899018 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.061877007 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.066206722 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.063744853 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.062511273 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.083041207 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.064046947 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.072745124 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.062033293 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.062354686 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.06625085 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.062982561 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.080799979 seconds)
  done (took 6.047715497 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.074574261 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.073775052 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.081236308 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.072560013 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065991762 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.063180504 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.066569469 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06302729 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.073029358 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.066649135 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062902549 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.06628821 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.073042758 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067125151 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064279594 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.072684425 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.067138407 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066035261 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.063178991 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067354011 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064420029 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.06657794 seconds)
  done (took 2.925263571 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.142362596 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068180966 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.108207065 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.072706549 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.071513526 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.073046829 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.068685014 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068975977 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068614655 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.069202735 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069321125 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068839416 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.071377817 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069522045 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069189067 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.069365075 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.069017424 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.069367671 seconds)
  done (took 2.777830287 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.080176515 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.067461583 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.091557877 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067846708 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.067881568 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.067848661 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071665587 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.072219393 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.067849108 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.068417677 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.073259487 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069051817 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.067748881 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068384905 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067655706 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.067982725 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.068033246 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068031321 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.072075981 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.071823895 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.072074155 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.072360879 seconds)
  done (took 2.975794702 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.080102628 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066658578 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.082996239 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.068924329 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.06204838 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062143594 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.068807503 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.067646084 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.06874174 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.066957163 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067569547 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062583384 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.069153409 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067664498 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.069822492 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067562995 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066941161 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067886469 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067371999 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062606163 seconds)
  done (took 2.779061709 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.101313967 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064579823 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.064761986 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070271755 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.064984223 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.075591135 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.070527164 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.065732024 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.064888355 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.087220504 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.065174422 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.065130114 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.070316084 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.068561356 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.065700813 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071002652 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.070697538 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.070397787 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065646787 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065975692 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.088049161 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.06533666 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.07025741 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.064936681 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.064905674 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.065291784 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06511249 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.068367739 seconds)
  done (took 3.375672649 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.066696115 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065201774 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.065521819 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.065502265 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.065560995 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.065541857 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.065360464 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.065588502 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.065254685 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.06565205 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.065484188 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.065271039 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.068719739 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.065189687 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065289055 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.065956815 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065489569 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.066029291 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065780282 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065840165 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.065090456 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065373655 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.065529786 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066039085 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065989069 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.065383227 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066147456 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065796972 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065463616 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066528988 seconds)
  done (took 3.399546303 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.075499687 seconds)
    (2/2) benchmarking "in"...
    done (took 0.073229154 seconds)
  done (took 1.569203827 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.063817463 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.080857515 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.061263701 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.074437642 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070619384 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.06562871 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070576084 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069631304 seconds)
  done (took 1.972114377 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.095289675 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.120043727 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.064137812 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.065244099 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.093433789 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.129288573 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.101807324 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.075136755 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077002478 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.065372 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.062604525 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.101403772 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.061825914 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.075823014 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063553749 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.071740365 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071672508 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.081979837 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.076069616 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.060373172 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.074785697 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063748424 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.062160083 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.064566718 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.063206767 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.071013685 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.080167827 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.076522346 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072733844 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.061242891 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.082645506 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.062018758 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.063537137 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072484029 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.094059438 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.062485793 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.100444877 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.062873263 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.067769299 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.062012368 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.075608716 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.083305644 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.075811337 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.079311058 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.062897813 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.062895339 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.060148937 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.062616777 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.065580404 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.071107118 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.060791161 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069212201 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.060308239 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.062577443 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.072181517 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.061289095 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.066073555 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.070845598 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.075126924 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.072045497 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.073542185 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.076828101 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.070182606 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.068212015 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.061803583 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.080970328 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.062844575 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.075137986 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076618012 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.062169731 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.07464014 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.061682039 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.061399998 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.061041957 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.095614532 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.062729128 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.062087002 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.060953888 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.060798482 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062247989 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070570938 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065807758 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068271852 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063791401 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076839658 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070447019 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.060596765 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.067155677 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.079301027 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.064954154 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061215228 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.07769094 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.06489371 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060103823 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.078607 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.071083908 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.062364468 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.061763992 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.064530459 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.073778747 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.061155778 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.058896248 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069445812 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.061260373 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.087351214 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.06382408 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.207941165 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.061952242 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.072800126 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.066375068 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.063368598 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.060275765 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.066189767 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.061921907 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.059861564 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.07076102 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.061009969 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07604494 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.068102478 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.075942877 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.07636509 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.072096525 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.077278082 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.061158091 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.059824861 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.079085829 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.071083197 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.062196874 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.07932413 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.06090546 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.074752578 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.060264025 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.06205638 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.071266394 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.059837229 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062689171 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.061024777 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.065715153 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.062173458 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062910616 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.068084082 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.070851414 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.073721335 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.062010848 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.070424184 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.061405108 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.076766295 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.07118454 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.06583368 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064147272 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.061534318 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.073291015 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.068335532 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.070929853 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.060348061 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.061534396 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.061420121 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.07243598 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071195516 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.06263774 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.068322102 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.065846972 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.06188571 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.061479217 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.062253903 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.065020191 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064218741 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.062067642 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069591052 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.070434008 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.075055385 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.067775347 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.070450847 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.060056318 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.060410314 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.06252546 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.060348201 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.065537423 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.070631154 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076509485 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.072814765 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.08307683 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.061095688 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.071374242 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.062657664 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.078303756 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.075135381 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.062015202 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065528225 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.05993822 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062811554 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.071354552 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072983231 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.075195284 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075922116 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.065984587 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.065754328 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.06021782 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.07617279 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061154815 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069686919 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.070540169 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.065027233 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.06106377 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.06212069 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070352368 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.065639641 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.060620512 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.076743649 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.066370506 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.060114365 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.07509858 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.06056049 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.071265426 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.060524079 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.064811474 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.068475475 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.06361226 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.072229876 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.077681085 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.060529122 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.062232948 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.077924582 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.207628384 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063625375 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.070782155 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.077338477 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.06641936 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.070005371 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072535859 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.072249282 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.066581414 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.071707759 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.062239897 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.071172466 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.064597978 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.073598868 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.06081603 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079578325 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.059859906 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.076507777 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.061149895 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.072196297 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.061370235 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071177568 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.061815961 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.078148719 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.062682073 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.061783383 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.073260673 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.059972316 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.070756779 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.060366969 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.067059859 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.068391298 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.072547179 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.064415272 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.072935868 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.064112642 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.072140884 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.06769304 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.07093842 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.072188812 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.067224337 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.061451908 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.070888359 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073782945 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.071482848 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.064044315 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.063827216 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.063084003 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.072724294 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.064060672 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.06365937 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071597109 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.068017286 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.068811736 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064033061 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.064582792 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.064296341 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071666964 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.073028086 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081202853 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072221094 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.071135906 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.072512928 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.062026645 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.078785854 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.062789159 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.073734846 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.061512314 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.069115692 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.072513019 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.061800779 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.08048282 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.062378745 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.069523676 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073517089 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069971319 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.065128907 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.079367781 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.064314979 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.070106225 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.070792423 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.067806613 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.069683899 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.064530932 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.071513803 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.072743398 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.073935522 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.063663407 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.070699569 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.07233449 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064058609 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.070181997 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.064203832 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.071366785 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.064662492 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.061444214 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.067686242 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074579488 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.067824091 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.067925631 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.062897398 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.06038411 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.060835564 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.06739676 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.066419781 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.071494945 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07779098 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.061268347 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.063282586 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.061989586 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.066470465 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079121629 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.070470049 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.069001796 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.065536522 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.059712894 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.061724212 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.061398688 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.20612118 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.065029034 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.06080099 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.061188645 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072545051 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.06288028 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.066149934 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061237975 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.062386729 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.071414356 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.065886401 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.061776582 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.068584309 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.060891165 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.066999373 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.060440199 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.062362623 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.065853414 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.060480463 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.065579548 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.072015293 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.077972184 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.068135935 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.070266824 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.061923141 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.069490996 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076793173 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.067710835 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061967332 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.072102678 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.061586277 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.081719259 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.072646296 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071344468 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.072843168 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.06371241 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.0804379 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.066781772 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.072454498 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077040619 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061858044 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.06713719 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.06031934 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076859795 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.065737464 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.060380967 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.069689572 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069683266 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.067535618 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.073731266 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.061566871 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.069655483 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.066314661 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.065223732 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.06262044 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.06238959 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.070327274 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.077351821 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.061691981 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.065344663 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.071383087 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.071791095 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.067603124 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075714755 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.07197346 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063854939 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.064670031 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.066641585 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.063611634 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.075137274 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063063166 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.067347128 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.067360555 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.061925199 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.069505732 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.079809488 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.072679121 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072742666 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.06161817 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.061502285 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.081063085 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.066747409 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.066005217 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.071160802 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.07117998 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073699638 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.071204231 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078387971 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.061684515 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.067577037 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075227997 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.063670083 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.062847871 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.066837244 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.064297861 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.07221295 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071711631 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069169712 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062876085 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.068213454 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.074786362 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.062058043 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.066217206 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.065809502 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.06163521 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.071684255 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.069398568 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.072919674 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.0618991 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.060083633 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.064483906 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.06966855 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.068827142 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.070113166 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06287397 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.067545676 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.075953972 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.070365823 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.209479223 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.061437356 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06623583 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.072596192 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.067428043 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.062374687 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.067583289 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.066474406 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.069351123 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.072840347 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.067779927 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.061957208 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.080006272 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.071244817 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.072604985 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.063852788 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.064036535 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063338037 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.061740928 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074243443 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.061890574 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.064002138 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.067770098 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.063845287 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.080470038 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.071229771 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.078774574 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063446332 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.067081658 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.061747626 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.072327995 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.067020595 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.062188589 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.073199198 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.06121036 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078643585 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.074589389 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.067964517 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.061948921 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.068058448 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.070778273 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.077803883 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072331398 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.0717206 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.065896982 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.073122175 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.064470715 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.074149648 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.062003555 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.061458326 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.073426522 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071965428 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075692718 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.062327992 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.073796585 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.06437498 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.071221497 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.071352042 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.06413185 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064054088 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.064111844 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072603496 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.067455378 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.072905127 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.0678381 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.080222768 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.063647994 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.074419409 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.072221094 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.074200606 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.077396851 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075507592 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.071238492 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.063218059 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.07068919 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.071136411 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.063988332 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.068095621 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.066291812 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.08509197 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.064632844 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.064353719 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077732143 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.069352341 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.062598999 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.069646196 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.067704067 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.073274903 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.063745129 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.073928968 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.06706024 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.063530031 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.068077519 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.06821218 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.06134769 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.061656126 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.062207616 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072897065 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.067236957 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.06282859 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.0823211 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.064042082 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.071968198 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074507808 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.069862522 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.0643915 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.061505772 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.063752717 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.075964299 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078802462 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.066195791 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07131531 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.062381239 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.072134689 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.0600085 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.070113672 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.06844848 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069272397 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.059505592 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060871709 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.076337294 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075876528 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.066691857 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.07151263 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.071445029 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.063411982 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.083788808 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.071130214 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06261255 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.072534614 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062942921 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.061261085 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.061028093 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.0629502 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.073460429 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.060831336 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.063768641 seconds)
  done (took 42.87455882 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.108274696 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.065192391 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063952656 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063697623 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071832511 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064802046 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063820422 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.064355624 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.064135728 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.065743223 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.062626221 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065972248 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.06880011 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.076148174 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071570555 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.066056006 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062325017 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063305713 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.06253622 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06328664 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.068840632 seconds)
  done (took 3.014609116 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.066558465 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.066497388 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.066548538 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066642885 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066060995 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.062487661 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.06663613 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062382216 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067092867 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06321526 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067099401 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062511089 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.06302869 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.063060448 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06282213 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064415812 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.066866273 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066252208 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.062765038 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066758704 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064229818 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.067081729 seconds)
  done (took 2.946630594 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.064391985 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.062833207 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.071477194 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.061694844 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.061647386 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.065495224 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.061967782 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.067008917 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.067058566 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.067343638 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.071945441 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.063239619 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.061888104 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.069214687 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.062586508 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.063300019 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.104856966 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.061672617 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.062626022 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.060554403 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.063358587 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.070434792 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.060726636 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.060671831 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.065750621 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.063764514 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.06063588 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.063282911 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.061250984 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.06549372 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.061651268 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.060212625 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.070154007 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.070669763 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.067203824 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.066797351 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.063573065 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.063294252 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.062366237 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.061627636 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.07128785 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.063331616 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.062436279 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.06357479 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.07168976 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.062153154 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.061504809 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.071620444 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.061664144 seconds)
  done (took 4.724293662 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.073361058 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.115062201 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.068111219 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.095892547 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.075586213 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.068239303 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.068642063 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.097283072 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.063151949 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.063821215 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.076344612 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.076641255 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.065342155 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.066789906 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.068390087 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.065392578 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.06605171 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.064107417 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.067498108 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064515293 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.067516086 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.069691317 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.075122281 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.075951827 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065915896 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063987168 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064579072 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.066144156 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.075123402 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.068088539 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.066915331 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.067134602 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.075579027 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.070480979 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064625602 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.064587875 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.076061075 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.065399599 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.065058512 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.063469369 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.064506757 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.066051929 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.069517404 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.076658892 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.065430522 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.070523698 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.065152262 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.063176661 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.076564149 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.064892015 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.068936389 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.077093305 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.066287827 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.065636924 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.066675238 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.076230829 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.065204171 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.063667683 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.065112375 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.075563207 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.063523204 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.065615478 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.079829158 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.06476147 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.06826568 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.076821432 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.070531871 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066278162 seconds)
  done (took 6.428880427 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.072260005 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.098200481 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.078463517 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.079044837 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.073199413 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.07386811 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.073274073 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.073030115 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.073223443 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.07597213 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.073519922 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.136253441 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.069662581 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.07526692 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.073702062 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.07315807 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.07304824 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.07311483 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.073137071 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072715527 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.073488347 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.078277216 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.073181923 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.078337852 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.075862747 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.06948612 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.07282626 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.073271337 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.078452814 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073022174 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.075308435 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.073018087 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.073091409 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.078750103 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.075540157 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.073238569 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063701171 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072745003 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.073095659 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.073042663 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.069539259 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.078369108 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.07345989 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.069779634 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.073139813 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.073401409 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.078895901 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.075939001 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.074905692 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.076508776 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.073266072 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.078908811 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073499202 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.073655902 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.078838309 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.080785627 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.078681809 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.078879248 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.07320472 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.07888911 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.078588374 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.080890645 seconds)
  done (took 6.274579473 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076603347 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068674289 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.081545334 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.06187675 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061935848 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.071933859 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.062195604 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.061980497 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068813289 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.069011175 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.070843755 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.072204842 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.074150608 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.070815141 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.072236334 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.073886916 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.071908493 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.072119244 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068807975 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.072335582 seconds)
  done (took 2.961275238 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.078261332 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.081779782 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.068069263 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.071896782 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.068255069 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.072071776 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.067676035 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06851589 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068617948 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068011197 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.073615287 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.073455022 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068552816 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.072138157 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.073149432 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.072179998 seconds)
  done (took 2.68041651 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.066058681 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.070509696 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.097023921 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.063960557 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.065577396 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.062778951 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.063518621 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.061847909 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.06522006 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.07715594 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.063590767 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.06570955 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.06349249 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.062229279 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.062538357 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.065624116 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.064520426 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.0628822 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.063665868 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.095977389 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.072124047 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.064202431 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.065937597 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.06303331 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.06513191 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.071692846 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.064436386 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.065406951 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.063254416 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.066021421 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.065403278 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.070702969 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.065576891 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.063815488 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.062168276 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.063391604 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.063629954 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.06595528 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.066827443 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.063534816 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.061730898 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.068726003 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.063626114 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.064075172 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.065148045 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.066025474 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.064828362 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.069724885 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.063985665 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.065422884 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.063746969 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.065360625 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.063719807 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.070595782 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.065618609 seconds)
  done (took 5.192733763 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.080323964 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.06826578 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061654221 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061650075 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.067401738 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.06830492 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.067629529 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.067877397 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06813052 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.06171394 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.068351236 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.067392328 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068340023 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.067759044 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.068370932 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067905075 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061701252 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.067868777 seconds)
  done (took 2.773466536 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.068779792 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067703197 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.066429963 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.06381113 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.062079936 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067907215 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061289945 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.062078772 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061978357 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.062311858 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062510446 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.062253712 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061875845 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.062005277 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.06620055 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062600273 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.062320043 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061582642 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.064073253 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062177893 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.068501978 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062422736 seconds)
  done (took 2.948764402 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.119947989 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.085979086 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.158551495 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.081564694 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.090756578 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.074308533 seconds)
  done (took 2.157712257 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.096045418 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.097789789 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.06603884 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.065651417 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070426552 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069487004 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069942501 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06937567 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072054178 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072461611 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070611837 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074960574 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073720148 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075312204 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072246059 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072451348 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070826131 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070736527 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067890515 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078263106 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07111486 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073556686 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069359204 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068707195 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068745032 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074620242 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07251777 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073723529 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069365668 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072600043 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070932978 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069078656 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072613019 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072694712 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.065943363 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07251849 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06926649 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078314245 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07268443 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076347423 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.067706648 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073051459 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074311468 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073817053 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074936437 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071475548 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07422629 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071216121 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.0710907 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079948051 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073130924 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.076335868 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072270817 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072805063 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072321686 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078031359 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072951431 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07432874 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071166256 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072826831 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074277508 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071158777 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07458195 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073142569 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073156316 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076743708 seconds)
  done (took 6.36870638 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.107250905 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067845575 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070687138 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074812484 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076246029 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07131695 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07109978 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070887144 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070951532 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068289185 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.106673439 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071151794 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076477782 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.079544979 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070942008 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07093319 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071193867 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.076024544 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067906467 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079593192 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069957024 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073883856 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074171079 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074299392 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073017774 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07090873 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069415907 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070218386 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069813403 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070506326 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073977821 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070836324 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07625369 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.068289578 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07619105 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07097218 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07099628 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074409985 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07107912 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072896322 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076646039 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078940172 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070971696 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071236966 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075218028 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071391894 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071334561 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068709841 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071353334 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068635209 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075629378 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075046898 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075201104 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076817897 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071376285 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071657566 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071642537 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070991936 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071487885 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072614497 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07680228 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071076753 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079893247 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071337019 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07148668 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076654836 seconds)
  done (took 6.432749195 seconds)
done (took 133.507096341 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.235907024 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.199394411 seconds)
  done (took 1.958388973 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.076068441 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.197131198 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.074332125 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.074375178 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.109315373 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.107139327 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.10348476 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.071586855 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.07520201 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.073598341 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.140706727 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.10367014 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.071603542 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.091786799 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.071510815 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.071562242 seconds)
  done (took 3.057874283 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.11015712 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.214882054 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.083740683 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.071880888 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.152917408 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.076844417 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.071941278 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.07698274 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.076445683 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.070330784 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.106210672 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.082858178 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.075395013 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.076194374 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.072093112 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.077026059 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.078401284 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.078501438 seconds)
  done (took 3.215099028 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.106119786 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.093912212 seconds)
  done (took 1.767100402 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.160028725 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.107634054 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.143666577 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.342503711 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.135799928 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.138766795 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.142432648 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.136350175 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.110448098 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.132763665 seconds)
  done (took 3.101142546 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.107914903 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.106607766 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.310222762 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.103983086 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.084183725 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.079142175 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.076746785 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.081422618 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.076549614 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.078009997 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.123951871 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.077055505 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.073559567 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.124317755 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.097647809 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.106125451 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.071458243 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.077796161 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.081034904 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.072298906 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.077300956 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.082133023 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.179713091 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.079501477 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.099310854 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.075184763 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.076755732 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.074095649 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.074130845 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.077595274 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.078234736 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.098446317 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.078018018 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.082390929 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.076150921 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.096304535 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.071693087 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.099245332 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.075720218 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.072756483 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.074996297 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.078574862 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.072492608 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.077653759 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.07530911 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.077792446 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.079922442 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.30078283 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.075128658 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.073795212 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.072600224 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.076273059 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.075344908 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.076608873 seconds)
  done (took 6.593745603 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.1218254 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.113700401 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070286481 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.115716627 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.10843022 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.07049422 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.122830596 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.103723354 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.121973155 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071292038 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.070261386 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.070954881 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.07837469 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.082713117 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.119196538 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.111241902 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071140484 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069811685 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.110969651 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.11311744 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069622318 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.108004769 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.115934474 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.112523663 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.06860309 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.06980185 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.06815122 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069910175 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.077750928 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.076464668 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.070471922 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.08087159 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.085270966 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075017044 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068161114 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.068228227 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06858382 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.076091908 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077834003 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.078612062 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.07496794 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069659604 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.070253358 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070838136 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070808991 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069441463 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.079158086 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.077771975 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.079132229 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068754413 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069051447 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.068492827 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069261632 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075318973 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.074243052 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.076125735 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078864789 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068748714 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070299555 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.071891074 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.082016415 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.078879787 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.078979768 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071504796 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.079160459 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.070649527 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.081396969 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.083268074 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.070279173 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.070363984 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.068698 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069025034 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069527007 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074781985 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.074900663 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069694468 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069536071 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070089023 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078775599 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076019472 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.0685984 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.076113955 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069018747 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069675903 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069152668 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068936746 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.076503436 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.075898949 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.071552902 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070178962 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.070385697 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070370694 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.069741349 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.078865158 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.076487539 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.076515217 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.216636538 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070889686 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.079693734 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.077812936 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071025428 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.07672822 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.070449457 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070650175 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070459903 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.076724077 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.076439698 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.078408958 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070758966 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069839984 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.076748423 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.07962955 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.070323578 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.076336358 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079267575 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.07757306 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.070161289 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.079986355 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068744622 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077527887 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068816181 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077171369 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069179436 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.074633569 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068992043 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.068121909 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.068932944 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.077612331 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.06918796 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070350137 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070663075 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.07010146 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.076987397 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.083330264 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.06962867 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075334165 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.074872728 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069343328 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.077741161 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.06913314 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077504318 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069066742 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070159326 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06883703 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.081075078 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.06934587 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069111796 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.070400371 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.079405397 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069134855 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077278771 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.073897218 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068375403 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078119447 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076952628 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.07454975 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.077354992 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069687513 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069094862 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068801001 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.071654837 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.076748678 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078339342 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069557338 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069180131 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.074061662 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077321246 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.068377455 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.074809201 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074845763 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.074658857 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069185003 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.068733058 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.077800967 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.079580841 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.074780099 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.077755418 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075726197 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069333617 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.074378375 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.077178301 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068749751 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080264197 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068615238 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.078824285 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.077588337 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074088475 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.077753174 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.078587401 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.076224814 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.07706393 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.078262617 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067945041 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067999604 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.21868989 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069855358 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071016886 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.077023979 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.071007172 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070929581 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.082908618 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069181909 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.078160902 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.068675124 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.075524635 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068419813 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069271181 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079454586 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069091891 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.06983278 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074441261 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069035646 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.074397583 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077827293 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.074761007 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068581955 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069496973 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.077831425 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.077826931 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069211226 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068650272 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069491888 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.076947959 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.077503873 seconds)
  done (took 18.897397058 seconds)
done (took 40.160865949 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.172129552 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.117567738 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.214115425 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.203057939 seconds)
  done (took 2.361847441 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.103893094 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.066986196 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.111252524 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.122051528 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.06723148 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.10701866 seconds)
  done (took 2.182839646 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.204297783 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.177929102 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.244900516 seconds)
  done (took 2.224568602 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.373824118 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.152790735 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.219611411 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.503547769 seconds)
  done (took 2.945954788 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.140919784 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.132254358 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.079905102 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.142538646 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.084100936 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.062191086 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.132281765 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.069636959 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.101843546 seconds)
  done (took 2.607067208 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.142430703 seconds)
done (took 14.061072202 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.354553399 seconds)
    (2/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.318798604 seconds)
    (3/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.283808388 seconds)
    (4/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.103201619 seconds)
    (5/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.335196181 seconds)
    (6/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.211055651 seconds)
    (7/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.168602018 seconds)
    (8/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.278504009 seconds)
    (9/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.076768519 seconds)
    (10/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.276478893 seconds)
    (11/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.224485251 seconds)
    (12/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.077442972 seconds)
    (13/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.123388024 seconds)
    (14/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.111699198 seconds)
    (15/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.125019007 seconds)
    (16/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.096184038 seconds)
    (17/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.079979233 seconds)
    (18/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.161096112 seconds)
    (19/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.148884749 seconds)
    (20/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.302012521 seconds)
    (21/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.077127231 seconds)
    (22/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.157797995 seconds)
    (23/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.073962851 seconds)
    (24/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.07752423 seconds)
    (25/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.078564757 seconds)
    (26/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.070961294 seconds)
    (27/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.088454132 seconds)
    (28/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.220265039 seconds)
    (29/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.204456244 seconds)
    (30/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.248540458 seconds)
    (31/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.076541891 seconds)
    (32/341) benchmarking ("sort", Float64, false)...
    done (took 0.139468112 seconds)
    (33/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.078303412 seconds)
    (34/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.081547311 seconds)
    (35/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.111062864 seconds)
    (36/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.076138862 seconds)
    (37/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.163243208 seconds)
    (38/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.2060781 seconds)
    (39/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.077433638 seconds)
    (40/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.187263576 seconds)
    (41/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.067435468 seconds)
    (42/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.149311291 seconds)
    (43/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.203331851 seconds)
    (44/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.199977842 seconds)
    (45/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.06709304 seconds)
    (46/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.314246262 seconds)
    (47/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.109156689 seconds)
    (48/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.080654832 seconds)
    (49/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.081280158 seconds)
    (50/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.090784411 seconds)
    (51/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.077762091 seconds)
    (52/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.245274062 seconds)
    (53/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.090397945 seconds)
    (54/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.067506609 seconds)
    (55/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.155658674 seconds)
    (56/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.08852629 seconds)
    (57/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.15761815 seconds)
    (58/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.090163331 seconds)
    (59/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.074894058 seconds)
    (60/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.087926704 seconds)
    (61/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.069369161 seconds)
    (62/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.298043584 seconds)
    (63/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.067556537 seconds)
    (64/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.467550201 seconds)
    (65/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.225780405 seconds)
    (66/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.163479107 seconds)
    (67/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.078563062 seconds)
    (68/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.075511865 seconds)
    (69/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.077093849 seconds)
    (70/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.188307351 seconds)
    (71/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.066596187 seconds)
    (72/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.076283446 seconds)
    (73/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.241313077 seconds)
    (74/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.201293179 seconds)
    (75/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.149687409 seconds)
    (76/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.087124721 seconds)
    (77/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.1594309 seconds)
    (78/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.16516928 seconds)
    (79/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.126185837 seconds)
    (80/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.172992347 seconds)
    (81/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.070070603 seconds)
    (82/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.075538807 seconds)
    (83/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.127735785 seconds)
    (84/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.208309746 seconds)
    (85/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.078396956 seconds)
    (86/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.14023509 seconds)
    (87/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.076089666 seconds)
    (88/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.090642199 seconds)
    (89/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.150783988 seconds)
    (90/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.26035954 seconds)
    (91/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.086744048 seconds)
    (92/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.206061208 seconds)
    (93/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.102951841 seconds)
    (94/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.14959247 seconds)
    (95/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.225178551 seconds)
    (96/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.091289448 seconds)
    (97/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.067780254 seconds)
    (98/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.073156192 seconds)
    (99/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.07439437 seconds)
    (100/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.089910157 seconds)
    (101/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.067507357 seconds)
    (102/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.07576466 seconds)
    (103/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.067619006 seconds)
    (104/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.167421271 seconds)
    (105/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.068653839 seconds)
    (106/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.091241648 seconds)
    (107/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.067806249 seconds)
    (108/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.07547835 seconds)
    (109/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.183379238 seconds)
    (110/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.186918416 seconds)
    (111/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.07490531 seconds)
    (112/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.075545576 seconds)
    (113/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.135258975 seconds)
    (114/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.067576526 seconds)
    (115/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.104937202 seconds)
    (116/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.094363304 seconds)
    (117/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.217057376 seconds)
    (118/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.234899686 seconds)
    (119/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.067473022 seconds)
    (120/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.074123472 seconds)
    (121/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.167057669 seconds)
    (122/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.068492866 seconds)
    (123/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.06773206 seconds)
    (124/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.077654939 seconds)
    (125/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.071688332 seconds)
    (126/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.066222313 seconds)
    (127/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.076858448 seconds)
    (128/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.164022427 seconds)
    (129/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.085217366 seconds)
    (130/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.06846507 seconds)
    (131/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.06667529 seconds)
    (132/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.066885992 seconds)
    (133/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.066585112 seconds)
    (134/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.074409482 seconds)
    (135/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.09305022 seconds)
    (136/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.066517787 seconds)
    (137/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.077487048 seconds)
    (138/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.066089916 seconds)
    (139/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.090192682 seconds)
    (140/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.075029221 seconds)
    (141/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.066539987 seconds)
    (142/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.20390023 seconds)
    (143/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.151257035 seconds)
    (144/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.067661019 seconds)
    (145/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.06755262 seconds)
    (146/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.06909761 seconds)
    (147/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.075048221 seconds)
    (148/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.076503912 seconds)
    (149/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.170194875 seconds)
    (150/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.1619183 seconds)
    (151/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.087848087 seconds)
    (152/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.070226743 seconds)
    (153/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.076383669 seconds)
    (154/341) benchmarking ("sort", Bool, false)...
    done (took 0.147145679 seconds)
    (155/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.323933274 seconds)
    (156/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.068465296 seconds)
    (157/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.170426132 seconds)
    (158/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.160654809 seconds)
    (159/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.212867519 seconds)
    (160/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.069156799 seconds)
    (161/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.068762953 seconds)
    (162/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.067824369 seconds)
    (163/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.069983046 seconds)
    (164/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.074240905 seconds)
    (165/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.075109998 seconds)
    (166/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.077030814 seconds)
    (167/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.081792392 seconds)
    (168/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.150075371 seconds)
    (169/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.08771272 seconds)
    (170/341) benchmarking ("sort", Int64, false)...
    done (took 0.069032664 seconds)
    (171/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.194493536 seconds)
    (172/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.088017901 seconds)
    (173/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.144805677 seconds)
    (174/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.072235105 seconds)
    (175/341) benchmarking ("sort", Float32, false)...
    done (took 0.139959238 seconds)
    (176/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.092489482 seconds)
    (177/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.161552789 seconds)
    (178/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.149301069 seconds)
    (179/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.160402058 seconds)
    (180/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.153921258 seconds)
    (181/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.14901408 seconds)
    (182/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.067136092 seconds)
    (183/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.06725822 seconds)
    (184/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.145504665 seconds)
    (185/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.069236906 seconds)
    (186/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.077082835 seconds)
    (187/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.072001629 seconds)
    (188/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.067459855 seconds)
    (189/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.076739849 seconds)
    (190/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.202118153 seconds)
    (191/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.201062757 seconds)
    (192/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.068098977 seconds)
    (193/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.066472949 seconds)
    (194/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.077448815 seconds)
    (195/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.149969651 seconds)
    (196/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.090307393 seconds)
    (197/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.089415128 seconds)
    (198/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.148789978 seconds)
    (199/341) benchmarking ("sort", Int8, false)...
    done (took 0.149725729 seconds)
    (200/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.066326434 seconds)
    (201/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.066112018 seconds)
    (202/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.066293271 seconds)
    (203/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.210514506 seconds)
    (204/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.226514083 seconds)
    (205/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.079539569 seconds)
    (206/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.06653685 seconds)
    (207/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.065853541 seconds)
    (208/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.066963745 seconds)
    (209/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.064781124 seconds)
    (210/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.095567303 seconds)
    (211/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.07438966 seconds)
    (212/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.072986646 seconds)
    (213/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.06584311 seconds)
    (214/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.068280995 seconds)
    (215/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.066932025 seconds)
    (216/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.065790589 seconds)
    (217/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.073721368 seconds)
    (218/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.089136048 seconds)
    (219/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.065035414 seconds)
    (220/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.066674438 seconds)
    (221/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.073168412 seconds)
    (222/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.067147679 seconds)
    (223/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.06690817 seconds)
    (224/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.075818548 seconds)
    (225/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.09223453 seconds)
    (226/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.075094168 seconds)
    (227/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.092788601 seconds)
    (228/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.066131589 seconds)
    (229/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.077887765 seconds)
    (230/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.120651913 seconds)
    (231/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.067734011 seconds)
    (232/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.094676365 seconds)
    (233/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.068200356 seconds)
    (234/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.064211097 seconds)
    (235/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.066697282 seconds)
    (236/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.068230261 seconds)
    (237/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.067626152 seconds)
    (238/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.077547778 seconds)
    (239/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.077370669 seconds)
    (240/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.076408272 seconds)
    (241/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.070257004 seconds)
    (242/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.070405399 seconds)
    (243/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.196423137 seconds)
    (244/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.066190962 seconds)
    (245/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.06929687 seconds)
    (246/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.226115931 seconds)
    (247/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.074660999 seconds)
    (248/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.0663044 seconds)
    (249/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.067138198 seconds)
    (250/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.084168167 seconds)
    (251/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.131699271 seconds)
    (252/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.069130322 seconds)
    (253/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.08217478 seconds)
    (254/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.066757742 seconds)
    (255/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.067423712 seconds)
    (256/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.068336388 seconds)
    (257/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.074172592 seconds)
    (258/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.071087468 seconds)
    (259/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.074690652 seconds)
    (260/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.087051964 seconds)
    (261/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.213293792 seconds)
    (262/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.073446619 seconds)
    (263/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.067570178 seconds)
    (264/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.067525446 seconds)
    (265/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.065105445 seconds)
    (266/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.074001165 seconds)
    (267/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.068808101 seconds)
    (268/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.067166975 seconds)
    (269/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.069532618 seconds)
    (270/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.066099049 seconds)
    (271/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.184711594 seconds)
    (272/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.111852854 seconds)
    (273/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.065236272 seconds)
    (274/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.067792311 seconds)
    (275/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.065232743 seconds)
    (276/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.063463857 seconds)
    (277/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.065796045 seconds)
    (278/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.06746022 seconds)
    (279/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.06722016 seconds)
    (280/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.066476682 seconds)
    (281/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.066450827 seconds)
    (282/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.066792258 seconds)
    (283/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.065547411 seconds)
    (284/341) benchmarking ("sort", BigInt, false)...
    done (took 0.262441364 seconds)
    (285/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.066000937 seconds)
    (286/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.067619853 seconds)
    (287/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.121800952 seconds)
    (288/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.066952888 seconds)
    (289/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.062962719 seconds)
    (290/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.064864099 seconds)
    (291/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.064896564 seconds)
    (292/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.068898546 seconds)
    (293/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.07174289 seconds)
    (294/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.080234634 seconds)
    (295/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.065094293 seconds)
    (296/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.068524198 seconds)
    (297/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.146170105 seconds)
    (298/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.157283666 seconds)
    (299/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.074957155 seconds)
    (300/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.064718099 seconds)
    (301/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.070740405 seconds)
    (302/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.064121232 seconds)
    (303/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.074364096 seconds)
    (304/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.064122498 seconds)
    (305/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.063767879 seconds)
    (306/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.064156018 seconds)
    (307/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.067227428 seconds)
    (308/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.071123199 seconds)
    (309/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.063662208 seconds)
    (310/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.064645436 seconds)
    (311/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.063731497 seconds)
    (312/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.064888063 seconds)
    (313/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.06752968 seconds)
    (314/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.093414347 seconds)
    (315/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.071804374 seconds)
    (316/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.088340481 seconds)
    (317/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.070771482 seconds)
    (318/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.066345821 seconds)
    (319/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.065782187 seconds)
    (320/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.090267465 seconds)
    (321/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.068266804 seconds)
    (322/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.106292584 seconds)
    (323/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.063375922 seconds)
    (324/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.245308194 seconds)
    (325/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.064147612 seconds)
    (326/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.07520254 seconds)
    (327/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.063572721 seconds)
    (328/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.077642139 seconds)
    (329/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.065141545 seconds)
    (330/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.08264311 seconds)
    (331/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.062959436 seconds)
    (332/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.080372652 seconds)
    (333/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.075584538 seconds)
    (334/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.064241051 seconds)
    (335/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.178362524 seconds)
    (336/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.179469547 seconds)
    (337/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.064336483 seconds)
    (338/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.147458946 seconds)
    (339/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.063980175 seconds)
    (340/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.064098268 seconds)
    (341/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.064753193 seconds)
  done (took 39.220359083 seconds)
done (took 40.838542841 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.135315245 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.083100602 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.080633958 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.078137906 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.082902371 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.083775756 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.085817044 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.08312664 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.084767756 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.083829388 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.115307337 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.070887464 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.079357019 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.087068175 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.080349847 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.08739408 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.083720689 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.087144464 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.071249605 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.086147312 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.096234621 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.082221407 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.078487073 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.084861129 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.070765604 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.0785208 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.12715463 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.090413868 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.07515423 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.07996191 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.077479584 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.089111278 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.077541793 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.075581705 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.079241845 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.075676543 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.079071358 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.07654848 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.125791454 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.075584856 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.069362421 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.081494614 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.07676341 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.077064512 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.077974956 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.08115241 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.074334422 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.08253057 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.068283923 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.079936663 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.12534135 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.073623145 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.073335541 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.077159894 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.074407303 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.077997337 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.073086175 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.080302861 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.073937543 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.08072677 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.078577904 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.077468697 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.068580935 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.077191789 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.075751281 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.075937572 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.067545023 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074011645 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.068577932 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.068444681 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.067473202 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.077448185 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.075703019 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.073443239 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.067348531 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.068323624 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.067308325 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.08058448 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.074514186 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.077939624 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.068305701 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.073521393 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.073053046 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.068726481 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.073836658 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.080091933 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.067792626 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.068842889 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.067435125 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.08316511 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.074720945 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.068319001 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.08001823 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.07370522 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.073610158 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.068128347 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.067297261 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.073545904 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.076057319 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.068149514 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.066935964 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074018794 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.073167102 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.077193194 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.068910707 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.07360857 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.073434488 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.066753086 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.076959542 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.075198105 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.076631376 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.081527138 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.077053388 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.080037564 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.068320306 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.066850617 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.077240341 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.06795892 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073005912 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.224873495 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.073776412 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.075744547 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.067782299 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.066500003 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073272814 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.076985084 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.066399401 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.067416502 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.067880476 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.077334104 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.075387607 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.066711574 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.067584004 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.076631478 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.076982059 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.067041112 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.06700944 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.077257749 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.067899138 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.074211594 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.073395907 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.077023515 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.067542679 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.068112225 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.066707741 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.067055986 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.067144663 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.072851772 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.073037063 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.068053144 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.076788038 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.074064212 seconds)
done (took 13.731152009 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.069103805 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.110535147 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.118205338 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.115227694 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.082064602 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.069932765 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.072948057 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.088563841 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.072185548 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.094033268 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.09488115 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.091029771 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.135079253 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.067654654 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.068780949 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.069739576 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.067432951 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.081098932 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.117949908 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.092769613 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.105673407 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.068486318 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.085005709 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.088554546 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.08339389 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.086810183 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.069993796 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.069186193 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.07112833 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.087188159 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.095065545 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.068882963 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.069449467 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.086814545 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.083604293 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.076693021 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.06910887 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.075101461 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.071759214 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.068128805 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.070147376 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.08608545 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.074716475 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.07501632 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.069368685 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.069452181 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.068839659 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.075925405 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.086357078 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.074014095 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.080799709 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.087710401 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.070665521 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.068777082 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.067208797 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.076187326 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.068858044 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.06936372 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.068975343 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.068998606 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.068995145 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.071108773 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.07436616 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.07516903 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.072310432 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.075182178 seconds)
  done (took 6.983485452 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.086053254 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.095291247 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.083559393 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.08362224 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.068618599 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.068806578 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.069602296 seconds)
  done (took 2.326063962 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.06992444 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.109146543 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.11666282 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.116032325 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.123217397 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.112984035 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.068004002 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.098786013 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.066613086 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.107438892 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.117883567 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.116424682 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.070611409 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.07907977 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.06757993 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.114753349 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.067893836 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.07421504 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.110351023 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.120124607 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.073561063 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.099430052 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.082730312 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.069402049 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.117301143 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.111227323 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.071556555 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.069709388 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.069440166 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.068545885 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.068573053 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.091435563 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.110459038 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.081180128 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.069865603 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.0682686 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.108828825 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.06945625 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.107719436 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.078207897 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.108387918 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.069151778 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.069585225 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.068838632 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.070459136 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.11274049 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.069976885 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.068915207 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.068170868 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.111453603 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.06775836 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.110402578 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.07129482 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.073860541 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.073655008 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.073499582 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.076175723 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.069341138 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.112198886 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.07582795 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.068675464 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.121551548 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.120627658 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.108993265 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.121132996 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.07760509 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.112511531 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.1098878 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.06862399 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.068443687 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.069616324 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.123118238 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.071916353 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.070849649 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.069699901 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.073675129 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.113449655 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.125442453 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.125359154 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.082916673 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.071504191 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.068955793 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.074995125 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.278012705 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.073994096 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.069023058 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.069644924 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.068155346 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.073793455 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.068867751 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.073448756 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.068884419 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.075642431 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.071275103 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.071073995 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.117747995 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.069413952 seconds)
  done (took 10.353684204 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.071543672 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.071137372 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.070346723 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.069658019 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.070063607 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.069829973 seconds)
  done (took 2.213262696 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.092748659 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.069060608 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.080837093 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.069220556 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.091692645 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.113856685 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.114229542 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.071377866 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.086077039 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.080186858 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.114316543 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.116240011 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.113978869 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.070903552 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.114634636 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.070486574 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.114629391 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.073033881 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.080105694 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072128149 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.086439985 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.071598966 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.071835036 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.120629132 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.072528157 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.070512184 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.070533929 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.080623766 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.079812352 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.071691112 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.071530673 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.072609271 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.078814477 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.071936066 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.115265025 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.078186761 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069928164 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.075270821 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.072543419 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.072836993 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.117112985 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072041403 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.072219596 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.075103588 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.071452176 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.078170265 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.074690529 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.073192001 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.12017694 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.074515665 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.07432203 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.069695467 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.072058142 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.074646868 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.078037962 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070837518 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.074276122 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.11448765 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.070656317 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.078145527 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.069333228 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.072372226 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.071350948 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.071516828 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.074702644 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.074435495 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.078248748 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.071287122 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.071529079 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.069087887 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.074608897 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.068990978 seconds)
  done (took 7.626914736 seconds)
done (took 31.25881305 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.553616632 seconds)
  done (took 2.302696936 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.947411809 seconds)
  done (took 2.74044818 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.123128702 seconds)
  done (took 9.929688361 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.337701587 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.411862725 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.738615937 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.132964614 seconds)
  done (took 3.461373371 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.749832579 seconds)
  done (took 2.554106566 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.233979598 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.221254223 seconds)
  done (took 2.26273887 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.374588814 seconds)
  done (took 2.168853045 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.188658536 seconds)
  done (took 2.982976933 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.236045214 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.164441273 seconds)
  done (took 2.208148789 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.648553026 seconds)
  done (took 2.448008678 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.526098378 seconds)
  done (took 6.338547711 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.243916385 seconds)
  done (took 2.102134445 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.2346117 seconds)
  done (took 2.046356428 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.028365363 seconds)
  done (took 3.831010665 seconds)
done (took 49.188829656 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.087973306 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.090130326 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.088451857 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.081701501 seconds)
  done (took 2.124507764 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.076863846 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.072432476 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.075854137 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.075897978 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.073861019 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.075653426 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.075579266 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.072671917 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.073885513 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.072590838 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.07090893 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.072403157 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.074903171 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.071982631 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.075142364 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.076143414 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.072533087 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.07247264 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.074698294 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.072437696 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.074887096 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.072383413 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.070383261 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.072152776 seconds)
  done (took 3.572366646 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.081328979 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.074227656 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.077591962 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.073336874 seconds)
  done (took 2.127448072 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.078759339 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.078392331 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.087499274 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.092581133 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.077901784 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.078734721 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.086339306 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.086737629 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.06787209 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.089308246 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.070588943 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.069262811 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.069342985 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.088667687 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.085907143 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.064988082 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.066091373 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.080129262 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.0789983 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.081707815 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.070999628 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.067887768 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.077749272 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.077879085 seconds)
  done (took 3.692708209 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.085070375 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.067473324 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.08436645 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.093199703 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.094769067 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.068084218 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.082786725 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.095661201 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.130820411 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.067882788 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.07403721 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.068085334 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.107938451 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.068265496 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.084214428 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.112693368 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.115587473 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.072514332 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.100861323 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.066265621 seconds)
  done (took 3.566358815 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.081387941 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.07190935 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.07233458 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.06773293 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.078975726 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.075715975 seconds)
  done (took 2.277745839 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.070900197 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.069871614 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.072071699 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.074478089 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.070141468 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.070266483 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.069200493 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.068218404 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.068257101 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.068883051 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.069276269 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.070041537 seconds)
  done (took 2.663232247 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.212936026 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.069733107 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.070437753 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.06665685 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.068130619 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.068758384 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.083359102 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.071354409 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.087132817 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.068932281 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.06913443 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.071875396 seconds)
  done (took 2.832278392 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.107156629 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.111377666 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143726037 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117306663 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119895114 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09883196 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.164726119 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.094626375 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.160441731 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.137720004 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11764279 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096800172 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089909113 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.072343502 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10293854 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122215221 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140765718 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075906272 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116054105 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.209419817 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133733698 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.13631245 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.150507628 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119063012 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.09272612 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.149143787 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100172953 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104525772 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.126689273 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.128827031 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121487396 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.100753409 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.074048089 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.073359984 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1523416 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.105872605 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.124153899 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.095877682 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.108175516 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.091329508 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110436729 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.072585563 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.086400667 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.113475823 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08541009 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131400071 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.08853347 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114892105 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081440416 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.138292029 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.280013258 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.134778064 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086569702 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105450064 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138742816 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113833079 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.133934152 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107078289 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083361398 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.118697854 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.102384216 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100414557 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107012313 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080506814 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.176257561 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091016269 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.114784963 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114629852 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.097372228 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.097303056 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.110250334 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.139696182 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.129045265 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.128861758 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141632645 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098071866 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124426933 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.102651253 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.132877698 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108543106 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.075646081 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.124414876 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.133843784 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100703544 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101940424 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129144833 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092411356 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077951821 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.099203115 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.11856272 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080481175 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.112137057 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081159977 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.109692379 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132028679 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097281361 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112049456 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117389932 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078722774 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.313165876 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108722104 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073624094 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.11713845 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113346059 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155880965 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095893224 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.077224977 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100825836 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103649811 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.148782527 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106735235 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080267798 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109610734 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138564263 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094743654 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.208349791 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.095774484 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1404208 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110734008 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08760655 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075471258 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.090977012 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112618068 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107809683 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112559934 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09056622 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.084589647 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087416021 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111869346 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092806305 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081176174 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114236176 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.099714896 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.075374634 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088908691 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.079811165 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141670854 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.078709344 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138050871 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125369055 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.077331552 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107053112 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101006509 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112252395 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.100766509 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120987946 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143348455 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.117237545 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.093154653 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.097176279 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110786219 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.14899406 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130312549 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.095878288 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.079927992 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104275798 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.280885751 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.100645378 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.12580731 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.095689201 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108373451 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104649313 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141957869 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143615357 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100126753 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100938535 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106642645 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.122772601 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076966439 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.158251618 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106732925 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12149895 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.087102542 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145118583 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.115830432 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092767049 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.090481101 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104129681 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.107341876 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111103572 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148070218 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.099465623 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.075412804 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096441164 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.148392254 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079708915 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113929711 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.094255589 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.096525172 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122657492 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.097376213 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084751118 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.071564882 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128468224 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.161911291 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.072459262 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118115526 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.11115716 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103392768 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.121024306 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.070437639 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119660276 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.139688052 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11819798 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144069796 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15119201 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1165425 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.279275386 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.113995378 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.105952914 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080253543 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.125451189 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.134247303 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096586175 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093643724 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135499192 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119078704 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.136163695 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.115532443 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114383704 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.105660336 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108796138 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104800501 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.104826769 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14916848 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124483909 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.125258534 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086982425 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107242898 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118587741 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136311145 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085116091 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14607451 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.087569146 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.121788405 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.08067923 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.128012473 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.08008938 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.11225912 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082192879 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100491375 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.070361508 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.074665251 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142563091 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.112577372 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105984215 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099809012 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.137581721 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.136504372 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.07919624 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108176619 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115867298 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101815548 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116226671 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.109280811 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.089829175 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095749004 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.10930866 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.085272657 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.081686125 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.275555758 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094902233 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126215912 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085340997 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.0761217 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139837494 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104210115 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09475381 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078531927 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107645934 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.12112771 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.093052882 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087887322 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114342159 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104750648 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140773654 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.090542217 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.098143749 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.123894326 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080936729 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.092962587 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.070276806 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.085776624 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.076431179 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.128413295 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076840498 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118550991 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.072436727 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.135114565 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.090251151 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.097098331 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.106001997 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115099816 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129136851 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09580046 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141092599 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090247753 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118720787 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107962125 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095189066 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088911958 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104172607 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101159338 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.12277147 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.096477277 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124670171 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144236619 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104863075 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.14287423 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091407776 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121628937 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107111578 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.124417958 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113594577 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147599524 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.137593724 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.269911838 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112955744 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.078212767 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098373462 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108569117 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.115031596 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.177118178 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125559621 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.073068404 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.106079593 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.095011032 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107631721 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104923233 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085709504 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149015392 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10465934 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.091842814 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115758465 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.093964339 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.107858845 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078922812 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099130894 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.104157249 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09792654 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102486767 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119058919 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.132933574 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116968337 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.146770891 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.101736332 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.095545751 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.121644983 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113052353 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11098381 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086679096 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086654012 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138042995 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118624657 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.125814437 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.10062571 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10966273 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.111695969 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100706296 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125161094 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108010139 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.126870542 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080674463 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.076815772 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.071160914 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.074743665 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.12702039 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1115936 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115902783 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100899992 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.074774445 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.265452809 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107895044 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072869967 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089419054 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093994659 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.09498306 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.092182387 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106158572 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.111731432 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.091645567 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103797718 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.0996427 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.146086565 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.101149495 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088452221 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.142998006 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148548971 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087823494 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092348883 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.073371723 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081232701 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115077274 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151073667 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.154261111 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.080477627 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089310289 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.08860038 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089877696 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.0741266 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.088793015 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.092691419 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107295265 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099907885 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.112973665 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105721002 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076459554 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.103695223 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100113196 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092776567 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.104902738 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118975113 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.125167089 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.141836823 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110858072 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107082843 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076642706 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.081017235 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076407276 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081579384 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.102323347 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.079956814 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076899341 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.143671967 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.091957514 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105317272 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112553351 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090981004 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07701276 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138446653 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.23410979 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13758121 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.07443701 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085188908 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.085364251 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081690894 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096491783 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141423251 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112154515 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115567188 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110293406 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106950376 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142419772 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.158797278 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082598698 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.146703239 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078119389 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078286172 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078771559 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116607662 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09227916 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.117903912 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142895692 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093761415 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105483361 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080043805 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.147308063 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.0980295 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104553894 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087419182 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079747668 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143402085 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080469624 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.0814124 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090788009 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112105779 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.073417116 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104971137 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084826722 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080484208 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143424989 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.631142624 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090442317 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.076475209 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096505867 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.142809958 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.127977636 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095314034 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109146992 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.119368364 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100435271 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.096000775 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1117167 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.185157789 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076721257 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097865182 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.106847572 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10042114 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103085599 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.098185534 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.088396618 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.092608848 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.086037139 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078790698 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105771949 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087834299 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09519601 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105145518 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081720874 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.084908836 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.126905014 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.100951326 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.080135533 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085669362 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.104595504 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086438143 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097599687 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.06866889 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110486056 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.089092301 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113140729 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092761312 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.105155959 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123662001 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088289593 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.132983729 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.102298996 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.118491527 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08591193 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.076997442 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120562259 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.085851881 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076948263 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139248532 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.08718836 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.087917164 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097426045 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.094068616 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106768184 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108142439 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107237001 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.092693383 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076542516 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092599824 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.096093165 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080619676 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075196704 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.071282108 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.075555144 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100986845 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.0805508 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.080119791 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109034121 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08461777 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098899014 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.377639991 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.128472796 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.090327605 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.108424716 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117990097 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098248511 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115576639 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.107881798 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.135461215 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.181651831 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129359496 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.13470235 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138618336 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.081097339 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.080679919 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.073389317 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.122927145 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.084892667 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.094275814 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086101824 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139703753 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.087006039 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116865606 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.239356991 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.084838564 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097887202 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101186 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.073917248 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.086938936 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112102297 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.091512187 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084022487 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123273796 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086951541 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.132462227 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113286221 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100910447 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095655012 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081998548 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114380034 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.103616498 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.130112625 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.097214629 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.077605227 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115292782 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10472821 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141517854 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.07473597 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081886071 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130701216 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104204584 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133310539 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081356947 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154361825 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.148240101 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104209694 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.305727968 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072016714 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084426215 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089617215 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.126264629 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084515687 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110352608 seconds)
  done (took 69.087566359 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.159261655 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.14325762 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.082997641 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.104571089 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.189710308 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.199216076 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.121275159 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.097207736 seconds)
  done (took 3.088113195 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.07098031 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.086241405 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.082842438 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.246701988 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.09674593 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.068416258 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.073611404 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.082536232 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.068141847 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.067837788 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.102731641 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.068714021 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.069136028 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.456671816 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.066731103 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.072892746 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.068755421 seconds)
  done (took 3.821633904 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.335563333 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.011855026 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.242986809 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.18083351 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.146990868 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.556693779 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.077585603 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.084382924 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.638804175 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.37302509 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.144203194 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.089670177 seconds)
  done (took 19.871253067 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.080095726 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.124154033 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.12052064 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.075761751 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.07547121 seconds)
  done (took 2.450974055 seconds)
done (took 123.006254168 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.086523386 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.178804589 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.071254779 seconds)
  done (took 2.263510323 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.124712387 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.118898263 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.118515242 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.116337523 seconds)
  done (took 2.470057555 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.077162851 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.078564278 seconds)
  done (took 2.146416423 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.227764293 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.221694986 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.094648919 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.085040726 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.082622802 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.08321 seconds)
  done (took 2.252017334 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.074504525 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.073659624 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.074328515 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.074404649 seconds)
  done (took 2.279612053 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.17296185 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067472584 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.069577357 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.071686525 seconds)
  done (took 2.368258103 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.08952441 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.091323561 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.121266981 seconds)
  done (took 2.291674313 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.085860738 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.08544637 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.080494015 seconds)
  done (took 2.246306067 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.113169696 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.099268153 seconds)
  done (took 2.197831996 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.083267838 seconds)
  done (took 2.073585169 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.094157213 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.10097539 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.182274704 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.149640446 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.183441272 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.170483127 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.077399232 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.078758734 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.074021226 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.072944962 seconds)
  done (took 3.171855642 seconds)
done (took 28.375108662 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.087717254 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.374576985 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.360085078 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.087252262 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.671872061 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.356873515 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.017064969 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.091298254 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.101211413 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068979233 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.085834933 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.650160848 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.013124351 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.32949681 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.998508229 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.327638361 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.656048023 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.072084938 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070479893 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071519918 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 1.006495602 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.071569976 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070991607 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070927565 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.653325599 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.37846568 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.072948736 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.333446902 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.072019528 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.076118952 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.361332745 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.072997825 seconds)
  done (took 16.691358278 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.078613434 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.132105142 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.075351964 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.087489459 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.073141962 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.072233991 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.074226098 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.069676934 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.113161161 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070412317 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08679456 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068810286 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.07471663 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070151952 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.08845958 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068471779 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071049863 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.07329015 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069865641 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.072891167 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.091144216 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.071131422 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070027269 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069858073 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069478925 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082222778 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070104946 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.06913026 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069185698 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073142788 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073594721 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070443896 seconds)
  done (took 4.475696816 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.130323022 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.133516781 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073574634 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.109805266 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.118178264 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070524444 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.151678998 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.091967217 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.11542836 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.06927429 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086614473 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.071326453 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.10816369 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.073285652 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.093458952 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.071692064 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.073976602 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.07222103 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.071328932 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.072614197 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.091070121 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.071299076 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.072082354 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.072217785 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.07225235 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.087269533 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.072786285 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.071760096 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.071557194 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.075999545 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.077163525 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.07189047 seconds)
  done (took 4.769437235 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.072271162 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.073550468 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.080649141 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.083694527 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.069056076 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.071245978 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.072597365 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.068832994 seconds)
  done (took 2.596786328 seconds)
done (took 30.543517528 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.081864022 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.070045918 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.073758726 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.090133469 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.076199844 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.115819423 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.067348527 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.077034881 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.073739709 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.073974801 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.075885624 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.069652952 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.072790031 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.067381163 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.074360338 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.068033354 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.118717025 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.072998781 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.113937952 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.11230274 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.069019267 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.072276294 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.075145159 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.11161004 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.111184103 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.111355373 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.075620935 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.072651279 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.066827355 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.069832967 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.169486968 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.182515975 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.07473983 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.116697348 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.066790883 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.066509878 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.070650244 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.068826439 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.113067662 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.075697528 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.069384994 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.075285873 seconds)
  done (took 5.593471099 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.193144326 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.193257986 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.186150969 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.080224229 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.092417188 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.080773345 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.191454545 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.077559156 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.076418656 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.190398802 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.07218938 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.076461155 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.080977072 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.072239689 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.078501679 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.075282551 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.080621981 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.072877867 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.077487825 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.078216578 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.190421501 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.070077744 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.080879705 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.077836824 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.071521564 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.07792833 seconds)
  done (took 4.724665629 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.076093264 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.091708649 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.095311151 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.148800879 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.109854157 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.083608091 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.082810178 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.094299507 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.101983029 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.069153522 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.072834186 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.097555094 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099218808 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.077602323 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.109530103 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.089055717 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.083056183 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.07235294 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.077922984 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.105391748 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.093744253 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.089267228 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.103740277 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.09066452 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.069535949 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.080224461 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.077902307 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.087061032 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.077965841 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.082732458 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.074907572 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.074007865 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.071038423 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.083379881 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.077746036 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.110782504 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.092532529 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.08263744 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.084640741 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.109035762 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.08068806 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.071793216 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.098328147 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.136435968 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.069965908 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.072600104 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.074014268 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.08254549 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.071689352 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.100310883 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.086901114 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.0695982 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.089286586 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.072159786 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.07169339 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.087406229 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.071738462 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.072308045 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.08189592 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.076565305 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.091430897 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.076087285 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.092604607 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.070770949 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.08113954 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.071762035 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.071896515 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.068898248 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.104993041 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.077544442 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.122721959 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.071470841 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.068186741 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.082511817 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.081680302 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.077665431 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.070121999 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.090005586 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.081070921 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.073431737 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.079340061 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.070876938 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.071791709 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.1036362 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.06702715 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.06627439 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.066684218 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.070756558 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.071512091 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.068978585 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.081728546 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.067855915 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.071855407 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.083379386 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.069481955 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.070622313 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.073181427 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.071648648 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.06984675 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.081440372 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.074559923 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.072320461 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.083000863 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.071691961 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.074164988 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.084248802 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.078179958 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.068098974 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.069585229 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.071802901 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.071045889 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.073450768 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.071824626 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.072043167 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.077227815 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.075677776 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.074443177 seconds)
  done (took 11.584866532 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.20897757 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.193369856 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.070284139 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.189356503 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.076727963 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.118992828 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.19063913 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.131627403 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.069356853 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.070243425 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.068360957 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.138373784 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.135447311 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.146192683 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.115352544 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.06922643 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.094012546 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.143825508 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.192722572 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.187893812 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.092037121 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.076599937 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.071041738 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.070221581 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.07010071 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.077749928 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.085008101 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.077065487 seconds)
  done (took 5.302038148 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.078041711 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.086055547 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.073470885 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.094458436 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.088012826 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.070714353 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.073299589 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.071312871 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.085797581 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.075462368 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.068944322 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.074879489 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.073540593 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.07151642 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.071893128 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.077396789 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.077481347 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.07002985 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.074183137 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.074043027 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.079343223 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.154540023 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.073499806 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.069454967 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.07148828 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.06969083 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.078014747 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.080765161 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.070830969 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.105626226 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.067976892 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.075671402 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.085655521 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.071828634 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.0706551 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.071674468 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.070822799 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.070283467 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.071180119 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.068567387 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.068372313 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.076152124 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.068015674 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.074934643 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.082716474 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.076393155 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.069914025 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.074106241 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.071442373 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.066822322 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.07424225 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.074068413 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.07307284 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.079041758 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.074070066 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.073119989 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.071773768 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.099174192 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.076541399 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.069804907 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.069612538 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.068596178 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.071850993 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.078762695 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.087316532 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.072088018 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.068973904 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.070710561 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.079215411 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.084901286 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.070186597 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.076001445 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.067426695 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.070776569 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.073077089 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.073402607 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.072321685 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.06897118 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.070858203 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.071212827 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.071393002 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.070656347 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.070151867 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.07305631 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.068310079 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.068979508 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.071250204 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.071883426 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.07698455 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.069517087 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.073642662 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.072285011 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.069543242 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.073328188 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.076361814 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.073887436 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.09114459 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.079483625 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.07141999 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.068754331 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.08631051 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.072707247 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.070485637 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.073899607 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.075296738 seconds)
  done (took 9.983618466 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.093820363 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.071708821 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.090312128 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.097450833 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.081369409 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.075690302 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.08507375 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.071521376 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.086810583 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.069549998 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.079579112 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.068567453 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.084250206 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.08000328 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.072177423 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.081475462 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.07334548 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.091690006 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.085951359 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.069179312 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.080053681 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.083578776 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.083274679 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.088517052 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.088646746 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.090025844 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.081500517 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.071000942 seconds)
  done (took 4.362789564 seconds)
done (took 43.548077764 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.11175839 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.326326227 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.097780839 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.382164591 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.146939892 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.19863869 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.193418849 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.094269066 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.258789235 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.116144922 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.415829711 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.481421722 seconds)
done (took 70.910140699 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.15885615 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.239110116 seconds)
    (2/2) benchmarking "String"...
    done (took 2.311160146 seconds)
  done (took 6.578722635 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.687829884 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.091521208 seconds)
    (3/3) benchmarking "different"...
    done (took 2.144159582 seconds)
  done (took 8.946814121 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.173083957 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.71966922 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.345624106 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.090774154 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.090851932 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.488539693 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.898136076 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.557246191 seconds)
  done (took 34.21655541 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.391651448 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.293762849 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.876187737 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.915821865 seconds)
  done (took 17.551476759 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.696911017 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.352351111 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.354667305 seconds)
    (4/4) benchmarking "different"...
    done (took 2.347667297 seconds)
  done (took 11.840406253 seconds)
done (took 91.588295125 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.091403793 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.384332895 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.109930867 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.245204914 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.063620325 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.114532314 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.100736139 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.101634678 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.084697126 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.090651542 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.512995676 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.089212859 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.088126035 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.123907805 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.092915327 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.116590668 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.40333664 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.107840324 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.124220014 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.631758411 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.60423178 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.10430023 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.1037887 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.152990835 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.146232863 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.127700109 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.603948729 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.102561355 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.710088498 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.110936066 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.261198577 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.091362777 seconds)
  done (took 214.820786897 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.093817725 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.191756962 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.293623137 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.130054003 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.791630583 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.280354775 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.233329998 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.824263694 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.091621979 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.104634649 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.237238394 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.088523497 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.269263849 seconds)
    (14/36) benchmarking "dot"...
    done (took 3.092227337 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.088517374 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.130801963 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.250191947 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.281045183 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.088052702 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.282933325 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.107677383 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.112044258 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.082396041 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.223346426 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.12045509 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.125665206 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.117563071 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.095607124 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.279339666 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.227213694 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.104361971 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.099623219 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.291577936 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.961942054 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.105854905 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.102552813 seconds)
  done (took 182.027377261 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.265412409 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.102332178 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.152756249 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.225748832 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.842337203 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.80747486 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.091716913 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.094541682 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.095084094 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.102553228 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.095671285 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.16435034 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.651060271 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.117348775 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.090336444 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.095378006 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.338305485 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.10417579 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.095346098 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.094762477 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.159173121 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.462488803 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.227982785 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.095111634 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.106435436 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.231592122 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.102891256 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.093373458 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.231344157 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.095188923 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.174087075 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.227088779 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.103447662 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.176028319 seconds)
    (34/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.09112908 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.103259805 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.570908553 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.09594214 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.095577683 seconds)
    (39/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.095260017 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.096327376 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.157820343 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.089624022 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.190224186 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.185940705 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.088645564 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.108229857 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.288346971 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.776700572 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.095230192 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.097777168 seconds)
    (51/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.09558071 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.095625225 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.097004442 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.097295948 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.600193426 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.095907305 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.122222651 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.688897963 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.096821617 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.096264235 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.099081206 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.096316892 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.098222528 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.104895543 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.136008538 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.896980188 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.160772645 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.482424144 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.886857454 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.097642665 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.653063473 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.155196625 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.099193398 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.175513278 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.092460552 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.097946443 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.096074684 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.096498184 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.190584444 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.181258088 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.093877527 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.234362512 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.099034178 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.096174892 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.238688344 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.388583501 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.100909746 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.111779475 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.150953023 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.095549711 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.097861378 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.104231814 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.187473268 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.094071377 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.097129746 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.097771546 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.197117032 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.096908811 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.290589747 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.317746181 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.166654233 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.341813588 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.349809221 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.100805062 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.098213091 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.113073117 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.100295844 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.097887495 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.109465242 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.098857602 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.099381056 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.099539169 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.099970458 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.099798742 seconds)
    (115/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.102513163 seconds)
    (116/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.112074138 seconds)
    (117/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.093745163 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.099140528 seconds)
  done (took 445.678543377 seconds)
done (took 846.865852498 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.79348788 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.856912257 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.692162697 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.73306272 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.696307353 seconds)
  done (took 15.802042253 seconds)
done (took 17.827667949 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.121306665 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.118069002 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.10609841 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.122744126 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.123161167 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.122622703 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.153082021 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.145547688 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.140444651 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.120171806 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.129326935 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.121839363 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.12648714 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.140433362 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.129765466 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.124520066 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.121023252 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.112133909 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.126855793 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.12426248 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.121445082 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.117511965 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.122839445 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.128143193 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.133847237 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.120059673 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.114035452 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.122467588 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.125385653 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.12485166 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.156168989 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.128199214 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.154483083 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.131057068 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.12636706 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.134362949 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.115606547 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.143273547 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.121994521 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.161803547 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.128281774 seconds)
  done (took 89.293853758 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.111455865 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.24709861 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.329392259 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.14036511 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.11126677 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.320555392 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.167814064 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.239617474 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.242762022 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.324892305 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.332889919 seconds)
  done (took 26.60526021 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.110281637 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.247071405 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.322165339 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.145794382 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.110620839 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.33181058 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.174081613 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.236470342 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.251097969 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.334873476 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.363524478 seconds)
  done (took 26.670984918 seconds)
done (took 144.599141829 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.502778877 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.136840126 seconds)
  done (took 6.672882136 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.10549524 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.125433532 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.257091769 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.105789333 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.106343699 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.107411382 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.107076514 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.107061272 seconds)
  done (took 19.055405714 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.105211964 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.104732713 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.104488783 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.10507612 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.105692713 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.1043677 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.105014713 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.10571903 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.106301188 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.105649607 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.107002873 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.105253471 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.1066788 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.10682679 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.105524075 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.106191739 seconds)
  done (took 35.724386039 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.106205371 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.106428326 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.106457002 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.105789687 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.106612086 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.106586493 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.109851837 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.108034395 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.105848582 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.105612069 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.106860131 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.107581872 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.105813953 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.106952016 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.108154119 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.107935919 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.10809593 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.107743049 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.108535143 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.108707383 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.106987387 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.10693883 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.111990494 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.108561975 seconds)
  done (took 52.613822567 seconds)
done (took 116.106550955 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.359983003 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.708811565 seconds)
  done (took 9.104294385 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.112425254 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.108006962 seconds)
  done (took 6.322040089 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.107485657 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.107377846 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.107349282 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.107202968 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.106268811 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.107040514 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.107809786 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.1076853 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.108497646 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.108211468 seconds)
  done (took 23.111054407 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.107637359 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.107670696 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.1087867 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.107870425 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.107246308 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.107765139 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.107347634 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.109148437 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.107205184 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.108425507 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.108262636 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.108681758 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.10815914 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.108537705 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.108019763 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.108566176 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.1078349 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.10810367 seconds)
  done (took 39.981558114 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.109307158 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.108454969 seconds)
  done (took 6.255021693 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.109495881 seconds)
    (2/7) benchmarking "second"...
    done (took 2.10898423 seconds)
    (3/7) benchmarking "month"...
    done (took 2.108382164 seconds)
    (4/7) benchmarking "year"...
    done (took 2.108197736 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.108765779 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.108913096 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.108586743 seconds)
  done (took 16.799394389 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.110157089 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.268216324 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.323096176 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.697132068 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.109944705 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.112007777 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 3.005560432 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.112645731 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.114077691 seconds)
  done (took 22.890635628 seconds)
done (took 126.497619817 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.915366799 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.108598796 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.596185418 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.200550919 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.165157538 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.449447612 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.124284704 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.658234681 seconds)
done (took 45.252311626 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.162574958 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.10890839 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.136278718 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.135944983 seconds)
  done (took 23.420208718 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.111145009 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.443827578 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.12653992 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.078761689 seconds)
  done (took 23.811684117 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.486697941 seconds)
    (2/2) benchmarking "read"...
    done (took 2.459059936 seconds)
  done (took 6.991150196 seconds)
done (took 63.424311496 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.110897702 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.110307808 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 2.111402701 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.110493285 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 2.110511395 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.111706748 seconds)
    (7/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.111621706 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.111240631 seconds)
    (9/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.111654295 seconds)
    (10/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.111406039 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 2.111469479 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 2.111245991 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.111559172 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.112284301 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.112101914 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.112645314 seconds)
    (17/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.112622999 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.113198086 seconds)
    (19/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.114157219 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.113017144 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.113140537 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.112629377 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.113337878 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.113295226 seconds)
  done (took 52.728268118 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.112693473 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.111134569 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.112444334 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.113908428 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.112482971 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.112456698 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.112811002 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.112563031 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.596805169 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.113428109 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.113097854 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.113549133 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.114152231 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.11350774 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.113061397 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.114524854 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.114493142 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.11404156 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.113901113 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.114022948 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.115469673 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.113929969 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.114858839 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.114634055 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.114803655 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.114751652 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.113832043 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.115128096 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.115506659 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.11523659 seconds)
  done (took 65.938396872 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.114316251 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.113839878 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.114677731 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.114814213 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.114668985 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.114826085 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.115172796 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.116114272 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.114789503 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.115688665 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.114938625 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.115589099 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.114591338 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.115597355 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.116005232 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.116330434 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.114159782 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.115981935 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.116935902 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.114513915 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.116324091 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.115407592 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.116167478 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.115973501 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.115581752 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.116063902 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.115762104 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.115999943 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.116924993 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.116793877 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.116272908 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.117079263 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.116617755 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.117231488 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.117108385 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.117125603 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.11669255 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.121013249 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.125948024 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.117599138 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.116319335 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.116958781 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.116303291 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.117026768 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.117476747 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.116877723 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.116728231 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.117496001 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.117078969 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.117953876 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.116483135 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.116435971 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.116477214 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.116079207 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.117021972 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.116917498 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.117617547 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.118578839 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.117270452 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.118158541 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.117041964 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.11839768 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.118076475 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.118495112 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.118173716 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.117080646 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.118006219 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.118923818 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.118545258 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.120991107 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.118346038 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.11974849 seconds)
  done (took 154.455612648 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.118160435 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.117570997 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.120189111 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.119019923 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.118996244 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.118203445 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.120424862 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.118275279 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.118998845 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.118554383 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.11860035 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.118092344 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.120175671 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.117525323 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.11902125 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.119819195 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.119047027 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.11866616 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.119949586 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.119507404 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.119408251 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.119729215 seconds)
  done (took 48.6654002 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.120433223 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.120032048 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.12008208 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.119949075 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.12050777 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.118698313 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.120004986 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.120629695 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.120219978 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.120053684 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.1215377 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.121089643 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.120207768 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.120220318 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.120646452 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.121554651 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.122230952 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.120279117 seconds)
  done (took 40.216371684 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.121872954 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.121744198 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.121027598 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.121062275 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.12133671 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.121369319 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.120975916 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.12327235 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.120657679 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.121489658 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.121892084 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.12161061 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.122651461 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.121433136 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.121198529 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.121807271 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.121390597 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.122725623 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.12228537 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.121065375 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.122024971 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.121630684 seconds)
  done (took 48.72521717 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.122325527 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.122022647 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.122361304 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.121745353 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.121690941 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.122861175 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.122303 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.122117326 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.123001274 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.123833688 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.122057653 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.122850459 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.123120532 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.123285281 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.122834299 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.123694393 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.12198121 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.123437425 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.122585661 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.122767645 seconds)
  done (took 44.502566385 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.122224589 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.124096182 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.124663029 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.123839769 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.124218221 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.123704702 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.124445632 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.124451169 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.124162121 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.123554856 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.124584518 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.124722623 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.124702783 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.122862469 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.123645857 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.123376998 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.123585053 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.124043447 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.124035836 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.123023332 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.125144073 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.124641108 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.124014033 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.126172006 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.124179747 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.125280446 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.124473641 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.124842221 seconds)
  done (took 61.528765593 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.124549607 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.124814311 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.125391123 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.124480583 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.124665192 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.125134411 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.125782813 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.124977326 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.125114457 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.124868835 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.125449606 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.123901976 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.124959126 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.125660434 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.120186522 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.125131727 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.125090071 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.127233539 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.125349538 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.125949094 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.124812895 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.124743486 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.125679964 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.125486953 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.126213459 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.125542364 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.125540133 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.126534355 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.127053053 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.125052355 seconds)
  done (took 65.808014113 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.146513998 seconds)
    (2/2) benchmarking "in"...
    done (took 2.145568661 seconds)
  done (took 6.345073777 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.125930064 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.124556365 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.126879865 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.126549012 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.1257229 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.126952689 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.127169819 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.126246152 seconds)
  done (took 19.063222439 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.12588239 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.131500964 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.127318152 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.127135809 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.127752787 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.136030405 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.12922555 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.128613431 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.129822892 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.128678341 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.134549624 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.132736212 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.137975974 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.132831008 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.128713701 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.130166781 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.130342041 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.131168862 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.130617384 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.128302163 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.132113896 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.128582567 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.127093176 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.130020338 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.128682276 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.131060729 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.138515521 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.132368183 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.131388213 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.12812722 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.136736431 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.12880429 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.129558221 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.130833485 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.128772294 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.127894237 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.137724123 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.130441441 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.131149015 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.128529551 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.131854333 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.131518955 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.134937227 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.138205716 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.131932052 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.129150026 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.128352446 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.130674017 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.130663228 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.134579167 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.139201972 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.131762963 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.129852173 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.130233341 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.133434848 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.13144575 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.131063032 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.133672405 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.137736605 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.138207312 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.135697736 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.153806237 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.142160693 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.131416726 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.131311618 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.141735725 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.157181938 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.134172988 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.132349144 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.129214654 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.138746649 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.130117247 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.126790439 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.121311766 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.145533881 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.140703644 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.132269741 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.131369428 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.131917089 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.132426363 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.134049213 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.130948865 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.133130177 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.130735585 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.144316094 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.161066456 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.132090045 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.133639203 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.134830334 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.133009186 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.136942033 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.136698625 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.132408283 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.131600797 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.135151014 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.134981562 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.133361565 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.133418731 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.13247149 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.141372954 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.131469491 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.132031063 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.136591733 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.141511307 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.1321537 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.133520025 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.13503725 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.132290632 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.142234652 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.133353368 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.133723403 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.132074667 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.13399382 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.138982166 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.13117145 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.138668312 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.14427269 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.141463044 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.135582294 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.137213105 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.138387139 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.137220022 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.145268447 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.161428802 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.134104045 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.139814513 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.141089116 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.147856766 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.13830611 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.133607712 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.137748056 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.134668242 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.133713745 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.136221625 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.133909381 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.135381737 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.135118815 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.136331752 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.133619247 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.135001284 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.139173406 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.136865044 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.137143612 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.136081113 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.139765057 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.134240302 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.136952603 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.142400836 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.134490348 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.135007784 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.13548112 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.139143924 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.135986995 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.137568572 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.134941229 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.135104861 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.135066084 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.135044339 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.139135092 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.137012361 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.135820728 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.136742365 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.140121226 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.136124489 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.13614134 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.135704685 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.136705404 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.137984036 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.138350391 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.137904828 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.13976967 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.136775585 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.141887401 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.136849835 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.136511056 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.137511325 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.135421503 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.136088114 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.140791731 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.151558219 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.140984422 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.147640662 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.136582412 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.144850843 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.136278562 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.138339087 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.139813192 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.137105116 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.138463706 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.135858279 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.137057431 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.142387893 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.159765838 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.149867073 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.139911463 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.13887201 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.143486622 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.142279083 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.143443457 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.137660151 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.140007611 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.139989253 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.138986487 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.138810748 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.136563054 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.141903787 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.138171225 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.137166351 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.142242427 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.138095564 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.137566465 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.140290577 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.138813701 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.140902619 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.138027511 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.138765985 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.137425829 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.141182735 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.145841787 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.141614474 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.137467006 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.138492665 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.142058358 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.140081088 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.13876112 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.141824953 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.143430454 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.138386907 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.142720483 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.147453419 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.139917251 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.140427336 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.138500107 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.138097091 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.142434858 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.140434666 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.143623682 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.147906854 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.143510278 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.138399947 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.146406786 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.13843859 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.142775383 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.140089632 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.143328909 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.140033449 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.141841948 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.141469935 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.140165086 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.148699748 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.139752014 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.140973765 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.13990228 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.142870012 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.14172824 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.143556975 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.14183395 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.144784942 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.15103038 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.146920234 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.142586094 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.144378531 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.143874377 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.14315091 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.145979913 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.142518142 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.154333948 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.153611635 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.141646872 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.140626157 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.141514575 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.145671592 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.140532384 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.141678001 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.150593038 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.142653312 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.143807686 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.144930822 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.142525579 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.142758276 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.150273255 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.144068751 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.145562281 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.144902445 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.144486976 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.143603021 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.141903994 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.145780162 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.142157651 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.145267803 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.146831339 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.141654379 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.144244352 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.140979576 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.151622814 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.143214449 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.144186901 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.150969397 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.144568799 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.14305953 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.146236755 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.141667213 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.144491551 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.144953908 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.143365699 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.144937797 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.143549457 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.14836327 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.15559242 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.148038552 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.153066899 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.146233777 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.154767235 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.144150599 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.143835654 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.144958832 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.148521856 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.154048596 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.14401714 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.143884664 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.151910303 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.145844838 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.143750161 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.14923352 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.144025507 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.145535545 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.143822637 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.145181514 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.151724996 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.147847562 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.143591922 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.145794962 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.143977235 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.144383227 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.149022919 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.148185016 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.147173882 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.146170413 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.144301024 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.145351064 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.144916704 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.145760618 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.146438121 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.144954674 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.144579004 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.152885014 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.147653293 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.146433045 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.151360332 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.144752902 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.154900438 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.147199398 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.146649261 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.146964876 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.14547921 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.149328963 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.145231985 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.145317708 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.145124671 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.145091258 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.146569824 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.157698814 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.15374454 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.150498084 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.149328557 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.147307511 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.14777766 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.158569243 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.174044858 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.147348738 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.149788141 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.151984374 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.152652968 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.150151279 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.1543478 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.151962721 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.157243699 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.149772578 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.148142104 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.152714882 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.161383358 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.147866672 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.1474663 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.146292095 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.152820664 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.149797882 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.146505418 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.149138567 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.151482012 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.149419365 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.160681335 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.1471104 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.149472187 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.148165084 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.147960276 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.148864151 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.1473906 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.151222108 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.150040379 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.148756363 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.149484004 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.150860565 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.155510432 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.148796163 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.15354369 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.161106306 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.149923886 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.149312694 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.150460547 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.149401001 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.151920018 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.150250521 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.149017978 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.150842146 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.148700791 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.150705662 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.153145805 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.160567137 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.150693488 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.149508363 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.148645924 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.153760658 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.149829365 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.151584321 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.150632531 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.159815512 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.154642125 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.16360152 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.161960961 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.150585037 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.15003526 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.15814957 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.160454936 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.151439293 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.151263091 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.150331775 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.152611093 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.15230418 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.152930982 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.151038461 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.152257893 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.157686455 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.149424826 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.150647152 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.151550903 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.150774611 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.154739894 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.15311778 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.157653463 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.151728869 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.150226721 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.14982838 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.15119854 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.153812182 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.155134919 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.150982855 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.151170381 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.1551804 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.155746532 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.156661387 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.149655729 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.150700188 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.155110262 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.151345277 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.150049263 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.15201199 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.152011806 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.151661744 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.155345902 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.160430582 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.151885602 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.155533966 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.154283938 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.157684173 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.152873447 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.152526908 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.152638648 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.151177616 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.160870727 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.152868648 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.152560011 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.152607033 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.153008298 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.159383158 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.155371495 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.157630288 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.153108244 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.15327686 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.152380466 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.156384228 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.163771232 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.1585225 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.157368324 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.16253687 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.158987635 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.156314701 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.153462767 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.153926133 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.154918895 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.154838743 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.158117649 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.155796252 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.156664441 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.153537884 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.155072246 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.154980688 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.156010315 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.15255695 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.153528207 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.159402056 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.166244717 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.163863483 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.154379281 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.157276688 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.152447612 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.15839967 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.167446813 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.155033993 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.155039228 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.15478309 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.154771761 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.156200674 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.165179842 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.164804633 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.160379604 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.154753323 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.161212981 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.17680544 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.159220652 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.166217977 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.191276395 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.158211818 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.155605466 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.155700337 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.156264758 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.154631365 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.158544972 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.155906427 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.163526269 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.157193433 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.155222806 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.165179057 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.155968616 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.15654878 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.157034821 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.157602862 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.164043298 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.156408949 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.16254801 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.15632123 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.155146438 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.157943649 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.159080368 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.156489195 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.15654686 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.155865498 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.159582508 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.155928523 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.157411191 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.165903702 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.156919454 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.159574763 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.17130363 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.169715003 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.15843747 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.155915859 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.158460638 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.162622201 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.159709029 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.158406916 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.162202417 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.165876282 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.161424518 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.166254092 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.159885557 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.159433279 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.159773329 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.15724585 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.158359402 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.170805281 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.172002843 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.158423066 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.159419619 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.16656745 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.157417335 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.164628117 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.166359231 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.161666214 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.159518395 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.160775542 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.15641928 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.156367317 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.156143835 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.16395444 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.166688386 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.158268542 seconds)
  done (took 1281.049655997 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.158002902 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.159596808 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.155021909 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.154870284 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.154672274 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.15484265 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.156748177 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.156143772 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.154332637 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.155391407 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.15745283 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.155309908 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.155420891 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.156046867 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.1564838 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.15793954 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.156172875 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.155765229 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.156268517 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.154994193 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.155257579 seconds)
  done (took 47.358220775 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.1547989 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.156108783 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.154116242 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.154729738 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.155815193 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.154892535 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.155436848 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.154730986 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.153945621 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.153870462 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.154230462 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.159122072 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.152405009 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.152659 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.152009006 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.153197105 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.155198839 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.151689892 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.151294856 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.152124173 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.1531946 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.154343947 seconds)
  done (took 49.472313772 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.1533033 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.153484636 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.160031604 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.145912437 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.145688774 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.147649977 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.146136946 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.150975741 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.146028525 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.147933242 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.156645652 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.156562139 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.148489399 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.149451449 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.147265827 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.146454436 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.295704376 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.145304849 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.14606631 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.14537387 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.146173634 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.155308788 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.145486481 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.145626289 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.145659938 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.145148752 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.146839448 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.146138247 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.146225365 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.148128454 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.151529183 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.145677091 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.147999686 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.149368992 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.146770233 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.150466812 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.150400577 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.146804773 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.145919046 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.145882251 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.15849073 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.171919057 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.143317558 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.145828358 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.157004651 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.141750219 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.14062675 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.145205134 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.149975695 seconds)
  done (took 107.518699454 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.137835725 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.139955113 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.13843962 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.139984724 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.139549595 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.1381048 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.13943433 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.137750986 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.138277762 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.139343161 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.139551359 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.138044864 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.137648624 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.137867598 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.139904545 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.139470587 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.137243383 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.139586716 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.140122527 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.13986084 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.138552404 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.140317186 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.139579548 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.138263844 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.137949339 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.141016467 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.139610637 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.141636433 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.13965783 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.140632319 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.141608634 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.14029319 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.140832439 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.140013452 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.139481817 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.142140752 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.141198619 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.140771975 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.140790484 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.139453883 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.143057155 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.140169436 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.138428351 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.141285994 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.139818123 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.14073658 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.143880449 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.142585148 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.141169784 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.139384734 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.139781761 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.141446884 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.142393974 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.143199565 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.143638756 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.143049821 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.139599972 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.138041362 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.139539783 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.141176807 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.145979241 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.139318138 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.141495932 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.14143735 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.141638084 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.139915986 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.141128911 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.141910383 seconds)
  done (took 147.610728763 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.143207158 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.14244604 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.141564226 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.141090929 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.139954652 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.14699152 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.142262151 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.142494316 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.142567359 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.146616752 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.140729153 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.141941454 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.139850359 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.142484499 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.142689664 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.139170605 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.138331317 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.138444816 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.140031048 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.144793129 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.139508836 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.137879286 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.139016612 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.142643597 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.139722517 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.138482816 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.139319281 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.138154977 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.139266759 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.137527123 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.138052875 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.137000379 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.1367864 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.138605123 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.137381485 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.137645506 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.136276308 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.140565431 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.135868843 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.136053502 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.133652004 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.135106278 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.136330115 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.133422859 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.133048659 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.135596725 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.132672606 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.136277502 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.13332904 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.133870344 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.134283644 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.135062898 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.132228997 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.13222586 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.133778072 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.135697926 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.136319593 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.133090493 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.133384494 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.136463619 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.135234531 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.135532454 seconds)
  done (took 134.631347877 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.13057712 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.130636331 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.134281297 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.131879981 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.130731053 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.131088885 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.129839056 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.132701847 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.130748943 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.13058443 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.129840622 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.128910576 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.133534234 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.129028063 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.130607967 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.130280995 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.130437633 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.130710765 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.129970754 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.130386763 seconds)
  done (took 44.67608218 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.134342195 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.128929945 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.12973539 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.129621089 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.127277544 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.12993909 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.127914504 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.127972861 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.126105112 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.126574456 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.128714582 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.12695404 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.128709149 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.128899428 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.128884438 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.127759489 seconds)
  done (took 36.114815229 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.126890176 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.127451275 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.131603734 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.127509143 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.127428464 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.125803791 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.126116162 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.132461734 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.127998853 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.127713407 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.128522081 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.126760405 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.13200324 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.127308587 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.126164344 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.124384617 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.125852511 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.125274266 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.125206244 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.122691948 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.123926383 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.123830876 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.123298132 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.123852366 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.126495508 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.126296132 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.125492119 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.123518992 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.126762181 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.125351983 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.124082032 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.124637502 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.128429337 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.124936924 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.125991137 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.128028194 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.125052664 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.125303173 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.125919743 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.124851551 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.123819422 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.125542751 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.123540049 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.126237616 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.12526599 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.125380938 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.123278069 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.125233037 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.124592575 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.124654616 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.121742997 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.121154665 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.121819766 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.123800663 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.124183954 seconds)
  done (took 118.966750991 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.121513824 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.12315558 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.123274241 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.12607076 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.123743832 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.122016046 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.122101595 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.126213993 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.119706143 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.121981947 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.122377963 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.120913448 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.124225015 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.120528329 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.120652351 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.121885664 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.120645419 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.12471128 seconds)
  done (took 40.255276235 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.122477029 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.120974458 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.12181823 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.12478504 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.122421391 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.122628135 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.122761729 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.124097707 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.119760955 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.121762833 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.122124055 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.122140423 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.122738001 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.121451923 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.121289659 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.123202222 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.120806545 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.127129191 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.121841873 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.123086569 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.122317959 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.125983411 seconds)
  done (took 48.746681822 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.121972724 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.122353392 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.134626859 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.14538569 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.142212079 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.156126532 seconds)
  done (took 14.871928535 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.112543732 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.127766483 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.124710125 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.122323185 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.121430948 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.122512124 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.127758142 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.122232807 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.121709111 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.121337621 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.122477423 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.121867128 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.120633351 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.120604324 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.122549685 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.123540874 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.119034388 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.121969766 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.119422977 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.120785573 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.123312518 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.12094434 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.119975124 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.121376055 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.120867792 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.121525471 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.120601783 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.121958287 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.119560752 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.125544465 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.122491869 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.12176637 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.122201075 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.120599005 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.126353673 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.122665362 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.121737052 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.121688711 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.121565349 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.124336736 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.122484261 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.122517729 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.123147725 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.121566726 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.12248621 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.122350746 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.122509163 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.122320028 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.12306196 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.122535741 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.121642126 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.123317442 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.122435067 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.124218024 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.123583082 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.124320813 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.123425098 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.12347638 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.12115395 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.123413109 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.124429164 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.122232608 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.124955879 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.122075597 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.123399893 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.123490529 seconds)
  done (took 142.112882732 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.128885896 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.122222254 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.125014192 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.125909186 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.122712216 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.132367882 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.124136499 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.124698253 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.125323763 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.123582122 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.124545593 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.125147486 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.123157406 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.123807059 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.127473581 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.112779816 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.123767386 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.123909973 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.124452349 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.129241658 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.124443472 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.125449485 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.126383373 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.128030387 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.124085533 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.123914342 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.124110537 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.125049912 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.129784389 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.125696615 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.126227242 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.125798839 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.125095482 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.127537177 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.125480852 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.124175749 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.127221626 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.126146512 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.127049354 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.127041722 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.125091389 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.126289677 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.128553807 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.127010471 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.127152224 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.124313763 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.126569594 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.128274235 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.125936314 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.126064473 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.126959117 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.127766418 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.130626163 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.12709963 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.126661623 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.127260379 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.129982789 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.125967605 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.125256981 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.127934861 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.126557555 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.127632684 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.127344917 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.126131134 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.127002092 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.125374301 seconds)
  done (took 142.366031633 seconds)
done (took 2965.770991362 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.128907779 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.180945278 seconds)
  done (took 16.364777216 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.289009284 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.168289641 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.308189254 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.241156239 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.131784782 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.137970933 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.126326565 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.126782363 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.219292191 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.126752047 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.148143663 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.123221392 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.127360341 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.126630801 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.128273053 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.127211477 seconds)
  done (took 56.710426312 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.130739217 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.131738061 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.128746514 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.126849212 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.139688935 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.199774656 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.15082628 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.131321955 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.142457777 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.164286851 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.147644528 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.135290215 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.137540322 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.13302721 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.215582324 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.172101703 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.183859757 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.20104638 seconds)
  done (took 40.822667595 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.207829094 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.143244745 seconds)
  done (took 11.410201087 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.133729339 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.130468731 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.122232703 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.15533405 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.143437885 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.151331987 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.1299619 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.160976556 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.125259694 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.132808709 seconds)
  done (took 73.446083214 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.130353206 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.118841591 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.431827327 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.136985744 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.136355786 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.152859691 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.129239006 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.160227329 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.132641135 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.126402277 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.135795192 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.434311185 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.140059819 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.129393975 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.546541301 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.138649377 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.136862213 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.161635391 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.158196465 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.135222437 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.135498469 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.133505463 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.290939501 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.826986634 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.126533922 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.129777364 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.1406059 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.128079112 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.127452897 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.130301737 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.137050983 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.129830957 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.135040273 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.139056435 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.131123427 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.136245107 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.619309447 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.143426867 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.137753037 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.223342818 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.173106946 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.132789701 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.915107889 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.12881874 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.128131671 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.136359423 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.811702366 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.215511886 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.130192825 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.302183798 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.459735444 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.139933179 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.286669314 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.291704087 seconds)
  done (took 147.183251361 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.130272129 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.462818696 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.284104967 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.132317555 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.436303728 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.339342919 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.792992023 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.175021594 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.129724327 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.345562543 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.262979408 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.234583024 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.130522624 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.130424054 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.128983925 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.129362864 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.286020443 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.197606858 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.12785583 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.128996805 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.149486939 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.289491048 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.234225083 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.126357522 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.14884901 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.344824476 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.175211733 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.233988691 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.627578801 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.13439919 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.192852456 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.59986829 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.133254385 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.128481335 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.170463518 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.229935797 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.21610994 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.128132857 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.130164712 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.130934297 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.816974387 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.332241294 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.23028055 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.258202738 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.279101883 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.343375035 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.598836575 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.130297416 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.643248468 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.302867369 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.338332801 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.353367054 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.225486212 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.133271257 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.57989714 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.129026468 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.782799605 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.3598978 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.269813949 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.236797857 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.132963932 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.131797059 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.129442488 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.376874557 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.12871193 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.235651586 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.127493329 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.132216786 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.229352546 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.235370699 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.266909879 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.354398988 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.158243131 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.858194574 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.343273086 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.302332571 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.192831281 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.356520947 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.13075578 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.131318319 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.21870786 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.729042338 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.260097512 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.379753902 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.368838167 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.153136896 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.719134641 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.133105527 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.276739651 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.304468913 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.428063035 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.278846436 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.183420355 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 3.024099529 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.132990666 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.132179043 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.195461488 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.255836602 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.326995619 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.487346121 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.371986991 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.712779183 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.149941064 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.50826028 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.238815015 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.135626821 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.787512541 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.132466009 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.340670526 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.17838494 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.135398703 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.133971502 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.298032062 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.149840817 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.135009747 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.898059428 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.193665469 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.134794231 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.311502283 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.132457439 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.382626913 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.041931267 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.369987734 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.071434535 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.163983628 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.309697202 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.2794295 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 5.431700509 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.467464704 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.382349621 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.218950163 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.363437409 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.042625244 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.136462829 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.405373256 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.133306332 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.136213738 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.304402163 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.054099504 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.280847893 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.137290091 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.470702959 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.152538902 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.188064877 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.138864666 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.383698345 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.165018278 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.182736094 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.138085185 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.265395584 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.13791061 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.060882495 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.292478779 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.137699677 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.134069751 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.72261744 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.135961487 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.282582437 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.365661551 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.148606556 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.203881312 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.629905021 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.732654355 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.22302821 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.155544035 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.50722208 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.848488073 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.269833494 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.128281969 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.63259068 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.137863486 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.374487005 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.329098279 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.136196995 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.135574195 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 3.000939013 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 6.767427216 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.137611143 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.294434304 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.950444463 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.513322705 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.344555444 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.140141395 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.184848212 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.141977278 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.872632269 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.481308371 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.135456213 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.137429153 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.138625611 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.139187442 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.140424712 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.347077983 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.166781401 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.695092499 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.274376361 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.383331585 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.444195635 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.359274555 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.168655185 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.138305151 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.416873162 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.136973151 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.198482655 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.137093443 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.148384683 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.419256951 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.137613403 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.353461239 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.347396987 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.105630061 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.184580019 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.13688258 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.138732688 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.137223063 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.274760468 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.228447713 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.138714106 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.139485265 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.178861461 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.240051232 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.31978375 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.428251015 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 3.138968431 seconds)
  done (took 943.587409174 seconds)
done (took 1291.579241049 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.139857176 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.141650579 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.142541664 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.140410962 seconds)
  done (took 30.63029588 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.139955566 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.139684136 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.141193842 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.141301988 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.141241352 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.141090337 seconds)
  done (took 14.911398988 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.138581394 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.138574574 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.140101912 seconds)
  done (took 23.483034201 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.567597422 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.542209204 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.20798782 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.283908302 seconds)
  done (took 11.66805375 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.143891424 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.14120847 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.14100217 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.14256159 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.142064721 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.141230856 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.142514421 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.141911229 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.142623314 seconds)
  done (took 21.353879553 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.354204435 seconds)
done (took 108.465750568 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.148749677 seconds)
    (2/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 4.425171747 seconds)
    (3/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.593768304 seconds)
    (4/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.237947323 seconds)
    (5/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.261392618 seconds)
    (6/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.252717043 seconds)
    (7/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.250294894 seconds)
    (8/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.270116055 seconds)
    (9/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.254784933 seconds)
    (10/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.400437191 seconds)
    (11/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.139733479 seconds)
    (12/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.153817097 seconds)
    (13/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.153146113 seconds)
    (14/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.434286906 seconds)
    (15/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.023013765 seconds)
    (16/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.401451919 seconds)
    (17/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.141809844 seconds)
    (18/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.587564593 seconds)
    (19/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.137251757 seconds)
    (20/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.380005404 seconds)
    (21/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.154895768 seconds)
    (22/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.416663458 seconds)
    (23/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.267720297 seconds)
    (24/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.157151773 seconds)
    (25/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.1586756 seconds)
    (26/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.155678373 seconds)
    (27/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.400290726 seconds)
    (28/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.142163666 seconds)
    (29/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 4.201976114 seconds)
    (30/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.141310626 seconds)
    (31/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.309813459 seconds)
    (32/341) benchmarking ("sort", Float64, false)...
    done (took 5.847690334 seconds)
    (33/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.272246472 seconds)
    (34/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.144206618 seconds)
    (35/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.297388037 seconds)
    (36/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.153491142 seconds)
    (37/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.533315069 seconds)
    (38/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.300502557 seconds)
    (39/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.162789709 seconds)
    (40/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.169821686 seconds)
    (41/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.276024741 seconds)
    (42/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.243796527 seconds)
    (43/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.447895785 seconds)
    (44/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.045855595 seconds)
    (45/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.632486844 seconds)
    (46/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.405563379 seconds)
    (47/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.891184935 seconds)
    (48/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.235316804 seconds)
    (49/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.375697728 seconds)
    (50/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.134842707 seconds)
    (51/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.655551288 seconds)
    (52/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.988146604 seconds)
    (53/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.457898194 seconds)
    (54/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.924154993 seconds)
    (55/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.62410559 seconds)
    (56/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.134548833 seconds)
    (57/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.051030144 seconds)
    (58/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.480397737 seconds)
    (59/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.234245112 seconds)
    (60/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.562830982 seconds)
    (61/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.109492511 seconds)
    (62/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.537148675 seconds)
    (63/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.419309288 seconds)
    (64/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.374942137 seconds)
    (65/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.147873162 seconds)
    (66/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 8.988219815 seconds)
    (67/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.392303221 seconds)
    (68/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.351103729 seconds)
    (69/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.163101923 seconds)
    (70/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.236639872 seconds)
    (71/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.227277264 seconds)
    (72/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.158838795 seconds)
    (73/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.255626745 seconds)
    (74/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.563607667 seconds)
    (75/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.295656655 seconds)
    (76/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.284542297 seconds)
    (77/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.055356873 seconds)
    (78/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.86729365 seconds)
    (79/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.99484344 seconds)
    (80/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.472301041 seconds)
    (81/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.498612129 seconds)
    (82/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.16412352 seconds)
    (83/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.347626925 seconds)
    (84/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.068288192 seconds)
    (85/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.15191027 seconds)
    (86/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.193522963 seconds)
    (87/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.156535078 seconds)
    (88/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.437069606 seconds)
    (89/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.354205444 seconds)
    (90/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.559456988 seconds)
    (91/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.249263451 seconds)
    (92/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.449218409 seconds)
    (93/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.862707348 seconds)
    (94/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.424853711 seconds)
    (95/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.14815511 seconds)
    (96/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.883428897 seconds)
    (97/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.464498658 seconds)
    (98/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.359422986 seconds)
    (99/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.158127945 seconds)
    (100/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.330403706 seconds)
    (101/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.39038229 seconds)
    (102/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.161969299 seconds)
    (103/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.778257614 seconds)
    (104/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.263799951 seconds)
    (105/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.459642572 seconds)
    (106/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.547236117 seconds)
    (107/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.151079222 seconds)
    (108/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.214155904 seconds)
    (109/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.310973067 seconds)
    (110/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.255293856 seconds)
    (111/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.545965358 seconds)
    (112/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.159241628 seconds)
    (113/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.282068715 seconds)
    (114/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.306550768 seconds)
    (115/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.225136987 seconds)
    (116/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.190526866 seconds)
    (117/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.555981517 seconds)
    (118/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.263340816 seconds)
    (119/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.419670363 seconds)
    (120/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.263220225 seconds)
    (121/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.357184806 seconds)
    (122/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.164893291 seconds)
    (123/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.549016567 seconds)
    (124/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.452864435 seconds)
    (125/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.430986701 seconds)
    (126/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.272716948 seconds)
    (127/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.805820452 seconds)
    (128/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.417491996 seconds)
    (129/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.36225215 seconds)
    (130/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.648453897 seconds)
    (131/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.508979689 seconds)
    (132/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.093916739 seconds)
    (133/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.427277478 seconds)
    (134/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.393976771 seconds)
    (135/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.786563568 seconds)
    (136/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.343430998 seconds)
    (137/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.157725012 seconds)
    (138/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.896198451 seconds)
    (139/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.024280839 seconds)
    (140/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.177661616 seconds)
    (141/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.548737732 seconds)
    (142/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.152200415 seconds)
    (143/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.15857445 seconds)
    (144/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.546407114 seconds)
    (145/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.546203039 seconds)
    (146/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.092998196 seconds)
    (147/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.33608929 seconds)
    (148/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.388766602 seconds)
    (149/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.605187713 seconds)
    (150/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.348177247 seconds)
    (151/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.031974922 seconds)
    (152/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.224886062 seconds)
    (153/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.375638496 seconds)
    (154/341) benchmarking ("sort", Bool, false)...
    done (took 2.371863698 seconds)
    (155/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.183282287 seconds)
    (156/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.15713058 seconds)
    (157/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.312269163 seconds)
    (158/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.871862731 seconds)
    (159/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.158009078 seconds)
    (160/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.811075121 seconds)
    (161/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.260910115 seconds)
    (162/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.314851713 seconds)
    (163/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.93817893 seconds)
    (164/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.267401905 seconds)
    (165/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.170784143 seconds)
    (166/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.169337849 seconds)
    (167/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.830234281 seconds)
    (168/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.258250887 seconds)
    (169/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.362343239 seconds)
    (170/341) benchmarking ("sort", Int64, false)...
    done (took 5.808995457 seconds)
    (171/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.156330376 seconds)
    (172/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.266273318 seconds)
    (173/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.292100468 seconds)
    (174/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.236891227 seconds)
    (175/341) benchmarking ("sort", Float32, false)...
    done (took 5.796840896 seconds)
    (176/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.159348701 seconds)
    (177/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 4.709035346 seconds)
    (178/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.436663948 seconds)
    (179/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.154181583 seconds)
    (180/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.152257969 seconds)
    (181/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 5.637800517 seconds)
    (182/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.367693434 seconds)
    (183/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.501714079 seconds)
    (184/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.291715358 seconds)
    (185/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.164959869 seconds)
    (186/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.955532426 seconds)
    (187/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.417279416 seconds)
    (188/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.505576294 seconds)
    (189/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.178034006 seconds)
    (190/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.343293213 seconds)
    (191/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.354410673 seconds)
    (192/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.456770515 seconds)
    (193/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.313594032 seconds)
    (194/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.957556162 seconds)
    (195/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.646043879 seconds)
    (196/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.245958321 seconds)
    (197/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.35395836 seconds)
    (198/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.157085769 seconds)
    (199/341) benchmarking ("sort", Int8, false)...
    done (took 5.116117706 seconds)
    (200/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.23857385 seconds)
    (201/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.486890099 seconds)
    (202/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.270401171 seconds)
    (203/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.161197484 seconds)
    (204/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.156756645 seconds)
    (205/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.755712349 seconds)
    (206/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.443247661 seconds)
    (207/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.157629714 seconds)
    (208/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.525180488 seconds)
    (209/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.183583576 seconds)
    (210/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.162737429 seconds)
    (211/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.215935825 seconds)
    (212/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.465603187 seconds)
    (213/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.365415838 seconds)
    (214/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.372329999 seconds)
    (215/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.57439882 seconds)
    (216/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.471949933 seconds)
    (217/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.32632837 seconds)
    (218/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.569708061 seconds)
    (219/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.261645773 seconds)
    (220/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.638540053 seconds)
    (221/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.171634472 seconds)
    (222/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.16081845 seconds)
    (223/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 3.962543901 seconds)
    (224/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.170159956 seconds)
    (225/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.159819512 seconds)
    (226/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.25724743 seconds)
    (227/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.054551305 seconds)
    (228/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.482134233 seconds)
    (229/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.324888594 seconds)
    (230/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.287872304 seconds)
    (231/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.160611498 seconds)
    (232/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.104783951 seconds)
    (233/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.46839533 seconds)
    (234/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.245844171 seconds)
    (235/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.222555896 seconds)
    (236/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.296543508 seconds)
    (237/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.159258157 seconds)
    (238/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.875504295 seconds)
    (239/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.164326489 seconds)
    (240/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.463228775 seconds)
    (241/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.548173965 seconds)
    (242/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.291464577 seconds)
    (243/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.287715042 seconds)
    (244/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.491984718 seconds)
    (245/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.227315716 seconds)
    (246/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.163598986 seconds)
    (247/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.171601823 seconds)
    (248/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.363244019 seconds)
    (249/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.827627359 seconds)
    (250/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.635193222 seconds)
    (251/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.259159863 seconds)
    (252/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.222057919 seconds)
    (253/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.944215463 seconds)
    (254/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.591764737 seconds)
    (255/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.354004687 seconds)
    (256/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.165667624 seconds)
    (257/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.179763787 seconds)
    (258/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.244454356 seconds)
    (259/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.178609523 seconds)
    (260/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.174218217 seconds)
    (261/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.16459497 seconds)
    (262/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.164851042 seconds)
    (263/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.475330806 seconds)
    (264/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.393071218 seconds)
    (265/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.255202043 seconds)
    (266/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.174854597 seconds)
    (267/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.243159711 seconds)
    (268/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.501604782 seconds)
    (269/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.249072324 seconds)
    (270/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.448489674 seconds)
    (271/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.286423954 seconds)
    (272/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.293627202 seconds)
    (273/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.499924987 seconds)
    (274/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.140601844 seconds)
    (275/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.711667575 seconds)
    (276/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.240590284 seconds)
    (277/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.930284142 seconds)
    (278/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.550173198 seconds)
    (279/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.241133444 seconds)
    (280/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.397086863 seconds)
    (281/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.555901703 seconds)
    (282/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.274038575 seconds)
    (283/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.248221789 seconds)
    (284/341) benchmarking ("sort", BigInt, false)...
    done (took 7.166149523 seconds)
    (285/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.181227285 seconds)
    (286/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.483397575 seconds)
    (287/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.168505118 seconds)
    (288/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.563030442 seconds)
    (289/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.270569533 seconds)
    (290/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.488604346 seconds)
    (291/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.042497476 seconds)
    (292/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.510772112 seconds)
    (293/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.177249199 seconds)
    (294/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.245142882 seconds)
    (295/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.536279255 seconds)
    (296/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.258250262 seconds)
    (297/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.168310903 seconds)
    (298/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.289040103 seconds)
    (299/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.960996333 seconds)
    (300/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.416460644 seconds)
    (301/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.303296519 seconds)
    (302/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.595147912 seconds)
    (303/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.760535155 seconds)
    (304/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.430811062 seconds)
    (305/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.25478417 seconds)
    (306/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.568726652 seconds)
    (307/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.226354506 seconds)
    (308/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.182738538 seconds)
    (309/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.477763733 seconds)
    (310/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.168450445 seconds)
    (311/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 4.009844167 seconds)
    (312/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.165333517 seconds)
    (313/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.544991101 seconds)
    (314/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.876082194 seconds)
    (315/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.18176181 seconds)
    (316/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.177408029 seconds)
    (317/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.166938303 seconds)
    (318/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.262584197 seconds)
    (319/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.24450811 seconds)
    (320/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 3.018299517 seconds)
    (321/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.257372667 seconds)
    (322/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.287945036 seconds)
    (323/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.348488898 seconds)
    (324/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.291478742 seconds)
    (325/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.29446817 seconds)
    (326/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.059475408 seconds)
    (327/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.372773616 seconds)
    (328/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.966720591 seconds)
    (329/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.303328038 seconds)
    (330/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.045453877 seconds)
    (331/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.445896004 seconds)
    (332/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.668726197 seconds)
    (333/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.175732286 seconds)
    (334/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.382954331 seconds)
    (335/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.167073662 seconds)
    (336/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.174785686 seconds)
    (337/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.264394085 seconds)
    (338/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.282046778 seconds)
    (339/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.378234534 seconds)
    (340/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.249412011 seconds)
    (341/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.170305607 seconds)
  done (took 1190.039398399 seconds)
done (took 1192.211794707 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.199155296 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.170647088 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.647015147 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.175077256 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.169883834 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.173283753 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.654700691 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.195506674 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.185528987 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.655516262 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.175270555 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.172076153 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.18606353 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.205492889 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.181961404 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.185372189 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.177048551 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.195382475 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.207648942 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.177303859 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.226301584 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.177258797 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.171034629 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.22120834 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.172363733 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.187073965 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.198931589 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.225691252 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.225669593 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.175422347 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.177010925 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.514896679 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.211065625 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.176849988 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.186044566 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.187096994 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.178697477 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.188921997 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.198795663 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.185786298 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.171433442 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.182589947 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.175618647 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.176795246 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.171630833 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.171556983 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.173754064 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.298042581 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.185761512 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.499073748 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.228634587 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.199177221 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.227174272 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.174727465 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.17591064 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.175265675 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.22632065 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.179853283 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.176370932 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.49804312 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.258268197 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.190233585 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.499092667 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.225888229 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.182166221 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.185765288 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.171109153 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.201451767 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.515625983 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.683620249 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.198120329 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.191624094 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.176451367 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.173256715 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.186589912 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.652189864 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.182712561 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.722599219 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.189213868 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.188920325 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.179332234 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.176606417 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.176413604 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.192520464 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.203739155 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.173727028 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.179616505 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.180114967 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.187419261 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.518798679 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.206131949 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.647186077 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.175758667 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.2024268 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.20032131 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.72221949 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.19136149 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.202067483 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.177288563 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.519241002 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.205437122 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.202978191 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.176266945 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.184946966 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.2890078 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.201266086 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.202884872 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.174017014 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.195720053 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.181494902 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.175563145 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.188765523 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.192966596 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.208245634 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.192458628 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.174767884 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.185307859 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.181458866 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.200805553 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.183896149 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.181915925 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.186270445 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.175544749 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.226367598 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.202463842 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.191066569 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.291457472 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.182621757 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.299401957 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.188710492 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.180953351 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.175487362 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.504606035 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.209078524 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.197090835 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.183460223 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.198845527 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.19738562 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.194940096 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.177415199 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.191121505 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.178442174 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.228574094 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.177322507 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.200912532 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.228496904 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.189412101 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.182775857 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.2035192 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.211562066 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.197318441 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.181861097 seconds)
done (took 341.873906748 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.224290705 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.174046106 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.250365069 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.176339775 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.241345393 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.228004329 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.176591204 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.176579316 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.177965035 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.560028906 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.176492072 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.181216635 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.177696315 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.175584135 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.225153732 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.176128986 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.17660439 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.410335761 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.177355963 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.236062166 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.176701405 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.177758236 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.177249222 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.565273787 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.174829456 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.177871127 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.236083504 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.177626789 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.416102885 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.178389014 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.17885257 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.417217339 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.236474523 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.189705697 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.185299694 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.184490792 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.245313841 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.185104661 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.227291414 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.226939692 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.255908066 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.214264802 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.177371987 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.176706527 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.182596179 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.180045491 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.177794511 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.210957114 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.177647621 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.184973813 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.411670103 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.185967336 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.182414413 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.177995188 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.178444142 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.195192153 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.179315332 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.181110137 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.237600109 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.179358599 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.2268991 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.567281621 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.564867221 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.17729385 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.179652654 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.178360743 seconds)
  done (took 204.276363093 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.244443905 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.264820506 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.245940946 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.182999671 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.229889397 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.245268883 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.183755912 seconds)
  done (took 17.69987615 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.185818714 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.179045333 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.203220365 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.201988492 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.180952038 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.318667907 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.19285264 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.184939244 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.206505344 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.180734547 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.513910833 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.203080181 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.186870212 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.18055902 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.191927432 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.209594549 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.182533507 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.182084557 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.278474553 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.257709188 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.185458614 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.188423837 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.209684654 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.19201164 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.1815359 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.180096546 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.180743308 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.188338989 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.180487411 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.18079268 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.182295485 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.194788985 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.183133089 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.179989948 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.180225 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.181783346 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.181772813 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.180469765 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.182860083 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.180339799 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.181479019 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.181798583 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.182254124 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.187833219 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.18163801 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.204885384 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.183237394 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.184912796 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.182782952 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.181594714 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.210921181 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.181143393 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.186964867 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.188135314 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.222740279 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.191346733 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.181942052 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.186377884 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.183166312 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.183610282 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.185215814 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.271821071 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.205497703 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.180549988 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.205295607 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.21917271 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.185151107 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.180726613 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.18253849 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.206372665 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.183024861 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.204372368 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.181735119 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.278876922 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.18093265 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.323651198 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.204844748 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.184338359 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.186470988 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.182602563 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.188569763 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.182232158 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.185002844 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.188359237 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.187410684 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.181367429 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.188502905 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.182921525 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.189626148 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.18328016 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.228094892 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.183431228 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.183163057 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.281278181 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.181747581 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.281668753 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.208421322 seconds)
  done (took 235.530476488 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.187579176 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.185569624 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.19799448 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.184018432 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.183081731 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.18842674 seconds)
  done (took 15.231978278 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.185430414 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.185678129 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.183650987 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.182075179 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.18494216 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.18500949 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.183948673 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.185389569 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.185501244 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.182399746 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.184288006 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.183567896 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.183498882 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.187611767 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.183957141 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.182485185 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.18291477 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.182790968 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.186131896 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.183421179 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.431915795 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.183491534 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.185110456 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.187787958 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.187505201 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.183647358 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.195843213 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.182499015 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.184598603 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.189403495 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.1862975 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.19025365 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.188753041 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.189544308 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.187610699 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.18767767 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.188526773 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.185299544 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.183301812 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.184341429 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.188887761 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.183467902 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.183457745 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.185023056 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.183909143 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.195602892 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.186022688 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.191155054 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.183728586 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.185222775 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.187150006 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.182774285 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.184283256 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.184227868 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.190210713 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.190048446 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.189365646 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.184279012 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.188057357 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.189170221 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.188418852 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.186433569 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.187621688 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.19055602 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.192677008 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.185304258 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.190093849 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.188294835 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.188589164 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.183615723 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.186689331 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.183382183 seconds)
  done (took 160.768313866 seconds)
done (took 635.604180944 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.293004685 seconds)
  done (took 9.402649211 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.274549154 seconds)
  done (took 9.489473944 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.099920881 seconds)
  done (took 12.2187574 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.208220795 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.205020627 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.184395665 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.183753232 seconds)
  done (took 30.90217834 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.425931456 seconds)
  done (took 9.536969305 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.196754798 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.177639542 seconds)
  done (took 16.551557155 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.189032505 seconds)
  done (took 9.301246246 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.197643456 seconds)
  done (took 9.328330386 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.191662433 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.213547721 seconds)
  done (took 16.534253123 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.187204302 seconds)
  done (took 9.298881303 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.930995082 seconds)
  done (took 10.139362526 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.198434171 seconds)
  done (took 9.324438698 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.188251112 seconds)
  done (took 9.30057258 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.881526838 seconds)
  done (took 9.993812754 seconds)
done (took 173.43543969 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.190300727 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.186826475 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.190158069 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.187835941 seconds)
  done (took 30.866230895 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.220416225 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.222475498 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.230716546 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.222520317 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.21201184 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.21426693 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.221016116 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.222641273 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.212178542 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.220338421 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.22583587 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.222787257 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.220279517 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.232711719 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.232466649 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.221602023 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.220725718 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.221424228 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.212391533 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.230963584 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.222383828 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.223718774 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.187184967 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.188760449 seconds)
  done (took 55.374046889 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.381476797 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.249787333 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.341546273 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.234610737 seconds)
  done (took 11.319355557 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.188585301 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.25286805 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.241270585 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.235420669 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.24014 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.292094466 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.241534965 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.327426788 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.316074345 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.316407744 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.195665232 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.209972967 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.213467284 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.23534899 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.292602628 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.189269609 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.172812985 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.3027256 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.251121508 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.363725168 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.189965191 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.244197464 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.240542798 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.242554485 seconds)
  done (took 56.108177014 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.189220264 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.196624985 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.19823809 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.18850907 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.191749658 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.191132874 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.198187076 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.193621067 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.211106733 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.191094001 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.190288494 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.190577193 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.197944443 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.19407937 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.188788176 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.204048248 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.205139232 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.191002307 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.196447606 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.198839052 seconds)
  done (took 46.025236047 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.188176128 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.044666365 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.538140297 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.441391995 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.187671194 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.190145127 seconds)
  done (took 33.704100797 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.2028112 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.204601529 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.196064633 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.214593011 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.230894114 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.194613294 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.249171234 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.347736299 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.193228528 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.246300808 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.203465968 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.194061395 seconds)
  done (took 28.791395238 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.190997923 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.188600071 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.191510019 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.201607723 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.199384771 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.197423411 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.199307632 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.18969833 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.199482187 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.207818796 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.197734496 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.201931433 seconds)
  done (took 48.479819403 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.405627257 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.416775168 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.407454303 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.588722669 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.500031454 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.18098189 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.477818051 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.404528194 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.9202896 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.945308797 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.489602396 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.176036526 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.138261875 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.110558989 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.093081032 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.437050737 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.195364947 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.050543117 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.456254614 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.243815474 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.195716722 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.194101171 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.196289324 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.494756743 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.522097645 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.193446937 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.407343307 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.210781353 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.1930923 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.42029855 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.617739842 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.234707968 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.397843766 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.451899375 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.543267834 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.254626862 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.296524041 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.178107377 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.224945206 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.231031325 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.206152076 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.206316848 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.742452035 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.208480597 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.467405509 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.196002662 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.20126199 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.278480572 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.116886732 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.600136442 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.309776532 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.195324891 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.230127569 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.633784679 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.31406137 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.438707178 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.201507377 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.172115458 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.239184494 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.532482841 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.310243381 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.300958184 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.407988367 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.121310644 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.627721146 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.31987638 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.197100346 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.200779134 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.896022743 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.437663484 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.282063505 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.606743408 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.953041582 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.19846354 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.198084095 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.243027834 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.295187868 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.192697441 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.495943334 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.187828446 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.118275694 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.295413068 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.592113715 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.202164022 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.197965003 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.204394925 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.043624195 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.12374973 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.292907873 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.532959019 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.521389702 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.198165486 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.197184258 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.220612283 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.199889568 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.143413519 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.555871796 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.248346973 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.124534785 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.764616521 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.629675566 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.149594599 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.673232983 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.226030105 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.477866685 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.350736771 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.601264709 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.406760404 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.443233781 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.74495211 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.203562186 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.755925892 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.284337427 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.274825214 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.196023159 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.758718247 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.178166824 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.577320866 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.313281833 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.196933138 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.125618351 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.209369482 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.402910199 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.631377588 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.241998602 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.195392275 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.203224631 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.198024778 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.203132223 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.308989694 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.215363622 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.498420338 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.27637003 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.198666594 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.137658613 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.200048704 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.49361202 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.542837691 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.250438324 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.463114186 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.470395948 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.899532209 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.791701776 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.245683625 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.475112431 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.275042357 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.273702763 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.791958873 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.330756164 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.2960435 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.160466588 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.328017596 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.204207437 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.202454684 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.267460668 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.606154519 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.628302809 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.245232639 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.201448319 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.199217443 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.184968084 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.430219072 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.313283215 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.219427728 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.20715011 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.284232867 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.427247695 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.201222408 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.127942265 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.452581602 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.445103523 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.512860911 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.612810009 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.310789745 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.272383801 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.21171319 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.41509431 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.283578344 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.862493856 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.746528429 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.426995483 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.587846295 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.155140955 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.840008694 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.552375769 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.581619034 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.219511647 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.6499858 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.184565461 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.691777515 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.224199439 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.731038779 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.129763542 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.206944335 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.542453642 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.158717928 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.524103944 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.26672766 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.311589123 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.204043504 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.203245581 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.209566339 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.174548019 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.306245746 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.271044609 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.276685436 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.129133276 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.675641166 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.232103506 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.203959023 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.203670362 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.595784006 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.047672765 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.155040276 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.203519353 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.28110206 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.950796688 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.749008492 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.200508305 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.207152127 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.799317614 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.205148242 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.792356904 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.203367214 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.113268881 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.227165296 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.549031476 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.904046056 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.50080987 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.281197143 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.280164643 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.202591091 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.203101358 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.904459383 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.211750045 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.903629013 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.499527895 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.479717201 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.663871982 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.270144887 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.413929213 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.218251667 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.203464271 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.754134223 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.229899016 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.206123243 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.407800217 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.717481086 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.631937681 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.165695482 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.29166169 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.205072318 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.482593288 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.215203683 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.626726865 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.89699838 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.216800516 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.206902292 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.430963976 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.889764979 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.208090609 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.184317419 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.208365772 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.418913242 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.409142456 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.480658392 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.491164087 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.661507178 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.133052039 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.210030604 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.23175464 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.450477825 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.206263562 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.241790626 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.653074501 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.317047728 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.630608674 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.496788753 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.687590413 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.841603461 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.480643188 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.274091751 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.216294477 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.874799598 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.342276731 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.135338537 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.325498605 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.130696938 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.939948924 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.490638063 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.219462943 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.479249382 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.189462029 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.551257975 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.508450916 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.545465997 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.254830656 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.226070714 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.181341286 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.242856552 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.195740403 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.193612576 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.301139438 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.205667828 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.559757501 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.224620904 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.247812792 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.203331676 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.733857009 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.222156792 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.207311168 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.897694012 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.224410324 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.323771879 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.276709849 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.993332774 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.658764935 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.21853268 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.084998806 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.851865687 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.474676928 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.261068949 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.681041298 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.242262774 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.610005197 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.203710774 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.418851251 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.209710184 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.576318343 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.239406101 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.477025105 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.152723202 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.412666213 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.40589407 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.225553764 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.204510286 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.130727564 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.30969842 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.075498926 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.187961733 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.207177649 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.855831096 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.67533215 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.210923005 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.69306006 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.024072596 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.20743662 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.638201808 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.606054839 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.627958727 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.230126972 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.207766255 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.614868471 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.338085744 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.599057433 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.477123051 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.212123201 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.230886397 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.420592107 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.332590891 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.123723775 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.689211042 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.786929551 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.906686419 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.216511463 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.409514956 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.623046607 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.296945615 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.232875206 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.283364439 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.610183587 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.479918544 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.277845022 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.131674149 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.206403004 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.602048074 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.716935775 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.30450332 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.450277808 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.527940294 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.508038203 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.637561309 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.466861633 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.676523256 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.619105563 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.617592634 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.419662798 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.582096122 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.531469623 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.798595252 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.620346756 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.421758042 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.306600131 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.485379446 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.076805868 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.917682343 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.454056023 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.212515135 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.136950467 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.415783276 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.213311882 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.364479412 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.727355926 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.4553879 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.557770349 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.684075595 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.7483774 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.195444933 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.226771273 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.175994283 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.23264351 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.230293374 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.20821165 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.692035831 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.493329379 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.222835892 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.151083538 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.874513588 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.136858105 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.423854175 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.200902989 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.237006347 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.768211623 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.562542432 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.310951232 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.510341218 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.253589929 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.236779974 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.141914869 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.002725195 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.151334765 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.321084136 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.629021306 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.225711669 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.209621592 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.413458315 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.140474418 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.254702896 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.215030094 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.414373978 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.786157478 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.482926783 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.339450925 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.46030369 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.508082277 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.132563263 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.237658427 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.482610237 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.136600543 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.668099876 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.883801222 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.246734794 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.283693885 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.210899945 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.21461795 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.483085924 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.636768029 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.305768815 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.747535144 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.236745397 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.235967259 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.650843772 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.302298789 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.214202502 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.217396687 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.531506587 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.438967172 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.213794598 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.20308112 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.425577981 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.283825735 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.408227329 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.284168432 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.728054309 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.217387509 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.148364302 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.311519477 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.164599034 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.176754271 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.974136302 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.267763507 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.213538393 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.493297242 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.835814745 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.415522266 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.608022523 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.098611597 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.208822383 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.247049502 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.215106662 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.214556609 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.604264175 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.518266309 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.212417254 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.49767067 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.263992537 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.218345325 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.876069166 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.182387649 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.212955043 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.007771478 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.152336213 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.960267669 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.609842573 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.21874659 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.296282212 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.217333515 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.140444181 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.227898179 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.342514303 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.194276382 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.213700947 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.589974267 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.622011818 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.302113466 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.219986013 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.215436802 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.221593244 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.42760117 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.726927359 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.230268262 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.914964352 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.41872982 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.217537325 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.699987227 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.671973557 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.281510515 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.24179079 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.211549718 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.44953308 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.789096139 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.208325695 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.181040177 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.437756595 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.217494387 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.488125492 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.48988683 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.215651435 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.427903165 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.659755058 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.489867669 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.561661652 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.539447753 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.285849747 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.217135865 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.177122398 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.248308821 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.220263747 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.493325637 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.268492576 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.21753499 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.224135139 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.769449198 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.958784547 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.685449989 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.367281392 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.635609986 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.115046174 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.965293746 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.221526903 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.14310686 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.215277502 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.243135975 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.220036749 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.143239025 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.012174796 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.936096822 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.427407915 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.52860943 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.144660862 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.421350076 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.82235824 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.138915713 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.186181558 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.20507713 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.477665739 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.145208317 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.222402001 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.172330972 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.591356751 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.770974527 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.476408245 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.217013578 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.161367581 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.21785933 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.217556295 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.219888909 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.304513946 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.219852471 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.333922262 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.493298276 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.71739379 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.318279739 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.858638148 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.018708044 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.155719302 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.258752231 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.776063144 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.788628455 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.596757268 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.347736689 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.019725469 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.158622407 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.221999544 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.234978233 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.457179502 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.21653424 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.223258361 seconds)
  done (took 2279.84419946 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.445936365 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.255479499 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.289419142 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.325958993 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.254398998 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.38351769 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.269498754 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.289281568 seconds)
  done (took 60.654427866 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.208757449 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.540244568 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.251485234 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.209668138 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.204608596 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.637172261 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.479187251 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.259889748 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.225790838 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.22571918 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.22574509 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.22500707 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.225187477 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.222007956 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.226260149 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.525639241 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.249313618 seconds)
  done (took 83.326084603 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.275703129 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 11.341194319 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.232819084 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.005476491 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.286301362 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.565704793 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.225124399 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.234790035 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.572091088 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.521233927 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.251235533 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.23342347 seconds)
  done (took 96.908523163 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.229117816 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.226925012 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.227600813 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.228050526 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.227202918 seconds)
  done (took 13.286862099 seconds)
done (took 2846.853558605 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.512571081 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.331784161 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.303670539 seconds)
  done (took 6.78303419 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.369252005 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.420444127 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.530543819 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.540678308 seconds)
  done (took 12.014733094 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.516660042 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.592597613 seconds)
  done (took 7.257549603 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.642949626 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.246535354 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.6167819 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.227131472 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.228307625 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.22905904 seconds)
  done (took 23.838601484 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.225980114 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.227995835 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.227518648 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.228312186 seconds)
  done (took 11.059883073 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.228674548 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.012885912 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.227361502 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.242919304 seconds)
  done (took 22.860779708 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.430158471 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.270503326 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.992583527 seconds)
  done (took 10.843523677 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.854524194 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.681386725 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.838901143 seconds)
  done (took 10.523851321 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.37188029 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.06681189 seconds)
  done (took 8.587850053 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.367935107 seconds)
  done (took 4.516936344 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.062436989 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.542345246 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.700509262 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.748971357 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.809583502 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.445682347 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.561416356 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.505277014 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.617093755 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.629343581 seconds)
  done (took 28.773772916 seconds)
done (took 164.226469697 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.655092001 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.249937747 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.438908996 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.605361709 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.471408257 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.440596214 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.531913399 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.592787435 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.278920907 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.26149151 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.602331904 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.467355859 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.467301716 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.248705836 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.47439218 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.253230487 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.469362087 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.67066966 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.28289361 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.495887639 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.529575194 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.247567765 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.439861346 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.263364231 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.47025063 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.38823405 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.848152208 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.259938412 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.437583431 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.858557366 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.389230098 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.645116573 seconds)
  done (took 180.887526736 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.223180466 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.223651155 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.223537663 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.227693528 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.574294424 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.223758175 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.222925259 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.222513709 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.479810088 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.458475011 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.223022477 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.573192378 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.222623381 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.223461395 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.224304429 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.231025122 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.596827108 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.22227557 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.231381896 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.223773007 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.225183985 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.406925714 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.234581211 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.420273951 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.573770821 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.221891302 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.222160083 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.222140359 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.222913443 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.222592914 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.221943763 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.222803146 seconds)
  done (took 219.620457212 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.226084243 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.224033691 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.222361496 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.224433588 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.224044218 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.225110493 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.222762467 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.223221137 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.905394239 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.892618608 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.224348327 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.222942984 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.225602735 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.222971454 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.224062734 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.223038721 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.222725538 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.225868058 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.223178943 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.22415408 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.224478451 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.077247659 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.224811508 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.103981342 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.223767565 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.228403812 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.225012284 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.229912413 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.241063661 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.230804003 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.221943216 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.222938075 seconds)
  done (took 232.43429217 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.464070825 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.22608894 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.227935298 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.239415642 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.227663383 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.224142959 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.293480581 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.479774829 seconds)
  done (took 22.540538079 seconds)
done (took 657.644659443 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.590645855 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.947571611 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.359864707 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.247860429 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.487926368 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.294308222 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.246378 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.308362377 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.901751573 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.322580677 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.660769506 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.252389161 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.993985546 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.274734425 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.36475085 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.303106659 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.596013508 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.859898743 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.381484009 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.932349892 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.449887101 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.169481572 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.325664578 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.929182389 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.675253402 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.186808016 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.300129947 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.598318984 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.258927258 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.483590571 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.942515656 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.552338258 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.259697679 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.250993944 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.303539788 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.296765838 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.478896256 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.256034172 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.362071815 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.969881359 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.908365967 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.776972908 seconds)
  done (took 115.208498399 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.240286575 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.23200144 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.234721565 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.233964381 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.234297759 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.233021735 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.232188913 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.23214519 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.231456801 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.233190434 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.232494917 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.234122257 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.233282282 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.233499988 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.233123045 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.233642358 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.233336323 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.233618556 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.233276231 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.231758754 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.233822982 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.235186406 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.229650812 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.233386687 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.233368002 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.233585319 seconds)
  done (took 60.229435464 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.229019665 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.409327836 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.522448346 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.258827458 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.227424339 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.231659927 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.257229605 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.235397349 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.236595648 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.230309455 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.340486528 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.232664113 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.241922911 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.524552712 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.252886239 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.226985565 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.227935875 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.232247569 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.415811586 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.243978446 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.258156955 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.244480685 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.256549684 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.240884442 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.228409027 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.225659557 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.231040997 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.631535176 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.237061534 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.337119242 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.287508167 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.255805019 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.577509532 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.523616226 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.298124381 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.230805778 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.223923108 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.381958709 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.238101956 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.231447752 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.253532195 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.233763821 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.515386498 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.736566515 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.236981784 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.223362691 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.628015092 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.392749211 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.274269817 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.239102616 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.521401432 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.253486294 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.224941519 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.226753935 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.261059427 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.23748477 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.22662183 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.476825093 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.242659769 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.254128823 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.234013106 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.226125556 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.417406707 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.232898449 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.405574771 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.232063889 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.231642341 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.227555464 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.519026084 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.254989334 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.733562913 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.238504648 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.225309085 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.338219839 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.408893995 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.654576809 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.241348873 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.416929728 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.594113632 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.266253721 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.238163628 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.615966154 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.268726983 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.236811078 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.226731818 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.226721234 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.227453586 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.270924693 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.253300099 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.652261405 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.73721764 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.487816004 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.265821266 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.241499831 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.228247006 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.475339075 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.240121061 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.22635161 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.513281562 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.755345752 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.238725202 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.233109997 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.716217672 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.241092013 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.257979542 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.23959116 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.526175575 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.257283189 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.271565151 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.226855224 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.232663958 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.229512893 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.258386729 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.237913135 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.227067319 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.710605229 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.398798782 seconds)
  done (took 274.722007388 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.231196968 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.222201104 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.22903946 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.222541374 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.227053256 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.228991619 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.227102532 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.226867692 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.229207153 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.227049112 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.227584229 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.229357206 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.228797563 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.233120576 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.280752755 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.245101148 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.728678279 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.244391001 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.242840595 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.241367939 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.814026959 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.25188984 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.243252 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.240993462 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.243023911 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.245199967 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.250125266 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.278613318 seconds)
  done (took 177.898440416 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.244039592 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.292929044 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.255849302 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.292313875 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.256897433 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.245291593 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.26592045 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.260848541 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.25281145 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.245098811 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.245568388 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.273329236 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.25192848 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.32067023 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.273430232 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.275924779 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.324410301 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.250226441 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.246433412 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.246000268 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.293382509 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.261040942 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.272475819 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.300448844 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.2579021 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.294468138 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.261878683 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.244991224 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.247154504 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.335392284 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.263351253 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.274730231 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.282712722 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.2655483 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.341313435 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.339061697 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.323726906 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.272338388 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.251427814 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.246332237 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.246268957 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.250307957 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.294389411 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.256101663 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.247537492 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.344070734 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.264017494 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.246620527 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.266960505 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.247422655 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.258392356 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.265252655 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.282179013 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.347253634 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.29244706 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.273424278 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.269818071 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.265814218 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.24936786 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.321755291 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.253663739 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.336693305 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.263806717 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.251985243 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.25065161 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.250667798 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.295663289 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.282242709 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.326766831 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.253981224 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.320712347 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.300552082 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.259490103 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.24939948 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.247619429 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.296928062 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.332695964 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.300061251 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.307788382 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.281815573 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.262626648 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.247857635 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.253858441 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.27555279 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.256338282 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.337508427 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.339835491 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.250155109 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.248105158 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.248483406 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.248877573 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.272147027 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.306298349 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.285277912 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.33839026 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.279519898 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.284041381 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.257966451 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.260471038 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.25542374 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.280454515 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.256593141 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.261426325 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.590419366 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.28454663 seconds)
  done (took 241.454535407 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.615842064 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.294073621 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.320418074 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.522590952 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.646246506 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.357304205 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.284881656 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.304976704 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.310745564 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.415688161 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.354556715 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.3423857 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.284188427 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.273212564 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.300003298 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.30939805 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.3298744 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.586693677 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.391410155 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.016317537 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.288736127 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.56012883 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.579704889 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.630368685 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.33814557 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.679534635 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.920073879 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.390426708 seconds)
  done (took 72.823055095 seconds)
done (took 944.480776615 seconds)
SAVING RESULT...
DONE!
