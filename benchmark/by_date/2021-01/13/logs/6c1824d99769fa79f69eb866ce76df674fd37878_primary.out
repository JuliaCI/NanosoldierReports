cset: moving following pidspec: 26930
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.825654669 seconds)
loading group "shootout"... done (took 1.121638424 seconds)
loading group "string"... done (took 0.669796703 seconds)
loading group "linalg"... done (took 8.644811735 seconds)
loading group "parallel"... done (took 0.165683398 seconds)
loading group "find"... done (took 2.877388087 seconds)
loading group "tuple"... done (took 2.250953349 seconds)
loading group "union"... done (took 15.105052966 seconds)
loading group "dates"... done (took 1.449269358 seconds)
loading group "micro"... done (took 0.217188051 seconds)
loading group "simd"... done (took 4.839145603 seconds)
loading group "io"... done (took 1.09274437 seconds)
loading group "random"... done (took 9.616041043 seconds)
loading group "problem"... done (took 1.53543553 seconds)
loading group "array"... done (took 25.358567235 seconds)
loading group "misc"... done (took 1.909638761 seconds)
loading group "scalar"... done (took 43.835899629 seconds)
loading group "sort"... done (took 3.341027377 seconds)
loading group "sparse"... done (took 12.826710194 seconds)
loading group "collection"... done (took 18.894068825 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.443803112 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.115540108 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.165589261 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.116864718 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.208708722 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.124045105 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.130579497 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.086655317 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.908901418 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.156189639 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.117992261 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.427875431 seconds)
done (took 5.439790928 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.188380322 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.248318041 seconds)
    (2/2) benchmarking "String"...
    done (took 0.169262843 seconds)
  done (took 1.635774037 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.091660423 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.064117064 seconds)
    (3/3) benchmarking "different"...
    done (took 0.069421187 seconds)
  done (took 1.443963408 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.067676509 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.135766284 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.068587826 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.068775765 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.068926397 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.068420117 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.068724065 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.068549489 seconds)
  done (took 1.770072435 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.073358694 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.069990825 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.067584453 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.069933937 seconds)
  done (took 1.49873624 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.066269928 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.125317098 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.067378924 seconds)
    (4/4) benchmarking "different"...
    done (took 0.066676534 seconds)
  done (took 1.540277413 seconds)
done (took 9.382606177 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.164861713 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.856897197 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.860174362 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.147977193 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.271611316 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.369240951 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.124453022 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.209550541 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.115896306 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.07804197 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.149068947 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.080932913 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.485072184 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.508851039 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.074222206 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.172554842 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.648581985 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.08831003 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.136537074 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.471646358 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.074398146 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.090127095 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.08753251 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071854323 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.358912487 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.155804296 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.668539136 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.093826633 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.070433021 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.097405185 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.073682785 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.080393366 seconds)
  done (took 11.188001559 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.116803866 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.117431525 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.071576699 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.127175267 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.09760258 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.072641395 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.077843551 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.070032485 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.091987285 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.128454224 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.094013506 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.125352077 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.069249384 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.071828968 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.099592511 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.200428914 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.083917723 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.084595129 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.070457867 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.08407781 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.108856291 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.081858427 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.081296269 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.080807004 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.136013079 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.17376931 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.100451233 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.101417589 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.069400471 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.082239364 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.117677093 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.129443217 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.070538905 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.067840951 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.123373171 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.099068791 seconds)
  done (took 4.859982805 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.888686392 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.099298086 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.110904136 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.102229473 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.110569019 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.116723461 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.150199904 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.126475365 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.103265037 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.080399387 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.178261467 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.681942047 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.251097807 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.074719696 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.148902755 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.362003336 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.121017402 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070943013 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.070999008 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.099111286 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.073291739 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.14054439 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.069261369 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.178697528 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.607747714 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.072556278 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071670739 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.098081106 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.180612634 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.146111571 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.098214993 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.073726665 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.569874117 seconds)
    (33/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.098281566 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.068720735 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.06723008 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.091565793 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.096964614 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069185272 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.070626673 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.081869721 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.068627436 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.111349121 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.083275879 seconds)
    (44/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.067324169 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.524009995 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.073211552 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.616589032 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.319692297 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.077090885 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.074755698 seconds)
    (51/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.112836242 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.104773343 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.067061706 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.070527204 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.91726345 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.147348385 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.069448072 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.276964111 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.071259185 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.070295597 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.071556212 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.10523854 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069613651 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070875608 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.075357006 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099212217 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.817700246 seconds)
    (68/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.067806622 seconds)
    (69/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.146113434 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.098587142 seconds)
    (71/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069197236 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.405801257 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.074031462 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.07106185 seconds)
    (75/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071433983 seconds)
    (76/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.094331289 seconds)
    (77/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.13138237 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068152448 seconds)
    (79/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067555195 seconds)
    (80/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.109999278 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.096953476 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.221564224 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.074095246 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.071677386 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.069726729 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.334825574 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.180716969 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068175031 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070604049 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.493527416 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.066830044 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069819123 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.07085706 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.093742579 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.070930088 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.066693981 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.067695179 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.102415284 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.07458497 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.337411626 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.070113209 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.493025078 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.073004301 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.107534985 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.122405871 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.071213232 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.106100083 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.071248519 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.068163416 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.076841975 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.069102405 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.067785898 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.072831672 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.06895852 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.069399804 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.071864392 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.071294577 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.070384614 seconds)
  done (took 23.797822064 seconds)
done (took 41.954632153 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.407587923 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.082368057 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.082451409 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.082578509 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.082372644 seconds)
  done (took 2.015499496 seconds)
done (took 3.398163331 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.260983783 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.078557277 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.066558804 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.208953521 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.091874674 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.178569103 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.221485097 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.164522514 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.092328008 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.092120046 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.092626164 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.22701849 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.35330146 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.09321602 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.162742456 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.233691237 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.091806226 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.067034163 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.091693592 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.09166147 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.091937746 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.066686258 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.091325727 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.091807257 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.160907765 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.090751038 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.065771157 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.161409994 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.090545195 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.162598308 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.090119921 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.089923615 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.090702159 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.160900363 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.090251832 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.159512683 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.066194345 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.089712517 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.089313451 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.089749994 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.088490315 seconds)
  done (took 6.46084076 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.076529603 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.08590081 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.087715366 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.064780028 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.074128171 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.085072227 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.064648902 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084618261 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.094615832 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.085157254 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084992615 seconds)
  done (took 2.25353761 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071018352 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.085077226 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.086692874 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.0641729 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.075338121 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.085574887 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.064418123 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.085347685 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.088543723 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.086802985 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.08595378 seconds)
  done (took 2.190201879 seconds)
done (took 12.20276709 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.192501603 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.093258427 seconds)
  done (took 1.579913548 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.270297097 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.526720412 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.941528412 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.121352956 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.100636582 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.11352027 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.222797541 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.094711902 seconds)
  done (took 7.881271816 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.130427367 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.070422179 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.070721946 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.070521283 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.071684756 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.071829442 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.071228776 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.071992653 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.071204657 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.071873315 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.070550356 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.070105002 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.070661503 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.07269965 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.072208495 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.070363676 seconds)
  done (took 2.625280485 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.106612921 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.07188253 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.102828743 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.064431361 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.074920055 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.065004368 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.073585358 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.0756772 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.072780587 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.072901927 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.07516081 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.072971472 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.074030754 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.074373189 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.075593835 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.075632362 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.076121053 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.07339959 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.075680366 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.076494155 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.075312471 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.076458795 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.075850832 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.074442657 seconds)
  done (took 3.26833232 seconds)
done (took 16.666863013 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.176519723 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.077858828 seconds)
  done (took 1.566493042 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.093632228 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.097032029 seconds)
  done (took 1.519996282 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.07422118 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.062500732 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.08024872 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.072959479 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.063746259 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.063440192 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.079357109 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.063423692 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.063441499 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.063634639 seconds)
  done (took 2.01894818 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063679097 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.070554954 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.068779293 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.067017838 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.06913555 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.06450263 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.067475247 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.064507485 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.071318169 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.063452952 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.06790687 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.085873504 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.067765246 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.086754719 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.06765552 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.068281488 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.069783132 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.067326244 seconds)
  done (took 2.582092922 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.062806983 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.063539095 seconds)
  done (took 1.463843062 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.066190217 seconds)
    (2/7) benchmarking "second"...
    done (took 0.063734808 seconds)
    (3/7) benchmarking "month"...
    done (took 0.066608841 seconds)
    (4/7) benchmarking "year"...
    done (took 0.066335996 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.06385491 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.063424835 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.063988683 seconds)
  done (took 1.785004461 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.433754729 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.188029358 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.428576297 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.071900012 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.079677323 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.262614419 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.066325024 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.071483944 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.071706005 seconds)
  done (took 3.049834093 seconds)
done (took 15.330872419 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.083649583 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.185684052 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.11582825 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.412158254 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.094927268 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.069687323 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.115745804 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.207570864 seconds)
done (took 2.642676449 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.282075536 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.197598963 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.319620817 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.154388776 seconds)
  done (took 3.01253348 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.39585058 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.171957324 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.07813999 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.069439072 seconds)
  done (took 2.066563603 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065948834 seconds)
    (2/2) benchmarking "read"...
    done (took 0.073347093 seconds)
  done (took 1.489621476 seconds)
done (took 8.207992192 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.071818958 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.063155873 seconds)
    (3/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.098905499 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.065670697 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.066008342 seconds)
    (6/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.064905667 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.065721139 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.064871678 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.066325513 seconds)
    (10/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.063691795 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.063671073 seconds)
    (12/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.063937207 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 0.066151366 seconds)
    (14/24) benchmarking ("one", "Float32")...
    done (took 0.066266746 seconds)
    (15/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06612495 seconds)
    (16/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066057185 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065827473 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066340203 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.065767108 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06569394 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065710685 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066325912 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.065803546 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.066310128 seconds)
  done (took 2.986352426 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.080212815 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.06841087 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.06910939 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.068899032 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.069348514 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.069173474 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.069418557 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.068326838 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.069581366 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.06772641 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069630351 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.069709717 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.067845519 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.069648839 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067973786 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.070314362 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.069277065 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06811248 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067897448 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.07035004 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.069471572 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068303519 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.069935735 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069240837 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.069566945 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069614118 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.067983293 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.068452189 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069713909 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.070272405 seconds)
  done (took 3.447081114 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.067879254 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.061671335 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.06219794 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.072619305 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.06213146 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.06239216 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.062433766 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.061698632 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.062086122 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.063551694 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.062981953 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.062604131 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.063114467 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.062371251 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.062316384 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.06284775 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.067367322 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.082119979 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.062630096 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.062125286 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.066839396 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.062485859 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.062381414 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.062715574 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.062709834 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.062473322 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.062199612 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.063211477 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.062072263 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.062895572 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.062295583 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.067176743 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.068286955 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.062290221 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.073225652 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.067933205 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.062400733 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.069726258 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.063484021 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.062273551 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.062513588 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.062336766 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.062580489 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.062582377 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.073368724 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.062801145 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.063682174 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.062898642 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.062747234 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.062109637 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.062204206 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.064509694 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.071899046 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.064086406 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.062327418 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.063323128 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.062267943 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.063124255 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.062440018 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.062283607 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.062248976 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.066306507 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.064054162 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.063282299 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.083134348 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.06418939 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.073396932 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.062853128 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.06285147 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.066905875 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.063219479 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.081271651 seconds)
  done (took 6.024816291 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.072063483 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.073929874 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.082292994 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.072682284 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066617172 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.063372522 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.066722524 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063235219 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.073185503 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067080891 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062956297 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066710511 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072958834 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067299 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064106192 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.072748035 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.067190288 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066307657 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.063572575 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.06749371 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064914546 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.066772621 seconds)
  done (took 2.8781416 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.139839231 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068759906 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.108673917 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.073043497 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.071515385 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.072994455 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.068697502 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068785787 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068679607 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.069532962 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069774244 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068941884 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.071722199 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069755354 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069653576 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.069813893 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.069547272 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.069531428 seconds)
  done (took 2.731101508 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.077775976 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.068284714 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.092735284 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067975226 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.06859908 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.068008064 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.072092574 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.072417427 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.067972341 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.068426747 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.073322135 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068526223 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.069831302 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069041398 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068389277 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.068659315 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.068189489 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068380886 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.072325416 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.071958143 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.072106187 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.072835543 seconds)
  done (took 2.932629665 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07859735 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.067024822 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.083310606 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.068960951 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062170788 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062404244 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.068991263 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.068004947 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.068837977 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.067530736 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06879945 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.06289971 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.069628651 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.06833125 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.069941579 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068160066 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.068119793 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.068031925 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067934277 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062632057 seconds)
  done (took 2.737243532 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.098392803 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064829848 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.064786809 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070666408 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065475317 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.076341847 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.070451 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.065381942 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.065764431 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.088643967 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.065855525 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.06539646 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.070669909 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.068817521 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.065586804 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071277236 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.070770285 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.070903923 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.066003464 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065388011 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.087801612 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.065160348 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.070299896 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.065109567 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.065143475 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.065069495 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065042481 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.068427616 seconds)
  done (took 3.331048258 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.066484992 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065665058 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.065957633 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.066184055 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.065610911 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.065787043 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.065668425 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.066054914 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.065744552 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066072425 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.065677132 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.065629798 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.069094048 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.06604208 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065956653 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.065740311 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065716436 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.066183476 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066397212 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066162387 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.065479978 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065702419 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.066231923 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.06708751 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067119476 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.066399448 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066791887 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066791144 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06610263 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066574143 seconds)
  done (took 3.364115154 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.074913563 seconds)
    (2/2) benchmarking "in"...
    done (took 0.073845738 seconds)
  done (took 1.521997344 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.064876559 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.079843726 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.061341716 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.074761142 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.071014918 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.066768613 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.072377506 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071686461 seconds)
  done (took 1.93165209 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.092644718 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.12068682 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.063931859 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.064319471 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.094847034 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.13086672 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.103733095 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.076264072 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078192102 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.066669352 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.064390731 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.104341952 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.063316472 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.077603975 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065306031 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.073200422 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071476754 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.081994051 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.077366461 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.061762365 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.076733601 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064537791 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.062345047 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.064684866 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.064130174 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.071392513 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.080470307 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.077032757 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072871589 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.06144255 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.083298724 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.062845915 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.06357128 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072901021 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.093861408 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.062443214 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.100925288 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.062888774 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.067975625 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.062497762 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.075917505 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.084366986 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.07847302 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.081660002 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.064181558 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.064479447 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.062279505 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.064719357 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.066810267 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.072691659 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.062751718 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071063277 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.06190895 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.064134111 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.073888302 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.062795517 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.068439851 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.0729518 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.077076891 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.074354517 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.072718838 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.079225853 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.072951232 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.070661752 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.063680797 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.083301661 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.06452512 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.076522982 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.078708291 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.064107002 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.076590004 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.0622568 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.061448939 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.062670403 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.097062398 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.063990596 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.063553541 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.06268082 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.062123941 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.064144686 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.073075888 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.067578563 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070615768 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065941057 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.079414326 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.072427515 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.062472475 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.069073406 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.081066638 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.066333507 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.062890384 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.079712099 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.066429972 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060752445 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.079817431 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.072068806 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.063205994 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.062423118 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.065948722 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075633399 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.062835532 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060450329 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070744946 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.062832424 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.089769693 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.065397226 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.209980283 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.064396754 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.075840487 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.068970381 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.065306162 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.062300402 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.068287201 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.06424003 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.06189183 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073392367 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.063035973 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.078331177 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.07013805 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.078455145 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.078793293 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.07402507 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.079923781 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.062849037 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.060977147 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.081585974 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.073132765 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.06407217 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.081579751 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.062019359 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.076767494 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.062240133 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.064037295 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.07268205 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.06183623 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064147517 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.062590482 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.067398938 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.063878284 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064397174 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.069046362 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.072130625 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.075332284 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.064161831 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.071966342 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.063071132 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.078874583 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.07333491 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.067553643 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066251853 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.063498023 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.075476347 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.070411094 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.072910738 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.062170314 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.063581293 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.06269091 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.074684853 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.073492215 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.064837279 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.070368898 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.068114997 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.063484846 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.063125822 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.064056912 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.066906444 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.066170288 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.063618855 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071460179 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.072088933 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.077293361 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.069814601 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.072866241 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.061600127 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.062301629 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.064535972 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.062096907 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.067681915 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.073111345 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078942557 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.074976276 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.085185189 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.062764523 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.073834398 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.064381386 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.08070003 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.07735295 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.063873417 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.067674556 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.061648346 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064157769 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.072384262 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074564175 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.07720351 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078162794 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.067628207 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.06746591 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.062187351 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.078012254 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.062845047 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07170193 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.07234682 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.066791098 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.062340719 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.06381219 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.072256312 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.067212862 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.062070478 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.078256743 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.067507618 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.061272069 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.077196523 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.062111731 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.072913503 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.060869838 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.065470029 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.067458044 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.063241407 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.071681775 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.077432566 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.060380001 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.062063068 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.077631079 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.206437296 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065678374 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.0734308 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.080214481 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.069014978 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.072448039 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.075142609 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.074546021 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.068429177 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.07441756 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.064143075 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.073429231 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.066093449 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.075498239 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.063287959 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082511423 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.061962611 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.079186576 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.063205046 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.074750856 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.063256115 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073081453 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.063592233 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.080576985 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.064568149 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.063615849 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.075116308 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.061882556 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.072738529 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.062177703 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.068637007 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.06995661 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.073007191 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.064517353 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.073102415 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.064449448 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.071983634 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.067405985 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.071907998 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.072630868 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.067631293 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.061784352 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.071380117 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.074651153 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.072074347 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.06429206 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.064193525 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.063395734 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.072928365 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.064440432 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.064436533 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071647617 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.068104452 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.069651917 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064230671 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.065024609 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.064597977 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072450453 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072973229 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081476149 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072508039 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.071047694 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.072992155 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.063003341 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.078931933 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.062850164 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.074096844 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.061755741 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.069008064 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.072945649 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.063161662 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083157839 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.064307927 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.071499163 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.075606485 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072280149 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.066932924 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.081906305 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.066193142 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.071898954 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.071597488 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.068133383 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.070006679 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.064862026 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.072145188 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.073005554 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.07442038 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.063408305 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.070632588 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.07252625 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064454434 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.070590929 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.064182715 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.071501377 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.064773997 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.061688487 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.067759194 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074871041 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.068018902 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.068241955 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.062665873 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.06155315 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.062685548 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.068743744 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.067437583 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.071497134 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07840897 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.061054298 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.062726015 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.060982925 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.065868297 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079878286 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071842362 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.070288864 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.067303851 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.060777719 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.062884719 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.063143672 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.209594013 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.06759285 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.063156037 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.063742877 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.075348329 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.06511861 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.068431282 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063470507 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.064142548 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.073820028 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.067903288 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.063865202 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.07046736 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.062802106 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.068631366 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.06207405 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.064711431 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.068558075 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.062190913 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.066785417 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.074388551 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.080479721 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.070249818 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.072167132 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.063788152 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.071546798 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.079273465 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.069558686 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063920449 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.073069629 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.062092739 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.082434211 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.073016166 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072169386 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.073483201 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.063906442 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.080460907 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.067671862 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.073496187 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.078946755 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064116771 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.069609512 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.062338805 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.079163255 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.068347566 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.062590187 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.071496763 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071644411 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.069047476 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.075440312 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.063769366 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.071518874 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.068324418 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.067093667 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.064401668 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.064976315 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.072259756 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.079838831 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.063716236 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.067234997 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.07182374 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.072052737 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.068047226 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076156722 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.07188576 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064266343 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.064676582 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.067040995 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.063634522 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.075905239 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063660596 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.067612452 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.067573153 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.062553761 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.070280931 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.080184456 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.072894098 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072935298 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.062452901 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.062170243 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.081306707 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.067043709 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.066312453 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.07164824 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.072997537 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076164053 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.073098625 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.080602483 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.063424537 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.069190728 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076071254 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.063439196 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.062272147 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.066700212 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.064128343 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.072278981 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07329023 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.071053636 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064733541 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.069943174 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.076588726 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.063667025 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.067977216 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.06703162 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.062964394 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.073247538 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.071200727 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.074638511 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.06328449 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.061065416 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.065534157 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.071325178 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.070075503 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.07111228 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062304921 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.067528797 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.075987882 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.069922524 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.208421703 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.063466454 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066849833 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.073493881 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.068093711 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.063236793 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.068217363 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.066884886 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.069665397 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.073358666 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.068380308 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.062553162 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.08072076 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.072047324 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.07271141 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.064528541 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.064843776 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063530617 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.062371274 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075359689 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.062274235 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.064165726 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.067818416 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.064237052 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.080793028 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.071914782 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.079161998 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063559849 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.067839928 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.062014847 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.072713746 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.067555445 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.0627781 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.074329331 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.061936361 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078711948 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.075297286 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.068172539 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.062074617 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.068163263 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.071315102 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.078333007 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073351291 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.07260569 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.066518354 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.073686682 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.06470435 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.074635728 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.062381194 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.061635194 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.073833697 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072343018 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076204181 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.062245598 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.073251822 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.064658441 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.071465925 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.071311499 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.064464864 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064431506 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.064566461 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072980005 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.068021666 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.073217365 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.067920196 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.080877852 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.064001686 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.074600599 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.072368036 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.074550385 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.077297465 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.07592876 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.07192264 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.063582223 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071026674 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.071508849 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.064095471 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.06827175 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.066529798 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.085677771 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.065081051 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.06426012 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077923886 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.069556772 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.062918927 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.069353678 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.06814737 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.073589696 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.063979898 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.074049084 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.067137656 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.063862621 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.067619434 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.068076061 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.061466007 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.062000636 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.062226653 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07265689 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.067364081 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.062396796 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082157492 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.064292309 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.071741185 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074187623 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.069966205 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.064177509 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.061446247 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.063436091 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.075552959 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077472291 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.065814194 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071212497 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.062928095 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.07168804 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.060534416 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.071265006 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.070017562 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.216161748 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.063757633 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064296103 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.079548884 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079658118 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.068220873 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.07292731 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.072872444 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.064023703 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.084820605 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.072831438 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064917559 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.074871305 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.06532906 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.062363993 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.061733909 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.064152521 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.075239377 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.062055116 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.064722911 seconds)
  done (took 43.663007318 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.098861454 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063225769 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.062286678 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.062414608 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070544537 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063319883 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.062900943 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063323032 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.063375181 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.065124089 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.062714348 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065724462 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.068764867 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.07587679 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.070658308 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.066439192 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062689909 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063884749 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.06295064 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063514161 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.069130893 seconds)
  done (took 2.889997724 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.065919974 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.066477085 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.066253827 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067210638 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066493985 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.062385013 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.06656758 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063136796 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067282787 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063104442 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067523077 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06312259 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.063534867 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.063303615 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063492244 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064376116 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.067145462 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066057648 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.06267472 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066855935 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064397011 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.066505497 seconds)
  done (took 2.902292909 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063632111 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.063044675 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.072058534 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.06203422 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.06159016 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.065628247 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.061686312 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.067104897 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.067419891 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.067202969 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.071995088 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.062654845 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.061749403 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.068762428 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.061685222 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.062905243 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.106035465 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.063195559 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.063180545 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.061772289 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.064946957 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.072437735 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.062026917 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.06262105 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.067369432 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.065482165 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.061778046 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.0645717 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.062521592 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.067153601 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.063340179 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.061676877 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.072179426 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.071307446 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.067392753 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.06712883 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.063780845 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.062979898 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.062097634 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.062004727 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.071833313 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.063536217 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.062512584 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.063832944 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.071781835 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.061870147 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.061759876 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.072113317 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.061741789 seconds)
  done (took 4.702560021 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.074003669 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.115774739 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.068582963 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.09611278 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.075567839 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.068235641 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.068459762 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.096937257 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.063396623 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.064332103 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.076507769 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.076582312 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.065371053 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.067023437 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.07000525 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.065115306 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.066021487 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.064286541 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.067472655 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064995926 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.067853462 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.06942962 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.075212465 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.075967141 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.06591812 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.0641893 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064726844 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.066011155 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.075529422 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.068078108 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.066319657 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.066892068 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.075607143 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.07034091 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064409612 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.064507447 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.07650155 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.065340205 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.064818787 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.063737171 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.064811038 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.066201401 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.070199001 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.077421436 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.065582829 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.070488231 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.06554476 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.063296763 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.076764048 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.064851764 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.069116275 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.077148527 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.066383331 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.066787187 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.066832137 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.076104719 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.065445422 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.064480364 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.065816067 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.076247518 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.063447134 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.06570146 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.079659616 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.064524191 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.068400785 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.076721312 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.070713786 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066443986 seconds)
  done (took 6.403258658 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.072299433 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.098188184 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07837553 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.078896456 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.073365916 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.073208555 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.073417849 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.073484805 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.073056961 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.076712259 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.073250441 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.136835543 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.070284729 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.075100974 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.07354319 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.073574681 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.073211723 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.073176075 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.072945269 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.073486686 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.073374744 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.078237969 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.073441548 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.078320218 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.075615826 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.069486034 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.073044221 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.073157186 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.078505599 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073268541 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.075791668 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.073276622 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.073375419 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.078608673 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.075955113 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.073541313 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063191916 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073185558 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.073233091 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.07328872 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.069646618 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.078806532 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.074006928 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.069859356 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.073269639 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.073644155 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.078656136 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.076294541 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.075342296 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.076978147 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.073652912 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.079084291 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073662131 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.073869316 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.079190366 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.08100549 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.078981983 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.0787681 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.073846647 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.078967289 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.079162314 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.081224515 seconds)
  done (took 6.243928691 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077334753 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068621699 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.082312892 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.062316155 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.062196076 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.072120037 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.062509638 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.062068062 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.06948117 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.06948063 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.071572896 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.072511571 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.074698959 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.070392442 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.071997971 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.074119535 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.072236768 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.072380854 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068849588 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.072298754 seconds)
  done (took 2.924111617 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.078478928 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.081972985 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.06833361 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.07259825 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.06795937 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.072175977 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.067754446 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068669533 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06865247 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067924575 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.073295846 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.07340379 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068578888 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.072341234 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.073339619 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.072246025 seconds)
  done (took 2.64186118 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.066258452 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.07047024 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.097258614 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.063618179 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.065616448 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.062718467 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.064132933 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.061919517 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.065161721 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.077309798 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.063262023 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.065707482 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.064005632 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.062578746 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.062941401 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.066108513 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.064750544 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.062875296 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.06366332 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.096127715 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.072102554 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.064113014 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.065767938 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.063106075 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.065378811 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.072074194 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.064898657 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.065620778 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.06288554 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.065755468 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.065749679 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.07050995 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.065656798 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.064205456 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.062555266 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.063489082 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.063743034 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.066096646 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.066028047 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.06385837 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.061999967 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.069049031 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.063863666 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.064274718 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.06515958 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.066174836 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.0655152 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.070030577 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.063726872 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.066053138 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.063738984 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.0657172 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.064328384 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.071470081 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.066047027 seconds)
  done (took 5.161213523 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.080880353 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.0679568 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062285379 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062169604 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.067846252 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.068320621 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.06812207 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.068385975 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068255667 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062256542 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.068251144 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.067489543 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068518865 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.067876114 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.068443253 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067914395 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.06197547 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.06834605 seconds)
  done (took 2.734800837 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.069426609 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.068009326 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.06698563 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.064396179 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.063712266 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.068878492 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062538512 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.063718207 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063983613 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.06439422 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064286188 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.064012628 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063844674 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.064057694 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.06795318 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064164562 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.063675764 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06255173 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.064170221 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062069879 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.06859696 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062385859 seconds)
  done (took 2.919069255 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.119959728 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.086165487 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.159852427 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.082068923 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.091172542 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.073867028 seconds)
  done (took 2.117671377 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.096597687 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.10042199 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067668583 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067550842 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072673612 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070669025 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070727012 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071278286 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074091667 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074779371 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07088644 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074817311 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074343387 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076342745 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072406103 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073108548 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070837293 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071014897 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067762366 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078321934 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070999125 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074140957 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070823319 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070914072 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070627379 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076347508 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074215085 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074928634 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070810245 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074633018 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072521937 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070942379 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07477544 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074769344 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067840114 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074085759 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071411092 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078577735 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072702976 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076344922 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06807049 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072944403 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074861488 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074305824 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074532284 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071076555 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074643944 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071274073 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071551946 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080242967 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073474549 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07654704 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072729482 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075115748 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075162082 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080590043 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074928699 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076387376 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073018769 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075244395 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07652466 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073234586 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076809254 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07560372 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072823763 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076254101 seconds)
  done (took 6.41105818 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.106970035 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.068118275 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071263261 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075162183 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076626135 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071329152 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071316582 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071458156 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071054375 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068569871 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.107193749 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071371673 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07670631 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.079158354 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071392164 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071045801 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071155822 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.076688965 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068615973 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079566932 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071037445 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076491689 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076294072 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076366216 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07484714 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07312299 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071230379 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07134139 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071553927 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070724474 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07443454 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071232044 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07650343 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.068662884 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076642898 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071490707 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071038478 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074492821 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071075054 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072889529 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076817743 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078532941 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070952107 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071298304 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075722699 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071852925 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071449966 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068764928 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071560943 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068759356 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075441019 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075491584 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075019404 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076666436 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071423245 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071662244 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071473141 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071334223 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071521134 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073219565 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076506085 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071301457 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.080339068 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071585412 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071537984 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076616886 seconds)
  done (took 6.418524635 seconds)
done (took 133.369028031 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.236217246 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.200206885 seconds)
  done (took 1.91838873 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075903393 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.196919476 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.074933619 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.076392889 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.110716671 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.107970289 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.10359152 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.073600588 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.076264239 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.073603758 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.14080789 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.103919762 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.073330651 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.094626213 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.073067932 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.07332874 seconds)
  done (took 3.033582332 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.110401621 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.215452138 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.084586336 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.071804089 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.154489396 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.078890797 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.074185847 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.079208783 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.078890995 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.071909873 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.109630581 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.085655421 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.077489627 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.078665709 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.074082287 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.077294363 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.078394853 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.078659002 seconds)
  done (took 3.201801713 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.105756524 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.094074092 seconds)
  done (took 1.726602271 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.158242225 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.106226546 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145467969 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.344353736 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.135782571 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.138425977 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.145048502 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.140557794 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.112943419 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.133529143 seconds)
  done (took 3.07181668 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.10749798 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.107228559 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.310453849 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.104176681 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.08456672 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.079781414 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.077082804 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.081939026 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.076829864 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.078254874 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.124528936 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.077181276 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.074414209 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.126843678 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.100971253 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.109557486 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.072807812 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.080102718 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.081341684 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.072533535 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.077558329 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.08172902 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.180020761 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.080596675 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.102307925 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.077295071 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.078829977 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.076071537 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.076098092 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.080193924 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.080803124 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.10164938 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.080603469 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.084517199 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.078540915 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.099397888 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.073634293 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.101185314 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.076188753 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.074369015 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.07712757 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.08067138 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.074427712 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.080038343 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.077356826 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.07936283 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.082219704 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.072857922 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.309121305 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.076284649 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.074526624 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.078562799 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.078343235 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.079483217 seconds)
  done (took 6.640175917 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.12248919 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.114980738 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.072149375 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.119236993 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.111792859 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.072177575 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.125169391 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.106255562 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.125017637 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071588657 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071215425 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.071352641 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.078890336 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.083546268 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.123634611 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.112973391 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.073564461 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.072253382 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.113384483 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.113726039 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070655167 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.110172028 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.1159935 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.113027292 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.070525997 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.071822096 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.070904168 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.071144367 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.078769291 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.077574134 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.070726931 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.081367514 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.085337534 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075525597 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069766472 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.070389305 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070157573 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.077867665 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079942363 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.080557695 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.077304305 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069933922 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.070718848 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.071002489 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071116083 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070016727 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.079530345 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.078501171 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.079797056 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070536479 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070979916 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.06997303 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.0708068 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.078559797 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.076725071 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.079495922 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.081488714 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070782005 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070678019 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.072433241 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.082311551 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.079477383 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.079013385 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071729612 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.079804607 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.071138431 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.081629803 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.084584599 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.070587491 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.071351712 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.070958239 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070758225 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.071034214 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.076820827 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.07690888 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071554981 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070901534 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070396932 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078559235 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076604394 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070235059 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.078335294 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070085897 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070161368 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071063914 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071082781 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.078241109 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.077325569 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070577889 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069143442 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069760778 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069532625 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.068913139 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.077048971 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075944536 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.07608634 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.216715138 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.072036744 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.080853346 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.077962219 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071445111 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.076682266 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.070796084 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070951783 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070955019 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.077094516 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.076598754 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.078504174 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070924813 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.070058764 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.077131344 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.07989676 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.070532417 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.076614745 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079193247 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.077708266 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.070388816 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.080513462 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071407122 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.07978087 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070659275 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079121347 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071254573 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.077537514 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.071022204 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.069971791 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.070407784 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.079939662 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071457115 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070527352 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070801049 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070308316 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.077282635 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.083882536 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071458336 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07815947 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.077298299 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.071517284 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.080557496 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071189981 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.08023325 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071090749 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071075593 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070165439 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.083192642 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.070907766 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.070937946 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.070690295 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.080193184 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070576069 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079096999 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.07666353 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069815802 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.081407946 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.079471095 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.077211243 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.079758823 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.072150194 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.071018266 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070329983 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.07384278 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.079113079 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.080718436 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.07141157 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.07073351 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.076328251 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.080053205 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.070161511 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.076910294 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.077039652 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.077584871 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.071187679 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.071024267 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.080622218 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.082838684 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.077367176 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.079626085 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.077501344 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.070716402 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076348956 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.079556498 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070771383 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.085134889 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070873631 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.081474243 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.079686009 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.075435964 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078898427 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.079221175 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077759262 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.078067887 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.079235347 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069333513 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069355451 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.217193939 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.070855715 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071181937 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.077014963 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.071353706 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.071491853 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.083483247 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069482885 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.080714669 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.070467497 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.078282452 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069871075 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070918531 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.082453865 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.071072562 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070941721 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.076715221 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.071091838 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.076304791 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.080406974 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.077315053 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.070844079 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071163179 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.079963162 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.079930163 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070738159 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070494263 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071074183 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.079080635 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.078951231 seconds)
  done (took 19.172280047 seconds)
done (took 40.292555748 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.172120582 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.117885171 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.214701631 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.204912736 seconds)
  done (took 2.330272291 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.102587438 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.067283522 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.111539984 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.121261979 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.066838964 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.106800236 seconds)
  done (took 2.142600616 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.204413788 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.178204395 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.247148779 seconds)
  done (took 2.191231279 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.373073299 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.153074046 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.220016051 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.506970299 seconds)
  done (took 2.917432467 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.141306061 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.132678513 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.080156182 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.143636984 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.087146771 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.063962812 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.136368986 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.071071525 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.10189053 seconds)
  done (took 2.585211727 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.142148856 seconds)
done (took 13.867735171 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.309918289 seconds)
    (2/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.315512915 seconds)
    (3/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.293947218 seconds)
    (4/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.110037373 seconds)
    (5/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.287680023 seconds)
    (6/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.160976098 seconds)
    (7/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.111050255 seconds)
    (8/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.285963868 seconds)
    (9/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.118801443 seconds)
    (10/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.298180894 seconds)
    (11/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.321816838 seconds)
    (12/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.075742262 seconds)
    (13/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.283435645 seconds)
    (14/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.072067841 seconds)
    (15/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.319271935 seconds)
    (16/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.361582128 seconds)
    (17/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.077363783 seconds)
    (18/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.069762928 seconds)
    (19/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.090630113 seconds)
    (20/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.16864032 seconds)
    (21/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.167820094 seconds)
    (22/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.223777552 seconds)
    (23/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.07854011 seconds)
    (24/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.279273637 seconds)
    (25/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.151363113 seconds)
    (26/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.209068647 seconds)
    (27/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.250665503 seconds)
    (28/341) benchmarking ("sort", BigInt, false)...
    done (took 0.269161841 seconds)
    (29/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.187638794 seconds)
    (30/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.079357945 seconds)
    (31/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.151051292 seconds)
    (32/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.080392849 seconds)
    (33/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.083528314 seconds)
    (34/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.125143353 seconds)
    (35/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.066328681 seconds)
    (36/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.126669463 seconds)
    (37/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.167112567 seconds)
    (38/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.078291885 seconds)
    (39/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.075433196 seconds)
    (40/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.076402334 seconds)
    (41/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.067775338 seconds)
    (42/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.172867937 seconds)
    (43/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.243800997 seconds)
    (44/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.096344374 seconds)
    (45/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.200815188 seconds)
    (46/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.078487853 seconds)
    (47/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.076445996 seconds)
    (48/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.153705958 seconds)
    (49/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.075690079 seconds)
    (50/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.074533522 seconds)
    (51/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.080267188 seconds)
    (52/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.203375564 seconds)
    (53/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.082116817 seconds)
    (54/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.074851471 seconds)
    (55/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.070022043 seconds)
    (56/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.12632092 seconds)
    (57/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.153824911 seconds)
    (58/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.089981914 seconds)
    (59/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.079907882 seconds)
    (60/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.073897346 seconds)
    (61/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.071404828 seconds)
    (62/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.289948337 seconds)
    (63/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.201591365 seconds)
    (64/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.066761339 seconds)
    (65/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.16449668 seconds)
    (66/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.094638502 seconds)
    (67/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.310205074 seconds)
    (68/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.200836962 seconds)
    (69/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.089291745 seconds)
    (70/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.201638283 seconds)
    (71/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.073728094 seconds)
    (72/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.083662921 seconds)
    (73/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.100066977 seconds)
    (74/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.152871738 seconds)
    (75/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.066667652 seconds)
    (76/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.075564721 seconds)
    (77/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.145437175 seconds)
    (78/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.216792751 seconds)
    (79/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.163257088 seconds)
    (80/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.237054241 seconds)
    (81/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.16400431 seconds)
    (82/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.070426525 seconds)
    (83/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.223080351 seconds)
    (84/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.142883747 seconds)
    (85/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.20950762 seconds)
    (86/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.092658215 seconds)
    (87/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.097639762 seconds)
    (88/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.161934313 seconds)
    (89/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.06724459 seconds)
    (90/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.107535129 seconds)
    (91/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.074852882 seconds)
    (92/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.154879463 seconds)
    (93/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.067947891 seconds)
    (94/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.074835485 seconds)
    (95/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.075086562 seconds)
    (96/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.071976766 seconds)
    (97/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.078719171 seconds)
    (98/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.077774243 seconds)
    (99/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.078561318 seconds)
    (100/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.067257335 seconds)
    (101/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.066091431 seconds)
    (102/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.08875846 seconds)
    (103/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.094904705 seconds)
    (104/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.076573445 seconds)
    (105/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.08882301 seconds)
    (106/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.075876529 seconds)
    (107/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.06674347 seconds)
    (108/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.068975968 seconds)
    (109/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.098650851 seconds)
    (110/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.096986277 seconds)
    (111/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.149689032 seconds)
    (112/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.067418298 seconds)
    (113/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.20446905 seconds)
    (114/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.186074171 seconds)
    (115/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.066005484 seconds)
    (116/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.081003006 seconds)
    (117/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.066354948 seconds)
    (118/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.065947794 seconds)
    (119/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.220230292 seconds)
    (120/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.223026962 seconds)
    (121/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.146857498 seconds)
    (122/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.078341253 seconds)
    (123/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.073728148 seconds)
    (124/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.066084597 seconds)
    (125/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.067023618 seconds)
    (126/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.074156175 seconds)
    (127/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.066316944 seconds)
    (128/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.074959214 seconds)
    (129/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.069109618 seconds)
    (130/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.06741801 seconds)
    (131/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.078032861 seconds)
    (132/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.067457173 seconds)
    (133/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.182222688 seconds)
    (134/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.074192784 seconds)
    (135/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.079405265 seconds)
    (136/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.071215745 seconds)
    (137/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.083499207 seconds)
    (138/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.073435672 seconds)
    (139/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.197215636 seconds)
    (140/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.066266913 seconds)
    (141/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.163381465 seconds)
    (142/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.066516099 seconds)
    (143/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.067054817 seconds)
    (144/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.074892494 seconds)
    (145/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.227143228 seconds)
    (146/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.067274754 seconds)
    (147/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.201285428 seconds)
    (148/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.48440152 seconds)
    (149/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.152604953 seconds)
    (150/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.07975841 seconds)
    (151/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.071470029 seconds)
    (152/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.076611216 seconds)
    (153/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.079835689 seconds)
    (154/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.089413802 seconds)
    (155/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.080328775 seconds)
    (156/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.071958386 seconds)
    (157/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.081826088 seconds)
    (158/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.175554865 seconds)
    (159/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.075989352 seconds)
    (160/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.071266943 seconds)
    (161/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.06861376 seconds)
    (162/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.096803191 seconds)
    (163/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.077840655 seconds)
    (164/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.070834135 seconds)
    (165/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.07982449 seconds)
    (166/341) benchmarking ("sort", Bool, false)...
    done (took 0.150130247 seconds)
    (167/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.082112393 seconds)
    (168/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.092586029 seconds)
    (169/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.07123521 seconds)
    (170/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.13675296 seconds)
    (171/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.076233615 seconds)
    (172/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.07815718 seconds)
    (173/341) benchmarking ("sort", Int64, false)...
    done (took 0.069542058 seconds)
    (174/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.075501989 seconds)
    (175/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.167844241 seconds)
    (176/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.068528135 seconds)
    (177/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.092937752 seconds)
    (178/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.206584399 seconds)
    (179/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.06914569 seconds)
    (180/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.163292959 seconds)
    (181/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.088341135 seconds)
    (182/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.070222113 seconds)
    (183/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.081812654 seconds)
    (184/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.147348993 seconds)
    (185/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.067781061 seconds)
    (186/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.14639372 seconds)
    (187/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.125874531 seconds)
    (188/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.068625344 seconds)
    (189/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.077549362 seconds)
    (190/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.084680665 seconds)
    (191/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.075067923 seconds)
    (192/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.070528355 seconds)
    (193/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.158438095 seconds)
    (194/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.066593653 seconds)
    (195/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.067662318 seconds)
    (196/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.07569415 seconds)
    (197/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.095400414 seconds)
    (198/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.091730263 seconds)
    (199/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.217344226 seconds)
    (200/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.068591239 seconds)
    (201/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.075498928 seconds)
    (202/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.068103905 seconds)
    (203/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.151546753 seconds)
    (204/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.088785253 seconds)
    (205/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.091022289 seconds)
    (206/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.150270238 seconds)
    (207/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.068312134 seconds)
    (208/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.086833589 seconds)
    (209/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.067631179 seconds)
    (210/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.068443485 seconds)
    (211/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.082106612 seconds)
    (212/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.097908641 seconds)
    (213/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.068822211 seconds)
    (214/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.092097015 seconds)
    (215/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.156582307 seconds)
    (216/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.06931939 seconds)
    (217/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.075326769 seconds)
    (218/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.192375332 seconds)
    (219/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.066781029 seconds)
    (220/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.066522857 seconds)
    (221/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.068636613 seconds)
    (222/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.083926794 seconds)
    (223/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.075843826 seconds)
    (224/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.088319936 seconds)
    (225/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.089047199 seconds)
    (226/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.123022653 seconds)
    (227/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.075786542 seconds)
    (228/341) benchmarking ("sort", Float64, false)...
    done (took 0.140541597 seconds)
    (229/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.075335749 seconds)
    (230/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.068652784 seconds)
    (231/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.099490636 seconds)
    (232/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.068399299 seconds)
    (233/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.068500407 seconds)
    (234/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.067840335 seconds)
    (235/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.165973998 seconds)
    (236/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.070322317 seconds)
    (237/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.068202311 seconds)
    (238/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.088998095 seconds)
    (239/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.068906514 seconds)
    (240/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.070939519 seconds)
    (241/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.068456975 seconds)
    (242/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.069546147 seconds)
    (243/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.067698748 seconds)
    (244/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.070278024 seconds)
    (245/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.069638593 seconds)
    (246/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.080013738 seconds)
    (247/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.078329645 seconds)
    (248/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.068008552 seconds)
    (249/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.067933742 seconds)
    (250/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.067871363 seconds)
    (251/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.187691465 seconds)
    (252/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.149720317 seconds)
    (253/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.079743892 seconds)
    (254/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.075499077 seconds)
    (255/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.070607523 seconds)
    (256/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.086760003 seconds)
    (257/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.116861072 seconds)
    (258/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.06858505 seconds)
    (259/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.25160036 seconds)
    (260/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.078862344 seconds)
    (261/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.263827144 seconds)
    (262/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.230962734 seconds)
    (263/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.15802198 seconds)
    (264/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.070942424 seconds)
    (265/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.07147929 seconds)
    (266/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.085885206 seconds)
    (267/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.073542168 seconds)
    (268/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.066638718 seconds)
    (269/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.068269497 seconds)
    (270/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.068378155 seconds)
    (271/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.088067253 seconds)
    (272/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.069960693 seconds)
    (273/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.068596083 seconds)
    (274/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.068650367 seconds)
    (275/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.07082943 seconds)
    (276/341) benchmarking ("sort", Float32, false)...
    done (took 0.140978581 seconds)
    (277/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.067976638 seconds)
    (278/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.150052756 seconds)
    (279/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.073493079 seconds)
    (280/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.068684531 seconds)
    (281/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.066849788 seconds)
    (282/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.067350479 seconds)
    (283/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.072478098 seconds)
    (284/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.068987374 seconds)
    (285/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.159128133 seconds)
    (286/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.154581968 seconds)
    (287/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.06785604 seconds)
    (288/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.068050073 seconds)
    (289/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.066298961 seconds)
    (290/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.072731953 seconds)
    (291/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.135414073 seconds)
    (292/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.07275033 seconds)
    (293/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.076027212 seconds)
    (294/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.076774092 seconds)
    (295/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.068226488 seconds)
    (296/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.153750992 seconds)
    (297/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.070613764 seconds)
    (298/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.06896908 seconds)
    (299/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.067735133 seconds)
    (300/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.067843903 seconds)
    (301/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.154455441 seconds)
    (302/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.067102201 seconds)
    (303/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.07595103 seconds)
    (304/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.070368408 seconds)
    (305/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.111965458 seconds)
    (306/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.068172266 seconds)
    (307/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.067546706 seconds)
    (308/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.068465427 seconds)
    (309/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.069707525 seconds)
    (310/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.069923071 seconds)
    (311/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.069911561 seconds)
    (312/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.068065599 seconds)
    (313/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.071006259 seconds)
    (314/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.074792314 seconds)
    (315/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.072287279 seconds)
    (316/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.095080448 seconds)
    (317/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.068041986 seconds)
    (318/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.068355207 seconds)
    (319/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.067882594 seconds)
    (320/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.068646775 seconds)
    (321/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.067175272 seconds)
    (322/341) benchmarking ("sort", Int8, false)...
    done (took 0.152772059 seconds)
    (323/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.069524509 seconds)
    (324/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.208466999 seconds)
    (325/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.079472599 seconds)
    (326/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.185286451 seconds)
    (327/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.068568328 seconds)
    (328/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.068001321 seconds)
    (329/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.068177198 seconds)
    (330/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.068076559 seconds)
    (331/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.068189743 seconds)
    (332/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.076009037 seconds)
    (333/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.072658362 seconds)
    (334/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.067768624 seconds)
    (335/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.069417381 seconds)
    (336/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.209655855 seconds)
    (337/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.068015608 seconds)
    (338/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.068248122 seconds)
    (339/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.068267148 seconds)
    (340/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.070578781 seconds)
    (341/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.067540901 seconds)
  done (took 39.812138144 seconds)
done (took 41.395304243 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.12638806 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.082867222 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.082065945 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.078012007 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.081866482 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.080850643 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.08169157 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.079299461 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.080908633 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.079846834 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.111834584 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.067992526 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.076618178 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.083821717 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.077050817 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.084065353 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.080754159 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.084185504 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.068668298 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.082856037 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.093569273 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.080474506 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.076807841 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.082325753 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.068890232 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.077751034 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.125185608 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.087732938 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.073169928 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.077730037 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.076055334 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.087398483 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.076548947 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.074502055 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.078280009 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.074161936 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.077993074 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.075373351 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.124234198 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.073976642 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.068480414 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.080224775 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.07536716 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.076176646 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.077498482 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.080243274 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.073206554 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.081524135 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.067629332 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.079364138 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.124019505 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.073573387 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.072131422 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.076478514 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.073243365 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.077242929 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.07231038 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.07989946 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.07335595 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.079748736 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.077225894 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.076838417 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.067847 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.07696012 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.075450381 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.075492975 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.06679026 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073351376 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.067871469 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.06789609 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.06723467 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.076578901 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.074774217 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.07292634 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.067102009 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.068255795 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.067494442 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.080333568 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.074164239 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.077686606 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.068377114 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.073672193 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.073065487 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.068206215 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.073798557 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.07973115 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.066970105 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.068387582 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.066982152 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.082826435 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.07489829 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.068141221 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.079473688 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.073180457 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.073252192 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.067410594 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.06679033 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.072893011 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.075493964 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.067487124 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.066738035 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073173795 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.072530219 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.076539051 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.067855234 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.073093674 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.072981446 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.066487839 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.076573732 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.074760761 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.076471072 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.081246233 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.076577498 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.080142222 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.068500899 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.067075558 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.07734087 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.068206043 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073245577 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.075789212 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.07323867 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.075862625 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.067933589 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.0668005 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073002348 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.078364608 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.067975568 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.068089911 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.067870551 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.076252312 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.074856773 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.066134 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.067320706 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.076205912 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.075822118 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.066145047 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.066254957 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.076191792 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.067259694 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.072715286 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.072775444 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.075355383 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.066320927 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.067279928 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.066100544 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.066460315 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.066260205 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.072337147 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.072420507 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.067220665 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.075482289 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.072783696 seconds)
done (took 13.325908304 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.07430522 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.11406368 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.120008104 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.117040777 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.083886995 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.070839744 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.073439578 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.089132488 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.072633896 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.093767114 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.095191352 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.091014097 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.135876248 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.067896062 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.069180524 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.069795394 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.067173639 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.08123571 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.118213347 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.092558044 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.105695885 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.068319902 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.08557753 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.088969164 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.083344169 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.08752961 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.069910185 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.0698315 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.071841638 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.087715677 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.095400142 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.068618868 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.070302813 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.086982891 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.084301151 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.077118715 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.069674484 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.075419499 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.073027484 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.069055153 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.071033742 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.087028724 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.075168902 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.075523983 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.069678017 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.069785751 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.068968603 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.07669877 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.086999517 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.074908548 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.08211197 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.088374062 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.071150343 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.069343774 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.067283841 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.076523443 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.069015484 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.069790185 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.069153794 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.068920879 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.068947245 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.071408157 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.074468415 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.075776984 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.07267341 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.075704848 seconds)
  done (took 7.030156202 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.084874646 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.095226808 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.083690414 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.083993086 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.068166084 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.069161791 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.069613213 seconds)
  done (took 2.332973398 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068454815 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.109971545 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.117850486 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.118601318 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.125071941 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.11602116 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.069445991 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.101622573 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.06820649 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.111300252 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.1226424 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.120044643 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.072508118 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.08130547 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.069615218 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.118872558 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.069519262 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.07616921 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.114610781 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.121222225 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.073794532 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.099784681 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.082874441 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.069769647 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.115965444 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.111151452 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.071454245 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.069596601 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.069396447 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.069123413 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.068546935 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.091431309 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.110400995 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.081659643 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.069367469 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.068091675 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.108060209 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.069669154 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.107743038 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.07818655 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.10861384 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.068812374 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.069464629 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.068792342 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.069832881 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.112945325 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.069754245 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.068563504 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.068032979 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.111858242 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.06807152 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.110859226 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.071125233 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.074160017 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.07391237 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.073480767 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.076208495 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.069209257 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.110834165 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.075242143 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.068748673 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.120487505 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.120727278 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.109066017 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.120195812 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.077959956 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.112369773 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.109657772 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.068997641 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.068557093 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.069567387 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.121587754 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.072072725 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.07121498 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.069765536 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.074412877 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.113180659 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.125568933 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.125447143 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.082302367 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.071199804 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.06869978 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.075172845 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.275025366 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.074170669 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.068997578 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.069781234 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.068072285 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.0736608 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.068782581 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.073590533 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.068923022 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.075779602 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.071163998 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.071937448 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.11759258 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.069053203 seconds)
  done (took 10.396150349 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.070892745 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.07128268 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.070568828 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.070080557 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.070163012 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.069969657 seconds)
  done (took 2.218679687 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.091897863 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.069245707 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.081250688 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.069495753 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.091600857 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.112864156 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.113081259 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.071656084 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.085925662 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.080248454 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.113757455 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.116605359 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.116844896 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.071799146 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.11400017 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.070646616 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.11443441 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.072782668 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.080095145 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072136103 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.086473146 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.071496874 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.071852208 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.120848724 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.072219304 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.070254206 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.070797875 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.080521238 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.080147343 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.071768278 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.071184622 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.072761589 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.078885206 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.071613289 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.115588538 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.07879809 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069837602 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.075039199 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.072425411 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.072904641 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.117345701 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.071461002 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.071904502 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.074478873 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.070997531 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.078407119 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.074821164 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.073341135 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.11360267 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.081007536 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.074372331 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.070157072 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.071926791 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.074457538 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.078295695 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.071346755 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.075087484 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.114943729 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.070828973 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.078002085 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.068968847 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.071945228 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.071073164 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.071540925 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.074525251 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.074797737 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.078603088 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.072050565 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.071596522 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.06962596 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.074777729 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.069287799 seconds)
  done (took 7.63334204 seconds)
done (took 31.424935409 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.541751604 seconds)
  done (took 2.297294531 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.945629577 seconds)
  done (took 2.742612497 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.123184913 seconds)
  done (took 9.930228298 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.33865091 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.429550012 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.741144417 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.132546468 seconds)
  done (took 3.484127008 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.74711508 seconds)
  done (took 2.570265063 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.231072634 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.226540252 seconds)
  done (took 2.276900372 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.374045876 seconds)
  done (took 2.188395997 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.195619916 seconds)
  done (took 3.003098139 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.238694444 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.166482995 seconds)
  done (took 2.223630663 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.645545772 seconds)
  done (took 2.45688018 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.511106945 seconds)
  done (took 6.332635368 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.237804024 seconds)
  done (took 2.101423974 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.234102276 seconds)
  done (took 2.054577877 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.02902867 seconds)
  done (took 3.845512268 seconds)
done (took 49.322387932 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.087907434 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.089522306 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.089487317 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.084410968 seconds)
  done (took 2.131989436 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.077343212 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.072559199 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.075826851 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.076294117 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.073639177 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.075547603 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.075636684 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.072130766 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.073938407 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.072663067 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.071494404 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.072522999 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.074977818 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.072752849 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.075230309 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.076330305 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.07225403 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.072426953 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.074985025 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.072497789 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.075403886 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.072477075 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.070581876 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.072173995 seconds)
  done (took 3.585509855 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.08127371 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.074580688 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.078038565 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.073381781 seconds)
  done (took 2.135483167 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077294483 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.078556964 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.088089952 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.092950168 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.078152635 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.079473489 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.08667748 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.086834278 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.068358374 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.089628054 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.07051898 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.06926759 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.069652217 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.088758896 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.086037268 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.065173205 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.066169075 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.079745902 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.078839191 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.081893994 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.07105068 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.06811262 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.07880921 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.079365716 seconds)
  done (took 3.705207878 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.085115499 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.067805466 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.084167012 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.093234293 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.094591061 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.067727105 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.082954086 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.095522041 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.130797504 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.067661891 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.074197029 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.06808268 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.107738602 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.067772133 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.085129472 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.112758074 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.11582495 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.072482796 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.101705888 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.067837514 seconds)
  done (took 3.581734938 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.079099869 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.071644407 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.072896343 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.067674179 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.079185484 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.075528362 seconds)
  done (took 2.286875235 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.070572716 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.070240592 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.072214369 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.075230044 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.070668339 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.070384625 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.069403133 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.068403277 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.068744285 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.068947878 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.068841395 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.069492796 seconds)
  done (took 2.674661163 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.215471284 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.072002287 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.072758332 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.068928974 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.06984282 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.069264517 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.08323679 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.070891729 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.087218009 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.069330592 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.068987538 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.071734969 seconds)
  done (took 2.853303124 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.107226732 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.113657835 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146732438 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118648851 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119916633 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09914986 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.166641498 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.096789194 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.165049915 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.141617019 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120393619 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098026286 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090054917 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.072690522 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10384797 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122036694 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140709298 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07558837 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116460415 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.208347608 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133973297 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.136001912 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.150401496 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119359231 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.092506821 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.149365136 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099872628 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105055478 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.12721783 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.129069983 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121560199 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.10116185 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.074173085 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.073329313 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15273323 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.106817277 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.124068221 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.0958631 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.108092928 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.090974217 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110699683 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.072247918 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.08632884 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.113500218 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087667371 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.13392175 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.09064807 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117984244 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083478625 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.141107691 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.281029712 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.140445801 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089128502 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108708297 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138583823 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114533257 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.137449061 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109990087 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085253587 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.122006911 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.105244004 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103684854 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110942067 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083044995 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.180015736 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091524176 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.11523068 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114974049 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.097078554 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.097946075 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.110588011 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.13977394 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.128765202 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.128089672 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141551364 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098218507 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123261642 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.102933939 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.133019287 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107735636 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.075686516 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.124290824 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.133474376 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102274634 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105080095 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132350394 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094663999 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080183705 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.102154706 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.122193899 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083023168 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.115681694 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083671163 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.113202764 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135802985 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100054229 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114998904 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120796464 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080905063 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.316673528 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.111872281 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076029098 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.120309806 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116495068 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.159646887 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09836561 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.079503497 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104549876 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107073794 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.15226843 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109930805 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082492167 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112945259 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142600335 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097449478 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.212972936 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098292062 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.143916501 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11450576 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.090430444 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07790656 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.093103883 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115897995 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110986414 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115903222 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093378815 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.086881102 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090055567 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114983308 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095253578 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083537304 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117130151 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.102804051 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.077318211 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091218429 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.082125758 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145904887 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.080732765 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141189873 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128487608 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.079003022 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109982711 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.100629216 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11277863 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.101171591 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120074516 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143387146 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.11717288 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.09294224 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.097263876 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111571869 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.150413286 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130722749 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.096059822 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.080136987 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104680238 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.275602209 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.101065578 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.128585684 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099095706 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111358076 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105604287 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144490234 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.148032399 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103746097 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104656347 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109688809 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.12650394 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07982377 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.159607173 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107140058 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121713402 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.087096388 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144546501 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.116159805 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092964203 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.090172908 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.103304015 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.107060168 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110576519 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.147784377 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.098974655 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.074984661 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096483757 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.146753646 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07938408 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113846195 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.094622254 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.09711715 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122461516 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.09715862 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085359373 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.071319133 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130965472 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.161801227 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.072714563 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118464911 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.112764768 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106843119 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.124491003 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.07257257 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122492449 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.143448002 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12050798 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14471146 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150612055 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120095797 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.281427626 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.117545458 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.108847381 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082659424 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.128558949 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.137702459 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098909743 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095216052 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13854914 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.122778008 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.139638544 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.118757366 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117456969 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.108210113 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111255707 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106268582 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.104859095 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14933835 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124691377 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.127978282 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.088947706 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109504115 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.121622104 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138952936 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085301552 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145112944 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.08742882 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122057872 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.080223129 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.127015971 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.079879725 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.112313971 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082335455 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104075674 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.072044158 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.076701243 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.145610229 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.116490009 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108890773 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103253532 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.141703561 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.140222838 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.081527219 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.111640506 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119325414 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104248854 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119225256 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.11227088 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.091833424 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09824727 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112549732 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.087835095 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.084551258 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.278827855 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0974255 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129738176 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.087438603 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.078210232 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143164163 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106761916 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097675186 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080820243 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110908388 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.123719379 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097347244 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090387958 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117443426 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108281088 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144753521 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.095584586 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.100933724 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.12749982 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08339226 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.095327368 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.072234554 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.088416633 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.078597922 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.130799375 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078819536 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119972248 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.07225137 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.135371908 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.090491928 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.097271599 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.106105112 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114405004 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131395674 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09799889 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144872801 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092595942 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.122517035 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11104855 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098090659 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.091886217 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107068329 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104146871 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.125646854 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.099227994 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126153881 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148282657 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107845902 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.146619114 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09448475 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126221003 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11084313 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.127615482 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115032084 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150883478 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.299977431 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11614623 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115527862 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.078685367 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097745172 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108407116 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.114414802 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.177161148 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128885457 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.074721648 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109154818 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.096927003 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.110568522 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108044195 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085382596 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149164417 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104945992 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.091698328 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115688155 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.0937914 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.107217413 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078609589 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09844612 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.10408582 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.097832708 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101679398 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118941313 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.131653234 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117216141 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.147441099 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.102083163 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.095594185 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.122419802 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11408275 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114078637 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08949212 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089653328 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14192259 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122510475 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.129706468 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.104407949 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112705234 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115113461 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103659864 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129298548 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111680263 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.131033641 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083198641 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.078847709 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.071368139 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.074582003 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.126791574 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111708928 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114536943 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101268431 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.074703767 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.264383391 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109627682 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074789756 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09162436 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09715387 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098090203 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.094235465 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109445882 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.11473186 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.093833353 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.1072238 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102809584 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.149753167 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.103984028 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091481813 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.147238747 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.152717877 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090601082 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095504396 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.074303943 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081546306 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115731534 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151538497 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.15428728 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.080084213 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089788485 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.089177148 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089956406 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.074677346 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.089060204 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.09299055 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10849365 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102767404 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.116148744 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108766763 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078833173 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.106267349 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103349199 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096723855 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.108228326 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12253576 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.128666145 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.145851997 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114375774 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110643664 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078706625 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.083756893 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078925201 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083172374 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.105227362 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.08222726 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079001368 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.148054406 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.095068768 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107755356 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11257525 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.091865556 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078325812 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.298883077 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.072860625 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138257654 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.074797729 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084916865 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.085463369 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08188473 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096443989 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141441598 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112579332 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115687422 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110335862 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107134867 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143721454 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15967595 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083208917 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.147294419 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078676409 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07834046 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078467594 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116455141 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09275932 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118710757 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14326411 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094475396 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106787622 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080169554 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.147711871 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.100369215 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.108239154 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090324146 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.082452903 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.148069535 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083095413 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.083747302 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093796018 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.115207275 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.075348027 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107855856 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.088275622 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.082762372 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146609645 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.634411454 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093711758 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.078240091 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.099380501 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.146556625 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131743461 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09866917 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112110361 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.122031533 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10336919 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098570181 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111127554 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.185739365 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076757587 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097901201 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.266263791 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101820035 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105802643 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.101927106 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.088151801 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.096107652 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.089689537 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082146678 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110810189 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091593209 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09993699 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.110221541 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.085655203 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.090117691 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.133806124 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.10655812 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.084982692 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091762922 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.106488163 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092296456 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103645885 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.071721662 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116840309 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.094171342 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120311971 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.097809342 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110860243 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.129921353 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093223467 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141245509 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.109648633 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.12494559 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090485665 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.081086596 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127544071 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.090976723 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080413452 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14849136 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.098610353 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.093780316 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10743591 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.100407669 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117275554 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120114046 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116411546 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100864683 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08186364 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103970102 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.106229934 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088840766 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081587972 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.07754547 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.079484361 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111107149 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088843778 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086200987 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118395333 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.092253879 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106830059 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.264532729 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.125546718 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086419237 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104267267 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113196156 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095073152 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11224802 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104162048 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.131664608 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.177885274 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128393352 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.132181432 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137877972 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.079764642 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.078731315 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.071520422 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.120323547 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.082533268 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.092373217 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084192307 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13750178 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.084708305 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11443363 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.23559743 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083433837 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097183427 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100270479 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.073148287 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.086327059 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111116491 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090810617 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083439005 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123066089 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086813739 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.132697215 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114913385 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103587304 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098812899 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084210507 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117711038 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.106110818 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.133550082 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.098353929 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.078247465 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116362658 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.106432153 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141824101 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.075709734 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083295962 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.133569413 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108182123 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136989001 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083095172 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152129409 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.147509516 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103649485 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.298032936 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074058515 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086995988 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092383674 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.130186953 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086964005 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113699313 seconds)
  done (took 70.329190268 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.15847307 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.143384159 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.081979683 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.106374441 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.188519724 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.199002959 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.120763184 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.097159321 seconds)
  done (took 3.069331417 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.071232137 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.086204781 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.0835477 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.253891177 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.100571503 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.071045145 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.076238493 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.085114664 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.070373015 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.069991016 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.104595815 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.070635672 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.070448305 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.4694882 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.06961836 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.075073413 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.070439154 seconds)
  done (took 3.853194442 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.342410467 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.998101008 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.266880346 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.164343283 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.151172916 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.558006275 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.07897621 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.08639252 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.642459797 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.373359532 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.140691307 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.089769998 seconds)
  done (took 19.863351093 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.080237472 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.126673542 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.126155359 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.077894342 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.077710913 seconds)
  done (took 2.447957327 seconds)
done (took 124.352718024 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.08524709 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.178740863 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.071069955 seconds)
  done (took 2.261060635 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.122176988 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.12150212 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.124579212 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.120343788 seconds)
  done (took 2.468835949 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.07786835 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.079124602 seconds)
  done (took 2.137680124 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.228164919 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.218531128 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.094930069 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.08524148 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.082532424 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.082905004 seconds)
  done (took 2.234054597 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.074717595 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.074040084 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.074621044 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.074684021 seconds)
  done (took 2.26415863 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.174103134 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.069438231 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.071306226 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.074711036 seconds)
  done (took 2.358980347 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.089690401 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.091694177 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.121194468 seconds)
  done (took 2.279781501 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.086429032 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.085800485 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.080727791 seconds)
  done (took 2.220219121 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.113274817 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.100055486 seconds)
  done (took 2.175952949 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.083175742 seconds)
  done (took 2.051846008 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.094205178 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.101822867 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.189894441 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.151988465 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.18586557 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.175987477 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.080213347 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.080826654 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.076125217 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.074945238 seconds)
  done (took 3.174900361 seconds)
done (took 28.233924098 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.082631738 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.372694261 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.362374356 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.090783447 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.674914713 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.359430153 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.007011358 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.09452957 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.105183817 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.071044746 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.089123531 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.652455072 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.999891508 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.329440789 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.98728477 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.333021504 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.655095418 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.072053325 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.071442938 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071843567 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.99045592 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.071226318 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.071019571 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.072060698 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.65283387 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.37809998 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.072325085 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.332218889 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.07095906 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.075551287 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.361053382 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.072162787 seconds)
  done (took 16.641365105 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.073484477 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.126517471 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.075224341 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.087527678 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.073063181 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.072232112 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.074424032 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.071869876 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.115950001 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.071550171 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08985261 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.071341561 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.075613224 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.072857477 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.091900891 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.071550611 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.073817562 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.075208627 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.071671257 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.07233055 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.090644738 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.071071662 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.071658381 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.072473204 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.071529484 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.085189113 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.072591738 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.071173698 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.071603125 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.075602418 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.076029252 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.073286861 seconds)
  done (took 4.497954291 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.12553629 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.130220095 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.075920128 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.113113564 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.122198479 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.073008927 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.155378921 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.09535312 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.119341214 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.071679929 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.089448997 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.071735318 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.107867301 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.072977155 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.092607786 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.072013849 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.074090993 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.072098703 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.071137743 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.072258724 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.090628483 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.071511173 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.072235652 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.07232369 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.072170251 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.086699543 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.072594669 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.071414694 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.07111606 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.07519923 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.076456645 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.073198848 seconds)
  done (took 4.773550205 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.072412816 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.074393414 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.08070644 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.083983023 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.069094076 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.071059635 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.072211618 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.069247226 seconds)
  done (took 2.596700775 seconds)
done (took 30.495751149 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.082265993 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.069881091 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.073130876 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.089470137 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.076391689 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.114653025 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.06711467 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.077132632 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.07369557 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.074214244 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.075869611 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.069331482 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.072482963 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.067083247 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.0744095 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.068140756 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.117427033 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.072462713 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.115383586 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.116582354 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.071139151 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.074712445 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.077327454 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.115763594 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.116373962 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.115978681 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.077484421 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.074553378 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.069274644 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.0713889 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.174911683 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.189082519 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.078752813 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.122027643 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.068495895 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.068385413 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.072438972 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.071042137 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.118629641 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.078578 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.071649186 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.077737125 seconds)
  done (took 5.659825439 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.189098114 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.198156876 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.193522819 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.08304423 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.095824358 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.082208004 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.198757143 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.079982292 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.07799441 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.19769667 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.074564965 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.078615578 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.081262076 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.072168525 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.078184162 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.074893368 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.080079319 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.072596919 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.078069592 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.078143643 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.198322275 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.072555119 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.084159903 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.079707688 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.073517423 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.079899353 seconds)
  done (took 4.782060593 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.074854467 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.091196153 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.095962075 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.145702337 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.112712434 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.085910589 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.085249106 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.096723362 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.103941236 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.070962345 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.07482114 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.099005208 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099612143 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.078039413 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.109325151 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.089080864 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.083035283 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.07233958 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.077604207 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.105655056 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.093708364 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.08965305 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.103559147 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.090723597 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.069567589 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.079687381 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.077625195 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.086758968 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.078052123 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.082450766 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.075024535 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.073771817 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.071018747 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.082980856 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.077171626 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.067915074 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.136544593 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.083010091 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.085345738 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.10943581 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.080784376 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.071788276 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.098839615 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.136196565 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.069882536 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.073127879 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.074104794 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.083286692 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.072167527 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.100649696 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.087283855 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.070106345 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.089819784 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.071796728 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.072026304 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.087808789 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.072150296 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.07274371 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.082231436 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.076899259 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.091358468 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.076189015 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.092357681 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.07020203 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.081747581 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.072039169 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.072223865 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.069069282 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.105439289 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.078024665 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.123879723 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.071480596 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.068357991 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.082711067 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.081908376 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.077463651 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.070232902 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.09102565 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.082688513 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.07421168 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.081273493 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.073268602 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.073762716 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.106313572 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.069239132 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.068544784 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.06834671 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.072535233 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.074054939 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.071012341 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.084498933 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.069972759 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.073913436 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.086186111 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.070987033 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.070990642 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.072935059 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.071710662 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.070071038 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.081768019 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.074348454 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.072793095 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.08332694 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.071936749 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.073907236 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.08571031 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.080087838 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.06993594 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.071496796 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.072992818 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.072403721 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.075152721 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.073939084 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.072155997 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.077566118 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.078104406 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.076702418 seconds)
  done (took 11.662130499 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.209198743 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.200231328 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.071997804 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.191733156 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.079331458 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.122509451 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.196924733 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.137028264 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.071327857 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.072645037 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.070808182 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.143197394 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.140395148 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.154543374 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.120612258 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.071610553 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.097052608 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.149774828 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.198549126 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.192690797 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.094849407 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.078999107 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.073174799 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.07247257 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.072111127 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.079589634 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.089175127 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.079779915 seconds)
  done (took 5.369910186 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.078809043 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.086786317 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.07489987 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.095733919 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.089473521 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.071330574 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.073230147 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.072316396 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.08833376 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.07809875 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.071579118 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.075589227 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.074570148 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.071382119 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.072073692 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.077560727 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.077316446 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.069975557 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.074758486 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.075312286 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.082345251 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.157980248 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.075975167 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.071660638 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.073620701 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.071002383 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.078271283 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.080691743 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.071201732 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.105589072 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.068293418 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.076111486 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.085979203 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.071905646 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.070737798 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.071513091 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.070612073 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.070833379 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.071184836 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.068682978 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.068808053 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.076281468 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.069401682 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.07655443 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.085021971 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.079014616 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.0723808 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.076329274 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.073687432 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.067771113 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.07428838 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.074432945 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.073686987 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.079447813 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.074350766 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.073069912 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.07201673 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.099520198 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.076636799 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.069897469 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.070746254 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.068878324 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.072278089 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.078805244 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.08785517 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.072304264 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.069393373 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.070832585 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.07948532 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.085363719 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.070338253 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.076100087 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.068192123 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.071205087 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.073263783 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.073597126 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.072152364 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.068934573 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.070734018 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.071208159 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.071797194 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.070715332 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.071225719 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.07371261 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.068712984 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.069245081 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.071523204 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.072322725 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.076944035 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.069935623 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.073823836 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.07254916 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.069749687 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.073979849 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.07685223 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.074076303 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.091369632 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.079286706 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.071095705 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.068778481 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.085851823 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.073022779 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.070220455 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.074298194 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.075250665 seconds)
  done (took 10.033297332 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.094707323 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.072742439 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.09080191 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.097606196 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.08169055 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.076175769 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.085084041 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.071543523 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.087794602 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.069842978 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.079714507 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.068979073 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.084234198 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.079871819 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.071905473 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.081361156 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.073319403 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.091762069 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.085768145 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.069206469 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.080020725 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.083246504 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.083129167 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.088881737 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.088667924 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.090058945 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.084084563 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.073887201 seconds)
  done (took 4.358173395 seconds)
done (took 43.857480539 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.103391013 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.261404464 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.08302453 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.341655765 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.141865226 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.297752973 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.288570602 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.076276245 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.104600428 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.13615107 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.394447979 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.464686113 seconds)
done (took 69.778508746 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.14433813 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.23106524 seconds)
    (2/2) benchmarking "String"...
    done (took 2.305981426 seconds)
  done (took 6.553773564 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.685063748 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.08454781 seconds)
    (3/3) benchmarking "different"...
    done (took 2.103953039 seconds)
  done (took 8.887607245 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.189663785 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.87034833 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.329954801 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.086232375 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.089576657 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.441559851 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.880917669 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.547357755 seconds)
  done (took 34.264035927 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.334470579 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.293141575 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.83915097 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.883358896 seconds)
  done (took 17.418735759 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.703440976 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.347725383 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.345859541 seconds)
    (4/4) benchmarking "different"...
    done (took 2.342224083 seconds)
  done (took 11.817864091 seconds)
done (took 91.387910564 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.088167738 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.412398754 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.089928934 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.237927633 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.113233777 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.116401964 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.092897851 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.125183988 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.087594089 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.08642405 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.501527514 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.0855968 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.100111289 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.120631479 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.100450319 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.101812294 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.714062846 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.090572156 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.088323213 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.70173839 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.600916441 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.094070769 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.089465709 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.132635031 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.211525704 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.131708319 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.683913055 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.093627705 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.705313266 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.099929818 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.094135354 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.084949428 seconds)
  done (took 215.094922168 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.089258487 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.17565478 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.224372444 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.11306032 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.593070308 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.281179705 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.23214849 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.64507446 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.092832181 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.118351337 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.326936594 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.091738586 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.351687446 seconds)
    (14/36) benchmarking "dot"...
    done (took 3.039666829 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.086556397 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.125216658 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.349632863 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.378732606 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.090755503 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.277834899 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.105637233 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.191542979 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.125245206 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.334287392 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.126223226 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.098423225 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.095831679 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.274141942 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.256421209 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.294263009 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.079007774 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.113121102 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.291858567 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.942325969 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.091037966 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.084265106 seconds)
  done (took 182.209142134 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.254011463 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.093497384 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.124817812 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.20573118 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.825547157 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.793145825 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.076040923 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.074046522 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.074799739 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.081473623 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.077660122 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.145143787 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.381295963 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.092945589 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.076635285 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.076129094 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.433663151 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.083591787 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.083564435 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.079635977 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.146315759 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.453338097 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.213844229 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.080138099 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.093142946 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.217095258 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.091328456 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.081001794 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.213775478 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.083041248 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.15922507 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.210001201 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.087425223 seconds)
    (33/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.081819968 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.164271898 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.087420629 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.570570009 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.079722333 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.082856418 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.083009083 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.143897989 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.080006981 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.169169852 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.170084052 seconds)
    (44/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.080817431 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.084684511 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.092967404 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.15120609 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.772704877 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.082136186 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.085943792 seconds)
    (51/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.084104488 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.083775084 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.08503313 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.083554694 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.237926219 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.086060016 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.10722847 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.692506652 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.081023546 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.084621921 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.084184382 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.085837563 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.080654689 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.092201945 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.12118952 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.890649982 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.31115921 seconds)
    (68/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.086530147 seconds)
    (69/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.470895074 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.874348614 seconds)
    (71/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.087303659 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.722060325 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.137264271 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.086685002 seconds)
    (75/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.162398548 seconds)
    (76/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.081477914 seconds)
    (77/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.083250452 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.085866018 seconds)
    (79/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.088190305 seconds)
    (80/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.223415557 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.193297078 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.078881533 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.217050856 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.082475531 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.081312444 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.13502101 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.764295177 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.086776928 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.095314036 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.137208945 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.078973231 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.08071153 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.089774492 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.218940231 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.078168579 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.077270368 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.081519048 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.175517256 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.07741682 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.136133558 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.303718962 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.148877702 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.330562822 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.306000052 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.079945268 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.084879463 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.095406023 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.084412018 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.08141391 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.093713174 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.082943034 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.08161391 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.084139619 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.08205174 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.081607706 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.083170456 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.095222491 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.078550482 seconds)
  done (took 443.82689324 seconds)
done (took 845.448082833 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.772981634 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.844990788 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.671638101 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.714771611 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.682449854 seconds)
  done (took 15.696785354 seconds)
done (took 17.70511416 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.103533195 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.095134111 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.086793579 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.106846465 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.103563494 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.103962063 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.131113286 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.127487288 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.119459461 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.102359257 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.109994698 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.103158535 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.110719522 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.122163643 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.113473097 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.111254984 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.102581412 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.098738506 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.11103366 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.101891524 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.10680951 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.101195112 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.105000762 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.110944014 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.114929983 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.103881448 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.095898797 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.108360792 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.104344401 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.107105066 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.144557346 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.111400592 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.136915086 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.112227241 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.097874585 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.112512762 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.106623607 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.132993368 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.102064519 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.14717754 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.111031876 seconds)
  done (took 88.552773873 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.095222803 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.24892657 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.301848185 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.122101517 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.09600724 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.319162544 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.145093635 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.225168564 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.225603906 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.316634186 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.315074986 seconds)
  done (took 26.430528002 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.094915669 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.237677534 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.277585005 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.123900307 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.095831458 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.331440224 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.152245485 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.222447356 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.229046538 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.312334811 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.329596277 seconds)
  done (took 26.433651988 seconds)
done (took 143.429397883 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.478747853 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.118912965 seconds)
  done (took 6.613472107 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.089221394 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.106012636 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.237364365 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.089421987 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.089740121 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.089430033 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.08883005 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.087710182 seconds)
  done (took 18.893801004 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.087283679 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.087444611 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.088105245 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.088051347 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.089730384 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.089342076 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.091735244 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.091346841 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.088183934 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.088785156 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.090130874 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.088752275 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.089416555 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.089654003 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.089192388 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.088546962 seconds)
  done (took 35.445081335 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.081933187 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.089898519 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.090108111 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.088006201 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.08999138 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.090469131 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.09269688 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.093261339 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.092029422 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.092779122 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.091380813 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.091828807 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.093490964 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.092918751 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.092165635 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.094241098 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.092836387 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.094012972 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.095418957 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.09505936 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.091248326 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.09100416 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.099694002 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.093563801 seconds)
  done (took 52.227176146 seconds)
done (took 115.202599608 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.345087355 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.677120539 seconds)
  done (took 9.041556601 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.097913296 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.091425563 seconds)
  done (took 6.278574537 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.091102258 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.094660872 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.095301389 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.095424692 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.091570056 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.09135998 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.094639286 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.094363375 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.095093599 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.094764299 seconds)
  done (took 22.958838226 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.097456372 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.096277626 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.095874717 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.09385522 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.093510104 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.098152801 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.095779936 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.095008173 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.096634291 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.096219809 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.096199689 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.093186384 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.093243321 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.098124564 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.095284435 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.094717933 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.095953344 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.097299775 seconds)
  done (took 39.744332125 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.094851118 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.09419896 seconds)
  done (took 6.212055621 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.09652033 seconds)
    (2/7) benchmarking "second"...
    done (took 2.096312779 seconds)
    (3/7) benchmarking "month"...
    done (took 2.096592164 seconds)
    (4/7) benchmarking "year"...
    done (took 2.09555482 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.095586508 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.094705228 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.098522503 seconds)
  done (took 16.699822522 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.094212797 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.261982109 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.31395021 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.67676039 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.098567278 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.101518094 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 3.002721862 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.096128174 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.100461147 seconds)
  done (took 22.771014291 seconds)
done (took 125.722941764 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.921223104 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.094349042 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.370468031 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.178607586 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.111068079 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.436620591 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.115183541 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.646156472 seconds)
done (took 44.897873139 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.240919455 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.098492295 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.119660735 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.124984591 seconds)
  done (took 23.367472368 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.098273833 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.417169198 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.112017733 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.046502145 seconds)
  done (took 23.711644416 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.470658992 seconds)
    (2/2) benchmarking "read"...
    done (took 2.441236322 seconds)
  done (took 6.940821814 seconds)
done (took 63.289894233 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.097533369 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.096061104 seconds)
    (3/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.097391857 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 2.080181843 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.099970935 seconds)
    (6/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.099352936 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 2.096569617 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.101223285 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.097823593 seconds)
    (10/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.099624424 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.099630223 seconds)
    (12/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.101544076 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 2.097744181 seconds)
    (14/24) benchmarking ("one", "Float32")...
    done (took 2.098090988 seconds)
    (15/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.098463811 seconds)
    (16/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.097795927 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.097572183 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.099284506 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.100471401 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.093202057 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.098271938 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.097037107 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.098971207 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.097797943 seconds)
  done (took 52.365864002 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.099166183 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.097061371 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.099460297 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.097701001 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.101090926 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.098703344 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.10296918 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.099160636 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.097459355 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.587032754 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.098569012 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.10150885 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.098738487 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.102149528 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.099143214 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.10171931 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.100951367 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.097368434 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.100183777 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.100480729 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.100338178 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.102989025 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.101814645 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.100459332 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.101298558 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.101310233 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.102634714 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.101039605 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.101118831 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.103142764 seconds)
  done (took 65.517488412 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.102152456 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.103191337 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.100047899 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.100151762 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.101380908 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.101817444 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.101606445 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.100625498 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.103292179 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.10284868 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.102712552 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.104158738 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.103807691 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.102996798 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.101851786 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.102776693 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.099619268 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.103023785 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.103423719 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.10401015 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.104409164 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.101177982 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.102818066 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.10405223 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.102248913 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.098481514 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.103383968 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.103257405 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.101109462 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.103038988 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.103009609 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.099827877 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.10532018 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.103533863 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.103926063 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.099637982 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.103984973 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.107254115 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.111381853 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.102161369 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.103968077 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.105233574 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.103294915 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.103526412 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.106023481 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.104898892 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.104218385 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.105059023 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.104297939 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.105363575 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.105443231 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.105740879 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.104982863 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.105407403 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.106204769 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.10543929 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.107547158 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.103876527 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.102335667 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.105370177 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.104736095 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.105539981 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.104528734 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.105962717 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.106679159 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.106135466 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.107307222 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.105482776 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.107978556 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.108251679 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.106597455 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.105338731 seconds)
  done (took 153.509918585 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.106233357 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.107100039 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.106424363 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.102275092 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.105550022 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.105686792 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.106590374 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.107330723 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.106490986 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.107429209 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.103141473 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.108094664 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.108983405 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.108579039 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.106565841 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.107942271 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.107540662 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.106654536 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.106442417 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.107745711 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.107237441 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.108300927 seconds)
  done (took 48.37820569 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.108602978 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.107299487 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.109019884 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.103533311 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.109062765 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.108036443 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.108974678 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.106837104 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.106251611 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.108827056 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.10475886 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.110221898 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.107258028 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.109963223 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.107624123 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.109340945 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.107342755 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.108065331 seconds)
  done (took 39.976010316 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.106940478 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.106224065 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.108563685 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.10658245 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.108654294 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.108721601 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.109037657 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.109042157 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.107610948 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.107914658 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.110242481 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.106612884 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.106933173 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.10828043 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.111763586 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.109555405 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.110018996 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.110880257 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.111718278 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.109144399 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.109069112 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.109098046 seconds)
  done (took 48.426841347 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.11125557 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.108857974 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.108271539 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.110013316 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.110317133 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.10827554 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.108702481 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.111331301 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.11078092 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.108083279 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.108992329 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.109076957 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.110102714 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.108784106 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.111207327 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.111202429 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.111801475 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.110816715 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.110647471 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.111381947 seconds)
  done (took 44.235430255 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.111414695 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.109995619 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.11156732 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.109617411 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.107113572 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.109235444 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.111196744 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.111020993 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.110200143 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.112146425 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.112577496 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.109458589 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.113238884 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.110532073 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.112318233 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.113837812 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.111737139 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.111360205 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.112753511 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.113750568 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.112936399 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.112067572 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.109109428 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.111035169 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.112922034 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.111953312 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.112831911 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.112705839 seconds)
  done (took 61.15826208 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.11400613 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.113219245 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.113386213 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.113653577 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.11297047 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.113988682 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.113472528 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.113507397 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.111820231 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.113230221 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.112195813 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.110530723 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.113689457 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.112603736 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.113114448 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.1132466 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.112310846 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.113939671 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.115101134 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.110769824 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.113887516 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.110380568 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.110543631 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.115322924 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.113736678 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.110039782 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.11351137 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.111635711 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.110264188 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.115374156 seconds)
  done (took 65.422423768 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.129853676 seconds)
    (2/2) benchmarking "in"...
    done (took 2.132777762 seconds)
  done (took 6.3030259 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.112987325 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.114626339 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.112222545 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.113349689 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.114525172 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.115076735 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.113140304 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.112461903 seconds)
  done (took 18.948549383 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.110406237 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.115857041 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.114179166 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.113433792 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.114509912 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.118973872 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.114283573 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.115594767 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.11595778 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.11550943 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.118262884 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.116388139 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.120721311 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.118722568 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.114377956 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.11401689 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.115497551 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.117267238 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.116888999 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.112993912 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.116872714 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.114540958 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.114758641 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.114878125 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.113382686 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.118916276 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.12426418 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.117122711 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.116307003 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.113381506 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.119267497 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.115375055 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.116107711 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.115923489 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.116739533 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.111332804 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.121187907 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.11259383 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.11444048 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.11398798 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.113784689 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.118012461 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.116612507 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.123745571 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.117782266 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.117445398 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.11465525 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.116930471 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.117075444 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.117047368 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.120937447 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.116509989 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.116779579 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.111729893 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.118595538 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.118374668 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.115562416 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.120322797 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.121563902 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.122799662 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.118446318 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.136835823 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.123033127 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.116814326 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.117313851 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.12631974 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.143305892 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.115919772 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.119535455 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.117148008 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.124691186 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.117898684 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.11336088 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.113654012 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.124126375 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.124583507 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.113329008 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.112227811 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.115413194 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.115985541 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.116121485 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.117059901 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.118321834 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.112290439 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.127376884 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.145994602 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.116820452 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.118889526 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.119768395 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.116357047 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.119906426 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.120630816 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.118167851 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.116019266 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.116695529 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.12273189 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.115668422 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.116372219 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.119795523 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.125712398 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.114779686 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.115315682 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.122522639 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.125396097 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.118423735 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.11654888 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.121231679 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.117375287 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.126520204 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.120185441 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.119883243 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.117915815 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.118491227 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.122975701 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.115774818 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.118438052 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.12633629 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.122713155 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.118003021 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.124722125 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.121814288 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.122315025 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.129970872 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.145990162 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.118384537 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.116185715 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.125114865 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.131671868 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.118731452 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.118428265 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.122614956 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.118832339 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.118568468 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.118392202 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.12004948 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.121897181 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.116423294 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.122109881 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.121362499 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.119930027 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.124112267 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.123174222 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.121328684 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.122886579 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.127054805 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.115268124 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.123419451 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.127618082 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.122787619 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.120898357 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.121105302 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.123422905 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.123415205 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.119433084 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.116889059 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.119156013 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.120136657 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.116775795 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.123723844 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.117052548 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.122868674 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.12143293 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.126756424 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.11966634 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.115849509 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.116980556 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.121318715 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.121452239 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.122869097 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.12478564 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.121644582 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.123537473 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.127151531 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.120735088 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.121092612 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.122353631 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.121012757 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.122287383 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.123954018 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.135160502 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.125127264 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.133010637 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.12124409 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.129819407 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.120719024 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.124676464 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.122016044 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.1216878 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.12314062 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.124172418 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.12440262 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.127776323 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.146212452 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.1362291 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.124752853 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.123981962 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.125408098 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.127830866 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.131075555 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.122300263 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.124809327 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.126666278 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.124868129 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.123217355 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.124077728 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.124249706 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.121470202 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.124111683 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.125006265 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.125174846 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.120753096 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.12378714 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.122207435 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.120109832 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.124758641 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.123865493 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.124369818 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.12605913 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.13353676 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.124674654 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.123836249 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.12550268 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.126304337 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.125554108 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.123460888 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.123384358 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.130091849 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.123734452 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.125680901 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.131315618 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.123994714 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.125123574 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.127112056 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.123350799 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.124639766 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.124383131 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.128165857 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.130415437 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.122032025 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.123121691 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.130384651 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.123403801 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.12476356 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.123637514 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.123001658 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.124793729 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.125995031 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.125207864 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.127242542 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.131073058 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.127892048 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.128148348 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.123474018 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.130034533 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.128752923 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.128500544 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.127636047 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.128836542 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.136017538 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.131167984 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.126165721 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.128893249 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.130328352 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.12513336 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.130241119 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.125022411 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.138323849 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.135455309 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.126600672 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.125844817 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.12558571 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.129822676 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.126073095 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.12508362 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.134963507 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.129262184 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.127953977 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.131272483 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.124372458 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.123436742 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.133841324 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.126094244 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.122805779 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.126508924 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.128691891 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.128389059 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.125763722 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.130639324 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.127764777 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.128449337 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.130481222 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.12302708 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.129647385 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.126175528 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.134709939 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.124115778 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.126737742 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.1309012 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.127444699 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.129450394 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.126662691 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.127922702 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.129203669 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.127333842 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.126689931 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.130977131 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.127457874 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.117295118 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.14205621 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.131226518 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.134235859 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.132762779 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.139372677 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.129058852 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.128069816 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.127120948 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.129437091 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.134638364 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.129323195 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.128512495 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.134973464 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.131014914 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.12749049 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.1316661 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.127185106 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.124737663 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.125211746 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.129974897 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.133017837 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.128742014 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.125441789 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.125419384 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.126623207 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.129183864 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.129404843 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.126451744 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.130985266 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.130585555 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.126181337 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.127126003 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.129522424 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.125280635 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.124946124 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.127303855 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.128154023 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.13851491 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.129461816 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.129629154 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.12845979 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.130210937 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.138778038 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.130449428 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.126786848 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.134422027 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.129759923 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.132724737 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.126082682 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.127237765 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.129352087 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.128379436 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.130627182 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.143056005 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.136086896 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.130121447 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.132129361 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.128093302 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.128767508 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.140290305 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.160768472 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.128349042 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.133195778 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.133702646 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.133752663 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.13106685 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.135588895 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.132848665 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.136772672 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.131577523 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.125053477 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.134511528 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.142294208 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.129769884 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.129664211 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.125854543 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.132416564 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.13412764 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.126114908 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.127759638 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.130452596 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.132269698 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.14193055 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.131626793 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.133389815 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.132385876 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.12667913 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.127261923 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.131055233 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.129922465 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.130521488 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.128655941 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.129313411 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.131279908 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.135150391 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.124718547 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.136415752 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.14014147 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.131705554 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.132151598 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.131772515 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.129554892 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.135481462 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.124298253 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.104122538 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.133763847 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.130640146 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.13451613 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.134170186 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.141629927 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.133580448 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.131561418 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.130558509 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.137641868 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.129529111 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.131044957 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.134341559 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.139623262 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.132084404 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.146367392 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.142856008 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.129872405 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.133219077 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.141157149 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.139199832 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.130393872 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.126882755 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.131838826 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.134929159 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.131177004 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.131694848 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.131164653 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.135708429 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.140548664 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.129967034 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.132625484 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.133227812 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.131783346 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.134382525 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.135638741 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.138879725 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.129324965 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.131305545 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.13102665 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.132352508 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.136985515 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.132263829 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.130955652 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.13416233 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.1359048 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.134085718 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.137150129 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.13216209 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.130011598 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.131973254 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.133897665 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.130067363 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.133463366 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.133013902 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.13425357 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.134046216 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.138764136 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.130636821 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.132364286 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.134441131 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.137529675 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.130343397 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.130555254 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.133501746 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.129937394 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.140595446 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.133990252 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.134452473 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.131110055 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.132736683 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.139755125 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.135384358 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.136456633 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.136946342 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.134051466 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.136121136 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.137348485 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.14303671 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.140076672 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.135846459 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.142808488 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.138241057 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.137741287 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.134477542 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.132221539 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.132414572 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.13458469 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.138112269 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.1361543 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.138742972 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.134710493 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.134791418 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.134147881 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.136392131 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.134206249 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.1334127 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.140769243 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.146050881 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.144024159 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.135793606 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.135725978 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.136610655 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.137404074 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.146273625 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.135212344 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.132982708 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.135592004 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.136029022 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.136477054 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.145245239 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.144475924 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.138197549 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.133767332 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.140931638 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.15598114 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.138318048 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.144034896 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.169489138 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.136996004 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.133550057 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.136547263 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.135941458 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.133506995 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.139788991 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.13559577 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.140629673 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.133937006 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.133958968 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.145908938 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.135324618 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.136909308 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.133153477 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.136964718 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.141841518 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.134020784 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.142771493 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.136165642 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.136280641 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.136577763 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.140646699 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.132485825 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.135566075 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.135770771 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.137082316 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.13297679 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.13487772 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.145031591 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.135544371 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.139957599 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.148867585 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.148314803 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.134951862 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.133329966 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.135621619 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.142311073 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.138314171 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.136394268 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.143334746 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.146157827 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.13863904 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.144458606 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.13740747 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.138409068 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.137693172 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.135729839 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.136625882 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.149042198 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.149305159 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.136853067 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.10750715 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.142956886 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.136671784 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.145047072 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.142729458 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.139712626 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.139147745 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.138656542 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.138549995 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.136491302 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.136608572 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.14144187 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.148711445 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.137742408 seconds)
  done (took 1270.593355011 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.139492774 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.139692937 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.136222934 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.137624832 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.137765038 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.136073975 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.137086531 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.138111521 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.138180688 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.138209332 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.136854322 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.136490781 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.13622954 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.137811949 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.138137879 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.136450688 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.138304387 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.139208282 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.138759114 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.137171244 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.139882096 seconds)
  done (took 46.956241329 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.136652003 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.137858964 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.13829651 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.136834403 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.137986716 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.136916466 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.137340223 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.137586365 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.137805513 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.140321101 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.138219229 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.136465197 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.138476901 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.137552304 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.138105048 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.138425873 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.138917251 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.137288906 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.138203136 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.145311004 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.137527572 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.138296322 seconds)
  done (took 49.106283552 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.145630352 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.135614535 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.139501136 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.139474642 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.134950157 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.141849276 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.141948382 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.146022979 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.144279077 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.147406758 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.152329593 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.152208733 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.144987837 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.147494698 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.145618835 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.143445465 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.290084391 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.144674893 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.145230523 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.146733554 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.145418025 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.148651672 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.144903965 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.144279055 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.143674063 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.143226676 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.140811229 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.143003507 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.142254241 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.144757033 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.149249995 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.146216439 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.142451043 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.147808611 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.145810397 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.146546112 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.149478738 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.145372494 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.144678874 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.143647963 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.153842674 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.172251927 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.14655682 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.144065953 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.151072065 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.144487398 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.144258381 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.151068079 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.156847767 seconds)
  done (took 107.36349363 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.145107932 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.148834057 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.146294 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.145491996 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.145311377 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.143087752 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.146884878 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.146037955 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.143195634 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.146454291 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.147439297 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.145417673 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.146037809 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.144966431 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.143955008 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.145824952 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.14418157 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.147658509 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.147431858 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.145468812 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.145476487 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.149429766 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.149047835 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.148547432 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.15009771 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.145923458 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.149568348 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.14700024 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.149117507 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.146715914 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.14700616 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.145689281 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.147824898 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.151263052 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.14750878 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.148621235 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.148480239 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.144446912 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.147418097 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.149512666 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.147688393 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.146922497 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.146046263 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.149868334 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.148691354 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.146122513 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.14709492 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.145698445 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.14706384 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.146589235 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.147160553 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.146928005 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.14851857 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.147779768 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.148674548 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.145978108 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.149149216 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.148362675 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.148510002 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.146235961 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.146737331 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.14527905 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.144582615 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.146908258 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.148668648 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.14785613 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.146483677 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.146794023 seconds)
  done (took 148.071846199 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.146649435 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.149984801 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.150215172 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.14526412 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.145545435 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.146831399 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.148662205 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.148251866 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.145797697 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.149347552 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.148809039 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.146425036 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.146996138 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.149178583 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.147243449 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.1500021 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.149600846 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.151506878 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.149742579 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.147616401 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.15135361 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.149110522 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.149277032 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.14737016 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.151725871 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.14662153 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.1516749 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.151432672 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.150474986 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.147909201 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.147838339 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.151469008 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.150020029 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.147613319 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.149753092 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.151034485 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.147066892 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.149143876 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.151762608 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.147463118 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.147708841 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.148022867 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.149520768 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.149060961 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.149695437 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.15110178 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.146707045 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.149067923 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.149451912 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.149969001 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.150876115 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.150146338 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.148946784 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.149802033 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.147707263 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.151548217 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.152469832 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.15123567 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.151255884 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.152576134 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.149620914 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.152724198 seconds)
  done (took 135.331127687 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.151838385 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.151800015 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.151863344 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.150820237 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.152353682 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.15095701 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.153360176 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.150355841 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.150232949 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.149595933 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.151387269 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.153823067 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.153473785 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.153604044 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.151317389 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.154434775 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.152689979 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.15025301 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.151135724 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.151888112 seconds)
  done (took 45.114313197 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.152007859 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.150990351 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.153802843 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.151151662 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.1496705 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.153361403 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.150552095 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.15052181 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.150456001 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.150483294 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.152619409 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.149298336 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.149963878 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.151475883 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.155856555 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.152417885 seconds)
  done (took 36.504213447 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.153739871 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.150614651 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.154361647 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.152555148 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.151297951 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.150028449 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.149243682 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.150876977 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.151641145 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.150333841 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.154887246 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.149705803 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.154198008 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.154377989 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.151994969 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.154292643 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.152140435 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.151763809 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.152072033 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.154266409 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.15208784 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.152229388 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.152840354 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.154439957 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.154931118 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.155382448 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.154132567 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.153257149 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.153939081 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.151187726 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.153958197 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.156540198 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.153872734 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.153541141 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.152319469 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.152735289 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.14950655 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.149169049 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.154215464 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.15496795 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.15443483 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.154279062 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.155744622 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.154143614 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.151722941 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.154662191 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.154260835 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.153557082 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.15200308 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.153582834 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.155023815 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.154305258 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.154251074 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.154638103 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.155597607 seconds)
  done (took 120.502693035 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.153855111 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.152384743 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.15583406 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.156750758 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.155874865 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.153435342 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.158604817 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.155134129 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.15856069 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.153958855 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.157924092 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.155135311 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.156951339 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.155705075 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.157776835 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.157591873 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.157396441 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.155956177 seconds)
  done (took 40.89010163 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.156407914 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.155730237 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.153803269 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.158403866 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.156591726 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.156784697 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.154426081 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.158668083 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.153786363 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.156062328 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.156349372 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.159934426 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.158345719 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.155319347 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.155729775 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.154686799 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.154232417 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.154286772 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.157577467 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.155687196 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.156316689 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.156639126 seconds)
  done (took 49.51991048 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.156093938 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.155783161 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.169854098 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.181266568 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.178091858 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.201401302 seconds)
  done (took 15.124070244 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.157048582 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.15893514 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.159735889 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.149179211 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.156107635 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.157017276 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.153391537 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.15926062 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.156595233 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.15988932 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.156444593 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.157860118 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.157370852 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.158740743 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.15721571 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.156951253 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.155963569 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.157108133 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.157667257 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.160523256 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.157133369 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.156298529 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.157803664 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.156152738 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.159746147 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.15490418 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.157147882 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.157683179 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.160058571 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.157111854 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.157868217 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.155744373 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.15903774 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.157551926 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.157394214 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.155363846 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.158029899 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.155976227 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.158852668 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.156820365 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.155869032 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.160098965 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.156927918 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.157528983 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.158348481 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.157791783 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.157081009 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.156383774 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.15866513 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.156677171 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.158245674 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.160689212 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.158005982 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.163325625 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.159879906 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.162989367 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.158197096 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.160288705 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.157286832 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.160830745 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.159994799 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.159628959 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.158184634 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.158559946 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.157830452 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.159700761 seconds)
  done (took 144.505859818 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.159662924 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.157445491 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.158091119 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.16337016 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.154331438 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.157139962 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.157697573 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.157790005 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.158039869 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.15939795 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.156251757 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.160568109 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.158788408 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.159353382 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.159106419 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.160039779 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.158725202 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.158361157 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.158506118 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.159026809 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.159544352 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.163069111 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.162203724 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.16050373 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.161743331 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.160491669 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.160753542 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.160238259 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.15964736 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.15966341 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.159995193 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.160308779 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.162883276 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.157977858 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.158781355 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.161420818 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.162017106 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.163143664 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.16005696 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.159756504 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.163320367 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.161710276 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.157146508 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.162608413 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.162634122 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.161907532 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.16020749 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.157932404 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.159507968 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.157631062 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.163760983 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.163910542 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.16137418 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.160912595 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.161472993 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.15925154 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.162094026 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.162163235 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.160256802 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.161131351 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.162020952 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.160390592 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.16208495 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.16291937 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.163601187 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.163467238 seconds)
  done (took 144.667155604 seconds)
done (took 2960.52010967 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.174629204 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.234914045 seconds)
  done (took 16.494973564 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.322175031 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.178831646 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.344350452 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.276090523 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.182268555 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.174108778 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.15999512 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.165964557 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.259861829 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.162891221 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.187131687 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.158992309 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.160890986 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.16476429 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.165903824 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.163343732 seconds)
  done (took 57.321444737 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.168381403 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.17058937 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.161624637 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.163932858 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.174033088 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.238626297 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.186930125 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.166379507 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.179341537 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.201867594 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.185272097 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.170543736 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.175061478 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.171768923 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.256740589 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.209995289 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.221286734 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.239608835 seconds)
  done (took 41.531278988 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.245744799 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.183959029 seconds)
  done (took 11.527535596 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.170736715 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.17585069 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.187500138 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.175376827 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.192123049 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.196830657 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.174696515 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.173704273 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.195968935 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.175302244 seconds)
  done (took 73.906604583 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.167949151 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.165368236 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.416841297 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.175965286 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.170585921 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.186930216 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.168337243 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.194368722 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.167615682 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.162584998 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.172940156 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.419925283 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.175077707 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.16507165 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.595047585 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.176735096 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.169935679 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.195470804 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.194288385 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.172266034 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.172103588 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.169100633 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.329872812 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.876840281 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.167919483 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.166008494 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.173887756 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.164199613 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.166956233 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.168911484 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.16658342 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.168899791 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.170542651 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.163407722 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.171690163 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.172317141 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.649180858 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.182616403 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.173185007 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.251498056 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.212794715 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.173607222 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.962459113 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.167693514 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.164646126 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.175743959 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.877270419 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.257806024 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.17302039 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.341973259 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.520202854 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.182527296 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.343272032 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.328266441 seconds)
  done (took 149.21269216 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.168473874 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.503297703 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.324834054 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.172445022 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.477396439 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.377177682 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.865940272 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.209957702 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.164668319 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.383985467 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.305654421 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.279621849 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.169007859 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.163634658 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.16671378 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.16507491 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.323642941 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.238631937 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.170503741 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.162817554 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.190217915 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.325957401 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.274627524 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.17357282 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.18355902 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.385665044 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.216894948 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.277888324 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.678489355 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.167727912 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.232668807 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.736478913 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.168084686 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.165333374 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.206998787 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.266458459 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.261330545 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.167814908 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.168515145 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.166542448 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.861328748 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.370619395 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.274702066 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.303250742 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.313652073 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.382868516 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.739389547 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.167583618 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.689330222 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.339289505 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.379458845 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.398232101 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.268602685 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.171701892 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.509443904 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.167669196 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.969469585 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.398574274 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.314972446 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.275658534 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.16802542 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.168916665 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.168601594 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.413653612 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.169294577 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.26764402 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.169605929 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.168391525 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.271338879 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.27733393 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.308529353 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.395014995 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.201246625 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.898399938 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.46351651 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.341973907 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.234961416 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.397183659 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.172395235 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.16807255 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.256930244 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.786944759 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.299031573 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.419836803 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.409590464 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.19805189 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.761374982 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.168637497 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.318238767 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.34990602 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.460723717 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.316331004 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.224048537 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 3.115435188 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.16719312 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.170690594 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.238246314 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.299364521 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.394593378 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.525321854 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.40865787 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.76488674 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.188587589 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.552719435 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.282168726 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.171654901 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.823998328 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.170314003 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.376553837 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.215902726 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.170119188 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.168880819 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.336958433 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.187627321 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.168237359 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.983732655 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.229890318 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.172418304 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.344768986 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.1705119 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.42341171 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.156616836 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.404011165 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.153093063 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.204170543 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.346680206 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.316673059 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 5.486560052 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.505060585 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.422746566 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.26062064 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.400467974 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.171567328 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.17222499 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.441819613 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.169573675 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.171981959 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.343625305 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.178134259 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.321897666 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.172709587 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.490885079 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.189857364 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.227248198 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.175304944 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.424561345 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.203989965 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.221930511 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.172396281 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.301648948 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.172893063 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.103175466 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.330425702 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.17368706 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.16867817 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.7664848 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.17282812 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.318474136 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.405673103 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.18815901 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.243644215 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.665933305 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.578434839 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.261072641 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.197806467 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.560515168 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.899582757 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.308317524 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.173992866 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.668957057 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.174074278 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.411458779 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.365375582 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.175083754 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.170525195 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 3.019906993 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 6.808667392 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.172372292 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.329165717 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.006968422 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.589487093 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.379235147 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.175072776 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.22654909 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.176292136 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.122963832 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.515995315 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.17252306 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.169737019 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.174080281 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.17502568 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.172536956 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.382453038 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.202749279 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.715123368 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.31034936 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.43170352 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.47691441 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.39477014 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.212732766 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.17205332 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.455569897 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.174714615 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.235316724 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.177413988 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.183291634 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.451079155 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.177339773 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.386896465 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.384933802 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.145095677 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.220589761 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.179293029 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.173236747 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.172583826 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.311206344 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.266497501 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.173844563 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.174107874 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.216116792 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.277866182 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.358668428 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.484642872 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 3.18771996 seconds)
  done (took 954.13984424 seconds)
done (took 1306.221977618 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.172656488 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.174296221 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.177520172 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.17885304 seconds)
  done (took 30.806458986 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.176087141 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.172938139 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.176315007 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.177011783 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.178366788 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.176645823 seconds)
  done (took 15.159916054 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.172430384 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.178351546 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.175718024 seconds)
  done (took 23.627091199 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.617162209 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.587559 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.249078378 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.318443612 seconds)
  done (took 11.874930372 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.180161217 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.17573805 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.178478758 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.177464044 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.177010218 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.174427532 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.177094682 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.175584043 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.179629959 seconds)
  done (took 21.708381151 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.35452411 seconds)
done (took 109.631406879 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 3.118559351 seconds)
    (2/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.530234336 seconds)
    (3/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.470991038 seconds)
    (4/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.305589999 seconds)
    (5/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.613052244 seconds)
    (6/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.894688514 seconds)
    (7/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.384941766 seconds)
    (8/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.289636191 seconds)
    (9/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.18563613 seconds)
    (10/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.398817779 seconds)
    (11/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.489869879 seconds)
    (12/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.262110388 seconds)
    (13/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.887625839 seconds)
    (14/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.244820804 seconds)
    (15/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.513049425 seconds)
    (16/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.178583219 seconds)
    (17/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.254762603 seconds)
    (18/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.356743638 seconds)
    (19/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.519314646 seconds)
    (20/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.294460729 seconds)
    (21/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.269223715 seconds)
    (22/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.490742749 seconds)
    (23/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.189356155 seconds)
    (24/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.54850361 seconds)
    (25/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.469992662 seconds)
    (26/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.595385849 seconds)
    (27/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.678641448 seconds)
    (28/341) benchmarking ("sort", BigInt, false)...
    done (took 7.173206011 seconds)
    (29/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.173395958 seconds)
    (30/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.191320944 seconds)
    (31/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.274957975 seconds)
    (32/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.188089093 seconds)
    (33/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.171448247 seconds)
    (34/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.229123027 seconds)
    (35/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.300320507 seconds)
    (36/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.155331542 seconds)
    (37/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.470387621 seconds)
    (38/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.193710313 seconds)
    (39/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.254382405 seconds)
    (40/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.180308918 seconds)
    (41/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.488481821 seconds)
    (42/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.6197555 seconds)
    (43/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.274910296 seconds)
    (44/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.320523212 seconds)
    (45/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.38295749 seconds)
    (46/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.066168953 seconds)
    (47/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.152586502 seconds)
    (48/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.362334238 seconds)
    (49/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.192186572 seconds)
    (50/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.256358568 seconds)
    (51/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.402901542 seconds)
    (52/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.300955438 seconds)
    (53/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.007445405 seconds)
    (54/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.267159027 seconds)
    (55/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.290497196 seconds)
    (56/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.172924271 seconds)
    (57/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.229357553 seconds)
    (58/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.436830278 seconds)
    (59/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.594304593 seconds)
    (60/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.251600084 seconds)
    (61/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.302259327 seconds)
    (62/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.515323617 seconds)
    (63/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 3.000293907 seconds)
    (64/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.309729578 seconds)
    (65/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.481084673 seconds)
    (66/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.045728344 seconds)
    (67/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.486668871 seconds)
    (68/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.593833346 seconds)
    (69/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.503778717 seconds)
    (70/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.483812581 seconds)
    (71/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.288570489 seconds)
    (72/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.407743377 seconds)
    (73/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.879926665 seconds)
    (74/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.195553069 seconds)
    (75/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.813636866 seconds)
    (76/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.074732688 seconds)
    (77/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.463095405 seconds)
    (78/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.167306797 seconds)
    (79/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.162347603 seconds)
    (80/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.179536553 seconds)
    (81/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 3.919015676 seconds)
    (82/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.224553233 seconds)
    (83/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.158852094 seconds)
    (84/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.382090996 seconds)
    (85/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.162688477 seconds)
    (86/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.060130131 seconds)
    (87/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.161234964 seconds)
    (88/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.869817055 seconds)
    (89/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.893074862 seconds)
    (90/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.275904656 seconds)
    (91/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.166497114 seconds)
    (92/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.061570414 seconds)
    (93/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.403528402 seconds)
    (94/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.165296231 seconds)
    (95/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.166720509 seconds)
    (96/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.168778668 seconds)
    (97/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.317968385 seconds)
    (98/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.152990442 seconds)
    (99/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.975164139 seconds)
    (100/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.505675414 seconds)
    (101/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.390747168 seconds)
    (102/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.337223697 seconds)
    (103/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.151279942 seconds)
    (104/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 8.533443857 seconds)
    (105/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.361111977 seconds)
    (106/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.162728881 seconds)
    (107/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.859850818 seconds)
    (108/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.142648627 seconds)
    (109/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.869291594 seconds)
    (110/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.063907915 seconds)
    (111/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.182935941 seconds)
    (112/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.890345216 seconds)
    (113/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 3.032291403 seconds)
    (114/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.145465649 seconds)
    (115/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 3.813369362 seconds)
    (116/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.471262301 seconds)
    (117/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.546843235 seconds)
    (118/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.459044664 seconds)
    (119/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.145011331 seconds)
    (120/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.141109643 seconds)
    (121/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.268241262 seconds)
    (122/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.149623382 seconds)
    (123/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.153965283 seconds)
    (124/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.291725301 seconds)
    (125/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.901247681 seconds)
    (126/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.22411516 seconds)
    (127/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.537134892 seconds)
    (128/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.156115079 seconds)
    (129/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.203485693 seconds)
    (130/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.146539153 seconds)
    (131/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.16084983 seconds)
    (132/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.196765351 seconds)
    (133/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.144226464 seconds)
    (134/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.215597604 seconds)
    (135/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.770272645 seconds)
    (136/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.436160706 seconds)
    (137/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.440411623 seconds)
    (138/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.16109677 seconds)
    (139/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.552755118 seconds)
    (140/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.226054901 seconds)
    (141/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.269361704 seconds)
    (142/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.299789113 seconds)
    (143/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.56992532 seconds)
    (144/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.143805923 seconds)
    (145/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.460143501 seconds)
    (146/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.142332364 seconds)
    (147/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.569110183 seconds)
    (148/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.139936394 seconds)
    (149/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.223245971 seconds)
    (150/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.161258301 seconds)
    (151/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.45380121 seconds)
    (152/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.378970476 seconds)
    (153/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.441325989 seconds)
    (154/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.957331739 seconds)
    (155/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.242971947 seconds)
    (156/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.242111102 seconds)
    (157/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.395789971 seconds)
    (158/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.432088563 seconds)
    (159/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.217398716 seconds)
    (160/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.379827084 seconds)
    (161/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.247545482 seconds)
    (162/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.154493863 seconds)
    (163/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.548923078 seconds)
    (164/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.560599974 seconds)
    (165/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.371284314 seconds)
    (166/341) benchmarking ("sort", Bool, false)...
    done (took 2.357923406 seconds)
    (167/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.9955348 seconds)
    (168/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.257646776 seconds)
    (169/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.298388464 seconds)
    (170/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.253284401 seconds)
    (171/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.154513419 seconds)
    (172/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.155742631 seconds)
    (173/341) benchmarking ("sort", Int64, false)...
    done (took 5.795697673 seconds)
    (174/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.145881354 seconds)
    (175/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.302282187 seconds)
    (176/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.35078773 seconds)
    (177/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.04110349 seconds)
    (178/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.516319271 seconds)
    (179/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.146945248 seconds)
    (180/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 4.735510644 seconds)
    (181/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.358743575 seconds)
    (182/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.316790728 seconds)
    (183/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.856068818 seconds)
    (184/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.285908455 seconds)
    (185/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.35022624 seconds)
    (186/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.275346216 seconds)
    (187/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.982893565 seconds)
    (188/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.476782059 seconds)
    (189/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.164899756 seconds)
    (190/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.274783757 seconds)
    (191/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.159608709 seconds)
    (192/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.241818554 seconds)
    (193/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.154521043 seconds)
    (194/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.353803125 seconds)
    (195/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.686234436 seconds)
    (196/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.407071695 seconds)
    (197/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.142793468 seconds)
    (198/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.220217598 seconds)
    (199/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.141759663 seconds)
    (200/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.144473651 seconds)
    (201/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.207890059 seconds)
    (202/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.540252726 seconds)
    (203/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.530878366 seconds)
    (204/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.381517467 seconds)
    (205/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.580078637 seconds)
    (206/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.140149956 seconds)
    (207/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.334564457 seconds)
    (208/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.543686699 seconds)
    (209/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.553091145 seconds)
    (210/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.331561304 seconds)
    (211/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.829647515 seconds)
    (212/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.926255203 seconds)
    (213/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.448642877 seconds)
    (214/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.06043277 seconds)
    (215/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.151766147 seconds)
    (216/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.460151439 seconds)
    (217/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.28439559 seconds)
    (218/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.274242941 seconds)
    (219/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.156373959 seconds)
    (220/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.236215234 seconds)
    (221/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.299207928 seconds)
    (222/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.438011906 seconds)
    (223/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.300548291 seconds)
    (224/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.645763777 seconds)
    (225/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.150268 seconds)
    (226/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.27654077 seconds)
    (227/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.286668621 seconds)
    (228/341) benchmarking ("sort", Float64, false)...
    done (took 5.836427459 seconds)
    (229/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.161606699 seconds)
    (230/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.471464009 seconds)
    (231/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.255495859 seconds)
    (232/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.492461004 seconds)
    (233/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.427615008 seconds)
    (234/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.452259705 seconds)
    (235/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.644772302 seconds)
    (236/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.457159745 seconds)
    (237/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.336432874 seconds)
    (238/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.052095674 seconds)
    (239/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.398935377 seconds)
    (240/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.210276252 seconds)
    (241/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.141447771 seconds)
    (242/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.589162676 seconds)
    (243/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.395703563 seconds)
    (244/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.25657619 seconds)
    (245/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 7.143734443 seconds)
    (246/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 4.626432715 seconds)
    (247/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.444165116 seconds)
    (248/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.554770946 seconds)
    (249/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.397526215 seconds)
    (250/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.555895283 seconds)
    (251/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.359262927 seconds)
    (252/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.359910218 seconds)
    (253/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.953928506 seconds)
    (254/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.166169065 seconds)
    (255/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.237914782 seconds)
    (256/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.252876422 seconds)
    (257/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.281827562 seconds)
    (258/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.223364877 seconds)
    (259/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.225740149 seconds)
    (260/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.161589898 seconds)
    (261/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.264720477 seconds)
    (262/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.52714949 seconds)
    (263/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.250051517 seconds)
    (264/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.232044368 seconds)
    (265/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.19859038 seconds)
    (266/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.327742505 seconds)
    (267/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.526462155 seconds)
    (268/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.218477601 seconds)
    (269/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.495299789 seconds)
    (270/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.148495172 seconds)
    (271/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.279396399 seconds)
    (272/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.14674182 seconds)
    (273/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.443336477 seconds)
    (274/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.358678979 seconds)
    (275/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.096582696 seconds)
    (276/341) benchmarking ("sort", Float32, false)...
    done (took 5.830117283 seconds)
    (277/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.418697267 seconds)
    (278/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.25669178 seconds)
    (279/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.40933688 seconds)
    (280/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.606900376 seconds)
    (281/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.284513554 seconds)
    (282/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.259373289 seconds)
    (283/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.226397226 seconds)
    (284/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.557415265 seconds)
    (285/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.146925662 seconds)
    (286/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.179830925 seconds)
    (287/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.460479942 seconds)
    (288/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.930759308 seconds)
    (289/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.156260059 seconds)
    (290/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.295650151 seconds)
    (291/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.250732363 seconds)
    (292/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.432051492 seconds)
    (293/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.156377018 seconds)
    (294/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.152949229 seconds)
    (295/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.26616723 seconds)
    (296/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.143274857 seconds)
    (297/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.888336279 seconds)
    (298/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.60788775 seconds)
    (299/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.471629452 seconds)
    (300/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.268608884 seconds)
    (301/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.151086641 seconds)
    (302/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.24949201 seconds)
    (303/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.162969442 seconds)
    (304/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.090767969 seconds)
    (305/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.282616719 seconds)
    (306/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.277331527 seconds)
    (307/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.15391164 seconds)
    (308/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.547019844 seconds)
    (309/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.146896088 seconds)
    (310/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.154214279 seconds)
    (311/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.15787368 seconds)
    (312/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 4.33270953 seconds)
    (313/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.303665557 seconds)
    (314/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.156099986 seconds)
    (315/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.236678364 seconds)
    (316/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.189200377 seconds)
    (317/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.550770426 seconds)
    (318/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.96603805 seconds)
    (319/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.269381031 seconds)
    (320/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.618570538 seconds)
    (321/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.329039702 seconds)
    (322/341) benchmarking ("sort", Int8, false)...
    done (took 5.076998954 seconds)
    (323/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.154160909 seconds)
    (324/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 8.456506881 seconds)
    (325/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.038542801 seconds)
    (326/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.365007532 seconds)
    (327/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.363894752 seconds)
    (328/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.66898062 seconds)
    (329/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.233688398 seconds)
    (330/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.431214773 seconds)
    (331/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.416057159 seconds)
    (332/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.165383752 seconds)
    (333/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.236244687 seconds)
    (334/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.568698179 seconds)
    (335/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.156740648 seconds)
    (336/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 7.900457081 seconds)
    (337/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.447173567 seconds)
    (338/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.232065613 seconds)
    (339/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.356906994 seconds)
    (340/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.266234893 seconds)
    (341/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.31320524 seconds)
  done (took 1193.023301369 seconds)
done (took 1195.482430343 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.180070837 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.158418843 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.648936267 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.161087665 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.153460825 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.160005409 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.658264967 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.181606979 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.170046856 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.65954947 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.164023909 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.154340254 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.169630771 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.188559147 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.167603695 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.168192965 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.159133207 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.180096537 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.190766231 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.165421987 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.205449727 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.159087152 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.153249488 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.20757535 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.15505948 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.168063951 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.180920022 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.207299969 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.210048778 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.158120677 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.160696527 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.50462571 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.207082023 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.160902501 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.167596721 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.171237681 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.162677404 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.175331983 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.181037926 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.171354725 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.155529136 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.165529761 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.160362315 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.157374973 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.156033403 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.15505457 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.163321436 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.280776803 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.170094381 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.490633229 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.220061932 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.180381138 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.208921449 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.15410309 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.157400357 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.164112202 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.208221333 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.163313045 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.161046796 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.489458009 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.252045217 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.171878984 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.491251613 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.217967118 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.167905225 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.165634192 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.155195654 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.18073344 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.505978477 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.697104902 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.185278775 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.17753052 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.158398388 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.160787829 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.172720215 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.659291872 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.168645734 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.732668278 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.17693626 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.172755643 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.16344064 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.159638269 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.16142619 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.174669908 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.183517018 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.157786215 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.170247184 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.164279437 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.171390359 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.507261665 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.198741025 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.654930853 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.160984899 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.182759279 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.182055448 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.730080239 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.177745632 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.182043793 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.159552913 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.510422312 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.199635878 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.182228133 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.160955769 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.168047242 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.273874409 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.182261684 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.182168902 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.157034292 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.184210398 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.165406944 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.160607127 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.174052545 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.178823165 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.200582772 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.174586041 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.158549002 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.168186447 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.166848951 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.185813927 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.169383758 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.168322611 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.170770931 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.166015328 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.208777633 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.184612012 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.174328379 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.272988833 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.171890065 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.28524922 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.173870782 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.166559079 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.163167525 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.492759611 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.200154384 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.180696605 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.164767264 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.189876048 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.180647632 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.17824514 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.162051016 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.177537482 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.162915837 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.214227833 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.161476178 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.186997997 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.219485982 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.175130311 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.168567861 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.181882137 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.196538081 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.181153414 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.166126661 seconds)
done (took 339.721126958 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.215149451 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.162842752 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.240081039 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.162596843 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.229433406 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.216630419 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.16088012 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.170398377 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.161190616 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.551814983 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.162827808 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.174312818 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.161184695 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.162022907 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.217915477 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.162278073 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.164894779 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.39704412 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.169550813 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.222436044 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.162860465 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.167079094 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.163976188 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.558685947 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.167087315 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.159833686 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.221445528 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.16398082 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.401602498 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.168149982 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.161750088 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.403532322 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.221670345 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.176821401 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.177729095 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.167452154 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.229415217 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.171555387 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.211596151 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.208350329 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.237390307 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.195830933 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.162980252 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.162709302 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.164975269 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.163413962 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.162493533 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.199262377 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.167336284 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.169215796 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.408853997 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.170592746 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.16813798 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.165818634 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.16651255 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.178181751 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.165183547 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.165466195 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.225263951 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.164067289 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.214108634 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.557550228 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.552796596 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.165395072 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.16533674 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.165143769 seconds)
  done (took 203.403349863 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.230558199 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.250231452 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.233261774 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.173578011 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.217044297 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.234018228 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.17038035 seconds)
  done (took 17.60430112 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.179278449 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.168640595 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.18932427 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.190358703 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.170708499 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.304439067 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.178544528 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.17189231 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.192918222 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.172681436 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.500559337 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.190743861 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.172839625 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.165028386 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.178417686 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.195024882 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.170251333 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.167501496 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.26260782 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.243976023 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.174495226 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.1741388 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.193755235 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.177250388 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.165071797 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.166734154 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.166962045 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.174406912 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.166711061 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.165991365 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.166451513 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.180758783 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.167264239 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.164679723 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.166438949 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.166750934 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.166512049 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.166235349 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.166991416 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.165912522 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.166328377 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.165870322 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.16651775 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.167151824 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.167368953 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.189791333 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.166442739 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.16721394 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.166747881 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.166291321 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.197274834 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.166251719 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.168070133 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.173775574 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.20914831 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.176001648 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.168417 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.166362672 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.167258375 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.167384165 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.166143924 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.249124194 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.191437989 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.167603544 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.191333247 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.20688346 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.167586628 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.168768802 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.168378317 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.193512573 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.169175723 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.191312473 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.168254887 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.266187687 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.169257213 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.310352002 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.193603267 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.172832125 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.173327673 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.169631308 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.17513234 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.168560977 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.171629333 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.177525236 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.175305261 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.169857397 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.168895227 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.171885348 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.178084984 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.16900354 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.214484349 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.169352807 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.169897583 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.266948351 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.169231059 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.267610451 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.195022365 seconds)
  done (took 234.145080801 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.174914238 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.17339869 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.184896191 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.174074227 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.171742481 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.175477049 seconds)
  done (took 15.149718952 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.173855925 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.174685749 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.171485927 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.170328253 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.171696708 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.17031295 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.171617509 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.174166116 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.175223747 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.172142983 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.170963885 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.171454983 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.169994835 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.170573657 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.171915232 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.169979004 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.170485979 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.171203149 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.173051707 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.170687712 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.414400991 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.172650254 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.170682562 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.175143424 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.175744377 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.171707716 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.181225661 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.171823579 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.172555233 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.177854194 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.174601472 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.173419363 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.174821694 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.178521626 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.175990659 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.176739348 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.175520581 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.172971386 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.173232292 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.173549699 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.172956766 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.173519564 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.171847621 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.176200319 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.172275867 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.182138838 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.176643346 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.181840336 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.171896916 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.172221949 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.17157609 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.172376485 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.173342635 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.172053094 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.165162609 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.180627432 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.174737389 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.165272833 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.173063775 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.175702683 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.176362591 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.173875019 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.175070755 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.17591584 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.182435011 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.173151792 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.176480261 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.178092653 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.173800023 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.173623245 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.167862366 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.168508582 seconds)
  done (took 159.836465701 seconds)
done (took 632.223689868 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.273702748 seconds)
  done (took 9.371811178 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.289471711 seconds)
  done (took 9.492616421 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.256212476 seconds)
  done (took 12.369101388 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.24950691 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.241968029 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.175188927 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.177249455 seconds)
  done (took 30.959443235 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.457917407 seconds)
  done (took 9.563485567 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.186991628 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.170054216 seconds)
  done (took 16.52883236 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.269641856 seconds)
  done (took 9.371258641 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.653631334 seconds)
  done (took 9.802377349 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.186486589 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.20611431 seconds)
  done (took 16.518192374 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.179097199 seconds)
  done (took 9.282614134 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.976287237 seconds)
  done (took 10.167166129 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.181304339 seconds)
  done (took 9.301336961 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.244530807 seconds)
  done (took 9.34658899 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.936902627 seconds)
  done (took 10.039665016 seconds)
done (took 174.210440623 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.182422432 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.172621547 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.174480901 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.170743471 seconds)
  done (took 30.800749082 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.213712349 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.216438761 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.225574265 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.210590061 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.201861852 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.205499 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.215497232 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.211684986 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.205507126 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.209291256 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.216698106 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.21071284 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.21383624 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.224678954 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.224749655 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.211575766 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.214773193 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.216462979 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.20503677 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.224514093 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.211787066 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.212634572 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.180527504 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.178475532 seconds)
  done (took 55.166741021 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.369647622 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.244114689 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.334911352 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.225283611 seconds)
  done (took 11.277353471 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.178626709 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.242912755 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.233549086 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.224030245 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.232536118 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.285377333 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.233849532 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.314497697 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.309583182 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.31200882 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.187809198 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.200894794 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.204094682 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.224198883 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.281532845 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.180438701 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.178786991 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.29606095 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.241754482 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.442101225 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.180540118 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.238292747 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.233636836 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.232365111 seconds)
  done (took 55.99274426 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.18288403 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.190485551 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.18758367 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.18164476 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.182085867 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.181199695 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.186944454 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.181611112 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.206131458 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.186670754 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.181243399 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.182949508 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.188412161 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.184071317 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.180865483 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.193234706 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.19470427 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.181936929 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.187023757 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.189302615 seconds)
  done (took 45.836221956 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.179680653 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.030003393 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.52917788 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.431589531 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.17699715 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.176766795 seconds)
  done (took 33.627839823 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.190884414 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.197941091 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.18606139 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.205478144 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.227818935 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.18524048 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.2414048 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.33934779 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.183738127 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.240290576 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.197668551 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.18769143 seconds)
  done (took 28.689716766 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.17934987 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.182580227 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.178745415 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.192952386 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.1910832 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.189825859 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.188701926 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.179945745 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.195464492 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.203056172 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.189017207 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.192605607 seconds)
  done (took 48.368356248 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.397855937 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.410131368 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.39789515 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.68595977 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.498515358 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.162057667 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.468793182 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.395739979 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.947410651 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.972723852 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.473238703 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.162860455 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.124954003 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.106855518 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.102501668 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.427292815 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.184566087 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.047444333 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.446137907 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.229374644 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.181561653 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.184393783 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.185248844 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.480336855 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.509268217 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.185481996 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.397546855 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.199954316 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.190583241 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.395944788 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.702764549 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.23605133 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.389473122 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.441463563 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.532545487 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.244995377 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.292009271 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.274333358 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.223972867 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.221416365 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.193123413 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.196158552 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.722317653 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.195916766 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.456645537 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.185688549 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.192629235 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.306749106 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.107769503 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.50701871 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.297528948 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.192614202 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.218840715 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.617240581 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.302952184 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.430158069 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.1896791 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.274540601 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.235210178 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.434930723 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.294298149 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.294793838 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.400208514 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.113986437 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.585605465 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.305730762 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.185573913 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.190457782 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.88365485 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.428304009 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.264300979 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.511702537 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.946191955 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.184163936 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.187130985 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.241039656 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.288047849 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.181085192 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.503258379 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.178783567 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.109495745 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.284387446 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.689132157 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.191605855 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.186872353 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.194301513 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.104919571 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.114780146 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.282608302 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.450037735 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.508257672 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.188403876 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.187625311 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.210934967 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.189330325 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.138002009 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.657262393 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.250716498 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.116212117 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.749277689 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.726598294 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.147067713 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.595872994 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.223373666 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.461602326 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.343136983 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.592307347 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.396064377 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.433733097 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.720264615 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.19455186 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.755202773 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.269133195 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.263657134 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.190252555 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.774341041 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.279531196 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.480465868 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.299602071 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.189094236 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.11421809 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.203183312 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.391616528 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.717228472 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.241958694 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.187413791 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.195203972 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.189980645 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.194624336 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.302720499 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.205065652 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.483531543 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.265276318 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.190095637 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.130772932 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.189007277 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.48072688 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.708662929 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.24313325 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.444951808 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.454733134 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.953747914 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.78418673 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.195119361 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.463671924 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.262181547 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.264703361 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.787259978 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.320611789 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.285601156 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.188580215 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.321499699 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.192793791 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.191035202 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.448008008 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.715999913 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.621696194 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.232905387 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.1908943 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.236252854 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.285156343 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.425023393 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.285073183 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.215350801 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.197436053 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.279815836 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.419197568 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.190378919 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.119844097 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.441465971 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.433423293 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.488336941 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.613289894 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.291772847 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.261667942 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.201839557 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.407993228 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.279136394 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.844116612 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.75575897 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.410168736 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.686291171 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.150996639 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.837992066 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.450630813 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.572549159 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.212038086 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.644516232 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.289736332 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.819168844 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.217850178 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.720373112 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.12224176 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.198672665 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.525143269 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.146973552 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.508257891 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.256115917 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.29010939 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.197118748 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.196578477 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.202543865 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.13490099 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.299129462 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.262377661 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.271939869 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.122017268 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.769051238 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.228575362 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.196594732 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.196226342 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.553269657 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.01460231 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.149887064 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.196673217 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.26945621 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.967947932 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.743937676 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.20231423 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.200088947 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.797630568 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.199018281 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.790313175 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.200865119 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.091448595 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.217727303 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.461868784 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.898357622 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.493913659 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.270096649 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.271414785 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.198169015 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.203971201 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.895970675 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.210645735 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.901698855 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.489452715 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.473582419 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.657575602 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.262993607 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.412136734 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.211820952 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.199346837 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.744204616 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.220568324 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.200387604 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.402494657 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.717141657 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.538519961 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.159349326 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.292190274 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.203211797 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.469935388 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.196049308 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.717723796 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.88954023 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.20923057 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.20344024 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.463955623 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.887764284 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.201958685 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.185768056 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.206455316 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.418655129 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.404169545 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.473884591 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.497051946 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.65488024 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.133137961 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.203614966 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.24646871 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.445323555 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.202029933 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.238147542 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.708645679 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.300291291 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.626799438 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.485696596 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.587231506 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.837057016 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.468185593 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.262510866 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.214137198 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.858951045 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.33147249 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.130187344 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.320599512 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.129699334 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.973326216 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.489831843 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.21967429 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.475989264 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.177999619 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.536450958 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.497046636 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.464786402 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.251099981 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.225427633 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.203702863 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.24652684 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.200962821 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.307030734 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.313234516 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.207695575 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.669684002 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.234242676 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.245148182 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.208674319 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.739413638 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.221572485 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.207595934 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.961975308 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.223051993 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.321004769 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.272885905 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.98489518 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.764087099 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.273913371 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.085669832 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.856899475 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.47530186 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.258466782 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.660357145 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.237170361 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.608700026 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.20749672 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.416857942 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.210826951 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.703404719 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.243490231 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.46974395 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.155802226 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.411571885 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.404205101 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.223573105 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.207982667 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.129066888 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.310171145 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.090040153 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.185812657 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.207034007 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.898206218 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.627984362 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.317737225 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.6544998 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.020270457 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.206997535 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.603301683 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.61108087 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.745456297 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.23320511 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.207699073 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.52748077 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.333218362 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.511633238 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.496130121 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.21216128 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.231168814 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.421108854 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.329814552 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.124301658 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.676947641 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.795353053 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.905264511 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.214714445 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.408573253 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.52694534 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.396601374 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.238020153 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.285106598 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.611961718 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.482414671 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.275189223 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.131790369 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.205846635 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.610069726 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.734817377 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.302071413 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.447947072 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.523085574 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.704988595 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.747411521 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.578807944 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.632046548 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.671128761 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.611071111 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.416160149 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.56046872 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.533289768 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.095285693 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.620087366 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.420875184 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.310539287 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.487151933 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.078238131 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.914650321 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.451155359 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.21237202 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.135584071 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.415221192 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.209554225 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.554396205 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.84194607 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.457309534 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.467083902 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.719608398 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.748803786 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.307573144 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.226995042 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.176661228 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.230945299 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.232429214 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.207511634 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.683642872 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.498074257 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.225174839 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.15751936 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.87523756 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.135928188 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.424514163 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.306017324 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.2425869 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.773723739 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.457909601 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.313089354 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.520757861 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.358612308 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.242141485 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.135294199 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.922755952 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.152605083 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.299098376 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.633488491 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.221485959 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.212581567 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.412751317 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.136222236 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.254270196 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.215426884 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.404284228 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.802901313 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.476543009 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.331152107 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.448355755 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.508072199 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.130076749 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.236319609 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.481619676 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.137200249 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.769974024 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.919821768 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.250705308 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.282337965 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.208994557 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.214678751 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.482616903 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.528107674 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.300472254 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.852989855 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.23843678 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.23513411 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.537550051 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.298899117 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.212212897 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.215843802 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.639082558 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.441997329 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.214741157 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.19498436 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.42578744 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.284920676 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.408515265 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.285138054 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.726891385 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.216462721 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.089876418 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.308272548 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.154006105 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.205696672 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.985015882 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.270293764 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.213751532 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.487508908 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.870717759 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.412906502 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.614395199 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.119683222 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.311104481 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.253996241 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.218849588 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.21893731 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.604042272 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.518384218 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.213585589 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.483935663 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.258810566 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.215570743 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.877361522 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.18304447 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.211183917 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.911931084 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.121078507 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.946146323 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.611223585 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.213268203 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.285690105 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.216568445 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.142115986 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.211000942 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.394667253 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.17391493 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.214054785 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.582657286 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.502226496 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.298011852 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.214524521 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.218466588 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.216230735 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.427203039 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.728249442 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.23373325 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.912640269 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.417404599 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.215103494 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.69607687 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.670155997 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.384867266 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.250975489 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.321381792 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.45072324 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.863333277 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.31639103 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.178162782 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.44108686 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.216526258 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.487368801 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.490715166 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.215009255 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.427185593 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.748941604 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.49730874 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.584439154 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.538471462 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.279246544 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.324555467 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.148421374 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.239464886 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.21738525 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.481768663 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.268257225 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.21370722 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.226874775 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.860865052 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.977948261 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.674589427 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.365299173 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.53126063 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.004097817 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.964453226 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.221127566 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.145437274 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.219088103 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.240765884 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.221881726 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.141844377 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.920669123 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.936373849 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.434930605 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.530152134 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.145793744 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.419809867 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.808883037 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.142348603 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.188428547 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.217202738 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.470303541 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.149765378 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.221302799 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.170796841 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.472539491 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.87624157 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.483612327 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.217643068 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.170112306 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.216802231 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.219420833 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.220118119 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.305933338 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.217548203 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.335794929 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.482612991 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.586174291 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.318228203 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.867913292 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.909404336 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.152581895 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.255220488 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.83824278 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.784659343 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.542380343 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.343416667 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.91876971 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.158678769 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.227053854 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.238477349 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.462983469 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.217815272 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.221802299 seconds)
  done (took 2280.546996794 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.226570801 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.297133688 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.302926398 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.25363025 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.309361121 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.283351132 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.297050596 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.305102324 seconds)
  done (took 60.41488672 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.217828336 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.507370238 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.259315172 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.219309235 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.215466065 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.258769045 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.404087244 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.243286976 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.222542585 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.259537632 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.222877781 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.219210402 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.221069689 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.213467445 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.221565555 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.490062234 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.249781605 seconds)
  done (took 82.870404521 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.28279127 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 11.146335445 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.221248071 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.034507075 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.270480632 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.528265404 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.215465532 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.220655314 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.579388849 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.513966811 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.239423685 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.220963474 seconds)
  done (took 96.654586899 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.217696385 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.222756058 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.218678009 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.219337031 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.219214712 seconds)
  done (took 13.244866115 seconds)
done (took 2845.647581603 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.629290321 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.321262407 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.294924319 seconds)
  done (took 6.759629805 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.364527092 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.413888094 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.528796538 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.535229049 seconds)
  done (took 11.991616508 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.505949951 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.591840261 seconds)
  done (took 7.245890731 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.586402693 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.238403972 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.604385511 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.224666607 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.222498255 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.224923594 seconds)
  done (took 23.824309323 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.222997174 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.222107309 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.223854152 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.224633573 seconds)
  done (took 11.03838881 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.222996616 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.011786029 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.219451446 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.233543301 seconds)
  done (took 22.832774617 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.410114557 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.270297968 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.989122135 seconds)
  done (took 10.817335035 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.850509401 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.668059685 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.833050796 seconds)
  done (took 10.49648993 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.367280824 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.062325178 seconds)
  done (took 8.575870417 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.364335036 seconds)
  done (took 4.510490566 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.057266846 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.537208275 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.696537848 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.720222382 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.803682317 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.426979407 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.533713341 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.48574685 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.616647841 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.605485821 seconds)
  done (took 28.627224772 seconds)
done (took 163.916158795 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.67241192 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.244866824 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.433471502 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.598542111 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.465057235 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.436233243 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.517734708 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.583949169 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.270841583 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.255151211 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.592210081 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.455158531 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.469163428 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.2482192 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.474996401 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.248349153 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.457997878 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.696625111 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.278384756 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.520386359 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.525669102 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.242999267 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.436051667 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.261208188 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.454081019 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.389132402 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.867933237 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.246346382 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.434552969 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.873716178 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.386037486 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.675276853 seconds)
  done (took 180.859413585 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.223968278 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.225929106 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.223704394 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.225042949 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.603212392 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.221696901 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.223757984 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.222642194 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.519852153 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.511380884 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.221649708 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.587689182 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.2258887 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.222940782 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.222189574 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.221993234 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.649660541 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.223525986 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.220411246 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.224892982 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.223539624 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.462651462 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.226364978 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.488943691 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.620442005 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.225836688 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.223287761 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.225236819 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.223499716 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.225961789 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.227504135 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.223287524 seconds)
  done (took 219.969788277 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.229028767 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.226839338 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.220817573 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.224744827 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.225577002 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.226578968 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.228061117 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.224726559 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.105925234 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.09809066 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.224541812 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.223580242 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.228967783 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.224165078 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.231814104 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.22481549 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.233788184 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.229501174 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.234449886 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.237814577 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.237431063 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.98525025 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.226257845 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.985747155 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.226178979 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.229918808 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.22598127 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.234405753 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.232117585 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.232494192 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.228243599 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.223990457 seconds)
  done (took 232.724140364 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.473984503 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.231777181 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.232003359 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.231361563 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.235765357 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.231818685 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.227298694 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.485586937 seconds)
  done (took 22.502987936 seconds)
done (took 658.211033996 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.622855924 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.951733246 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.352668152 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.255301064 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.54840389 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.289875875 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.248781337 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.311039165 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.889381444 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.320856888 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.665623604 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.250247456 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.989655894 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.272887684 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.365281024 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.305888394 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.599660641 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.860180465 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.376986063 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.915654447 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.446186376 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.16298133 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.324949932 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.924819067 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.67468625 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.186071186 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.262690174 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.59755989 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.257273641 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.477244067 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.939236569 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.506376367 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.260196818 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.252006907 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.305806019 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.293571661 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.446142346 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.256204824 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.362449004 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.961239015 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.913275351 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.77332415 seconds)
  done (took 115.133885478 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.238482319 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.240901937 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.23869908 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.239320839 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.239429019 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.240557076 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.238845641 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.238170263 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.23856401 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.240728824 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.237198758 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.239490234 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.239580861 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.240456427 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.239068624 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.239908445 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.241225563 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.239724813 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.243122196 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.238536523 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.240743998 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.240138099 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.233034844 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.238949783 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.241550107 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.238927719 seconds)
  done (took 60.387958613 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.234917094 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.387112683 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.519342235 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.256150428 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.237796305 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.239366905 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.263048202 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.24180678 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.235710497 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.240203734 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.32789982 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.239107175 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.249209073 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.517766053 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.257499717 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.23465734 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.236737674 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.236965376 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.388937968 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.25049608 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.262900622 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.242072362 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.266314161 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.249795888 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.238126951 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.233437657 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.240315058 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.632660115 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.248528862 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.326880798 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.279005515 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.261954584 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.580337411 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.529253131 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.290299981 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.24420585 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.235940369 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.370534917 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.243890582 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.232591434 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.26598524 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.243585377 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.521130843 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.736112636 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.246988397 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.235283865 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.634592402 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.378289604 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.279332787 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.245692457 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.523909137 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.260853994 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.238498496 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.239936272 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.273312754 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.249860083 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.238521306 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.477725761 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.252565236 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.267071251 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.242559422 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.237398122 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.399803841 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.242294038 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.389679986 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.245152733 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.243373049 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.239097963 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.52223303 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.260804892 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.734632496 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.243870433 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.233880406 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.33172689 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.388955978 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.66079529 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.251369345 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.399602154 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.600385858 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.277221556 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.24790802 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.624825462 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.276924807 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.249598806 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.236193361 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.238107427 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.240307252 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.279206929 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.261051389 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.659662892 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.737685604 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.492158135 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.276292279 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.25210691 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.240414377 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.479122262 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.248028821 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.237336318 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.516029143 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.757264587 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.250593325 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.244101191 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.721848279 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.247437294 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.267370207 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.248055251 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.528888686 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.265940509 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.281916528 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.240420209 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.246126522 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.244537275 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.268722702 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.24821778 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.240877961 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.716531272 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.382061958 seconds)
  done (took 275.310492797 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.241732158 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.234556765 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.241005169 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.231156572 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.240103664 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.23715448 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.237521382 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.236373128 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.241044263 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.238073408 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.238111234 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.242458257 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.241801662 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.239873841 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.818101986 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.258846939 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.736781741 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.247225242 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.249786886 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.247380392 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.862776492 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.254130949 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.245249579 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.249898669 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.25085059 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.248512766 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.260074279 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.289437427 seconds)
  done (took 178.729416308 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.24988385 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.323300284 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.266263968 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.302742092 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.262901421 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.251895004 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.271744809 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.273243456 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.260041679 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.25432328 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.251103508 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.277982132 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.260035403 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.39598146 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.285715741 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.282668523 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.33185846 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.256494697 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.251756663 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.253238714 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.300343471 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.264389707 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.280857358 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.308277085 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.265373935 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.300852081 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.266764238 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.253399986 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.251904264 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.373709406 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.273838561 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.281009526 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.288893606 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.274237607 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.349578759 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.350836655 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.332445741 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.279679387 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.25854568 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.251948306 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.254763878 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.258211806 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.30352716 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.267962699 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.256093545 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.352164279 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.271043269 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.25439789 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.272179881 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.254852048 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.264460103 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.272297999 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.28794338 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.356771601 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.305871586 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.281588085 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.277707764 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.273643656 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.257274053 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.326657212 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.265482426 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.347292733 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.279390796 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.262584647 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.254320452 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.258583075 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.299521272 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.289857327 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.332086398 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.265392314 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.327629459 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.308458266 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.263545668 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.254862429 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.258012506 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.30562451 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.344641231 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.31266059 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.312955416 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.291208446 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.267920471 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.255869339 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.25969943 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.283875005 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.263590707 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.345287732 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.350042008 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.261454574 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.25764806 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.256518471 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.255706168 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.279298265 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.315316373 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.295421984 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.349088275 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.288494737 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.292051175 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.264751307 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.268094536 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.263111084 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.287038168 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.265571447 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.270221442 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.596343083 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.293884836 seconds)
  done (took 242.41531342 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.625759618 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.30428059 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.328692342 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.537969921 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.650985868 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.368695845 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.295061767 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.312450233 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.316400599 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.425315499 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.363351322 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.348475393 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.293674584 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.280313497 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.305513038 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.317165296 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.341223482 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.603471942 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.401928096 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.990056435 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.305201949 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.567736533 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.583904658 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.639850795 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.344058118 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.717080475 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.93262065 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.394924282 seconds)
  done (took 73.081673619 seconds)
done (took 947.210558248 seconds)
SAVING RESULT...
DONE!
