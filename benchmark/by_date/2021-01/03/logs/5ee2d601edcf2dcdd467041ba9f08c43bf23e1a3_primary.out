cset: moving following pidspec: 19304
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.820311301 seconds)
loading group "shootout"... done (took 1.107694032 seconds)
loading group "string"... done (took 0.664553159 seconds)
loading group "linalg"... done (took 8.536942171 seconds)
loading group "parallel"... done (took 0.164526087 seconds)
loading group "find"... done (took 3.002272752 seconds)
loading group "tuple"... done (took 2.123862466 seconds)
loading group "union"... done (took 14.799610838 seconds)
loading group "dates"... done (took 1.443416871 seconds)
loading group "micro"... done (took 0.218606341 seconds)
loading group "simd"... done (took 4.747870943 seconds)
loading group "io"... done (took 1.077719396 seconds)
loading group "random"... done (took 9.481090353 seconds)
loading group "problem"... done (took 1.534072394 seconds)
loading group "array"... done (took 25.134643294 seconds)
loading group "misc"... done (took 1.873117091 seconds)
loading group "scalar"... done (took 43.340294751 seconds)
loading group "sort"... done (took 3.310114998 seconds)
loading group "sparse"... done (took 12.662399361 seconds)
loading group "collection"... done (took 18.326781604 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.422230837 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.113185117 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.125560119 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.111566631 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.181809237 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.118487724 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.125797767 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.082243026 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.924966724 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.137450761 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.113251812 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.419959764 seconds)
done (took 5.314103515 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.165664356 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.090102399 seconds)
    (2/2) benchmarking "String"...
    done (took 0.082161981 seconds)
  done (took 1.39024805 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.07038963 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.059197267 seconds)
    (3/3) benchmarking "different"...
    done (took 0.065589878 seconds)
  done (took 1.410118348 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.06362044 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.133595543 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.06506092 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.065453207 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.065339663 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.064927981 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.064551413 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.064560432 seconds)
  done (took 1.745570624 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.07131238 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.065634678 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.064171974 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.065675641 seconds)
  done (took 1.485370792 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065112391 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.119182721 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.063139709 seconds)
    (4/4) benchmarking "different"...
    done (took 0.063140315 seconds)
  done (took 1.526342823 seconds)
done (took 9.0248286 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.138027404 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.838754493 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.764893989 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.12090157 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.246185943 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.364420868 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.122391415 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.180821337 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.087675175 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.073651796 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.119694845 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.076034231 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.386276184 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.494053065 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.06915926 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.167338163 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.646681033 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087453137 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.130339229 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.431779869 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.071715296 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.08604873 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.083356046 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.069984672 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.317484266 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.151913205 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.662654932 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.091456593 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.066448046 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.092767585 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.06875997 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.076214734 seconds)
  done (took 10.635538359 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.093509207 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.088671917 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.066813437 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.122335572 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.092213633 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.068433181 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.074102924 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.066335029 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.087001004 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.122696527 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.088942317 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.097335297 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.065020015 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.067786312 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.072132422 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.195074602 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.078621265 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.082581949 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.065972118 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.079749762 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.103993704 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.076688612 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.076641484 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.076402169 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.128099919 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.167095594 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.094878653 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.096786172 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.064346983 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.077401215 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.114284998 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.123842853 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.065624052 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.063800965 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.118533824 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.094108468 seconds)
  done (took 4.591304183 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.872953474 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.094945532 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.081330445 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.072687038 seconds)
    (4/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.09371454 seconds)
    (5/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.104322609 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.112159749 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.11862627 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.120395251 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.103240673 seconds)
    (10/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067250986 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.150580628 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.66267714 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.160918954 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070116498 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.118453535 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.353466633 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.065417555 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.068468225 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066518333 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.069160991 seconds)
    (21/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.063067955 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067977499 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.110507191 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.064067601 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.173082686 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.574609534 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068366269 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067473953 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.094691054 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.063620816 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.136722968 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.091089674 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.067921978 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.538507006 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.063807439 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.062243545 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.19600933 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.093739525 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06611824 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.066656073 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.07758085 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.064870295 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.107300977 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.077919658 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.508058428 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.067977606 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.576987225 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.223682821 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.071196107 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.070125136 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.099788143 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.062966298 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.066207955 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.95749212 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.144460386 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.0652524 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.270163867 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.066276484 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066750709 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.067093671 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.097833113 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.065401514 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.066811344 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.071019799 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.094444498 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.792574653 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.087480898 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.094623295 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.065514525 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.404107541 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.072010812 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.067916778 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068115014 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.067129205 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.104334046 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065068313 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.064879835 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.10866078 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.093449234 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.086944436 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.06785128 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.065674657 seconds)
    (83/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.081598866 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.064438837 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.340067721 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.156002149 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.064292018 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.065251526 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.474458897 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.062367478 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064585988 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069276254 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.089982074 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.182123567 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.063329654 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.064020368 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.097883721 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.066690749 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.750368031 seconds)
    (100/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.063260156 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.065222462 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.467777274 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.067693206 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.100961478 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.118270071 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06648943 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.098818238 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.06649806 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.063382179 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.072005279 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.064189857 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.063081627 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.067877912 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.06468201 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.065097355 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.067854741 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.066536969 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065747466 seconds)
  done (took 22.973574342 seconds)
done (took 40.295245312 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.311505089 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.076866403 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.077016771 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.077243446 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.077530819 seconds)
  done (took 1.887271672 seconds)
done (took 3.247398432 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.249405435 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.073579187 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.062890555 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.198871368 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.088907467 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.173822984 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.211351312 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.156777805 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.08647272 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.086485047 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.086000065 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.214297214 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.221669389 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.086597397 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.156789766 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.223015492 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.086488811 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.062374225 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.086721231 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.086213074 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.086464077 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.062738403 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.086220761 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.08604131 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.155172767 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.085799023 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.062051746 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.154808841 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.084756337 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.154959941 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.084552515 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.084555673 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.084813168 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.154819604 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.085035627 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.153461741 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.061855343 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.084719742 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.084777561 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.084305898 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.083898695 seconds)
  done (took 6.078415834 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.075682872 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.2023537 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08255706 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060756833 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.069900006 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.080564422 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060450147 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.07998707 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.086633541 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.080929453 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.080890839 seconds)
  done (took 2.31344042 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.069500941 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081684928 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.082574123 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060210583 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071347369 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.081940426 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060651569 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.08116357 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.083903672 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.081424562 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.081817681 seconds)
  done (took 2.138819273 seconds)
done (took 11.822294164 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.096115171 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.063811522 seconds)
  done (took 1.444228755 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.220639133 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.491602585 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.879243365 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.090175367 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.069855635 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.083348267 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.192394017 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.064609462 seconds)
  done (took 7.569566792 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.10160071 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.066197089 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.067358284 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.065956326 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.065541108 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.067058559 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.065574023 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.065729519 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.067965641 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.066783116 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.06653116 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.065907329 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.067795359 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.065587351 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.06614226 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.066893638 seconds)
  done (took 2.504013565 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.101737006 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.067346586 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.097823219 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.060486503 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.070140217 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.060613664 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.068973912 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.070972053 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.068039696 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.069245407 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.070690412 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.069361693 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.069372405 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.069508595 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.070796801 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.071098572 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.071308026 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.068911209 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.071634465 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.07189751 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.070737425 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.071043953 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.071574549 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.069489291 seconds)
  done (took 3.145698564 seconds)
done (took 15.966738191 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.17533434 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.073029867 seconds)
  done (took 1.544391734 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.067294203 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.066678804 seconds)
  done (took 1.442032896 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.072676806 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.058730254 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.075593047 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.068529784 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.059675904 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.059209944 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.074789696 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.059982466 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.059153004 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.059651804 seconds)
  done (took 1.958464482 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.062571684 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.066438873 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.064732864 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.06254133 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.064792859 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.060457839 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.062715069 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.060918859 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.067241626 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.059942572 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.063803247 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.081050792 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.063499036 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.081565531 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.063167495 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.063768322 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.065539407 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.063201735 seconds)
  done (took 2.494707529 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061186181 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.059937935 seconds)
  done (took 1.443751572 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064428547 seconds)
    (2/7) benchmarking "second"...
    done (took 0.059845766 seconds)
    (3/7) benchmarking "month"...
    done (took 0.062579558 seconds)
    (4/7) benchmarking "year"...
    done (took 0.062094338 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.060298764 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.059462755 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.0601753 seconds)
  done (took 1.743126205 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.421287091 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.121922043 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.341056006 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.066899684 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.074511613 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.25310892 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.062406233 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.066761823 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.066748401 seconds)
  done (took 2.8326984 seconds)
done (took 14.789419856 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082509427 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.177743703 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.085573213 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.37579705 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.089372793 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.065440709 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.111395419 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.173344236 seconds)
done (took 2.501224719 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.277636756 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.227823211 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.396900824 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.123566758 seconds)
  done (took 3.079721532 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.330374536 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.077227163 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.075392828 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.064898247 seconds)
  done (took 1.887303306 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.06502937 seconds)
    (2/2) benchmarking "read"...
    done (took 0.06973882 seconds)
  done (took 1.469037601 seconds)
done (took 8.05364138 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.071470828 seconds)
    (2/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.089513431 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.059838083 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.065213638 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.062291172 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.061861517 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.06118512 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.062170355 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.059980404 seconds)
    (10/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.060120546 seconds)
    (11/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.06133905 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.062330044 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.06248968 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062135712 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.061705957 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061900193 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062054277 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.061674395 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06181256 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06198035 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06257675 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.061305988 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.061928412 seconds)
    (24/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.061319183 seconds)
  done (took 2.879973713 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.078802366 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.063995401 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.064775473 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.064517242 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.065225786 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.064994042 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.064808557 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.063564013 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.064930579 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.063130067 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065282354 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.065623863 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.063319682 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.065423708 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063495244 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.065721352 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.064814377 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063864551 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063663465 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.065570294 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.064900024 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064099689 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.065846327 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064927814 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.065632189 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065313468 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.063490825 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.063741113 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064971026 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.065432579 seconds)
  done (took 3.306122394 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066148467 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.059171943 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.059876368 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.068543938 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.058460384 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.058603702 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.058986206 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.057884245 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.058504651 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.059771527 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.059384081 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.058567985 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.059670802 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.058110662 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.05850829 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.059616127 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.063232778 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.078235467 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.058752592 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.058744781 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.062806465 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.058535741 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.058724783 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.058386029 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.059063671 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.05836516 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.058065224 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.05900355 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.058201939 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.059114801 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.058332226 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.063043131 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.063333682 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.058722049 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.068550383 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.06358928 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.058673787 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.064940281 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.059718776 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.058119971 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.058322537 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.058104949 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.058665041 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.058563152 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.069028135 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.058716736 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.05960928 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.059130667 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.058896478 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.058448075 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.058487291 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.060248188 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.067231007 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.059890977 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.058597053 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.059624245 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.058833384 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.059413442 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.058970484 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.058711152 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.058262685 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.062395329 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.060138613 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.059230396 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.078265195 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.060146754 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.068557007 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.058656429 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.059038913 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.062381149 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.059135923 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.076561296 seconds)
  done (took 5.737021632 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.071267864 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.069825997 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.077586036 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.068201785 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062583105 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059376676 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.062769092 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059242073 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068782806 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.063263785 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059575687 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.062974552 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068566099 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063655856 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060789583 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.068200322 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.063595758 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062356669 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.059282882 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063341484 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060655471 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.063110319 seconds)
  done (took 2.78229689 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.139520683 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064309066 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.103164113 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.068476379 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066983959 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.068308883 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064695733 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064883863 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065219224 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06530969 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065196902 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065022909 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067024469 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065244045 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06536517 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064806192 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064566846 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065231521 seconds)
  done (took 2.643471498 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.076475643 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.06390008 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.087174653 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.064106648 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.063971322 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063812337 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067661622 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067944437 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.063707364 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.064532785 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.068155746 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064341114 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.06419341 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06436866 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064071867 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.064623114 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.064197696 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064374251 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067941394 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067917845 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068609612 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.068130756 seconds)
  done (took 2.826827168 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078594312 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.062716836 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.078649505 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.06479537 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.05871912 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.059170075 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.064431267 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.063413168 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.064607217 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.063398831 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064141729 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.059150441 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.065125557 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.063622854 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.065789491 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064138223 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.06333309 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.063640882 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063336816 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.059053443 seconds)
  done (took 2.640116495 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071714539 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.061487394 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061301738 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066477499 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061569887 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.061530542 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.066866498 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.06179818 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.061585484 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.083467798 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.061681205 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.072716487 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.066964424 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.065018397 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.061632508 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.066741349 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.066773832 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.066734294 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.061540753 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061518496 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.083482577 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.061814741 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.066744157 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061474854 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.06181775 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.061788278 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061707057 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065379567 seconds)
  done (took 3.184550068 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064065954 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.061368021 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.062014483 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.061832191 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.061525544 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.061657861 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.061381482 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.061702646 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061629865 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.062054299 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.061759917 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.061439235 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.064414029 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.061517702 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.061616089 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.061621627 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061575946 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.061819785 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.062264324 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062150747 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.06155316 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06193713 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.061285258 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.06234681 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062168053 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.061369659 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062267235 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.061915003 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.061298113 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.061684202 seconds)
  done (took 3.214937516 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.072829556 seconds)
    (2/2) benchmarking "in"...
    done (took 0.069546072 seconds)
  done (took 1.498915457 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.061803094 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.075627253 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.05809731 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.070552629 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.066801759 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063479217 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067077388 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066991045 seconds)
  done (took 1.88023524 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.066975791 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.088461855 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.060608867 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.06119208 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.063562843 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.12509393 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.072645081 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.07231196 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074693508 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.063601917 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.061074192 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.072822473 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.059994919 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.074008632 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062013489 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.06962815 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067876119 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.078395156 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.073397454 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.058725448 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072879054 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061309006 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.058828064 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.061500392 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.060601912 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.067476747 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.075703968 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.072759917 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.068258361 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.057778236 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079169882 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.059156061 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.060296283 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068548219 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.063077486 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.058932189 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.096408351 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.059982192 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.064597535 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.059291587 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.071644026 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.080844647 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.074211019 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.07772507 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.061198201 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.061362061 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.059034871 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.061063592 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.063214237 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.068590826 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.058813364 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.066542564 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.058359106 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.060838964 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.070607806 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.060118573 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.065035921 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.069364719 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073904685 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.070330848 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.069282073 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.075201577 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.068824107 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.067297118 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.060633516 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.079405101 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.061188185 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.072954366 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074481007 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.060273543 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072060442 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.058845475 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.0580755 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.058756763 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.092595034 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.060443652 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.060008114 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.058861867 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.058921571 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.060487167 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.06887179 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064524002 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067055153 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062163481 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075324074 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.068182208 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.059284237 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.065494015 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.07646389 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.06269831 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.059004473 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.075228698 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.062742066 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.058479645 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.076699507 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.068530811 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.060374596 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.059550791 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.06204547 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.072306265 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.05988383 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.057443272 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067169116 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.060143075 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.060884551 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.06301274 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.066949915 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.058767744 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.069090248 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.063183369 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.060094197 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.057305329 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.062726429 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.059330874 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.057037566 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068012522 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.057948918 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072050482 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.064302048 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.072786499 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.072865013 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.068639503 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.073872418 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.058185254 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.057194744 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.075909342 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.067540698 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.059140821 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.076246 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.057345682 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.070907985 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.057642946 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.059228241 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.067393377 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.057175419 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.05939973 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.058148747 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.062382214 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.059583598 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.059781727 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.063796251 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.066787413 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.069950319 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.05904412 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.066954928 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.058184956 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.073414608 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.067848697 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.062434361 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.060882615 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.058511142 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.06941305 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.064523453 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.067171473 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.0572186 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.05844167 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.057645697 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.068778451 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.067651739 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.059653062 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.064200531 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.062389651 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.058163229 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.057813713 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.058816521 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.061525866 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.06083441 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.058951421 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.065842784 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.066328165 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.070309908 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06271328 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.066794832 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.056109482 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.057157247 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.058266238 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.056843741 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.062157348 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.066387026 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07230378 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.068759598 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.077646486 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.056987652 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.066992477 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.058541372 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.073473255 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.069970049 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.05786082 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.060723863 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.05599925 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.058031555 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.066882319 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.068041027 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.069734065 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.071949208 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.062148785 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.061559591 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.056745265 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.071694844 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.057671564 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.065608017 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.0667078 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.060970603 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.057983894 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.058350152 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.065774592 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.061955748 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.056535235 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.071868743 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.061529033 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.056769907 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.070661427 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.057457301 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.067612465 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.056753644 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.060860967 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.062262455 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.058927374 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.06689905 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071497042 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.055591632 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.05776384 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.07161616 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.058636374 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.058542191 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.065488866 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.072271294 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.06164775 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.065409202 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067786332 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.067274129 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.062597156 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.066907753 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.058770803 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.066944451 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.059431574 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.068918571 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.056986687 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.074754451 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.056401776 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.072486754 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.058128426 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.067860501 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.058173533 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.066556941 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.058429451 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.073917695 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.058995298 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.057656719 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.068478065 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.0560587 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.066754792 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.05724372 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.06275124 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.063820911 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.067175298 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.059223734 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.06750856 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.059068926 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.066832322 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.06199657 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.065801696 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.066966727 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.06145788 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.056806577 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.065672105 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068149697 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.06549198 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.05857515 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.058498026 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.058031586 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.065959553 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.058143342 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.058479469 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.065831141 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.062646632 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.062661528 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.059009964 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.059102023 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.058858583 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.065457654 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.066981936 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.07384252 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.065842046 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.065266898 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.066034237 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.056961828 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072546585 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.057367488 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.067597433 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.056825467 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.061882492 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.066817439 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.057013029 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.075401693 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.058569401 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.065348473 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069320505 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.066108686 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.061828588 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.074497335 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.0600177 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.065822542 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.065895681 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.06226987 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.064209839 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.05851826 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.065765258 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.067414892 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.067404816 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.058256204 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.064806521 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.066897956 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.058724198 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.062778546 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.059306691 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.066260593 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.058837441 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.056747123 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.061962624 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.069138594 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.061973698 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.062510263 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.05747871 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.056270385 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.057641299 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.062386669 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.061384302 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.065903628 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.072944452 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.056540239 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.057798222 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.056872598 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.0608806 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.073774655 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.066583694 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.065279721 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.061907648 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.056595405 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.057857516 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.058213968 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.057358879 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.06001791 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.055764531 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.056991558 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.067220552 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.058876019 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.061635694 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.057756603 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.057585583 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.066347319 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.060375468 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.057537203 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.063187473 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.056433149 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.061943062 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.055651268 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.057459874 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.060254221 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.055691006 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.059707015 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.065624165 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.071849122 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.062746199 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.06560236 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.057428999 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.063565028 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071535644 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061287436 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.056925301 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.065430106 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.056243177 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.073711223 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.065763155 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.064808595 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.065993104 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.057309878 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.07246021 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.061056048 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.065748476 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070743196 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.057259179 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.060899822 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.055699001 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071137084 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.060542756 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.05544823 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.064355622 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.064179516 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.061661687 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.067360353 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.056562008 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.063787437 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060479459 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.059757 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.057712498 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.057403559 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.064914747 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.071740456 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.057370603 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.059815718 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.064504183 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.064814026 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.06067368 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.068103709 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.063940052 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.057160989 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.058243597 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.407379241 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.062622473 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.074065943 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062369256 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.067112677 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.066365502 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.061390383 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.068410577 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.079168748 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.072091926 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.07233187 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.061224204 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.060837591 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.079868147 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.065991064 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.065397882 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.071244383 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.072882096 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075798036 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.072603129 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.080258502 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.062842891 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.06905083 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075431685 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.063087922 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.062498457 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.066501059 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.06419951 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.072227411 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072781798 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.070540796 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064637855 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.069921493 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.076341041 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.063296736 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.066802196 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.066003032 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.062004001 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.07221746 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.070202044 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.073036347 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.062914501 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.061068077 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.065401667 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.070858119 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.070038588 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.070848158 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.0625373 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.067894213 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.075115315 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.069191254 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063942637 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.060580022 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064118539 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.07122282 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.065608253 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.060953843 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.066222628 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.065584074 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.067675709 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.070873296 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.066277064 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.060518994 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.078597798 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.069065865 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.070408217 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.062449228 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.062450697 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061293475 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.060302621 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071906788 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.060031915 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.06237063 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.065443317 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.062412637 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.078474889 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.069632699 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.077725488 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061893051 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.065743132 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.060197066 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070674724 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.065485433 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.061340245 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.072335429 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.060473681 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077375464 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.073098331 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.066319961 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.060196975 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.0662946 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.068802946 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.075860013 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070374347 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.069647925 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.063852558 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070234595 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.062198555 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.071189131 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.059930298 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.059155535 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.070478922 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068795745 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.073011377 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.059748675 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.070302972 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.062215087 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068439816 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.068337864 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.061925706 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061877717 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.061920859 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069905321 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064693831 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069483162 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.065137912 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.07708184 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.06149101 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.07166621 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.069769094 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.071116779 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.073872882 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072241471 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.067918493 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.060320281 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067358467 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.068295105 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.061220759 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.065131738 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.063402926 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081827508 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.061342733 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.061190636 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074197809 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.065856238 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.0595538 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.065373855 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.213812063 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.070192301 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.060846581 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.07034364 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.063469404 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.06032724 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.064365368 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.064207678 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.058256302 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.058928634 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.059168305 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.069117361 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.063966276 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.060234852 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.07835558 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.060915488 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.068739991 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.071115332 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.066509688 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.061559603 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.058365315 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.060892878 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.07301759 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075377841 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.063214939 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068461618 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.060755767 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.068852928 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.058447801 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.068580061 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.067814643 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067999356 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.058957617 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059450723 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.074508184 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07530703 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.064362013 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.069076614 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.069278754 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.060781438 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081157804 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.068766733 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060592406 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.070352181 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061788721 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.058920903 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.058961943 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.061132229 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.071298422 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.059284938 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.062289954 seconds)
  done (took 40.577791367 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.101449885 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.061971992 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.060292941 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.060128146 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.067603705 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061181128 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.060077016 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.060864879 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.061161437 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.062533192 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.060375515 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062979429 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.066226743 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.072752646 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.068646713 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.064204639 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.060722688 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061915069 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.060875926 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061632085 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.066848979 seconds)
  done (took 2.925859029 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.065748998 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.063722436 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.063934206 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.064166676 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063675415 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.060001875 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.063839041 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060048289 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.064461526 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060703589 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065015805 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060931708 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.060958538 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.061353406 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060993342 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06216324 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065077385 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.063927737 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.06033104 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064299472 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062109789 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.064460782 seconds)
  done (took 2.900867059 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063483961 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.060243641 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.069208987 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.059384337 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.059178532 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.063013641 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.059778937 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.064991543 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.064787255 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.064630295 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.069550363 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.060715072 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.059604109 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.066011274 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.059560379 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.060797045 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103044867 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.061042099 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.06104626 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.059728281 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.062593967 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.069415585 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.05960031 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.059861676 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.065024709 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.064483358 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.060511135 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.063278974 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.061477156 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.065563495 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.061669509 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.060053919 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.070387895 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.069607066 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.065459895 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.065114848 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.062103168 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.061461551 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.060341877 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.060052355 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.069095732 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.061344085 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.060383106 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.061480717 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.06932151 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.059841894 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.05968779 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.069365473 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.059642223 seconds)
  done (took 4.649205159 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.072304691 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.112864654 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.065991805 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.093753604 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.072608733 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.065845906 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.065666276 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.09491911 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.060653808 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.061211503 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.073271538 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.073457854 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.062735433 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.063974084 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.067190617 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.062499138 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063479506 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.061996172 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.065538667 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.062371643 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.065405393 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.066846153 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.072289965 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.073235519 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063781036 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.061769589 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.06217153 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.063972184 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.0726757 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.066190873 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.064145501 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.064205365 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.072603258 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.067123107 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062074732 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.062662173 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.073325053 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.062825584 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.062665393 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.060983274 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.062535894 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.06403938 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.067218414 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.073412301 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062463342 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.067264529 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.062442974 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.06050859 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.072719558 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.062332608 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.066352556 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.073948326 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.063546265 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.063370493 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064486395 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.073589925 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.063275731 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.061638974 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.063526317 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.073058403 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.060944619 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.06351171 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.07629388 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.061998558 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.06580698 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.073732638 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.067399831 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.063634504 seconds)
  done (took 6.275013775 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.07123347 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.094993257 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07498756 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.075426167 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.070289549 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.070264488 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.070450502 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.070320998 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.070327247 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.073446241 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.070400832 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.105548456 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.066884653 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.071577715 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.070699273 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.07044429 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.070579413 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.070346786 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.070609329 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071285531 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.070415421 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.075095762 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.0706568 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.075407794 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.072860518 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.066881386 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.070090862 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.071106722 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.075447139 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.070388869 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.072637896 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.070392707 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.070452904 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.075388332 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.072841699 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.070100237 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.060837711 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.07000583 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.070131167 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.070289034 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.066816159 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.075091259 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.070537149 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.066617662 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.070150969 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.070130855 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.075033185 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.072543978 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.071673776 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073110611 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.070848032 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.075252532 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070143344 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.070626429 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.075749009 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.077467769 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.075349341 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.075526886 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.070298359 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.075252186 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.075110094 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.077648235 seconds)
  done (took 6.073829914 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075201117 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066062459 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.078500195 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.059593568 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.059512754 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068917479 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.059700006 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.060294367 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066230949 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.066254529 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067945758 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.069036535 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.071115245 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067844585 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.069047588 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.071111813 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069093604 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.069267394 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066693487 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.069329762 seconds)
  done (took 2.914445122 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076370876 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.078187189 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.065489942 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.068620236 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.065113328 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.06895154 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.064524328 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065830537 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066349013 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065705696 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.069933215 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.070030522 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066417013 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.069345823 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.070009641 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.069094056 seconds)
  done (took 2.647284618 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064788985 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.067138011 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.066164036 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.060824271 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.062689041 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.0602726 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.061234715 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.059383246 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.062392928 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.07403818 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.060567875 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.063172765 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.06123789 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.060147411 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.060328271 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.063348594 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.062372197 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.060767175 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.061118898 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.064933302 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.069427537 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.0615496 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.063393441 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.060562373 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.062852505 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.068987159 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.061885308 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.06264841 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.060458878 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.063048289 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.063039316 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.067330346 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.062841431 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.061175568 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.05969612 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.060661105 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.060758786 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.063474653 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.062936587 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.060910047 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.059344026 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.066026721 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.061078157 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.061446109 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.062177834 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.063104585 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.062214853 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.066045222 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.060725353 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.062765974 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.061214046 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.062464456 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.0612889 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.067973325 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.062944101 seconds)
  done (took 5.004817718 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078443214 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064986258 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.059441113 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.059625125 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.06488324 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.065296008 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064857989 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.065184641 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065939066 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060105182 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065947176 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.064918872 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065730972 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065233675 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065569065 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065019651 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.059442739 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.065131451 seconds)
  done (took 2.731146904 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.067864406 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065518154 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.064470212 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.061429652 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.061889796 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066157091 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.060134724 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.061258993 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061076494 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.061516307 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061450085 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.061182684 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061123451 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.061056636 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065165632 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061238939 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.060959008 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.059889651 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.061302013 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.059572794 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065736067 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.059791258 seconds)
  done (took 2.924821914 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.08914728 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.083275323 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.127065812 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.079271421 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.087615403 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.070887514 seconds)
  done (took 2.096246274 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.094213309 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.096798959 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064713377 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.064184145 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069228211 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067161996 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.0677911 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06745749 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071004967 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071290913 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067723801 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071111158 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070902505 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072889134 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06921586 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069880387 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067736627 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067822328 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06476375 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075123841 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067644184 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071240731 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067960407 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067585593 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067734527 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072817717 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071269754 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071710748 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067472527 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071494946 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069328041 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067584029 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071133227 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071495771 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.064464483 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070716339 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067428552 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074744895 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069507299 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07265358 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064372864 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069162323 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071154162 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070366793 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071471418 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067711804 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070537412 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067980937 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067761284 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076080986 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069287615 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072721988 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069635686 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071502458 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070948884 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076022037 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071182233 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072914573 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069235464 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071456352 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072921425 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069514157 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072652062 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071848782 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069439845 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073017491 seconds)
  done (took 6.232617265 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105523078 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.065160797 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06794675 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071435885 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073025208 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068641486 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067860539 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067943062 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068239515 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.065429848 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.103208049 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068036204 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07321365 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075946551 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068016365 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067800569 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067960497 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072658177 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.065207244 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076574145 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067750563 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072670924 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072287377 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072600535 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071410775 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.0692363 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067601676 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06765289 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067602808 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067780088 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070750509 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067817271 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072621115 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064915177 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072666563 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068149987 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067356488 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070624818 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067565877 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069192989 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072969654 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074926453 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067765085 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067505222 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071408863 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067405325 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067949623 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065237651 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067553888 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065013448 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071453696 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071290126 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071318531 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073096474 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06815141 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068072806 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067912692 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06797418 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068094979 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069536004 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072522888 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067918848 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076471173 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067922094 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068058179 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073278116 seconds)
  done (took 6.243357795 seconds)
done (took 128.129827649 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.219902593 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.190486841 seconds)
  done (took 1.95503103 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.074886001 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.164513 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.073384152 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.073389506 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.106656367 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.105919666 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.074292748 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.070577248 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.073708044 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.070378917 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.13794207 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.074784655 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.071450459 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.070737523 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.070654499 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.071011102 seconds)
  done (took 2.952022666 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.107764502 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.205825865 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.080830345 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.068693079 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.150369361 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.074754783 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.070798878 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.075479781 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.075315215 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.069305111 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.106482452 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.081784736 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.074018194 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.075173211 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.070439089 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.073982851 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.074927944 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.074487155 seconds)
  done (took 3.183520258 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.104167617 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.090443877 seconds)
  done (took 1.777653852 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.162001509 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.10482374 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.144503665 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.344860882 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.134812616 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.137690844 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.141807806 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.138894963 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.113766762 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.132753972 seconds)
  done (took 3.128754416 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.107514088 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.103895245 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.307550485 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.101613746 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.08098806 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.075931855 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.073782633 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.07820498 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.073747571 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.075160684 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.120361854 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.073488169 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.071194061 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.12242445 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.0963257 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.105157309 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.069519666 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.076302927 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.078094712 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.069281284 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.074614914 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.077717124 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.175980993 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.07681591 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.097585635 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.073705254 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.075307854 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.072367192 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.072423512 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.07603246 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.077442736 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.09717401 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.076627879 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.080792973 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.075180103 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.094501049 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.070261295 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.096343926 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.072688065 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.070656889 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.073435942 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.077374296 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.070744335 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.076773686 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.074329198 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.076033875 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.078071889 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.069508366 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.073320402 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.07261472 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.071177779 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.074991164 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.074327723 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.075508198 seconds)
  done (took 6.273516146 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.107910326 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.106938444 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069031525 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.111363148 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.104031307 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068967468 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.102845176 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.099635267 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.106725123 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068457913 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.06724329 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068133158 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074188523 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.077153331 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.113913258 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.106455769 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070112263 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068557098 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.106057502 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.105414748 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067136889 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.100151778 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.099237767 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.104594605 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.066964553 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068539382 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066561482 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.067837782 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.072152574 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.072769554 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067674387 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.074142941 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.078993824 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.07345289 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066728238 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.06680378 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066944355 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.073643432 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074707723 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.074127789 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.07291789 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066954648 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067037353 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067553819 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067978247 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066455904 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.073150332 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.073849267 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.0728051 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067141437 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067424256 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.066818955 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.067556063 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.073309607 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.072761293 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.074440915 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.07411372 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.067027329 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067223534 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.06885367 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075417475 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.075216325 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074315576 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067909739 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.075205775 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.06737932 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075686573 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.079323343 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067085755 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067674311 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067474815 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.06714546 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067540643 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.072882327 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.073097004 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067729083 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.067197504 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06705116 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.075510046 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.072971288 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067256899 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.072428597 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.066846214 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.066946683 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067671764 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067719569 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.072190244 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.074099131 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.067859067 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.06720794 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067445574 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067509046 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.066796829 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.072277771 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073455432 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.074225991 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.073243089 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067525481 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.073268261 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.073006638 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067851126 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.072980288 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.067786563 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067734167 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067945966 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073160702 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072769982 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.074929577 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067333152 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067155921 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.072957898 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.075059079 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066891833 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.072493047 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074725412 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.209953988 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.06775124 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076263824 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06791743 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.074682692 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067707081 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075532994 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067659024 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.07327953 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067559315 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.066665645 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066972166 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.073095377 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067767015 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.06716849 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067591458 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067195989 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.073275814 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076351682 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068101986 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.073355895 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.073032205 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.06761343 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.073283038 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067781016 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.074246595 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067586467 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067648908 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066566779 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075692959 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067454734 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.067272477 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.067184847 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.0746854 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067160208 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.075582727 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.072637978 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066563941 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077123034 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.075526185 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.072533034 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.076017287 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067795917 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067413388 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.06719621 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.070293958 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.07226341 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.073881326 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068125879 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067541503 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.072423203 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.075191486 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.066917327 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.072603057 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.072670292 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.073552553 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067345419 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067042438 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076117587 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.075143012 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.072916151 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.072904585 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073307132 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.067082721 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072509998 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07300904 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066937988 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079316679 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067106254 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.077400129 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.073139878 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.072139216 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073430099 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.074348458 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.075240304 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.075674382 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.077583286 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066937507 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067035964 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.072662275 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.067003708 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067169863 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.072917353 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067349651 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067846888 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.077678559 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067415139 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.074886074 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.066418339 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.073509806 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066361629 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067542392 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078024772 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067069451 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.06776039 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.073554243 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.067141355 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.073085944 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07568044 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.072743883 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066889927 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067915804 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.073947725 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.07450283 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066805719 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066638702 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067749781 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.072582912 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.072601461 seconds)
  done (took 18.063101474 seconds)
done (took 38.925657984 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.166834136 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.112758167 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.207675889 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.196518627 seconds)
  done (took 2.35406267 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.100848165 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.063740766 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.07831237 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.087367863 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.063408787 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.073606032 seconds)
  done (took 2.084415527 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.199631363 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.172382173 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.240290539 seconds)
  done (took 2.221367915 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.365432325 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.146415572 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.213604124 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.499672606 seconds)
  done (took 2.942120311 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.107866148 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.097477101 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.075180736 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.108522263 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.08251287 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.061006657 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.130187841 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.06815774 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.097009542 seconds)
  done (took 2.521440549 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.136370784 seconds)
done (took 13.888438077 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.098388475 seconds)
    (2/341) benchmarking ("sort", Float32, false)...
    done (took 0.136605818 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.235821924 seconds)
    (4/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.074872874 seconds)
    (5/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.490530595 seconds)
    (6/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.280395064 seconds)
    (7/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.072398289 seconds)
    (8/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.123426157 seconds)
    (9/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.237681565 seconds)
    (10/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.089598595 seconds)
    (11/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.094420977 seconds)
    (12/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.074377364 seconds)
    (13/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.069547949 seconds)
    (14/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.211186636 seconds)
    (15/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.074805264 seconds)
    (16/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.076219137 seconds)
    (17/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.107905107 seconds)
    (18/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.072932699 seconds)
    (19/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.076343552 seconds)
    (20/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.232745187 seconds)
    (21/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.181118764 seconds)
    (22/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.089874396 seconds)
    (23/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.17857516 seconds)
    (24/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.169458734 seconds)
    (25/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.065595408 seconds)
    (26/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.091462294 seconds)
    (27/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.064125519 seconds)
    (28/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.074762351 seconds)
    (29/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.213549714 seconds)
    (30/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.197214018 seconds)
    (31/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.072910164 seconds)
    (32/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.089253875 seconds)
    (33/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.072321265 seconds)
    (34/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.076327901 seconds)
    (35/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.179551941 seconds)
    (36/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.074640927 seconds)
    (37/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.063858822 seconds)
    (38/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.245639134 seconds)
    (39/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.221674009 seconds)
    (40/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.089879106 seconds)
    (41/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.154272438 seconds)
    (42/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.072467931 seconds)
    (43/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.071482461 seconds)
    (44/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.071776221 seconds)
    (45/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.145342509 seconds)
    (46/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.076503431 seconds)
    (47/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.142126344 seconds)
    (48/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.077426321 seconds)
    (49/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.077621657 seconds)
    (50/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.165759852 seconds)
    (51/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.07549762 seconds)
    (52/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.065044111 seconds)
    (53/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.244631637 seconds)
    (54/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.178619351 seconds)
    (55/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.08381546 seconds)
    (56/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.077467633 seconds)
    (57/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.198859477 seconds)
    (58/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.140804585 seconds)
    (59/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.085321007 seconds)
    (60/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.066802302 seconds)
    (61/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.215110364 seconds)
    (62/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.072983132 seconds)
    (63/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.08042089 seconds)
    (64/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.151593126 seconds)
    (65/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.13122241 seconds)
    (66/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.086584501 seconds)
    (67/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.163450936 seconds)
    (68/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.152590217 seconds)
    (69/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.176399566 seconds)
    (70/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.063936192 seconds)
    (71/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.087918239 seconds)
    (72/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.066179158 seconds)
    (73/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.06435014 seconds)
    (74/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.071936689 seconds)
    (75/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.219029961 seconds)
    (76/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.067482994 seconds)
    (77/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.08146936 seconds)
    (78/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.12946363 seconds)
    (79/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.071901655 seconds)
    (80/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.0736514 seconds)
    (81/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.063919407 seconds)
    (82/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.08684923 seconds)
    (83/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.071714228 seconds)
    (84/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.306788538 seconds)
    (85/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.065342684 seconds)
    (86/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.067020521 seconds)
    (87/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.072043239 seconds)
    (88/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.074352437 seconds)
    (89/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.085008197 seconds)
    (90/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.133009072 seconds)
    (91/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.171712377 seconds)
    (92/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.20252065 seconds)
    (93/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.068078641 seconds)
    (94/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.185587766 seconds)
    (95/341) benchmarking ("sort", Int8, false)...
    done (took 0.151514548 seconds)
    (96/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.182554102 seconds)
    (97/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.086099056 seconds)
    (98/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.077528377 seconds)
    (99/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.084508747 seconds)
    (100/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.234219252 seconds)
    (101/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.073338788 seconds)
    (102/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.163274772 seconds)
    (103/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.138403647 seconds)
    (104/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.172264941 seconds)
    (105/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.141643561 seconds)
    (106/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.074985538 seconds)
    (107/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.13745111 seconds)
    (108/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.073562308 seconds)
    (109/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.141518553 seconds)
    (110/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.063862025 seconds)
    (111/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.187074928 seconds)
    (112/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.071614025 seconds)
    (113/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.06520144 seconds)
    (114/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.140240587 seconds)
    (115/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.064168668 seconds)
    (116/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.070976814 seconds)
    (117/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.065565687 seconds)
    (118/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.064790457 seconds)
    (119/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.06381135 seconds)
    (120/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.064297323 seconds)
    (121/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.076150507 seconds)
    (122/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.136862204 seconds)
    (123/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.078887454 seconds)
    (124/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.123446072 seconds)
    (125/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.14407363 seconds)
    (126/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.064151143 seconds)
    (127/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.064060516 seconds)
    (128/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.070819722 seconds)
    (129/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.082756518 seconds)
    (130/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.064687607 seconds)
    (131/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.084214946 seconds)
    (132/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.073997152 seconds)
    (133/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.067254143 seconds)
    (134/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.08009732 seconds)
    (135/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.066208614 seconds)
    (136/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.063585769 seconds)
    (137/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.064559917 seconds)
    (138/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.066127649 seconds)
    (139/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.089705831 seconds)
    (140/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.146280213 seconds)
    (141/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.063920874 seconds)
    (142/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.082853682 seconds)
    (143/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.063910798 seconds)
    (144/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.064816528 seconds)
    (145/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.150711048 seconds)
    (146/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.183560234 seconds)
    (147/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.063740433 seconds)
    (148/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.072917658 seconds)
    (149/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.135726797 seconds)
    (150/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.064166109 seconds)
    (151/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.068484157 seconds)
    (152/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.121862323 seconds)
    (153/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.072092531 seconds)
    (154/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.062663505 seconds)
    (155/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.064701198 seconds)
    (156/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.071625428 seconds)
    (157/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.123520819 seconds)
    (158/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.073762014 seconds)
    (159/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.079336064 seconds)
    (160/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.064332989 seconds)
    (161/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.062557934 seconds)
    (162/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.063990808 seconds)
    (163/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.198196737 seconds)
    (164/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.081847562 seconds)
    (165/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.073462362 seconds)
    (166/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.072576643 seconds)
    (167/341) benchmarking ("sort", Bool, false)...
    done (took 0.141960448 seconds)
    (168/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.088535374 seconds)
    (169/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.064747682 seconds)
    (170/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.084333991 seconds)
    (171/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.064764798 seconds)
    (172/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.145109382 seconds)
    (173/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.191704517 seconds)
    (174/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.197651636 seconds)
    (175/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.071433364 seconds)
    (176/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.073519577 seconds)
    (177/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.09041889 seconds)
    (178/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.067453632 seconds)
    (179/341) benchmarking ("sort", Int64, false)...
    done (took 0.065596992 seconds)
    (180/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.168860734 seconds)
    (181/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.161050463 seconds)
    (182/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.15184761 seconds)
    (183/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.19387192 seconds)
    (184/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.063880853 seconds)
    (185/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.153173972 seconds)
    (186/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.127625725 seconds)
    (187/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.079653809 seconds)
    (188/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.063512194 seconds)
    (189/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.063062108 seconds)
    (190/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.063344231 seconds)
    (191/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.250581525 seconds)
    (192/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.069577912 seconds)
    (193/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.074466421 seconds)
    (194/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.065531307 seconds)
    (195/341) benchmarking ("sort", Float64, false)...
    done (took 0.138687423 seconds)
    (196/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.153445234 seconds)
    (197/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.236242899 seconds)
    (198/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.07238439 seconds)
    (199/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.064323723 seconds)
    (200/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.073442779 seconds)
    (201/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.064747094 seconds)
    (202/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.064816469 seconds)
    (203/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.0893818 seconds)
    (204/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.141940746 seconds)
    (205/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.062264875 seconds)
    (206/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.163405711 seconds)
    (207/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.160909244 seconds)
    (208/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.066953356 seconds)
    (209/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.064963409 seconds)
    (210/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.065978914 seconds)
    (211/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.064520485 seconds)
    (212/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.12093403 seconds)
    (213/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.063985689 seconds)
    (214/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.075856799 seconds)
    (215/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.081324118 seconds)
    (216/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.150298576 seconds)
    (217/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.145673679 seconds)
    (218/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.197195879 seconds)
    (219/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.063899957 seconds)
    (220/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.067832057 seconds)
    (221/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.068001829 seconds)
    (222/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.072896957 seconds)
    (223/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.064898039 seconds)
    (224/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.081986012 seconds)
    (225/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.073157918 seconds)
    (226/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.06509702 seconds)
    (227/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.062838836 seconds)
    (228/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.064558347 seconds)
    (229/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.066337873 seconds)
    (230/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.06427431 seconds)
    (231/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.063895723 seconds)
    (232/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.071713849 seconds)
    (233/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.092433597 seconds)
    (234/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.130985924 seconds)
    (235/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.071012926 seconds)
    (236/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.065813495 seconds)
    (237/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.064870035 seconds)
    (238/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.071582025 seconds)
    (239/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.065440236 seconds)
    (240/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.065689129 seconds)
    (241/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.161521532 seconds)
    (242/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.062700891 seconds)
    (243/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.0671269 seconds)
    (244/341) benchmarking ("sort", BigInt, false)...
    done (took 0.259906655 seconds)
    (245/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.064531625 seconds)
    (246/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.064012855 seconds)
    (247/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.084780037 seconds)
    (248/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.083220952 seconds)
    (249/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.082724811 seconds)
    (250/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.074037196 seconds)
    (251/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.067346485 seconds)
    (252/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.064224683 seconds)
    (253/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.07073045 seconds)
    (254/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.06318188 seconds)
    (255/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.064013767 seconds)
    (256/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.078905958 seconds)
    (257/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.063447913 seconds)
    (258/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.145504173 seconds)
    (259/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.064333396 seconds)
    (260/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.070912294 seconds)
    (261/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.113610272 seconds)
    (262/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.070542266 seconds)
    (263/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.068901587 seconds)
    (264/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.070910161 seconds)
    (265/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.066885653 seconds)
    (266/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.064048357 seconds)
    (267/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.064758876 seconds)
    (268/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.071385396 seconds)
    (269/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.063767204 seconds)
    (270/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.06198 seconds)
    (271/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.072959359 seconds)
    (272/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.150107496 seconds)
    (273/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.062604408 seconds)
    (274/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.064314055 seconds)
    (275/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.063746398 seconds)
    (276/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.063676325 seconds)
    (277/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.063995183 seconds)
    (278/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.063961364 seconds)
    (279/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.081205966 seconds)
    (280/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.064154009 seconds)
    (281/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.071456183 seconds)
    (282/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.067611527 seconds)
    (283/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.065205934 seconds)
    (284/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.06408063 seconds)
    (285/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.090525641 seconds)
    (286/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.064950772 seconds)
    (287/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.109289146 seconds)
    (288/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.079829564 seconds)
    (289/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.063595252 seconds)
    (290/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.217328776 seconds)
    (291/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.072374125 seconds)
    (292/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.064343903 seconds)
    (293/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.064951587 seconds)
    (294/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.072337615 seconds)
    (295/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.089774546 seconds)
    (296/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.062130514 seconds)
    (297/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.06406662 seconds)
    (298/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.063506387 seconds)
    (299/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.066295458 seconds)
    (300/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.168240649 seconds)
    (301/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.06706951 seconds)
    (302/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.066074208 seconds)
    (303/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.06379186 seconds)
    (304/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.064323828 seconds)
    (305/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.065836781 seconds)
    (306/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.064727585 seconds)
    (307/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.148930238 seconds)
    (308/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.064697654 seconds)
    (309/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.138879066 seconds)
    (310/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.065275893 seconds)
    (311/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.064589231 seconds)
    (312/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.063906662 seconds)
    (313/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.063919436 seconds)
    (314/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.14932565 seconds)
    (315/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.064919752 seconds)
    (316/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.065644378 seconds)
    (317/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.063318561 seconds)
    (318/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.064914518 seconds)
    (319/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.070071544 seconds)
    (320/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.123042661 seconds)
    (321/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.063058558 seconds)
    (322/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.246247964 seconds)
    (323/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.070845436 seconds)
    (324/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.193287209 seconds)
    (325/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.066078745 seconds)
    (326/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.077623275 seconds)
    (327/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.066160248 seconds)
    (328/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.077371367 seconds)
    (329/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.152294059 seconds)
    (330/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.06546844 seconds)
    (331/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.065786185 seconds)
    (332/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.071781822 seconds)
    (333/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.09149348 seconds)
    (334/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.181628805 seconds)
    (335/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.065351535 seconds)
    (336/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.063387507 seconds)
    (337/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.071495926 seconds)
    (338/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.064210348 seconds)
    (339/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.087138736 seconds)
    (340/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.063046939 seconds)
    (341/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.064406268 seconds)
  done (took 36.503559237 seconds)
done (took 38.154500377 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.090760848 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.07710631 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.076428213 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.073043087 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.076111982 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.074946774 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.076277491 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.074099678 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.07595444 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.074997595 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.074696454 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.063030586 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.071521764 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.078632974 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.072610907 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.079155729 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.076185844 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.078759635 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.064112929 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.078102779 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.091031749 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.076053214 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.072494821 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.077770001 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.064144999 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.072984921 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.087245147 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.084617424 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.070280713 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.073583092 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.071197921 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.082034972 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.071283817 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.070411753 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.073410418 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.069597928 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.073149796 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.070767145 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.086935153 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.069425915 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.063878049 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.075443185 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.070997518 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.071970223 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.072132708 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.075715883 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.069436736 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.077186341 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.063968666 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.075413207 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.086885707 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.068845921 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.07041345 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.072045607 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.069268246 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.073003506 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.070001762 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.074852761 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.068851803 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.075223357 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.074722421 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.072157072 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.063633023 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.072492868 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.070862594 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.07099764 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.062082688 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068503274 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.063469303 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.063614295 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.062931992 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.072154451 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.070647541 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.068434132 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.062881158 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.063873678 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.062528789 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.075755854 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.0694581 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.073203949 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.064059686 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.068660838 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.068578913 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.064172638 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.068452375 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.075276001 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.063165535 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.063870227 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.062789957 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.078246278 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.069667366 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.063315978 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.075045768 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.068240336 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.068367448 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.063695697 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.062641758 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.067943843 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.071571188 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.063357163 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.062576597 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068551554 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.068507004 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.072615719 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.063828992 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068394632 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068330515 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.062375741 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.072491458 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.070568016 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.072289353 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.077102889 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.072648099 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.07548203 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.064133299 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.062360197 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.073369948 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.063894298 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068403223 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.071569775 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.068749311 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.071375047 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.063697362 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.062668028 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.067970164 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.069586126 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.063577536 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.063628691 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.0635382 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.072847162 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.070341086 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.061950269 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.063607337 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.071933216 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.072524846 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.062582281 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.062903891 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.072367283 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.063752566 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.069087529 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.069058915 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.072216281 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.062688718 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.063281998 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.062834453 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.063019059 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.063052473 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.072705913 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068201541 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.063721159 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.071567461 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.214688556 seconds)
done (took 12.577906563 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067431857 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.105692693 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.077701076 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.080140888 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.076655931 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.065117359 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.06795851 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.082237477 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.0678222 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.088518015 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.08973609 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.085792882 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.094485593 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.062723762 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.064434985 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.065539042 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.06284792 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.076223511 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.081228512 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.087536608 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.100201489 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.064211066 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.079870642 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.083776325 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.078377963 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.082195227 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.065476274 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.065247251 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.067520922 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.082348781 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.089914019 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.064035457 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.065110401 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.08177527 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.078932915 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.071804722 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.06510752 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.070713897 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.067633684 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.06398867 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.066383664 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.082042833 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.070565475 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.070732531 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.065405942 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.065493008 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.064600798 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.071046312 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.081389243 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.069813138 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.075896811 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.082825832 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.066180465 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.064792602 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.062905927 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.071342976 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.06476022 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.06529916 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.064696114 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.064100166 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.064708278 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.06648021 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.0691451 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.070095199 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.067417131 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.070040876 seconds)
  done (took 6.518406896 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.082786549 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.090102935 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.078789054 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.078964737 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.06383641 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.064819233 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.065002856 seconds)
  done (took 2.265237894 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.067106535 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.07200613 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.076578335 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.076654084 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.085497778 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.07392316 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.065136571 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.095692661 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.064165632 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.072728754 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.080171779 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.07763675 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.067914251 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.076784961 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.065348951 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.07597101 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.065003026 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.071680798 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.072233573 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.078063224 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.068543656 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.093660818 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.077755658 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.065235893 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.077931213 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.071643233 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.066614045 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.0651796 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065229971 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.06446338 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064162925 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.086512704 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.070801791 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.078772014 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.06482791 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.063612517 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.068514066 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065091027 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.068376191 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.071115137 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.067928945 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.064473507 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.064888642 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.064541423 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.065168701 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.068746321 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.065576813 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.064522403 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.063950841 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.071725099 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.063389591 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.07018366 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.066415818 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.068910925 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.06885047 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.0682804 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.071522564 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.064512085 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.07149054 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.070524275 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064074049 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.077073312 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.075717391 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.068067623 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.075952308 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.072595607 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.070670502 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.067811088 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.064053334 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.063963813 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.06457681 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.075827628 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.067690025 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.066930987 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.065154995 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.069317282 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.06849196 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.079055228 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.079744291 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.077730309 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.066621421 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.064448609 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.068108026 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.079668009 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069103196 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064050507 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.065310162 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.064098391 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.069402567 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.064404107 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.069432166 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.064350065 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.071032097 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.067268838 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.066356308 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.072352424 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.064309718 seconds)
  done (took 8.525967396 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.069034448 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.066859846 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.065382691 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.065536422 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.065693739 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.065423283 seconds)
  done (took 2.162392825 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.090145049 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.065167389 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.076293959 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.064798721 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.086531988 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.071020819 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.071652804 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066653032 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.081087857 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.075380219 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.070868675 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.073785851 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.073631083 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.066244454 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.070651923 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.066075103 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.071029083 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.067558217 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.074631256 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.0672106 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.081000237 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.066831398 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067001411 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.07657251 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.068041224 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.065564522 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.066109038 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.074648338 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.074304726 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.066324475 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.066183634 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.067628555 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.073060045 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.06641059 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.070673885 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.072947564 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.064702992 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.070419039 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.067544902 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.067829998 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.073315448 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067040402 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.066972713 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.070034366 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.066365399 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.072957166 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.069890116 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.068319142 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.070825382 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.07002482 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.070287146 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.065631004 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.0676637 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.07025452 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.073403979 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066782111 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.070287494 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.070787303 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.066428177 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.073612127 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.065164003 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.068083126 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.066855164 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.067830651 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.069639488 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.070151026 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.073588134 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.066427077 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066806894 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.070779554 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.070379496 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.064654192 seconds)
  done (took 6.778083474 seconds)
done (took 27.968165544 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.543092374 seconds)
  done (took 2.25069225 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.892707636 seconds)
  done (took 2.653370051 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.110981585 seconds)
  done (took 9.878016802 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.333991572 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.395736391 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.72832063 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.129870393 seconds)
  done (took 3.384628971 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.73875845 seconds)
  done (took 2.508599304 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.229834093 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.217694749 seconds)
  done (took 2.216524227 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.334959055 seconds)
  done (took 2.093297964 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.146567879 seconds)
  done (took 2.909526577 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.232295187 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.159817315 seconds)
  done (took 2.153923202 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.532622031 seconds)
  done (took 2.289691338 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.263052159 seconds)
  done (took 6.032937409 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.233828649 seconds)
  done (took 2.041370015 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.231352993 seconds)
  done (took 2.00362248 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.012198766 seconds)
  done (took 3.776057969 seconds)
done (took 47.953764623 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.084425692 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.084372502 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.084458141 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.079168461 seconds)
  done (took 2.07044272 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.074138667 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.068332801 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.071468389 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.071556478 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.069057842 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.070019371 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.070787581 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.067493914 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.069061006 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.068047591 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.066869201 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.068045461 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.070780638 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.068030075 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.070432073 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.071401607 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.067870117 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.067568964 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.070513838 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.06765687 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.070665643 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.067941494 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.066295739 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.067807602 seconds)
  done (took 3.428013123 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.078791857 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.071519967 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.073212064 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.068917698 seconds)
  done (took 2.064838686 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.076504284 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.074012123 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.082918069 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.087547496 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.073994316 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.075066863 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.080965734 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.081803755 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.06380439 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.084752761 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.065907779 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.064534991 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.064696866 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083505077 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.080560138 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.060304553 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.061720812 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.074867615 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.074235619 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.076518034 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.066465588 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.063507078 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.073853838 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.074935637 seconds)
  done (took 3.538360796 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.082594407 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.063458447 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.078587971 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.088217885 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.089735677 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.063105873 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.076319232 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.090531495 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.125208286 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.063458587 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.069642861 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063352581 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.102224059 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.063427278 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.078254571 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.106244633 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.109981154 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.067637983 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.096480999 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.063484095 seconds)
  done (took 3.42701019 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.075691064 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.067209824 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.067973576 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.063471459 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.074899251 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.070907575 seconds)
  done (took 2.205605498 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.068228123 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.06595006 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.068028458 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.070036369 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.065865638 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.065457401 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.065238244 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.06386569 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.063901998 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.064576568 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.064674537 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.06493982 seconds)
  done (took 2.568644534 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.148552501 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.066820592 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.06775651 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.064508692 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.065431202 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.064714384 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.079307384 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.066474194 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.082386081 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.064747665 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.064955037 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.067049101 seconds)
  done (took 2.679307415 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104500919 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108190771 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.142162481 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114211268 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114016334 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094148033 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.122387509 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.092925689 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.155970287 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.133495809 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113741606 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.091017689 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084122212 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.067042411 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096674091 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116046775 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133527039 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.070506992 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110659888 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.161658031 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127979656 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.131947093 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145012209 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114009997 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087268247 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145026531 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094747596 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099947507 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.121932563 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123484516 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116933254 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.094881218 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.069401986 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.068532992 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146159588 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.100295722 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117863855 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.090793051 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101963984 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086031973 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104273719 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.067279982 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.083289119 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.110816334 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082240213 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127888218 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.085908418 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112132959 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078745537 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.134742386 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120551791 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096326078 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.082996848 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101263155 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.288954888 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109263822 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.131118229 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104548552 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080312978 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.115935521 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.100023696 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097756785 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104590319 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077689464 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.173046513 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086536697 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.108795529 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108961137 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.091033224 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.092045996 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104678061 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132440563 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122640123 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.12270828 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135042225 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092978006 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119099683 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.097222011 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.126026494 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102357815 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.070773404 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.118356684 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.126289455 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.096365828 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098320047 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.126523367 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.089635888 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075364889 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.096787487 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.115801281 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078708875 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.109503632 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07844156 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.106182078 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130213311 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094481441 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108867093 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114540227 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075927211 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151153512 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106025088 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070541559 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.114774176 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111162787 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153376021 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091782067 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.073612389 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.095963658 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.257490231 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.147058933 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104779477 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079125313 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10802848 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136836716 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093019645 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.165949816 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093406939 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137397875 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109742573 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085015235 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072700597 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.087951775 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109426494 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10522904 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109699118 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08818873 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.081929855 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085162312 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109336705 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089807357 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078943978 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.111335328 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.098881932 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.072755918 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085981161 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.076956678 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139147996 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.076212684 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134908701 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122640794 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.076452144 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103976207 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.095640034 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105246269 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.096119474 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114730659 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137536464 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.113502923 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.087638912 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.09107963 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105812132 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.140682574 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.126744886 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090255661 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.074412118 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097300267 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109010888 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.094895464 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122793514 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.097605483 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106307149 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100616099 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138341939 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141609416 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097151487 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097549877 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101907405 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.280364114 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074968689 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152466921 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10141008 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115526653 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082577755 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137687692 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.11160647 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087070208 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085602752 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098307345 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.101871991 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103236233 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140376213 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.09361344 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.070660259 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090287694 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141173878 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07408603 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107445582 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.088514411 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.091031782 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116529512 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.090643375 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079448309 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.066442006 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124995262 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.155802489 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.068552538 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.111898213 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.10940246 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100047675 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.118451825 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.067700841 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115861171 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.13522571 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115296087 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137840351 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143623638 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113763642 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116199104 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.112021245 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103340334 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077926629 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.123128211 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.131901324 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094211607 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090747145 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133274093 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115532281 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.133961006 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.113044227 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109830102 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.100176587 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.263872321 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100309013 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.099564688 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14079103 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117918299 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.121986145 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083350883 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103259188 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114987603 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132245501 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079774023 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138561343 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.081273315 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114961206 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.075488311 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.12059364 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.077393891 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.109112538 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.07757956 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.09713766 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.067511251 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.072211009 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.137969913 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.109689935 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103135052 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097296931 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.134680515 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.133882957 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.078565271 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105696707 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113071459 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.0987044 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113528935 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.1066762 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.086360757 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092927632 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.10690447 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.082921094 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.079617085 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.111933686 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091736107 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124269263 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083548503 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072882974 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137877131 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102435515 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093216932 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07580271 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106269798 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.119395118 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090681317 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085404861 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112971774 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101824629 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139228603 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.088597162 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.095815374 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.121571027 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077503108 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.088764899 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.066974887 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.08243457 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.073720321 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.284304893 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.074507251 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113558239 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.067024019 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.127661983 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084043085 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.090743174 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099503071 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108618905 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124812921 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.092213527 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137031785 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087115511 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115343565 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104742137 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091879504 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086312236 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100690827 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.099112481 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.119424448 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.093832879 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119765032 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140476462 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102008657 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.139173017 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089309611 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119535045 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104199867 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.121864016 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10979466 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144471827 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135536028 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11006663 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109709735 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07317899 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092814839 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103659235 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.109059728 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.171838376 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123048698 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.070468632 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104084011 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092249365 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106295947 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102904181 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080700399 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144117306 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099695793 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.086107534 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110925705 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.089037857 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101711495 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073501419 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092098439 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.096203242 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.24826498 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096516025 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113262077 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.124920385 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110597828 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.140416668 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.09780643 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.090978414 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.116473243 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108188361 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107911235 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084029375 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084619347 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134986006 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116010654 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.125735166 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.097748796 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106540847 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108828294 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098176418 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122049999 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105427023 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.123920415 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078369114 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.074301001 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.066505059 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.070284845 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.120702747 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106132413 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109508522 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096344974 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.070539364 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101111794 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103661426 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069966466 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086582033 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091664965 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.09708677 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.088884378 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104671728 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.111571637 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.088755263 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102096795 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097487945 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143863759 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.098528835 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087343213 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141583814 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14786763 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08615227 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091011279 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.06981279 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077390353 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11154941 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147390999 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.148902807 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.075041903 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084116398 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.082832619 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.083267812 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.06886578 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.242123458 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.088077414 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10264238 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097203274 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.110771408 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102753748 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073928834 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101363977 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097676332 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090816215 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.101550098 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115310671 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.122070063 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.137955812 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107669616 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105144523 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074023749 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.078594769 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.073906351 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.07760812 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09949599 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.077372426 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074459307 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140212204 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.090072173 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102079322 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106541572 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086327332 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074052366 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131760621 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.067321601 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13241003 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.069926518 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080446121 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.080830431 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077310688 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091612189 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136155216 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107415331 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11088377 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104148761 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102574533 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138564816 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153883078 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078329532 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.141233679 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074001962 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073861648 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.074132428 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111663406 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087990078 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112729685 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13783487 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088682049 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101320588 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075398458 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140480747 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.096502498 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101724642 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084817716 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.076441054 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137857808 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.076515558 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.076590045 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086222005 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.106740364 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.069348086 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099687001 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081359028 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.076318581 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136812027 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.62669477 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.08666922 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.072706773 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09202512 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.136501735 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122247722 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090953179 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10440233 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.113891796 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094703984 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.090208271 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102791723 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.178215535 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07115328 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090117069 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.098260155 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.093358156 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096871657 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.093232089 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.084273388 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.087767149 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.082634581 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.075796903 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102432451 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084835855 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.091553993 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101867524 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.07974037 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.082208079 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.124634709 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.098109601 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.077435534 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.083535462 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.104266029 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084701462 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095550882 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.065947855 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107949423 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086761349 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110656616 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.090328485 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.102620311 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120700365 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085903469 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129995736 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.10010609 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.11616114 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083599088 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.074625351 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117725938 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.083276494 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073809887 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.414406177 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.094428105 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.095297378 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105969907 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.098176391 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114258461 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117061233 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111710685 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097702547 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078832822 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09926669 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.102042432 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084673831 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078045826 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.07435377 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.076480859 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107237655 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08493206 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.083495893 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114645795 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.088634848 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.102902895 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.099312484 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.121307256 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082376604 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100398197 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10855173 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091411185 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109229123 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099432122 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.127414592 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.173608418 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123920469 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127758832 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.132620663 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.0757134 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.074245203 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.067577063 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113804121 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078287917 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.088264762 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079630247 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132302371 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.080816511 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110336877 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.230541408 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.078696523 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.092396926 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094766769 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.068360897 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081565755 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106091452 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085722349 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079134563 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117112398 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081855259 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125950831 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109152597 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097680546 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09329188 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079194295 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111853494 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.102887494 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.126621115 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093005714 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.073491171 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.276361318 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101757719 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135095278 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.07177772 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07928139 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127042991 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101650921 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12953156 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078074198 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146432272 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.140962914 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.097399784 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131077307 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069113815 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08132529 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086691691 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.123091232 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082856678 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108409156 seconds)
  done (took 66.441985962 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.151389606 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.142606487 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.088813682 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.118847729 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.200478419 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.205850139 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.130255573 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.106059927 seconds)
  done (took 3.108070715 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.068640128 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.082003318 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.078652787 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.203344694 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.093569052 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.065560177 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.070850579 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.079763335 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.065228298 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.06490261 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.099605169 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.065671294 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.065914679 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.375324958 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.064794977 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.069864648 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.065282221 seconds)
  done (took 3.645381507 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.335671894 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.100931151 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.232209803 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.360344057 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.146175129 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.554048133 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.074645642 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.080876516 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.694115092 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.366984152 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.140561545 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.086724289 seconds)
  done (took 20.124725418 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.076565389 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.076750307 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.076337311 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.073421948 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.072674358 seconds)
  done (took 2.319020753 seconds)
done (took 119.414420588 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.083726584 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.169661251 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.065899409 seconds)
  done (took 2.223082474 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.082802637 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.078114932 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.078602727 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.075921078 seconds)
  done (took 2.273074351 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.074663925 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.0745987 seconds)
  done (took 2.098332119 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.216763177 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.173813226 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.088135738 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.082407564 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.077547932 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.078148349 seconds)
  done (took 2.198182155 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.072177184 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.070406254 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.069491048 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.06986473 seconds)
  done (took 2.225617498 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.068538698 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.065982953 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.068304181 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.069634089 seconds)
  done (took 2.216980443 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.085649678 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.083889936 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.113427427 seconds)
  done (took 2.228913815 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.083797373 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.08178201 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.075894034 seconds)
  done (took 2.197837464 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.10968433 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.094507211 seconds)
  done (took 2.153052573 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.080053044 seconds)
  done (took 2.03379991 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.090715969 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.095123921 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.135976972 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.104070962 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.142982558 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.123401014 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.075267178 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.076355472 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.071754373 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.076228114 seconds)
  done (took 2.942236746 seconds)
done (took 27.303753743 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.079143953 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.371097756 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.357501101 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.084898206 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.671344076 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.355081592 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.000322486 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.088954169 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.098720634 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066125035 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083415101 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.647548171 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.996311958 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.328795293 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.978596064 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.327213285 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.651283959 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.066724916 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.065657497 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066557697 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.989648678 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.065929379 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066165339 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.066364876 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.648350966 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.371408566 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.066845694 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.327723444 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.065776578 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.06972818 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.354901072 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.06742334 seconds)
  done (took 16.466649237 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.070283487 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.120815046 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.070196323 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.082064097 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.068199843 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.067673792 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.068922112 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.066466085 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.110062135 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.0665975 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08312814 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.065911224 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.070198315 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.067382282 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088671987 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.06592025 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.068871904 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.066617391 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066483802 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067476593 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.085950219 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066482245 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067555742 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068073364 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.066943297 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.079756022 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067603912 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066463228 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066322167 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070314712 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.07074901 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067463075 seconds)
  done (took 4.31563439 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.121503737 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.123711596 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.070988242 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.107196002 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.115834566 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.067725844 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.148276096 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.08921396 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112740025 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066719887 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08328857 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066187959 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.101870187 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.067338518 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.086142245 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066257776 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069068427 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.066978978 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066025465 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066581152 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.08513105 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066023685 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066857604 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.066754669 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.066711398 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.080976803 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067021558 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066499296 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066409951 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070399681 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.071577982 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067935821 seconds)
  done (took 4.57843296 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.069608303 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.069289014 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.075937282 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.078794449 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.06441535 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.066727764 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.067960763 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.06433783 seconds)
  done (took 2.531201459 seconds)
done (took 29.86473698 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.079360999 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.067105454 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.068781294 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.085005003 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.072370786 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.068342124 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.062391622 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.072607814 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.069279395 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.06937307 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.071008917 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.065192469 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.06821152 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.06324134 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.07019994 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.064232723 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.070297427 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.068117165 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.068496003 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.070018838 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.066374585 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.069751225 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.072486672 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.068430253 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.068499404 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.068353846 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.07306879 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.070062846 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.064270939 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.066795447 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.06587657 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.078161241 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.070030366 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.070287292 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.064293866 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.063665283 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.06831772 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.066574 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.070056341 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.072869164 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.066159419 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.072770932 seconds)
  done (took 4.841747474 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.089103669 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.091670434 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.084092603 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.07922656 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.104823143 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.079192285 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.088689264 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.077352863 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.075616443 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.08815261 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.071445991 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.077072012 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.079018979 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.073309384 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.076764976 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.072125111 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.077759902 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.071041635 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.075875931 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.075994435 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.089181011 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.069156776 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.076756974 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.077338695 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.071059377 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.076994988 seconds)
  done (took 4.058378087 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.072438701 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.086534677 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.090458744 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.138547083 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.107087972 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.080592426 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.080745017 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.091696594 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.09844888 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.065957542 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.069955519 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.091789761 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.09458843 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.072657404 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.104157925 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.084133685 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.078095582 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.067530571 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.072644249 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.100372946 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.088689285 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.084320689 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.098164104 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.086144382 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.065769002 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.074849371 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.07311422 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.081915385 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.073224693 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.078557771 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.070538838 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.072708924 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.066601449 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.078379988 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.07041914 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.064030851 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.087773274 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.078951981 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.080290671 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.104638942 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.075838552 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.067560334 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.096299736 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.131773239 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.065683449 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.068670817 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.070075969 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.078709624 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.067437281 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.096135864 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.084317737 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.065743716 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.084681473 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.067521866 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.067589467 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.082695753 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.067889474 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.110254587 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.078450882 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.072045682 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.086368224 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.070964082 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.086996544 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.06584687 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.077326686 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.067127629 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.067398602 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.064469222 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.101729043 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.073048585 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.117427849 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.066669844 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.063668789 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.078555826 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.077358664 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.072406414 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.065709842 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.084917314 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.077895142 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.069450749 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.077249374 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.06862943 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.068774856 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.101458658 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.064643442 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.063736922 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.064029278 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.067779544 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.069221426 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.066245257 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.078750901 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.06538081 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.068951542 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.080966906 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.065730328 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.066308303 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.068269745 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.066887329 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.065049722 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.07630718 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.069575652 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.067749694 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.078283374 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.066752571 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.068924674 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.080694883 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.075074673 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.064983824 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.066341881 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.06829654 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.067131953 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.070330883 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.069481667 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.067890287 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.072912652 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.073051275 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.071863128 seconds)
  done (took 11.062739754 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.164927884 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.15078041 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.066923494 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.146527186 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.074315763 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.070740437 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.14772963 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.086149986 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.066572976 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.067763062 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.065858206 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.094757728 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.089889032 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.101159593 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.070713567 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.066935152 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.09201588 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.099604931 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.149400422 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.145176889 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.090574137 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.074024582 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.069021606 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.067977626 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.067791703 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.075421914 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.082537407 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.07456441 seconds)
  done (took 4.634992936 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.07595388 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.0824939 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.070885603 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.090291945 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.084310933 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.066969551 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.068628904 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.067672703 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.083307915 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.073353243 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.066521283 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.071162815 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.070023258 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.067510202 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.067330904 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.073148107 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.073017509 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.064966734 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.070289192 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.070726344 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.076575924 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.091642706 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.070365232 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.066295556 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.069015789 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.066563468 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.07326982 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.075677837 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.065998922 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.09648965 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.063445775 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.0703565 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.080571292 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.067569154 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.065920002 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.066937391 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.066775324 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.066145146 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.066496342 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.064468217 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.064062198 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.071537071 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.065121195 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.071720406 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.082794218 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.073872494 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.06718404 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.069168597 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.069098559 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.06357152 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.069756697 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.069897441 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.069102089 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.074646982 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.069965233 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.068867939 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.067531557 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.096410293 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.072657025 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.066202986 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.065423553 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.064372783 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.067763193 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.074523563 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.082589528 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.067967117 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.064464715 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.066459155 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.071210419 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.080538281 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.065715165 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.071389512 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.06339556 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.066638199 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.06855801 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.069288812 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.067773466 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.064928782 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.066287518 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.066583143 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.067133642 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.066007596 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.06612288 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.068578476 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.063918891 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.064282484 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.067033031 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.067671825 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.072574841 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.065081051 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.069171338 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.067575229 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.065242358 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.068852447 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.072053391 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.069442531 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.08639495 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.074739562 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.066849987 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.064400095 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.080922974 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.068318486 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.065389983 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.071756779 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.070783572 seconds)
  done (took 9.438126918 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.091071383 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.067899639 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.086153661 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.092549922 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.07664356 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.071534635 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.08058888 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.066990724 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.082789218 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.065629455 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.075352595 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.064275254 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.079889169 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.075441364 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.068079248 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.076768117 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.068750152 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.086909815 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.081740809 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.064684894 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.075002533 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.07850641 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.078844395 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.0845742 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.083710519 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.085280884 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.07877053 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.068743364 seconds)
  done (took 4.187877075 seconds)
done (took 40.191949556 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.053648904 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.22382609 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.053051437 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.302108296 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.110346577 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.27135428 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.147337937 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.042629268 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.16050415 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.096506517 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.370460007 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.442268148 seconds)
done (took 69.315922247 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.15288264 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.181897651 seconds)
    (2/2) benchmarking "String"...
    done (took 2.249346952 seconds)
  done (took 6.42299924 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.642272815 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.040260856 seconds)
    (3/3) benchmarking "different"...
    done (took 2.086298226 seconds)
  done (took 8.738895769 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.141588226 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.673878949 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.28663768 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.03951964 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.042440232 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.402793278 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.831704102 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.498908421 seconds)
  done (took 33.750208859 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.250636518 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.24585005 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.776784457 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.826119297 seconds)
  done (took 17.11843102 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.649393777 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.309013855 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.307824716 seconds)
    (4/4) benchmarking "different"...
    done (took 2.298238931 seconds)
  done (took 11.603814736 seconds)
done (took 89.994620909 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.046373624 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.417331233 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.092447575 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.201184112 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.070870627 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.07779044 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.043177625 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.080726114 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.047022768 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.04786766 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.493651113 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.042803871 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.07789583 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.078566091 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.04300045 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.10750635 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.543403417 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.048338356 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.085759141 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.795482697 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.577852156 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.016794149 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.061930055 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.126712345 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.418762732 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.075320299 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.494505214 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.053710106 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.66617797 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.057477313 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.265952879 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.051865627 seconds)
  done (took 214.285904068 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.05113675 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.136240057 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.215291483 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.090019446 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.642432933 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.236546591 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.19868237 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.675344216 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.04984383 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.061415976 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.342785174 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.048220649 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.361832093 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.993116799 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.045166188 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.091371323 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.318073948 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.35260576 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.047481144 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.238413622 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.063089408 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.319777465 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.274107973 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.308653668 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.058667424 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.130936467 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.073916128 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.060332221 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.231273154 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.300183192 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.071441608 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.057678506 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.248519524 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.919629355 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.059548657 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.055310579 seconds)
  done (took 181.413098677 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.22506556 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.059191367 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.1074641 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.176877104 seconds)
    (4/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.048349393 seconds)
    (5/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.828564704 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.811285353 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.048223199 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.049828614 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.051676291 seconds)
    (10/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.056559843 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.054820468 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.122326306 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.75162758 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.05968096 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.048703867 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.048765996 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.631735502 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.053675551 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.04957288 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.050405687 seconds)
    (21/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.050716385 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.115132549 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.421082112 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.1874236 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.048184615 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.063177228 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.188832813 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.060904572 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.047856524 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.188914445 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.052279269 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.131734932 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.187175693 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.061272934 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.133529572 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.055804697 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.560077696 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.048729443 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.049652108 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.052762164 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.113946677 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.047678306 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.173929012 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.140915906 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.050210705 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.064988546 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.122221609 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.734448467 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.051774212 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.05309799 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.050980199 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.053066486 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.052579086 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.656814433 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.053276944 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.07742454 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.686717123 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.049198834 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.046755277 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.042809402 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.050271923 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.052630344 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.059087802 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.091444421 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.865920252 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.345353379 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.437674104 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.86882567 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.051620233 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.381506548 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.110367463 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.055034592 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.131855306 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.051676904 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.053234691 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.051820684 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.050291827 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.150946922 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.139135633 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.050468522 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.190875565 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.053602061 seconds)
    (83/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.05294218 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.052657563 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.369691666 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.634670016 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.051748046 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.069745275 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.110451324 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.053394543 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.056091724 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.061353174 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.148971277 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.05224746 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.054624105 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.043784703 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.157839464 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.052614647 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.253993585 seconds)
    (100/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.054229514 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.272380048 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.12312551 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.294750897 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.293233287 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.058673074 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.056048724 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.069330044 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.055543393 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.051371743 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.06700371 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.053419546 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.053650338 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.056828491 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.056986281 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.054673013 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.062950465 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.069019328 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.052864377 seconds)
  done (took 442.568038603 seconds)
done (took 842.5162401 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.71817498 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.896194141 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.675822082 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.712590493 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.679902324 seconds)
  done (took 15.671575957 seconds)
done (took 17.657414986 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.081001566 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.07246333 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.051176937 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.077650183 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.078329584 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.073600452 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.109159928 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.101287354 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.096055852 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.075928522 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.081394243 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.079673564 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.080129537 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.097716935 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.086110028 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.085111142 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.079786387 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.06949531 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.083808627 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.076984489 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.081870388 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.072476596 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.076958695 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.082844917 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.087772857 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.081852608 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.07178825 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.082129687 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.080907757 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.082530532 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.118372432 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.086921416 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.111317352 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.089374902 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.084989877 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.09090686 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.076967557 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.103076373 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.076946628 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.11575889 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.090857182 seconds)
  done (took 87.472475687 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.069545196 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.201545173 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.278899447 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.097483368 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.067158933 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.277141596 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.121256901 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.189808439 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.179730005 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.282012441 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.283444089 seconds)
  done (took 26.041845102 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.067582533 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.203066451 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.277131497 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.102923753 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.088798109 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.280301795 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.128859441 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.194875488 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.19982762 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.284475651 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.287544618 seconds)
  done (took 26.115113827 seconds)
done (took 141.617394055 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.437692047 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.379627236 seconds)
  done (took 6.806631808 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.063823535 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.079184306 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.215466683 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.063275191 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.062676107 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.066116815 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.064576576 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.063823641 seconds)
  done (took 18.669356714 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.06323265 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.060012967 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.060160909 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.062785906 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.06070589 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.061718633 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.062094038 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.06277652 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.063840238 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.06242213 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.064780619 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.062197377 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.060525654 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.061045684 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.062516784 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.062582925 seconds)
  done (took 34.984317662 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.059171633 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.062028579 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.062457329 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.06626334 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.060747399 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.06317218 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.064798563 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.062838855 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.06193897 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.063915552 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.062446849 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.062364167 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.060185159 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.064498721 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.063622217 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.062252835 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.062381334 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.061070782 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.064861064 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.062798435 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.064466681 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.06424753 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.066934419 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.06324083 seconds)
  done (took 51.506108677 seconds)
done (took 113.966614314 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.350684104 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.703149219 seconds)
  done (took 9.046610486 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.068297772 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.061944866 seconds)
  done (took 6.198249153 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.063828881 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.063237573 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.064295622 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.062811125 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.064328296 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.061277021 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.063342603 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.061736108 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.062165025 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.062912395 seconds)
  done (took 22.620723825 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.063106722 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.063647744 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.062548853 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.062241541 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.065090815 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.062188635 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.063266748 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.065335002 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.066457836 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.064761223 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.063913706 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.065004345 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.062381673 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.064924957 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.065990459 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.052874277 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.063304318 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.062934174 seconds)
  done (took 39.131730854 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.064161294 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.06288177 seconds)
  done (took 6.120419297 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.064902668 seconds)
    (2/7) benchmarking "second"...
    done (took 2.064052655 seconds)
    (3/7) benchmarking "month"...
    done (took 2.065222783 seconds)
    (4/7) benchmarking "year"...
    done (took 2.064704148 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.06599612 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.06557425 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.063415667 seconds)
  done (took 16.448861212 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.065455049 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.236810679 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.282663961 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.702075811 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.064035563 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.068151123 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.913267993 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.067496883 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.069797887 seconds)
  done (took 22.46094074 seconds)
done (took 124.019443135 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.9197897 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.067058881 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.37998642 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.21882029 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.094418192 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.368303519 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.097347594 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.611299748 seconds)
done (took 44.752898026 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.170670932 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.06206273 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.092882374 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.090299297 seconds)
  done (took 23.235064074 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.067162421 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.38036817 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.084395852 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.068075441 seconds)
  done (took 23.60108343 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.442358866 seconds)
    (2/2) benchmarking "read"...
    done (took 2.413672567 seconds)
  done (took 6.857956069 seconds)
done (took 62.863862249 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.066206588 seconds)
    (2/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.06530434 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.067160518 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 2.066980466 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.067112957 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 2.066443575 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.066665734 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.066373112 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.06868782 seconds)
    (10/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.066913003 seconds)
    (11/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.067102311 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 2.069131764 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 2.067557273 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.071708287 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.069158925 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.068828141 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.068558076 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.068560693 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.068534104 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.068989085 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.068427659 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.06865326 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.069115802 seconds)
    (24/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.066833971 seconds)
  done (took 51.626802385 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.070683172 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.066510457 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.068890405 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.069701094 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.072076638 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.070769709 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.070020555 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.072058486 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.068475225 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.069739983 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.068908782 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.070270729 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.070839887 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.068678756 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.07062994 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.069735229 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.070597861 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.070814165 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.068682174 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.070170622 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.071078531 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.06985195 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.069988012 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.069729772 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.069608603 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.066917855 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.070867732 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.069026477 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.067894999 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.072570645 seconds)
  done (took 64.094141437 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.068986731 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.071553322 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.069635326 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.068983331 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.071390227 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.073833552 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.070308368 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.069019149 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.068823975 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.071545949 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.073975554 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.071496615 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.071611764 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.070822781 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.071862406 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.068848734 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.072262869 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.069566385 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.070855774 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.07006369 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.072154203 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.069581107 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.070115847 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.071402369 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.071353409 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.071721164 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.070968323 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.0700673 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.071238029 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.070428055 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.070975647 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.06922863 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.072363928 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.072963223 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.072137623 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.071697427 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.073371096 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.075534378 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.08024262 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.07253714 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.072078286 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.073254834 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.073533037 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.073512538 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.071208818 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.072250306 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.071402395 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.073644183 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.071321118 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.07284677 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.072921965 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.07289142 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.071552573 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.07382457 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.070773501 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.069952699 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.072967291 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.071854155 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.072694769 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.072367673 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.074344824 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.070618961 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.072314984 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.074350442 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.071500923 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.073615714 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.073626562 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.073006103 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.073842065 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.074188396 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.073160748 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.075503444 seconds)
  done (took 151.184003124 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.074599195 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.074314029 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.072520878 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.074735132 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.075006281 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.077272376 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.074183753 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.074758948 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.076583188 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.075786204 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.07382423 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.076009242 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.074529484 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.076446172 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.077225176 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.074765018 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.075261153 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.076649313 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.075409204 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.075478406 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.072608354 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.076441514 seconds)
  done (took 47.656973227 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.07567699 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.07488175 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.073406894 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.074512872 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.074399284 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.07553018 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.077004134 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.075025766 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.076105944 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.071471406 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.052862848 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.061887831 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.074675759 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.073558676 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.074200173 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.075180135 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.07664122 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.077349921 seconds)
  done (took 39.315907926 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.075098972 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.077659169 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.063733774 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.041911527 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.077059818 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.077161987 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.076234573 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.077110037 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.075390745 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.073012599 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.076355006 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.075469403 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.078091153 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.075794532 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.074056829 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.075548154 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.063419721 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.07887326 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.07752344 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.076896962 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.078986668 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.078379316 seconds)
  done (took 47.625904835 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.078034011 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.078612504 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.076802017 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.079172977 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.079361438 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.079103537 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.077662674 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.077225756 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.078654643 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.076454546 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.078062382 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.07824297 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.079261666 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.07588171 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.077188735 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.079065616 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.077176112 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.078316955 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.079828353 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.076173444 seconds)
  done (took 43.564550641 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.079745764 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.078816736 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.080968544 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.081069205 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.079672849 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.075803232 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.080934096 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.081125325 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.080904159 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.080319663 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.079318185 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.07928136 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.082749553 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.080623841 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.081888236 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.082732747 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.082526928 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.084157533 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.080056318 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.083392253 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.081497794 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.080103525 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.08161388 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.080753176 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.079752947 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.080209425 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.080611324 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.080886111 seconds)
  done (took 60.270145616 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.080808664 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.082621482 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.078965121 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.081900304 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.07749186 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.081513814 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.081817447 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.080869815 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.081102928 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.081993754 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.082322318 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.079134885 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.081260249 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.081002371 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.081261392 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.081217841 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.081947377 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.080629816 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.081899732 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.081961313 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.079702929 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.082251862 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.080838355 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.082394194 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.080600763 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.080778781 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.080240162 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.080760487 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.081288888 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.08198924 seconds)
  done (took 64.442997769 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.101689339 seconds)
    (2/2) benchmarking "in"...
    done (took 2.102837672 seconds)
  done (took 6.211940328 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.08293077 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.078972181 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.082557785 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.083094159 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.083339541 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.083557723 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.081954066 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.079522062 seconds)
  done (took 18.667181065 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.082895077 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.084916943 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.082783393 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.081134488 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.082630647 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.090818751 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.081003716 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.083179125 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.084204862 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.084864224 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.084985098 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.085762613 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.091520948 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.087119852 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.082089255 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.083478698 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.083831646 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.085959488 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.08430333 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.083758407 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.085024839 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.083945202 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.082637139 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.084398766 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.082763236 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.08609047 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.093470354 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.083433255 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.085437564 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.083169444 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.089153235 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.083387333 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.086884314 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.087906529 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.083306504 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.082570396 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.092648393 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.085284765 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.083197252 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.082001391 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.084970555 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.085607248 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.086212392 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.093073208 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.082807839 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.084963897 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.084822375 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.08458592 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.084358686 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.090843408 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.093069306 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.083307986 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.085125139 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.08446983 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.087754249 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.083905732 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.083230303 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.087053939 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.092791746 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.093457924 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.08917671 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.106508112 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.095682048 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.083992122 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.085908402 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.096384045 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.112281735 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.087652929 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.088035228 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.086613282 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.092596026 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.087505511 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.086026463 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.08551039 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.100627071 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.095712492 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.085429704 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.086387366 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.085406263 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.086672764 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.086286808 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.087478988 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.085794804 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.086235516 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.096933887 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.114619748 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.08592941 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.085016773 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.089654877 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.087057464 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.090816494 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.089666959 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.08753083 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.085707757 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.086418188 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.086865473 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.087201569 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.085711248 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.084162678 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.096225106 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.085229579 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.084167386 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.089561905 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.094696959 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.084234101 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.087185503 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.086499338 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.088519341 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.095740005 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.088362755 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.085025205 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.084591342 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.089939875 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.090749452 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.086662915 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.091849189 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.098203716 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.09556758 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.088029744 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.092429548 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.089717111 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.091491396 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.096452672 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.116303378 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.087269732 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.093638456 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.095183696 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.102968926 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.09441198 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.088620734 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.088908412 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.088729821 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.088308483 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.091346526 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.087516759 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.08800767 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.087197029 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.088685784 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.087538329 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.090289799 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.090447294 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.090714775 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.091625338 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.087761581 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.093099916 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.086804337 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.090483523 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.097020109 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.08877151 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.085935153 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.087667216 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.091125548 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.088734107 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.089245512 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.08819917 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.087461188 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.087548449 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.088695058 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.089510792 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.089122769 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.088607111 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.087126676 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.094407589 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.089536494 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.089181474 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.091081535 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.091024095 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.088567235 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.089446078 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.086604658 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.094857488 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.088678727 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.095128223 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.088403974 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.090417708 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.091466898 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.090817907 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.090180277 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.094845233 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.104631513 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.094155866 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.102433548 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.089687778 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.098547813 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.090520256 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.091905798 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.094463782 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.091304486 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.091186219 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.089785212 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.09024964 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.094847291 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.112455956 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.102923642 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.091977571 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.093265831 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.096937145 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.095934862 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.098105673 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.090880388 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.092202522 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.091705205 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.09155 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.093616869 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.0917965 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.093784223 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.09189836 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.090397894 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.093760427 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.092340241 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.092205131 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.095112222 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.089922903 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.095249736 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.090434256 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.09154328 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.09287023 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.088258297 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.098537075 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.090523729 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.091237968 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.092686277 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.092330217 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.09140281 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.091264652 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.094698248 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.096179282 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.091072493 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.093347985 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.09949209 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.089809255 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.093533125 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.09364007 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.091245203 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.096547632 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.094497498 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.09506204 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.103046544 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.094921884 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.093499117 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.097522756 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.092588666 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.096145443 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.0957983 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.093848875 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.09376597 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.095065322 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.093458608 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.093215505 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.100829345 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.092329781 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.09366918 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.095865255 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.098216876 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.09664859 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.094933066 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.094048278 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.09654405 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.103661298 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.098466124 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.095782095 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.063755783 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.096555338 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.094290703 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.097838285 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.093294524 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.109161052 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.104482125 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.093899111 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.094808032 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.093784333 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.096546007 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.095603891 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.095768959 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.103019553 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.09387953 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.095972099 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.099643056 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.093736558 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.093900437 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.099438904 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.096488592 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.09968528 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.097334424 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.096163807 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.096511394 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.09395228 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.098394892 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.093936102 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.096553384 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.098604221 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.096516464 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.09635266 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.094596939 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.100293978 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.094048706 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.097523158 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.101899993 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.09547077 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.095151249 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.096590367 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.095166037 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.097122416 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.098210023 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.09480608 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.098909889 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.096696479 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.099562263 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.10772721 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.099110456 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.106267645 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.097852332 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.107811078 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.096435435 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.092425792 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.096976078 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.101689443 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.10586242 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.097007129 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.095839915 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.103066684 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.098901409 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.096688485 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.100872917 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.094546991 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.097961715 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.096093552 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.095156323 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.103502118 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.099107829 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.095411301 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.095427116 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.096752542 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.097663224 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.100031124 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.09988191 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.097876056 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.097191903 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.09707016 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.098091259 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.096872532 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.097966223 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.097210895 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.098248744 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.098760571 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.104481385 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.09837443 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.097627685 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.102597649 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.098652337 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.107832615 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.100397827 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.102093698 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.101481056 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.099165288 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.103345247 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.101686529 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.100926023 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.0995338 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.099237722 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.100580717 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.109271102 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.107142091 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.103983594 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.101277192 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.101442104 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.102357216 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.109764872 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.126382382 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.100104352 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.103663861 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.105050709 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.108741028 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.101851926 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.106915029 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.105429046 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.110516804 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.102683875 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.100203322 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.104168327 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.114490562 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.101077032 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.100304263 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.098603929 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.104814898 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.104348534 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.099982844 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.100270254 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.103925831 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.102549585 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.112604963 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.098974777 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.103567381 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.102576274 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.100804596 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.104132023 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.10260288 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.104203438 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.104345758 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.102018582 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.102646337 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.103986626 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.106904452 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.101760793 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.105603592 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.115597842 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.1026535 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.102697604 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.10199582 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.103171774 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.10704165 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.102605471 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.087730296 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.106216375 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.101791215 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.104015269 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.107865789 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.112723851 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.105229625 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.102499078 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.101574133 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.103922544 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.10105832 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.103689621 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.105509248 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.112691994 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.104486292 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.114786764 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.113307943 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.101263263 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.104077367 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.099709081 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.087665854 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.099105037 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.102505772 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.103791253 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.077711964 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.106438353 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.104570535 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.103727899 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.101944543 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.109715632 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.102722437 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.102939525 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.102966434 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.10281105 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.104106522 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.105057268 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.10961318 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.101577761 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.101913228 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.102534898 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.104917605 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.105814448 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.105863466 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.105064653 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.103326328 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.106176287 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.1047088 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.107765231 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.104448278 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.103740342 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.105989309 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.103463323 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.104020832 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.103425767 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.105753079 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.104764856 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.10866056 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.114120442 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.103779068 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.107047585 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.107044881 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.108633208 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.106471906 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.106171319 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.107613017 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.10635024 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.114075186 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.104402859 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.106911106 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.108096138 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.105443797 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.11170313 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.105888889 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.110417077 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.105347183 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.106525365 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.102851696 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.109177782 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.117992501 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.111727175 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.108703864 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.11430043 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.111298228 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.104171582 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.106309404 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.105208772 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.106218664 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.107226421 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.110233963 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.107558099 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.109421068 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.106179132 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.105704433 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.106124363 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.107579123 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.105440825 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.105837926 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.111182007 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.117056342 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.113437495 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.10482443 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.109063395 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.104841425 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.110122435 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.121042329 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.107699056 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.106363032 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.106825393 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.108949691 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.109129002 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.11695536 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.117349315 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.114450428 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.107334521 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.111871886 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.128249988 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.11018418 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.117557397 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.143423712 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.108550471 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.106860585 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.107522095 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.108844222 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.107617884 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.110302141 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.109403686 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.114439898 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.107600707 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.107992413 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.115740022 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.107330481 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.106123466 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.106847351 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.109930128 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.116336544 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.108968719 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.116812992 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.109349895 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.110052947 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.106729995 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.112938866 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.109504577 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.1068381 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.106809924 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.110381754 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.107617711 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.108644371 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.116974108 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.108900953 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.109314935 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.122784903 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.12081627 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.111143959 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.107359359 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.11008047 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.115058248 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.110364008 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.108963358 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.11228414 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.11782632 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.113648397 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.115675071 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.109326937 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.108966111 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.110741692 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.108234002 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.109845212 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.120550607 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.120991891 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.113271616 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.109188044 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.117409103 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.107875978 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.114317584 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.1143612 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.111042951 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.110537976 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.108176306 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.109707119 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.109475953 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.097514076 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.11303146 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.118757876 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.110173103 seconds)
  done (took 1252.742568579 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.109165729 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.110251607 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.109037059 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.11227038 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.111096286 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.111001231 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.111600409 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.111657255 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.110670778 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.110140182 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.10988787 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.110350542 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.111390033 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.108977726 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.109502388 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.10835419 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.110864793 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.108945031 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.109996926 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.109688864 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.1104848 seconds)
  done (took 46.351377961 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.110982574 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.110888646 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.110663149 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.1106495 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.109324389 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.112074825 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.111283883 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.110952839 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.110612645 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.111012739 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.112278906 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.111642727 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.111359615 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.111855868 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.111069054 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.111716837 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.112474132 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.111090134 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.111696521 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.111512166 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.113265222 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.11146067 seconds)
  done (took 48.488434078 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.111316789 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.112510703 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.114628368 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.112142555 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.112407753 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.115564936 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.112117076 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.114669778 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.111623128 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.114078508 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.121316652 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.121309174 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.111334435 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.116190209 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.113117937 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.112749082 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.257477718 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.114336214 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.114102716 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.114493196 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.113434105 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.119960713 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.111863436 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.114976275 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.113986345 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.113624443 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.11299012 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.115451701 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.114235083 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.115424339 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.120186501 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.112796346 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.115704583 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.118040237 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.113954586 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.115549472 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.121104412 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.114494921 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.112586217 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.113080611 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.125839046 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.142030514 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.114261481 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.116215555 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.122253147 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.112644955 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.112065853 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.116816792 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.124545005 seconds)
  done (took 105.85632273 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.114098652 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.113743878 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.114956296 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.115034258 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.116063307 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.114164891 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.114667844 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.114186108 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.113605737 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.115815415 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.113650361 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.114584539 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.114937189 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.115307303 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.115092461 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.115256573 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.112944113 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.115391257 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.114490295 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.115613497 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.117289693 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.112937129 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.112786325 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.114897105 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.114410895 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.114572585 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.115170068 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.115900372 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.116223987 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.115167526 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.11481608 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.114058766 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.115238099 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.114162041 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.114573054 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.117233047 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.116926136 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.117453995 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.116513684 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.116261195 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.114797583 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.115434475 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.116896445 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.1167374 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.117529707 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.115457996 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.114441016 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.116655368 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.116263066 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.116946672 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.116040079 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.115803902 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.103265804 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.113686679 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.115964987 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.116387339 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.114644895 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.115099465 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.116118858 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.114018755 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.114929868 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.115711468 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.116925079 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.116939538 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.11616339 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.117284899 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.117623862 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.115468966 seconds)
  done (took 145.876218625 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.117977003 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.119027884 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.119777253 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.117356656 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.118320213 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.118234674 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.11856521 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.118668459 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.119049019 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.119377588 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.117433931 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.116836609 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.116993083 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.117792266 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.117392369 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.117985747 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.117512517 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.117861188 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.117668099 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.118633425 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.120458516 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.118855019 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.118461574 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.119530205 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.117366062 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.118107824 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.118883071 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.119748547 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.120042827 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.118353909 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.105766695 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.118025281 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.11824173 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.118478949 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.11879288 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.120675871 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.118227426 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.120313566 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.118231026 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.118528981 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.120565749 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.118924239 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.12076736 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.120933959 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.12098774 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.120070534 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.120224674 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.122780991 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.120541416 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.120194532 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.118536742 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.120051665 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.119881339 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.119987493 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.120018832 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.12076465 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.119829976 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.120944607 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.119218765 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.120947279 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.118475467 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.12005523 seconds)
  done (took 133.418654021 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.120808701 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.120324994 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.119627293 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.120817628 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.120552425 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.122874805 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.120279748 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.121301109 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.121727515 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.119718353 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.121843034 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.119163811 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.120834484 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.12080938 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.118695142 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.12141765 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.120764964 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.120605932 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.122398516 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.123588987 seconds)
  done (took 44.465639889 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.120467142 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.122503859 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.120381686 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.120585967 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.122301472 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.119722833 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.120851306 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.121078609 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.123080304 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.121956848 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.123045532 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.121532279 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.12316584 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.121806211 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.121247033 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.123875495 seconds)
  done (took 35.994886727 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.122779274 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.123229982 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.124121467 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.122894612 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.123172911 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.1243833 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.122407396 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.123455865 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.124824076 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.123373527 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.126020163 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.124800177 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.12277126 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.126808521 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.124534035 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.122623121 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.124382072 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.121845861 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.124299598 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.126639002 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.125097731 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.125235806 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.124699035 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.12419944 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.125720034 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.124475119 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.126685516 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.123993588 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.123290186 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.125084493 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.12636454 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.125070915 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.124172693 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.125502355 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.126655835 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.125927506 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.126720088 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.122700682 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.124458994 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.126977827 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.123431623 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.126523233 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.12555067 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.125429651 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.124618108 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.126768669 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.125587578 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.126464322 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.126593948 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.125796235 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.124428312 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.125906527 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.126026016 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.12549308 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.12644232 seconds)
  done (took 118.917874152 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.12507281 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.125968705 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.12622844 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.12576151 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.125616395 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.124949593 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.124998118 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.128748945 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.126526327 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.12611619 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.128921571 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.127065297 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.128135978 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.125382165 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.126952845 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.125493971 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.127812625 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.128603381 seconds)
  done (took 40.331096453 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.127626242 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.1284388 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.12756597 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.126519255 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.127470176 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.128888302 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.126422216 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.126652229 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.126614579 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.128880792 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.126789186 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.128438136 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.127314218 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.126657884 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.126596804 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.128845797 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.126302904 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.127309839 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.128937887 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.129355453 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.128227619 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.129563942 seconds)
  done (took 48.863402217 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.12823886 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.129049873 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.145243383 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.15156952 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.151528882 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.169051486 seconds)
  done (took 14.927440438 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.127944137 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.128038813 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.129954023 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.127784496 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.129863036 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.128990117 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.095042436 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.12836229 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.129500086 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.130007643 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.12911649 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.128410322 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.129344549 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.130740953 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.128730129 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.129542183 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.128267497 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.13001781 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.115726025 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.127483276 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.127921874 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.129265733 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.129654728 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.12801439 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.128830592 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.126775654 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.129134214 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.13045353 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.128850612 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.130929055 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.129199811 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.130460494 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.128769962 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.131369249 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.130763371 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.130262228 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.130771014 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.129293583 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.130878616 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.131017076 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.129625836 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.130368105 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.129241331 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.131386818 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.129939936 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.128751796 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.131451157 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.13053122 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.128595272 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.131024027 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.128753893 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.125730016 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.129504491 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.128674722 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.131240173 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.130531831 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.129669174 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.130769648 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.128694718 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.130708542 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.130289666 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.13092681 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.132418379 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.132218291 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.133893909 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.13159638 seconds)
  done (took 142.567472975 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.131382869 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.132248308 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.131736852 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.132894416 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.13383382 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.133144284 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.131388538 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.130622135 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.131219143 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.132657725 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.131305745 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.133103296 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.131685737 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.131952574 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.132241516 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.132493336 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.131911723 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.131411104 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.132252214 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.13353665 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.131938375 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.131811751 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.132691884 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.132474647 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.133404436 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.132631352 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.132671273 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.131144467 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.131307694 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.132729778 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.132435666 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.132206774 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.131228882 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.130379745 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.132921456 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.132082021 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.132643726 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.131666605 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.1343379 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.132057822 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.132733138 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.131519334 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.134195124 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.133147558 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.133852033 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.132247511 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.132185303 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.133153414 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.132375589 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.13445693 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.134751232 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.134083831 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.134527862 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.133540439 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.132521083 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.134409569 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.133961988 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.132114747 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.133973005 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.134369264 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.132567391 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.133610737 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.134012397 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.132748448 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.134724988 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.134933943 seconds)
  done (took 142.818330266 seconds)
done (took 2918.2848791 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.170205039 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.167894116 seconds)
  done (took 16.397725031 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.299082566 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.195941455 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.321806386 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.245353204 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.161662128 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.153779494 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.137826066 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.140275272 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.234368225 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.139015485 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.1692595 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.136975089 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.137333058 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.139803157 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.140050841 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.13953177 seconds)
  done (took 56.96359232 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.138582884 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.145266549 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.139932497 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.143574407 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.149039529 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.212216386 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.160326715 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.14333585 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.154646893 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.174463339 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.158425746 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.14842997 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.148730269 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.145463874 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.227667223 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.185849254 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.196364971 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.214665105 seconds)
  done (took 41.046717929 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.221991989 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.151895903 seconds)
  done (took 11.445873796 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.137979254 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.153717268 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.166771873 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.145195934 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.159103346 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.155818165 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.156028443 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.150485007 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.142738289 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.17094572 seconds)
  done (took 73.615748645 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.146324463 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.14626046 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.405731382 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.152035969 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.149081817 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.16448772 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.139514029 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.171783705 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.14162002 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.14245652 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.151837908 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.412421852 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.151420772 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.145188806 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.48202061 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.152877416 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.148984803 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.173402534 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.173200855 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.150907694 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.152732213 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.143379121 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.307989875 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.864308456 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.140130806 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.145038832 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.152463652 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.139606488 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.141366596 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.146704034 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.145163513 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.145587331 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.143861371 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.144099619 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.147571662 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.149028824 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.643008172 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.158962173 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.15207191 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.21935721 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.193175746 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.154064768 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.952399287 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.144540519 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.140843728 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.151237493 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.845769991 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.223352004 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.144287446 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.321187608 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.507463823 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.157221754 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.307469892 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.305585547 seconds)
  done (took 147.899176141 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.139353611 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.39021516 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.294159786 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.142643805 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.395917076 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.351076259 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.138621221 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.185635888 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.141090572 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.341505006 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.389943856 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.240591304 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.140245934 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.138070091 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.144330915 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.136157162 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.292188443 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.208513894 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.141364934 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.137273115 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.164585077 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.323490743 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.259835807 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.133632579 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.164463535 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.347995355 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.262432836 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.242015816 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 5.097330761 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.138077956 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.200745569 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.141425778 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.140437251 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.136022155 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.292528528 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.234408928 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.227248269 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.141805764 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.141535664 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.140476387 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.817249378 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.340405642 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.23485557 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.264712095 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.386810624 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.354585542 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.830896501 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.137225807 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.773071698 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.307326652 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.346862574 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.353872624 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.258664413 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.142398739 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.691690487 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.138651615 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.141109264 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.363057441 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.35929948 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.240189343 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.143054824 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.14145039 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.143060953 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.380292145 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.1412294 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.23085923 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.143271418 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.137417898 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.214572233 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.236959215 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.366545833 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.36268643 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.172032754 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.47431535 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.678400376 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.346223402 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.206688021 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.362654207 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.144331514 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.139842804 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.221511755 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.996686051 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.394074885 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.384050553 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.340893798 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.170388914 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.800636249 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.141734092 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.329679921 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.334811501 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.37545183 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.38773719 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.37703993 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.730601464 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.142761153 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.14167733 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.522317738 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.25285172 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.116840259 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.502345451 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.370595932 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.653468731 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.170157022 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.431304073 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.271236902 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.144331957 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.79216374 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.146277396 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.348693419 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.188150158 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.148170424 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.145318123 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.338817744 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.052674079 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.14725265 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.113536154 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.205476207 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.145144119 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.348193235 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.146861788 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.387824969 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.145341725 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.379878922 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.768187427 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.175456745 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.372375064 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.388660925 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.81048878 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.439758868 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.387961043 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.259755947 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.417763472 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.147554568 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.145123895 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.409306776 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.145994349 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.145824005 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.316319245 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.148916819 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.291840691 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.64348301 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.416249443 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.164882335 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.376746524 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.146479045 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.386547586 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.175580733 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.19774417 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.15032256 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.272276006 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.147914211 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.084623168 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.307473996 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.147913468 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.144043392 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.87475462 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.144570736 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.299966534 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.374450404 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.164685433 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.215974957 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.712367421 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.144767036 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.232127609 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.165819661 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.424206115 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.143444776 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.394344684 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.145561985 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.633759111 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.145439922 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.384124735 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.381363326 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.145993994 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.146438637 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.99195787 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.145218814 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.144440912 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.301459538 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.584563094 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.061444877 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.346117494 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.149491766 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.269972955 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.144130836 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.488121365 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.487888937 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.14288635 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.145993021 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.147228651 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.145088554 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.146685135 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.406826351 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.173418197 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.579796021 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.284909969 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.403817733 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.45088272 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.348636143 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.187665834 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.146610958 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.369675062 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.148819547 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.206865671 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.148151589 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.164090779 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.375931027 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.146940168 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.350810031 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.387444451 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.130442966 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.194753775 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.151665111 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.147299945 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.130919263 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.296232894 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.232316764 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.148170016 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.148226427 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.263893825 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.265500333 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.331826911 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.993791681 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.298672073 seconds)
  done (took 964.694782218 seconds)
done (took 1314.125665702 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.147822432 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.147485268 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.144946043 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.149350758 seconds)
  done (took 30.663156874 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.149783317 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.14885621 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.151113458 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.14968334 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.150198567 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.149059628 seconds)
  done (took 14.974710697 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.149022379 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.146472096 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.148585135 seconds)
  done (took 23.517249535 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.600564439 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.568785505 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.223745776 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.291777354 seconds)
  done (took 11.759934472 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.15356131 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.149384097 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.149627106 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.154203114 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.154417155 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.151200399 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.153543045 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.151678933 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.153379924 seconds)
  done (took 21.455941441 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.313431568 seconds)
done (took 108.758180659 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.222176613 seconds)
    (2/341) benchmarking ("sort", Float32, false)...
    done (took 5.811643591 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.27657195 seconds)
    (4/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.55805734 seconds)
    (5/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.147354022 seconds)
    (6/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.463204677 seconds)
    (7/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.238082635 seconds)
    (8/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.870309614 seconds)
    (9/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.415301541 seconds)
    (10/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.855843237 seconds)
    (11/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.147683461 seconds)
    (12/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.164182987 seconds)
    (13/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.227149844 seconds)
    (14/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.410141555 seconds)
    (15/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.149784913 seconds)
    (16/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.220036898 seconds)
    (17/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.823369564 seconds)
    (18/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.17239537 seconds)
    (19/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.16519516 seconds)
    (20/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.432600401 seconds)
    (21/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.236064982 seconds)
    (22/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.548989199 seconds)
    (23/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.363072762 seconds)
    (24/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.38346253 seconds)
    (25/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.14698016 seconds)
    (26/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.068565904 seconds)
    (27/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.314348215 seconds)
    (28/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.400040116 seconds)
    (29/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.347673218 seconds)
    (30/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.543246559 seconds)
    (31/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.159822905 seconds)
    (32/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.479667965 seconds)
    (33/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.163128625 seconds)
    (34/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.278642648 seconds)
    (35/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.249710226 seconds)
    (36/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.293570469 seconds)
    (37/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.451633506 seconds)
    (38/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.92426583 seconds)
    (39/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.148653802 seconds)
    (40/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.462108337 seconds)
    (41/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.282805168 seconds)
    (42/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.1634557 seconds)
    (43/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.235575219 seconds)
    (44/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.379871515 seconds)
    (45/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.56445251 seconds)
    (46/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 3.025768029 seconds)
    (47/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.541975194 seconds)
    (48/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.152696562 seconds)
    (49/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.777094443 seconds)
    (50/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.610590349 seconds)
    (51/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.149918218 seconds)
    (52/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.605847738 seconds)
    (53/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.461377422 seconds)
    (54/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.365373237 seconds)
    (55/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.426861178 seconds)
    (56/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.566411912 seconds)
    (57/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.462244867 seconds)
    (58/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.312043141 seconds)
    (59/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.359542121 seconds)
    (60/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.286884653 seconds)
    (61/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.354716106 seconds)
    (62/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.235215298 seconds)
    (63/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.39514451 seconds)
    (64/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.12183715 seconds)
    (65/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.280078947 seconds)
    (66/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.605382823 seconds)
    (67/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.265321176 seconds)
    (68/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.154848811 seconds)
    (69/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.153976521 seconds)
    (70/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.46642984 seconds)
    (71/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.059006673 seconds)
    (72/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.869495903 seconds)
    (73/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.566919618 seconds)
    (74/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.277786472 seconds)
    (75/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.190945951 seconds)
    (76/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.212342397 seconds)
    (77/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.151756807 seconds)
    (78/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.157205502 seconds)
    (79/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.164677555 seconds)
    (80/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.286698745 seconds)
    (81/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.151832737 seconds)
    (82/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.206993264 seconds)
    (83/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.175748534 seconds)
    (84/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.38112228 seconds)
    (85/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.581122778 seconds)
    (86/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.258005813 seconds)
    (87/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.421937338 seconds)
    (88/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.164681342 seconds)
    (89/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.401901542 seconds)
    (90/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.251971861 seconds)
    (91/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.617207026 seconds)
    (92/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.39591423 seconds)
    (93/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.251660694 seconds)
    (94/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.695736034 seconds)
    (95/341) benchmarking ("sort", Int8, false)...
    done (took 5.106682471 seconds)
    (96/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.376876207 seconds)
    (97/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.515360095 seconds)
    (98/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.758853492 seconds)
    (99/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.262284042 seconds)
    (100/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.154084707 seconds)
    (101/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.187821653 seconds)
    (102/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.295131936 seconds)
    (103/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.613802064 seconds)
    (104/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.160396209 seconds)
    (105/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.346918308 seconds)
    (106/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.159403189 seconds)
    (107/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.299249318 seconds)
    (108/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.908839855 seconds)
    (109/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.498982188 seconds)
    (110/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.569575115 seconds)
    (111/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.151697688 seconds)
    (112/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 3.724059588 seconds)
    (113/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.150380072 seconds)
    (114/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.436169799 seconds)
    (115/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.356197735 seconds)
    (116/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.248755498 seconds)
    (117/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.185457316 seconds)
    (118/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.5656098 seconds)
    (119/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.550686277 seconds)
    (120/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.02685066 seconds)
    (121/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.992121177 seconds)
    (122/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.369729385 seconds)
    (123/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.461132457 seconds)
    (124/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.158063583 seconds)
    (125/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.433068228 seconds)
    (126/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.375858634 seconds)
    (127/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.393221615 seconds)
    (128/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.292965884 seconds)
    (129/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.058198138 seconds)
    (130/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.389798416 seconds)
    (131/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.057463755 seconds)
    (132/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.459172052 seconds)
    (133/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.43661095 seconds)
    (134/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.994602964 seconds)
    (135/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.937629139 seconds)
    (136/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.567606513 seconds)
    (137/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.152590725 seconds)
    (138/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.064907935 seconds)
    (139/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.977968309 seconds)
    (140/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.16607945 seconds)
    (141/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.199427509 seconds)
    (142/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.708696192 seconds)
    (143/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.549717879 seconds)
    (144/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.359961718 seconds)
    (145/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.189392258 seconds)
    (146/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.302794274 seconds)
    (147/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.442467108 seconds)
    (148/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.171342409 seconds)
    (149/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.241516142 seconds)
    (150/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.466526383 seconds)
    (151/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.285663882 seconds)
    (152/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.09768096 seconds)
    (153/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.278351467 seconds)
    (154/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.262822892 seconds)
    (155/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.260777185 seconds)
    (156/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.253009062 seconds)
    (157/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.011583094 seconds)
    (158/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.463561861 seconds)
    (159/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.161547194 seconds)
    (160/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.468074909 seconds)
    (161/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.24431713 seconds)
    (162/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.288520851 seconds)
    (163/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.941592895 seconds)
    (164/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.236134053 seconds)
    (165/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.409904527 seconds)
    (166/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.055546561 seconds)
    (167/341) benchmarking ("sort", Bool, false)...
    done (took 2.478342122 seconds)
    (168/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.05611454 seconds)
    (169/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.472454998 seconds)
    (170/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.186629064 seconds)
    (171/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.661740301 seconds)
    (172/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.156227725 seconds)
    (173/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.556098778 seconds)
    (174/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.595664604 seconds)
    (175/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.17276369 seconds)
    (176/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.174092494 seconds)
    (177/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.869423529 seconds)
    (178/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.377647321 seconds)
    (179/341) benchmarking ("sort", Int64, false)...
    done (took 5.788785205 seconds)
    (180/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.079018078 seconds)
    (181/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.284211553 seconds)
    (182/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.270904745 seconds)
    (183/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.487406411 seconds)
    (184/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.565506669 seconds)
    (185/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.053951539 seconds)
    (186/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.29440694 seconds)
    (187/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.259205855 seconds)
    (188/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.31203285 seconds)
    (189/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.379985271 seconds)
    (190/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.450862986 seconds)
    (191/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.295537981 seconds)
    (192/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.271897376 seconds)
    (193/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.162966345 seconds)
    (194/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.575663748 seconds)
    (195/341) benchmarking ("sort", Float64, false)...
    done (took 5.868294367 seconds)
    (196/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.160020901 seconds)
    (197/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.283463455 seconds)
    (198/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.28283914 seconds)
    (199/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.942020275 seconds)
    (200/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.174285669 seconds)
    (201/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.421999615 seconds)
    (202/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.605170554 seconds)
    (203/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.181729018 seconds)
    (204/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.296496509 seconds)
    (205/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.313883129 seconds)
    (206/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.357558725 seconds)
    (207/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.333557815 seconds)
    (208/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.938986056 seconds)
    (209/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.59212695 seconds)
    (210/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.163241776 seconds)
    (211/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 4.617154748 seconds)
    (212/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.160992897 seconds)
    (213/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.303168567 seconds)
    (214/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.191340508 seconds)
    (215/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.544179305 seconds)
    (216/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.145148363 seconds)
    (217/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.162750206 seconds)
    (218/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.351054235 seconds)
    (219/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.572648366 seconds)
    (220/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.361637671 seconds)
    (221/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.538745975 seconds)
    (222/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.172831406 seconds)
    (223/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.29549105 seconds)
    (224/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.245606837 seconds)
    (225/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.166971744 seconds)
    (226/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.417651964 seconds)
    (227/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.183397222 seconds)
    (228/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.366364607 seconds)
    (229/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.324672484 seconds)
    (230/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.565722531 seconds)
    (231/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.318939567 seconds)
    (232/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.3125086 seconds)
    (233/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.287685009 seconds)
    (234/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.266949895 seconds)
    (235/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.178011412 seconds)
    (236/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.199620912 seconds)
    (237/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.265477999 seconds)
    (238/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.241535373 seconds)
    (239/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.161105024 seconds)
    (240/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 5.076640897 seconds)
    (241/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.29326635 seconds)
    (242/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.249128406 seconds)
    (243/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.224269867 seconds)
    (244/341) benchmarking ("sort", BigInt, false)...
    done (took 7.163756939 seconds)
    (245/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.354721286 seconds)
    (246/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.804257403 seconds)
    (247/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.170669755 seconds)
    (248/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.429143259 seconds)
    (249/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.799662924 seconds)
    (250/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.472290762 seconds)
    (251/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.560927411 seconds)
    (252/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.277174983 seconds)
    (253/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.313680041 seconds)
    (254/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.347229934 seconds)
    (255/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.514090185 seconds)
    (256/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 3.006664076 seconds)
    (257/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.415661562 seconds)
    (258/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.189717418 seconds)
    (259/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.549842787 seconds)
    (260/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.176638681 seconds)
    (261/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.291107963 seconds)
    (262/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.165776366 seconds)
    (263/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.179398674 seconds)
    (264/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.182128406 seconds)
    (265/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.243106032 seconds)
    (266/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.165038691 seconds)
    (267/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.547276076 seconds)
    (268/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.194623494 seconds)
    (269/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.27093388 seconds)
    (270/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.249398367 seconds)
    (271/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.039957912 seconds)
    (272/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.243616272 seconds)
    (273/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.167932769 seconds)
    (274/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.474244078 seconds)
    (275/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.479852305 seconds)
    (276/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.463559031 seconds)
    (277/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.404609654 seconds)
    (278/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.166457837 seconds)
    (279/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.241663815 seconds)
    (280/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 8.684531286 seconds)
    (281/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.424447193 seconds)
    (282/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.318888352 seconds)
    (283/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.168294512 seconds)
    (284/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 4.429839811 seconds)
    (285/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.201843909 seconds)
    (286/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.376007991 seconds)
    (287/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.370067841 seconds)
    (288/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.639731061 seconds)
    (289/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.281870253 seconds)
    (290/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.164875969 seconds)
    (291/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 4.087371066 seconds)
    (292/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.490536076 seconds)
    (293/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.1757172 seconds)
    (294/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.388367659 seconds)
    (295/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.054521117 seconds)
    (296/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.194139036 seconds)
    (297/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.289537775 seconds)
    (298/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.40674558 seconds)
    (299/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.881858323 seconds)
    (300/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.171488232 seconds)
    (301/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.228917284 seconds)
    (302/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.087136202 seconds)
    (303/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.339124651 seconds)
    (304/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.483159433 seconds)
    (305/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.254131534 seconds)
    (306/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.167569463 seconds)
    (307/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.221914156 seconds)
    (308/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.3046258 seconds)
    (309/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.299078276 seconds)
    (310/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.654276576 seconds)
    (311/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.178430986 seconds)
    (312/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.60253309 seconds)
    (313/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.288453704 seconds)
    (314/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.203481875 seconds)
    (315/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.165268499 seconds)
    (316/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.097621087 seconds)
    (317/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.520608386 seconds)
    (318/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.168002607 seconds)
    (319/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 3.745994757 seconds)
    (320/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.165620776 seconds)
    (321/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.304182239 seconds)
    (322/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.915899037 seconds)
    (323/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.316982241 seconds)
    (324/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.167472643 seconds)
    (325/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.271653256 seconds)
    (326/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.053367002 seconds)
    (327/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.457822523 seconds)
    (328/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.98548614 seconds)
    (329/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.171869711 seconds)
    (330/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.567335207 seconds)
    (331/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.418217871 seconds)
    (332/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.187050455 seconds)
    (333/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.143938909 seconds)
    (334/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.250184923 seconds)
    (335/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.498024058 seconds)
    (336/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.276050433 seconds)
    (337/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.178093205 seconds)
    (338/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.609705782 seconds)
    (339/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.181443118 seconds)
    (340/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.246165294 seconds)
    (341/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.257892023 seconds)
  done (took 1194.848440737 seconds)
done (took 1197.019552611 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.199915697 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.184809882 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.692758282 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.190359368 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.184915296 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.18569392 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.704449642 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.213134544 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.19868445 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.705629238 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.191876729 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.179710219 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.198536643 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.216437701 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.194860746 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.19514889 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.185776663 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.210254856 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.216493491 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.189993173 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.226458553 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.189027665 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.180071024 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.231624803 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.182663956 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.197399765 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.196294788 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.231722932 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.228126528 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.185900065 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.190394927 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.541656639 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.238125485 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.190393529 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.19469763 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.200201095 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.187825474 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.201552019 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.193853529 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.200405281 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.182683282 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.19397249 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.188997274 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.188162675 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.183007043 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.183917189 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.185622576 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.308280938 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.200256794 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.519360338 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.239530346 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.195873233 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.228869445 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.187216051 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.187376338 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.187875416 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.216583802 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.187846894 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.187477024 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.524518935 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.277558923 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.1975368 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.521222721 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.252930209 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.194801019 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.194108293 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.184118394 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.194311061 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.538916714 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.749202455 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.214473569 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.206268011 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.185042617 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.184924462 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.197703738 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.704032324 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.196711723 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.775513035 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.214650657 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.200403837 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.193741292 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.186816582 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.188655136 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.204828909 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.195661754 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.186577469 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.19142339 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.192963667 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.201351138 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.544055733 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.233601702 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.696824716 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.193883553 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.196749668 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.195654798 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.775093874 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.21622209 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.194140262 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.186612119 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.536174639 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.235865564 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.197837567 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.188398442 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.198004596 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.302219398 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.199400746 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.197952798 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.188342261 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.209598503 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.193687503 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.189721106 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.201547449 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.208857308 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.224705749 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.207181875 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.190478661 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.19740665 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.195129434 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.198977522 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.19679205 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.197820507 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.200638476 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.188726155 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.240251605 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.200199825 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.205018199 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.303688858 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.196204164 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.312895186 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.203044987 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.197630154 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.191074946 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.529454077 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.23739586 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.21091572 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.196175743 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.211684603 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.209870031 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.203400698 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.189475397 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.203636541 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.191766999 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.238458211 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.187986138 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.21245293 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.240746123 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.201613272 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.196453037 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.198693135 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.223422652 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.209260299 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.19233236 seconds)
done (took 343.948957383 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.228356823 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.176378468 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.261569571 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.17727741 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.246495096 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.228209681 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.177250859 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.178555831 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.17807453 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.574861394 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.177465936 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.18141707 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.175964146 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.177241114 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.228676896 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.175420315 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.177646372 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.414465456 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.180287754 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.236861668 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.175854875 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.177289202 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.177474939 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.580226083 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.176630915 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.178024063 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.237424643 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.176680602 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.421702546 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.178064141 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.176102288 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.423706208 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.238485344 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.191764583 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.187774724 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.18281062 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.24737067 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.187458236 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.225481414 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.225783289 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.251996821 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.20946355 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.175867556 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.178037654 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.180556705 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.181559007 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.167461307 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.21209357 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.176969891 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.18706536 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.414435531 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.184713976 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.186953097 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.179127869 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.178631595 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.193740508 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.180166908 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.181765314 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.241252809 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.180628773 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.23034326 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.576521514 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.57869671 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.180477772 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.179981093 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.181314372 seconds)
  done (took 204.389362608 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.249217795 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.267197968 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.249969628 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.186739323 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.234221468 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.247617395 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.188855534 seconds)
  done (took 17.727832507 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.18804988 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.182899411 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.206532136 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.2052555 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.184764827 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.323874103 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.19495932 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.188499227 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.209522681 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.184638898 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.523093729 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.207394142 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.188022933 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.18282167 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.196560625 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.212761561 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.186181935 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.185150744 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.28014794 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.260282253 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.188979478 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.18941814 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.210898814 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.194284496 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.183626617 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.185267382 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.184301299 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.190238143 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.183505536 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.185472586 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.183002336 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.198127955 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.184457906 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.181655398 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.183617869 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.183646079 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.184062482 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.183248781 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.184358011 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.183451134 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.185088556 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.185539611 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.186043267 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.171890161 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.184549902 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.208461965 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.185221688 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.184823588 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.183743919 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.186142213 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.215429816 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.184826538 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.186376459 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.189636701 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.225711231 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.194954189 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.186015849 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.184206207 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.183768371 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.183024865 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.184904202 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.264064204 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.208503623 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.184835758 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.206877414 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.22345811 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.185088836 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.179775107 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.183814743 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.210128909 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.184807705 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.209721642 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.184108357 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.287957994 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.187526478 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.332254486 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.208585992 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.190788913 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.189500053 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.18900378 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.193841017 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.186333203 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.18730615 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.191873927 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.192362678 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.18648179 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.186073909 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.190435132 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.19447046 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.187978675 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.233456419 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.187255904 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.190332441 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.294890275 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.186383229 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.286726289 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.212416227 seconds)
  done (took 235.825261625 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.192595985 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.188147993 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.198802083 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.187096875 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.18744322 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.193956808 seconds)
  done (took 15.255554355 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.190877187 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.191242575 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.185806165 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.186110178 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.188242956 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.185966513 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.189409091 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.189661409 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.19370515 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.188359123 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.188478048 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.192076993 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.187874137 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.188475955 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.188104985 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.187839428 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.186975792 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.189243141 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.188501807 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.189535434 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.437327757 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.191726896 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.189338393 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.193883269 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.193651483 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.192959495 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.198932385 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.190221713 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.188917689 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.193819261 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.192034659 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.188374609 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.194175646 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.196928643 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.192797922 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.193221393 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.192705684 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.192717978 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.186787937 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.188016221 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.194024395 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.186985507 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.188344807 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.192902277 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.189760358 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.199676606 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.199353563 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.198152517 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.189349284 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.195089878 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.196242095 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.187924773 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.191054671 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.197644097 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.196539327 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.197032144 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.202500849 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.189819817 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.189691888 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.195648549 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.195810674 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.190912654 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.192999713 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.194796474 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.195313336 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.197663512 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.195558001 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.195156287 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.189587582 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.189933339 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.195145371 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.191062139 seconds)
  done (took 161.17605993 seconds)
done (took 636.474313416 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.241780336 seconds)
  done (took 9.351944732 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.326726909 seconds)
  done (took 9.519626207 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.689884157 seconds)
  done (took 12.808995542 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.200529328 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.20690933 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.203590901 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.193828737 seconds)
  done (took 30.934408009 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.480675707 seconds)
  done (took 9.596443658 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.205559274 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.183179105 seconds)
  done (took 16.567122962 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.214836533 seconds)
  done (took 9.328776556 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.412313818 seconds)
  done (took 9.550259465 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.197639057 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.210422627 seconds)
  done (took 16.539925175 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.193450621 seconds)
  done (took 9.307351707 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.089163812 seconds)
  done (took 10.276387991 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.20020478 seconds)
  done (took 9.334449114 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.196723464 seconds)
  done (took 9.311901408 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.265216404 seconds)
  done (took 10.380570449 seconds)
done (took 174.918267627 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.201833087 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.193993506 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.194105283 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.192227626 seconds)
  done (took 30.893913344 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.22931972 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.229495178 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.23721349 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.230489954 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.220373426 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.218826516 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.229895846 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.226557818 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.218747085 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.223726041 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.227087547 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.225909066 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.228649591 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.2361353 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.2356299 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.226473169 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.227611898 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.231797737 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.22002339 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.235753036 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.227259429 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.228398192 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.193488368 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.19383666 seconds)
  done (took 55.519779788 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.384744786 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.262289639 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.349573372 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.240441183 seconds)
  done (took 11.351400267 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.194053752 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.255944534 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.244176789 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.239817055 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.244998779 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.295608355 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.24842967 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.332042786 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.320507352 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.335213865 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.199502083 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.215586534 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.221620336 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.241556174 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.295976209 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.194155926 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.191715276 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.312319642 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.257418157 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.427807473 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.195258298 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.252283979 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.246869137 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.249090268 seconds)
  done (took 56.328263213 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.196869816 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.204329018 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.203516846 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.196782579 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.195490044 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.19667199 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.205698891 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.199453419 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.217766917 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.195290568 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.192983414 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.195260774 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.202960192 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.193845582 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.196466888 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.209738827 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.20979491 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.196683373 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.199568373 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.203214445 seconds)
  done (took 46.126776555 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.196767675 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.040978964 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.54009037 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.447452806 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.197143634 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.196117953 seconds)
  done (took 33.733248622 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.211107645 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.208407366 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.206111714 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.217911378 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.24275876 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.199634421 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.251966029 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.361277086 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.201906979 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.252227982 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.213328418 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.202882413 seconds)
  done (took 28.888166459 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.193324625 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.191134607 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.208363481 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.204991392 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.203643878 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.204572229 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.20372179 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.191911414 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.206929837 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.216081337 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.205866782 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.205309524 seconds)
  done (took 48.553691821 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.410286738 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.422242944 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.403049192 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.881445243 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.520853241 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.174504118 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.478997982 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.406169922 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.881027899 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.91203654 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.491426958 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.176518516 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.134696781 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.117895428 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.094149982 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.442195148 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.199693807 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.063011837 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.44831496 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.241701202 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.195242691 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.200115434 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.197782827 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.492210197 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.528320069 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.203831593 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.413017311 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.214705806 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.198382285 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.454737674 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.83441119 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.257917352 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.401599218 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.457262005 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.541419089 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.305097217 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.20341425 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.450026175 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.24646341 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.234826055 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.208943866 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.210848755 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.741733436 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.212845641 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.4714879 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.199689132 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.261104845 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.169169191 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.123704998 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.539657649 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.307268236 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.205775419 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.235377713 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.637257794 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.321486098 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.443157555 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.204001455 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.442867397 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.259655979 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.482446298 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.404164861 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.203804999 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.416398551 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.126118303 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.563191148 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.319839341 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.204020933 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.207441843 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.901016117 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.445020143 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.280526582 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.540974074 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.934200768 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.201814784 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.203986704 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.256393114 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.308968748 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.197533876 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.51666802 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.177768716 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.125184944 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.297639135 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.705008765 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.207161785 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.200783777 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.209197382 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.047216698 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.128320561 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.298733584 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.479703547 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.522818714 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.204186374 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.202521794 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.22581473 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.205285604 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.158312208 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.856133096 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.2683131 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.128940681 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.765705568 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.85033134 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.172266685 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.725792006 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.248519984 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.475279588 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.348090135 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.608349831 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.410858935 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.448856272 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.733741733 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.207571401 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.822664209 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.28581195 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.280034784 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.202981646 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.797454735 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.451770645 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.525494445 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.31455089 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.202346861 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.130137432 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.215068587 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.406593709 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.858892519 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.262682099 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.202276415 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.20914921 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.202976988 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.207413481 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.314462825 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.219665069 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.498453159 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.275401512 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.203402296 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.14774512 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.204107797 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.492464491 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.991032186 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.267362978 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.459431413 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.469825204 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.961047947 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.798184883 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.212102454 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.47670515 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.277803957 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.279263254 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.768065705 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.331063306 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.300110827 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.204598862 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.324792948 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.210892971 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.208293548 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.734779368 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.728688782 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.633020835 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.247496589 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.203938177 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.158115496 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.453940588 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.447888598 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.270646019 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.232619889 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.211114128 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.292448315 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.433747719 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.206401265 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.133845051 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.446531462 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.445459391 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.502433084 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.627191812 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.268244743 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.280073586 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.215321121 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.42017253 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.291209528 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.914855439 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.802065794 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.415763239 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.830506353 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.17314562 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.843137588 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.49302018 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.58198425 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.226233621 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.656063945 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.449431999 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.960912769 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.239451367 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.735931643 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.134104288 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.212913026 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.539063486 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.158099559 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.521041052 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.264311731 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.221988736 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.209002135 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.206928372 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.21475234 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.116936722 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.32357044 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.27528892 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.277446949 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.135867629 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.942362157 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.247619719 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.211231998 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.205669545 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.553067842 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.04436546 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.160320873 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.206854113 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.285401468 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.95620586 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.768638107 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.209955667 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.209514611 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.847242218 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.212565403 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.125559601 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.2352346 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.953130838 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.23683565 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.477313708 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.904605485 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.50294206 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.283380199 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.283327183 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.207566132 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.213198625 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.90762202 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.216829733 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.909430146 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.494035901 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.481281076 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.653020861 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.26535021 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.418483667 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.225148558 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.209762553 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.694018148 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.235956739 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.210400109 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.412898622 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.738806833 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.561495259 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.849098761 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.296342911 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.210933995 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.479993782 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.206303761 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.856288378 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.91137914 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.200815446 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.210913018 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.453125121 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.895328253 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.212313284 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.191454116 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.215319037 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.425421256 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.413049368 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.475594197 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.504999106 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.666746635 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.139969741 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.216609221 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.235923843 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.454497495 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.209592018 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.248386201 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.718943193 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.283851588 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.641348264 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.495893388 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.619723647 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.843872471 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.480232794 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.274799441 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.221987743 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.876225939 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.330792581 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.141979276 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.328973533 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.138555317 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.956969269 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.503967197 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.227124352 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.481204219 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.191654246 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.548931309 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.508083204 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.495117751 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.262984536 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.238071273 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.200273658 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.239751857 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.210055578 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.467868633 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.328830378 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.215957893 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.820156942 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.253668528 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.257020903 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.218481 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.712811265 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.234271731 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.216138382 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.963789012 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.228804377 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.331722981 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.286468215 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.975440578 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.895816697 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.239851261 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.168871539 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.872355936 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.483060658 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.269060553 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.661117605 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.24635104 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.61882425 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.211467533 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.428261454 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.216375404 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.871122175 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.227780608 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.480116256 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.165869094 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.426934343 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.409580297 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.24687362 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.217627297 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.143054572 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.379328353 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.112464223 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.19425359 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.217826256 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.904388213 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.63914319 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.492757393 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.675115117 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.037518152 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.215629709 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.552796228 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.616796817 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.921064137 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.249031369 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.217763114 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.566526806 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.343244739 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.546283352 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.50469847 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.222987616 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.242501899 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.430117971 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.342771508 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.136301252 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.714711214 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.805123334 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.914278694 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.226296481 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.419392971 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.568890707 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.565309881 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.252798243 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.288931428 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.621712948 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.482575201 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.286482478 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.141342047 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.209299705 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.61630859 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.62836987 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.312558785 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.458244151 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.527215673 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.970310725 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.878096014 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.720940664 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.621660835 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.716164161 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.622604176 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.427052097 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.576709058 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.540840351 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.813821944 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.631538045 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.430005693 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.322509706 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.486927182 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.085468556 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.927260361 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.463678419 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.223107635 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.147400237 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.425093578 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.216581685 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.813724962 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.85874571 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.472161056 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.500408871 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.685265369 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.759260039 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.475610375 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.243617441 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.18406054 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.241144669 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.240368466 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.216091007 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.721806571 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.506965403 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.230951477 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.17024255 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.888619232 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.143843007 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.431270097 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.476448137 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.256257916 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.78754347 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.504865831 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.322380033 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.519217384 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.530307545 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.256792373 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.145113172 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.952682494 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.168025097 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.294504449 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.645772718 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.232703544 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.222906861 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.422558871 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.147832022 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.265238421 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.225323106 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.413538232 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.838107701 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.4921887 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.345052343 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.460887589 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.514641451 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.091240335 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.248455138 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.492995376 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.148924995 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.911701319 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.910556084 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.260987747 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.29108401 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.219914219 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.213239515 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.493013852 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.569056184 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.324298574 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.983523675 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.243219786 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.245233378 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.57480195 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.311773577 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.223253408 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.227170465 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.776694307 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.456333549 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.221842009 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.186371852 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.435181552 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.293803726 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.416900325 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.297604022 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.73536644 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.227271987 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.074574086 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.32359203 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.167482989 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.244427049 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.896477624 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.284342493 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.22266841 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.49639428 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.882300055 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.427559405 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.62313071 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.120751416 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.480852609 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.268870746 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.226806135 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.30683711 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.517372432 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.523731507 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.220304578 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.499204264 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.270660763 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.226983195 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.882648821 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.190678225 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.224717807 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.988942899 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.138012789 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.950972097 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.625365883 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.22561414 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.224668246 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.22918139 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.151091932 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.222777289 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.394062604 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.196213255 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.226091352 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.58510932 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.558856029 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.312159587 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.223136771 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.226181955 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.228529323 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.437865096 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.737479588 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.242018743 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.925508045 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.429852276 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.228569326 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.728135021 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.67702563 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.545929073 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.263906015 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.485734277 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.462203601 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.878242207 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.489924469 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.19301742 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.448993383 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.227198043 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.4963983 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.499356305 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.225596998 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.439886744 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.882687727 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.513970311 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.59225706 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.545944493 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.285380085 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.495579762 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.153428998 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.227242366 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.231458412 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.493279616 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.27899731 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.222606362 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.233853972 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.875327913 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.923886128 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.699570813 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.379384964 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.568845683 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.070046939 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.981322002 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.229133151 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.154072087 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.22492735 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.250302296 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.229663226 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.153062162 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.975288521 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.948976941 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.440713947 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.539665445 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.152786352 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.431193025 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.839163048 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.150573425 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.193371614 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.278795194 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.467835312 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.154556291 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.229738568 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.180421868 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.524941187 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.0120479 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.49758951 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.228731075 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.162152179 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.22918666 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.230994342 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.227896231 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.322600634 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.229467148 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.344544298 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.497082953 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.616638065 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.328678949 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.879162515 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.90158977 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.166981791 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.258599454 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.851981169 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.798190728 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.530947328 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.362199713 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.905512707 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.17294001 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.2380127 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.245692349 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.490252428 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.231986617 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.231498858 seconds)
  done (took 2293.173820753 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.298058764 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.297720004 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.266430792 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.302368477 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.314952846 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.281446992 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.277012184 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.285947319 seconds)
  done (took 60.473884982 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.227735074 seconds)
    (2/17) benchmarking "4467"...
    done (took 2.729743821 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.347645778 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.230272754 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.230909072 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.231665122 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.420038 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.257108617 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.232618248 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.232832664 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.229725301 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.22874551 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.229500999 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.227035968 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.231425002 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.524246844 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.256414122 seconds)
  done (took 81.246601377 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.290706535 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 11.312917146 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.230781415 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.148946053 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.248706247 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.548417302 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.225969999 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.231232031 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.617982036 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.520733404 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.265391085 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.243248041 seconds)
  done (took 97.062132143 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.235521988 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.234320889 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.23206101 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.232307717 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.233452202 seconds)
  done (took 13.318457871 seconds)
done (took 2858.852004006 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.475569145 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.329520337 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.305718125 seconds)
  done (took 6.787043676 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.3752215 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.396532451 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.600816709 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.599402596 seconds)
  done (took 12.131338315 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.517345699 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.622554321 seconds)
  done (took 7.29207839 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.622920305 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.231838105 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.631096854 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.234235473 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.235212922 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.233663352 seconds)
  done (took 23.863281027 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.233252658 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.234021848 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.233037016 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.232653847 seconds)
  done (took 11.088699574 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.23095773 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.044117763 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.229517549 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.241199779 seconds)
  done (took 22.90142204 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.454017163 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 6.278254796 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.998241651 seconds)
  done (took 13.884955481 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.853291005 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.68910086 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.841026191 seconds)
  done (took 10.536954549 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.060171279 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.2442943 seconds)
  done (took 8.458112223 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.381813537 seconds)
  done (took 4.534878851 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.067864721 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.548231353 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.701488235 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.74181396 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.79459298 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.45424682 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.566773274 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.513839513 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.622530608 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.641341475 seconds)
  done (took 28.810099043 seconds)
done (took 167.402247302 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.678495271 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.283799379 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.445132641 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.62570627 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.474387787 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.44213071 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.677501603 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.614980033 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.299049621 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.282794745 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.623052317 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.490876104 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.627542902 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.281381172 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.631871931 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.279036489 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.473333579 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.709844916 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.311006927 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.554703566 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.681929811 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.268054415 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.463778283 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.287001901 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.47725556 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.398124691 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.872083007 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.277880857 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.459312206 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.887910624 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.398076298 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.699278821 seconds)
  done (took 182.132246226 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.123653163 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.234289658 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.235639579 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.233119427 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.530508118 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.234940225 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.233950522 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.232572295 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.562360308 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.539555402 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.235414605 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.503966536 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.233474611 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.233671559 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.236737914 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.232509427 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.672630982 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.154499676 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.233044131 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.234399088 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.235035457 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.363139291 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.246188454 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.374771915 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.65466474 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.233730817 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.234518858 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.237975636 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.235611973 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.237632359 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.236543483 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.234664608 seconds)
  done (took 219.815420042 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.238443108 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.235797512 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.235073302 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.236396315 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.237029238 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.237510769 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.235888079 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.233719888 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.129315332 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.11765101 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.236598676 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.239823097 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.245102755 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.235622038 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.242426873 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.23459535 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.240735245 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.240695037 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.23404233 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.238850344 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.239572358 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.917991875 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.235922935 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.947279635 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.237903338 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.240184574 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.234991685 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.242602796 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.241960731 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.241932143 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.238270865 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.236537697 seconds)
  done (took 232.942075662 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.481055994 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.240088112 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.240004409 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.249981238 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.239375701 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.240979203 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.24888026 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.488580442 seconds)
  done (took 22.590439831 seconds)
done (took 659.651923545 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.634957916 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 3.46924225 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.371534113 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.265139089 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.564421553 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.314518266 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.255398316 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.335457099 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.915995604 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.343332672 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.658345983 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.267222045 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 3.008557186 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.288333777 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.374076887 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.322537601 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.608163884 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.875522745 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.396119231 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.947491837 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.470009782 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.286695389 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.343972915 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.954054222 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.673380616 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.232259638 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.282984172 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.60980889 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.262403679 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.510575314 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.962315521 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.52770338 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.27662143 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.262565492 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.316647877 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.304301291 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.465842252 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.270762886 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.373350836 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 3.009173041 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.929434571 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.799013636 seconds)
  done (took 116.500552472 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.245339662 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.247230994 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.244594251 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.247311531 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.256524013 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.246726628 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.248015469 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.247769632 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.248687242 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.247265651 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.248617126 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.255402242 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.245785767 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.256347357 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.246534834 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.2470853 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.247975427 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.255979357 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.249552719 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.250076214 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.24781335 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.250054071 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.244650836 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.250335757 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.249098086 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.249839667 seconds)
  done (took 60.652421732 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.244536016 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.422942487 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.540230344 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.275815634 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.246505708 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.24870943 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.275579702 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.251510202 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.248186921 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.248389315 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.340250201 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.248475828 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.260455106 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.536741358 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.274986313 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.246820309 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.245664596 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.247834627 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.428946995 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.262765216 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.274789542 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.252716731 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.276684437 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.260902357 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.246505725 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.243466653 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.221056257 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.672122988 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.256877608 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.342842388 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.336186244 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.279736152 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.580086974 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.544527717 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.324125847 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.253413696 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.246191852 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.389247463 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.258357412 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.24769712 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.28011716 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.254873238 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.539425929 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.758759539 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.264864421 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.245357095 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.664663682 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.40113456 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.293486296 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.258482617 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.548859069 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.277941428 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.24837126 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.248979679 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.281438859 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.257420528 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.24695586 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.491873573 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.264660591 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.274927497 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.230337471 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.250574563 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.437080024 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.256073955 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.426928564 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.259341415 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.256267234 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.248303847 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.541865298 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.278065253 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.752620758 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.26559868 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.250998761 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.345541542 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.432447258 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.693643491 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.263848531 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.440850324 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.609564049 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.287064433 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.262332383 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.664278231 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.29077424 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.260347779 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.250025268 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.248192008 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.250775935 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.291707622 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.280067648 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.674595584 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.757872508 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.505718136 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.291151934 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.264423678 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.250026988 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.49106937 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.261901804 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.250674499 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.535423589 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.781867624 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.264872628 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.257542501 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.738120649 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.26587642 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.280590724 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.262266419 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.554210525 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.283142554 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.291048831 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.250756663 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.258135971 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.254324246 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.278676162 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.264948526 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.250924084 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.731229134 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.405627778 seconds)
  done (took 277.156347757 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.256602875 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.250475405 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.250023105 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.248272152 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.231488369 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.250683641 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.249858844 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.24999736 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.250850001 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.252575462 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.249088267 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.250410933 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.253215207 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.250996455 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.289466734 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.253278205 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.735907877 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.250538759 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.251216903 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.250300625 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.843849522 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.26040707 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.251969045 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.25128698 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.250712811 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.253518792 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.250900405 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.288790359 seconds)
  done (took 178.357396423 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.251474251 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.300768377 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.263946152 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.300594389 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.263916699 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.253146544 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.274932759 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.270866139 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.258432509 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.252791888 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.253786799 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.281402162 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.259672971 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.327985013 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.280586792 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.281095061 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.33152874 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.257903762 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.252783231 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.252982407 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.302833077 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.267171333 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.281514007 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.311912452 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.266554266 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.302741569 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.268728346 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.253872824 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.254948616 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.345731491 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.273095119 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.284115495 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.291317265 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.271463956 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.348725466 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.348536048 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.332662051 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.28222985 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.257604294 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.257647556 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.255346696 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.25539361 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.303721202 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.272027599 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.257519392 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.34661727 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.272038669 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.255744999 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.278278881 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.25453465 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.266773521 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.272043567 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.288452918 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.35414253 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.302775528 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.281446963 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.278059643 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.271332983 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.257516868 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.32694107 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.260660379 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.344587351 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.274590063 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.257789363 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.256145705 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.258413223 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.303250669 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.293126845 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.331752858 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.26344559 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.329435792 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.310257868 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.270441594 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.258576642 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.256866204 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.306121863 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.343213193 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.306222858 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.320542808 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.296429352 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.265730489 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.257699482 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.257167715 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.28650143 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.267090609 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.34698013 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.349120646 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.263881037 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.258859366 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.259861061 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.260390444 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.279769024 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.313055099 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.300263651 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.339612753 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.291416571 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.294999249 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.264237657 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.270560871 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.260971909 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.290544431 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.270375622 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.26901623 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.599220356 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.294684127 seconds)
  done (took 242.360177637 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.640144535 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.308654997 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.327968004 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.521150452 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.646775933 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.362487019 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.297920083 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.319924006 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.314944175 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.428076026 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.370598453 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.3516335 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.295001651 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.278199187 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.306191173 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.317045878 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.339059076 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.606042215 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.405691361 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.985091685 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.298400696 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.586128208 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.591439421 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.63668788 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.345051544 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.706693447 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.939110356 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.392068013 seconds)
  done (took 73.104689903 seconds)
done (took 950.29234219 seconds)
SAVING RESULT...
DONE!
