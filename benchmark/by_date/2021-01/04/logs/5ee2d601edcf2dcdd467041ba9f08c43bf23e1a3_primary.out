cset: moving following pidspec: 15289
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.809109405 seconds)
loading group "shootout"... done (took 1.055797912 seconds)
loading group "string"... done (took 0.666676474 seconds)
loading group "linalg"... done (took 8.682976792 seconds)
loading group "parallel"... done (took 0.168369045 seconds)
loading group "find"... done (took 2.941329251 seconds)
loading group "tuple"... done (took 2.093385958 seconds)
loading group "union"... done (took 14.873763533 seconds)
loading group "dates"... done (took 1.469451137 seconds)
loading group "micro"... done (took 0.218753596 seconds)
loading group "simd"... done (took 4.757926673 seconds)
loading group "io"... done (took 1.072043209 seconds)
loading group "random"... done (took 9.519487147 seconds)
loading group "problem"... done (took 1.513239346 seconds)
loading group "array"... done (took 25.028990913 seconds)
loading group "misc"... done (took 1.980001359 seconds)
loading group "scalar"... done (took 43.596197914 seconds)
loading group "sort"... done (took 3.315057913 seconds)
loading group "sparse"... done (took 12.693881252 seconds)
loading group "collection"... done (took 18.514084162 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.422508087 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.115261967 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.128843445 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.11410726 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.182514222 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.118564088 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.126465447 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.084385319 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.872903213 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.137317845 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.113097318 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.422878811 seconds)
done (took 5.285026937 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.177715751 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.089138416 seconds)
    (2/2) benchmarking "String"...
    done (took 0.081686911 seconds)
  done (took 1.388340511 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.069534431 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.05858442 seconds)
    (3/3) benchmarking "different"...
    done (took 0.065911689 seconds)
  done (took 1.409412725 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.063496867 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.13254636 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.064547081 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.064795374 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.065308469 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.064659403 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.064592064 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.064992026 seconds)
  done (took 1.741607626 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.070235312 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.065762361 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.063591779 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.065941219 seconds)
  done (took 1.486763407 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.063851383 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.119550594 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.063120692 seconds)
    (4/4) benchmarking "different"...
    done (took 0.06303686 seconds)
  done (took 1.52759388 seconds)
done (took 9.033134772 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.137504576 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.832093571 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.765383557 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.120938098 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.244399276 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.364070202 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.122040863 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.181669229 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.087138545 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.073270112 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.119812951 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.077834202 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.385627925 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.492751986 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.069267541 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.166804008 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.644817164 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.084965119 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.130431286 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.43866577 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.071597925 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.085857293 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.084197661 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.069383235 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.344475112 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.151752915 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.669804254 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.094380362 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.067967769 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.095214438 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.071023526 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078440468 seconds)
  done (took 10.677621673 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.090929975 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.088639061 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.067335669 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.122336624 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.092496369 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.068423808 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.073770766 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.066474891 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.087306187 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.12255625 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.088972807 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.096942953 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.064784959 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.067313898 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.072665909 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.195396648 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.078946267 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.082340222 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.065873343 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.079742525 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.10440623 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.076796781 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.07692995 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.076659632 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.128177146 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.169007131 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.094830241 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.096615377 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.06466925 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.077626687 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.115831608 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.127370271 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.065751903 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.064802795 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.12110336 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.093728885 seconds)
  done (took 4.601732065 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.874966386 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.094763205 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.081652508 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.072579097 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.105022569 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.112176449 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.119318961 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.121530373 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.100482371 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.074288285 seconds)
    (10/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.115046837 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.153938122 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.6706406 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.146125747 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070365035 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.117721676 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.354318102 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.097641977 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.068727638 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066766741 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.069170162 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067984419 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.110353246 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.064406314 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.173047206 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.573835669 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068651513 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067793148 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.094582166 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.065655824 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.13717671 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.090868335 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.0684676 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.539457267 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.064291227 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.062265705 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.198474152 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.093800871 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065879331 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.067034428 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.07779991 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.064835122 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.107252546 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.078645173 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.508895655 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.067975631 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.576563083 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.22283073 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.070994255 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.070135987 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.100091503 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.062849803 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.066597151 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.235375173 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.139537615 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.068241115 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.270906401 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068477868 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068295101 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069177982 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.100196815 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067092539 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068601171 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.072643768 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.095971382 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.874057524 seconds)
    (66/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.065444732 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.086487245 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.094726591 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067070601 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.406407016 seconds)
    (71/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.06513437 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.072625381 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.068889944 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067880479 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.067063114 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.104249621 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065038001 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.064680641 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.108657209 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.093654692 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.087197175 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068643247 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.065943654 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.064582106 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.326402631 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.14740313 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.064382665 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.065194173 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.470887875 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.061882782 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.063946796 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069038773 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.089777255 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.18364657 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.063146395 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.063702296 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098677201 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.06670404 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.331142677 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.066822966 seconds)
    (101/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.064504177 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.474959335 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.067229191 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.10145804 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.118481931 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066349098 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.099425129 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.066510693 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.06393727 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.072186851 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.064202554 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.062869246 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.067838128 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.064347811 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.065223401 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.067910253 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.066839581 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066468506 seconds)
  done (took 22.968379511 seconds)
done (took 40.350191304 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.312246758 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.07695002 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.076972332 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.077149961 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.077431174 seconds)
  done (took 1.88932041 seconds)
done (took 3.255926206 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.249761691 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.073357413 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.062781364 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.199588447 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.088808414 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.172912978 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.210940077 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.156965312 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.086626879 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.086286354 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.086344754 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.214285292 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.222728605 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.086366641 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.157466692 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.222964007 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.086232754 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.062359801 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.086061045 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.086036169 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.08607629 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.06226653 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.086111503 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.086293363 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.155417042 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.086043842 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.062051295 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.15438724 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.085099428 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.156189339 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.085195526 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.084981692 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.085093668 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.154929549 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.084802812 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.153811928 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.061884239 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.08479588 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.084757598 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.084629854 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.084113579 seconds)
  done (took 6.082134372 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.073166501 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.202085074 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.082819698 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062443032 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071572032 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082476495 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061861694 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.081950839 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.089097908 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082627381 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082125966 seconds)
  done (took 2.321596188 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.068699794 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.0815976 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.083129484 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.06184041 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.072760211 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083346762 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.0616521 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082853285 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.086232049 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083752509 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083370286 seconds)
  done (took 2.154122033 seconds)
done (took 11.850308294 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.095182842 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.064138552 seconds)
  done (took 1.445442902 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.220382091 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.490542376 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.888736601 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.090462573 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.069946976 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.08316897 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.193315081 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.064677596 seconds)
  done (took 7.575528168 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.097046321 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.071655188 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.066147162 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.065735995 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.067590864 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.066714895 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.06706478 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.067106202 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.067205392 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.068859646 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.068234087 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.067609161 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.069065532 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.069290992 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.067422096 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.068471451 seconds)
  done (took 2.49178838 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.1012461 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.06755806 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.097825766 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.060116208 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.069869816 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.060731443 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.068981865 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.071255018 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.068825159 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.07038507 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.071860858 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.071226935 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.070643153 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.071002382 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.072460631 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.072617 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.072390637 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.069984934 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.07187799 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.074387879 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.071967488 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.072545804 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.071350281 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.070624506 seconds)
  done (took 3.160234801 seconds)
done (took 15.98083249 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.171666824 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.073282153 seconds)
  done (took 1.543293254 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.065781234 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.066480744 seconds)
  done (took 1.443682986 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.071457702 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.058913642 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.075883776 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.068115533 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.0595014 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.059422246 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.07500883 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.059517179 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.060141257 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.059662781 seconds)
  done (took 1.95818347 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.061138981 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.066542666 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.064510511 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.062953363 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.065108296 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.060593635 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.063241072 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.060862535 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.067181711 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.059836204 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.063952227 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.081297097 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.063735655 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.081816026 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.063615558 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.064395423 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.065686537 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.063224421 seconds)
  done (took 2.495136672 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.059071468 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.059914065 seconds)
  done (took 1.439909408 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.062711392 seconds)
    (2/7) benchmarking "second"...
    done (took 0.059996354 seconds)
    (3/7) benchmarking "month"...
    done (took 0.062028015 seconds)
    (4/7) benchmarking "year"...
    done (took 0.061954537 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.059967965 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.059893475 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.060210357 seconds)
  done (took 1.739842268 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.418522667 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.123444972 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.348091073 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.068810717 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.077168093 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.255434461 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.062415311 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.066859933 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.06801224 seconds)
  done (took 2.846718252 seconds)
done (took 14.799384974 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.080448673 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.177666948 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.085761249 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.375972099 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.089405502 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.065556841 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.111714194 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.17710902 seconds)
done (took 2.507395505 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.276631534 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.224068559 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.398165567 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.124076193 seconds)
  done (took 3.068064591 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.328758553 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.076907359 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.075479452 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.067094079 seconds)
  done (took 1.884426355 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.063228743 seconds)
    (2/2) benchmarking "read"...
    done (took 0.069017748 seconds)
  done (took 1.462429313 seconds)
done (took 8.029911093 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.069693164 seconds)
    (2/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.095047116 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.059727542 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.061747194 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.062422098 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.061837383 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.06186684 seconds)
    (8/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.061566304 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.062319101 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.059835246 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.062199914 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.062382114 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061946092 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.061818033 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061845016 seconds)
    (16/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.059912854 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062319651 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.061769588 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062015018 seconds)
    (20/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.059914513 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062001021 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06206461 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.060924389 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.061774066 seconds)
  done (took 2.877098177 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.077373218 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.063669449 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.06469653 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.064523396 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.065247594 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.064896691 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.066344102 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.065421216 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.066481775 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.064803929 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066851733 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.066937584 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.063932052 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.066695579 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065046681 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.067011678 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.066750721 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06553053 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064863677 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.067047483 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.066654978 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065602427 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.06702378 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.066536335 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067546754 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06703797 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.065513725 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.065483803 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.066373082 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.067609897 seconds)
  done (took 3.334297997 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.064293479 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.058112736 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.058294111 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.068525592 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.058225234 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.058513767 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.058566916 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.057811153 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.058518909 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.059438405 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.059190991 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.058196587 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.059173277 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.058640116 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.058560706 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.059337658 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.063439912 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.078016683 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.058911388 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.058451233 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.063123436 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.058679124 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.058237693 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.058557965 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.058973721 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.058585281 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.058290132 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.059032451 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.058323069 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.059193639 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.058703412 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.062905472 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.06354031 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.058688444 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.068156774 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.063339742 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.058422648 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.065292453 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.059552243 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.058690619 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.058400207 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.058111863 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.058843925 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.058617049 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.068525828 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.058939776 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.059598737 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.059418793 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.058492913 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.058284835 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.058568734 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.060554461 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.067141557 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.059796504 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.05867804 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.059694636 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.058482597 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.059004221 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.058596166 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.058407124 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.058627084 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.06231929 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.059971539 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.059098117 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.078344728 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.059917976 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.068429947 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.059019363 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.058876623 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.06229171 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.059286989 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.076321199 seconds)
  done (took 5.71603873 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.069177265 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.069724502 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.076965043 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.068534504 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062501314 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059364188 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.062947484 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059482833 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068596906 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.063253404 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059675066 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063124026 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068657008 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063415028 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060355054 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.068465245 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.063256866 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062518145 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.059242931 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063557664 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060758794 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062833415 seconds)
  done (took 2.773949009 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.136810065 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064154584 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.103272884 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.068253822 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.067146268 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.068437922 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064422005 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064826979 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064819298 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065457381 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065585751 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065336302 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068308481 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065345469 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065392223 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065359964 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065162888 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065375645 seconds)
  done (took 2.639978281 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.07461285 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.064002668 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.087809125 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.064312147 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.06535664 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.066154102 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069343724 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069730663 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.065277836 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.065634796 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.069807609 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065321891 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.065260626 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065844219 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065256442 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.065951446 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.06545241 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065723189 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06993385 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.068656132 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069308991 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06800443 seconds)
  done (took 2.845404637 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075181561 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.062704068 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.078406323 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.064717001 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058661622 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058336654 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.064606927 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.063738673 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.06462878 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.063171266 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06357943 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058813239 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.065263214 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.063496312 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.06551731 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06381393 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063178452 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.063576439 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063222504 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058744762 seconds)
  done (took 2.633947242 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069890309 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.061020558 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061600064 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066377001 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061443328 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.061219875 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.066329785 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.06149799 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.062037088 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.08302051 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.061877445 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.072676111 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.066908321 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.064892879 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.061615336 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.066539097 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.066964484 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.066594107 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.061259028 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061501965 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.083490691 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.061537769 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.06689576 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061486168 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061693189 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.062008271 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061344817 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.064624077 seconds)
  done (took 3.180153402 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.06230435 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.061541675 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.061587077 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.061684099 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.062242707 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.062807156 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.063245433 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.062924558 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.062397777 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.063125951 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.062739865 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.063052062 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.065818703 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.063150181 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.062876798 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.062922894 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062810566 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.063333467 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06366826 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06389135 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.063409149 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062801674 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.062948302 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.063245512 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063386447 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.06308807 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063483104 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.06332052 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062026076 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.061705648 seconds)
  done (took 3.245492599 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.071245537 seconds)
    (2/2) benchmarking "in"...
    done (took 0.069642609 seconds)
  done (took 1.497425169 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.059907855 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.075303408 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.057897055 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.070395079 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.067786369 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.06191789 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067149324 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06693852 seconds)
  done (took 1.880182832 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.064580773 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.088096306 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.060277191 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.060757027 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.063244547 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.125311486 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.072598544 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.071906486 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073994751 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.06268879 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.060868251 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.072650419 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.059672976 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.07371451 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061816591 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.069316428 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067924191 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.079273009 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.073179249 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.058640839 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072511414 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060853745 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.059168694 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.061184436 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.060374479 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.067360735 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.075723439 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.072315811 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.068614395 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.05764479 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078609628 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.059220477 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.060373103 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069020283 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.063498694 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.059075436 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.095759616 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.05965442 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.064249068 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.059360143 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.071723927 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.080402355 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.07445421 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.077612276 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.061069199 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.061339677 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.058888373 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.061064791 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.062955149 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.068861897 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.058653305 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06679641 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.058154898 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.060458643 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.070071092 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.060125965 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.064675508 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.069167281 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073896708 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.070681364 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.068953593 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.075238266 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.069027677 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.066752398 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.060555141 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.079379039 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.060983036 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.073103395 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073921266 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.060168443 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072660014 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.058444993 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.058042062 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.059168371 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.092236359 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.060422741 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.059803513 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.059013675 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.059169803 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.060369254 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.068621253 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064165661 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066456599 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062465096 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074671401 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.068236601 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.059115527 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.065531076 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.077411225 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.062199818 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.060109229 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.077175767 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.063546347 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060081562 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.07829557 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.07020531 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.060454806 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.05962912 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.062430831 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.073713872 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.061333345 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.058793489 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069075282 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.061975497 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.062575933 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.064285651 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068682639 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060297192 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.070159559 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.063687443 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.059919477 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.057434536 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.062950932 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.059429221 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.057139548 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.067634609 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.058235628 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07242163 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.065164696 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.072595428 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.072645549 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.068710559 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.074116411 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.058032889 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.057221941 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.075921695 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.06775709 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.05921383 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.07573578 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.057324715 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.071078766 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.05712604 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.059363273 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.20546713 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.059306869 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062212632 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.060466516 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.064734407 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.061356293 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061575043 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.065424921 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.068164892 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.071437133 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.060655051 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.068638605 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.059612145 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.074752752 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.069444022 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.063947568 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062518472 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.059957514 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.071426034 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.065536617 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.068743562 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.059632902 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.060650261 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.060424432 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.07180093 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070427983 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.062454321 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.06768673 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.065066957 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.060116829 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.061070812 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.06179498 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.064224092 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063686803 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.061237365 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068150623 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.069755643 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.074695112 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.067655321 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.069848691 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.059264716 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.059693047 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.061801018 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.059721329 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.064717497 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.069627952 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075766274 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.072190098 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.081906857 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.060142839 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.070023143 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.06189183 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.077285788 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.073825047 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.061612901 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065080959 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.058979218 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061854088 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.069914009 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072174896 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.073513454 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073968583 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.064500756 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.065268141 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.05985437 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.075852657 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.060754527 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.06933581 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.070062528 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.06482269 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.060502643 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.061766905 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.069555467 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.06510792 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.06027815 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.076883415 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.066502789 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.059843622 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075085323 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.06060276 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.071655873 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.059768307 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.063831751 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.065577423 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.062636361 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.070525756 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076390601 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.059445235 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.06096033 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.076223731 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.062894355 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062007718 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.068566524 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.075147529 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.064583698 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.0685469 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071265267 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.070788743 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.064811677 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.07015486 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.060957772 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.069808172 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.063394316 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.072792453 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.060294388 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078656662 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.059155021 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.075324524 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.060421027 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.071758853 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.061059542 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070221962 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.061360076 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.077182162 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.060858799 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.059944176 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.071820661 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.058502261 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.069924601 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.059288225 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.06501491 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.066548062 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.069405713 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.061467258 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069133453 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.061200952 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.068427124 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.064313451 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.067645623 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.069000456 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.063767696 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.058790462 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.068112589 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069912896 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.065895729 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.059541729 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.059062609 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.058398297 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.20991338 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.061747395 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.06220396 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069993404 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066374446 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.067197414 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06271546 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.063228708 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.062722201 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069443521 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069971072 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078892474 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069386081 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.068602032 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.070137913 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.059920406 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.076123172 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.060128348 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.07117192 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.058954429 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.066239428 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.069801432 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.06029764 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079902154 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.061816164 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.06889879 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073089127 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069564232 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.063994877 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.078470519 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.063978603 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.069177721 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.068938087 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.06518302 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.067512131 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.062020813 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.0693825 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.070289378 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.071048464 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.061089277 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.068400128 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.07008699 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06208603 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.068378301 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.062050758 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.068989885 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.062613953 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.059494182 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.065215159 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.072497142 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.064962862 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.065232685 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.060983444 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.058969023 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.060811382 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.067464934 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.065524234 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.069416843 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076530814 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.05917412 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.061600542 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.059824597 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.063935687 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.078629704 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.070194167 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.068420463 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.065218847 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.059439318 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.062293105 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.062659567 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.060665933 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.064106285 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.059425581 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.059876893 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071452222 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.062536386 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.064573404 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060406599 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.061682413 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.070034696 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.065245584 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.060901183 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.067289741 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.059875595 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.065432077 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.059394868 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.062180356 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.064774891 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.059699951 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.06427074 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.071135835 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.077460114 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.067514506 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.069621984 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.061697175 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.06821787 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074598834 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066259663 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060109767 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.068367944 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.058129557 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077954392 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.068193129 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067512695 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069657543 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.061176532 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.077600518 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.064809813 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.070545138 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.07579731 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06130961 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.06685364 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.059910506 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076258857 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.065061731 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.059969992 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.068753305 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068736827 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.066500688 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.072244764 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.06099614 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.068351534 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065161985 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.063647729 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.061382489 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.061346181 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.068503136 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.075790582 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.060082471 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.063435663 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.067907178 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.068316552 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.064050221 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.071891531 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.067980467 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060602405 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.061336695 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.063762629 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.207925861 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.072354388 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060724753 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.064691583 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.064586458 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.059249893 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.066420458 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076381734 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.0688096 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070018446 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.059958047 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.059828158 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.07879023 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.064203679 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.063881042 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.068957972 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.070086467 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073038187 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.069948293 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.077333965 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.061071368 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.066281578 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072949457 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.060935849 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.060579996 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.064165388 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.061887486 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.06971985 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.070316367 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.06796365 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062235469 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.06796019 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.074813854 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.06190022 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.065036007 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.065495235 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.061214293 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.070671084 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.068332285 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.072683008 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.061924516 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.060062404 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.063943062 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.06915532 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.068411258 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.068324508 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060807813 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.06572725 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.0735603 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.067131387 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061848138 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.058565334 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062808055 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.06913904 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.06392108 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.059683826 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.06505224 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.064178775 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06742483 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.070817563 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.064863628 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.059848635 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.077694639 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.068695668 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.069684354 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.062238695 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.062485941 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.06110829 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.059769822 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.070329805 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.058718616 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.060770032 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.063783958 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.060792437 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.076728903 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.068396436 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.076654206 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061313054 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.06489918 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.059832661 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071010339 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.065279891 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.060664306 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.071622013 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.059913938 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076035861 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.072583897 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.065886891 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.060185917 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.065603515 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.069176753 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.075864742 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070571476 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.069729013 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064232547 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.068779526 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.060909485 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.070166294 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.058751532 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.058000718 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.069007183 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068036481 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072166524 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.059061208 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.06932968 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.061037528 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.067176375 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.066900808 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.060181286 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.060551491 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.060188856 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068368008 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.06382869 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.068424288 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.063668979 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.075418636 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.060011558 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.069960003 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.068300673 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.069792453 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.072915213 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071331774 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.066408776 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.059199133 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066522689 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.066487655 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.059394459 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.06326911 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.060699817 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078731323 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.059747817 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.059350471 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071693538 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.063711484 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.057794627 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.06375189 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.2054501 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.070655101 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.06090587 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.070632654 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.063617095 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.060167951 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.063910806 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.0638042 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.05815063 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.059071358 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.059146523 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.069339249 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.063573039 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.059026784 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.077467016 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.060213661 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.067850962 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.070200996 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.065635483 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.060433614 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.057975995 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.059984229 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.072282678 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074639829 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.062592147 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067700887 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.06083228 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.068427272 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.058072891 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.067704682 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.067496853 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068207798 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.058864884 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059469603 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.07418097 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075985491 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.065679673 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.070234508 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.070302451 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.061416701 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080895114 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.069108918 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061873425 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.070818946 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062365277 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.058443804 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.05781578 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.061306786 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.070811028 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.058525053 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.061317829 seconds)
  done (took 41.37057216 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.097402964 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.059804631 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.05864441 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.058618192 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066559737 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059955129 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.058551386 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.059778071 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.0599776 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.06174566 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.059049604 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062102567 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.065306535 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.072009577 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.067094098 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.062620795 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058794806 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.059992822 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.058843215 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.060218208 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.064896775 seconds)
  done (took 2.795114466 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.063411064 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.062493372 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.063245995 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.062921758 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061937879 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059076585 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.062837458 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060255614 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.064175765 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060387125 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.064783406 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060474417 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.060792602 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.061068681 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060344351 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062051835 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.064863469 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064045776 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.060097185 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064111079 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061890964 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.064267747 seconds)
  done (took 2.816764994 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.061511355 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.059706631 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.067686633 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.058155489 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.058870084 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.06265307 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.058755753 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.064295577 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.064333263 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.064870272 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.069068444 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.060568716 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.059566738 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.065429072 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.059522005 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.060536826 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103583258 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.061526422 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.061436775 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.060347825 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.062897235 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.069316141 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.059678305 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.060145924 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.064517291 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.063119615 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.059654016 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.062787917 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.061019979 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.064546838 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.061164648 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.059583289 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.069135747 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.068271324 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.06449916 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.064328386 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.061628842 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.061091559 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.059654834 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.060090469 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.068784128 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.06119186 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.0600919 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.06131808 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.0691956 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.059728262 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.059859713 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.06919036 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.059467386 seconds)
  done (took 4.558430224 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.069777099 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.110338636 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.064394364 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.09213496 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.070918756 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.064463299 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.064032224 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.092850545 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.059648661 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.060110015 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.07183215 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.072067197 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061633478 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.063354936 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.064431566 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.061206681 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.06217571 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060803769 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.063796221 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061096961 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.064131341 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.065343274 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.070839026 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.07157373 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.061938139 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060477784 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.060939303 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.062401964 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.071388705 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.064467856 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.062671267 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.06358926 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.07125208 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.06459484 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.060820259 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.060743492 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.072023931 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.061515663 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.06140313 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.059820791 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.06077729 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.062599793 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.06571686 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.072222635 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061637345 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.0662066 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.061482599 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.059456705 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.071727145 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.061095996 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.06481795 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.072689606 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.062524384 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.061990479 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.062813606 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.072446912 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.061879576 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.060394512 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.061636554 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.071261985 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.060023595 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062529856 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.075167173 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.061332932 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.064698216 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.072538571 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.066324978 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062491071 seconds)
  done (took 6.093920062 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.068971479 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.095159624 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.075949429 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.075951561 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.071029944 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.070891193 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.070851425 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.070853098 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.070618249 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074108226 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.0709612 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.106021591 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.067328513 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.072692687 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.070499744 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.070858747 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.07104103 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.070973238 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.070791305 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.07050103 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.07088811 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.075991905 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.071003606 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.076007073 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073506058 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.067249887 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.070687464 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.070673989 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.076655343 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.070899051 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.073829009 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.070615319 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071043299 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.076330839 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.073362633 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.070933292 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.060996811 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.070659209 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.070826359 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.070568145 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.066809637 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.07673663 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.070705953 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.067239978 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.070576488 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.070658096 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.076227327 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.073768292 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.070614049 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072003358 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.069452665 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.07458492 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.069237918 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.069569085 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074397269 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.076896477 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074551452 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074516415 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.069530242 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074355861 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074476832 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.077234573 seconds)
  done (took 5.994845576 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.073604167 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066676048 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.079568304 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.060408962 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.059649647 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.069473829 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.06017509 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.06017682 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.067049621 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.067064887 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068936242 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.069992801 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070674949 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067267852 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067804572 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069949011 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06810795 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067824735 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06553312 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.06815773 seconds)
  done (took 2.823330116 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.073508013 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.077705454 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.064677914 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067511763 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.064496279 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.068170136 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.06424401 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065128933 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065528997 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066064853 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.070772249 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.070627639 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066065495 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.069350562 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.070402271 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.069475873 seconds)
  done (took 2.560438773 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.062271531 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.066834829 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.065386731 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.05988856 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.062327066 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.060672103 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.061489639 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.060034343 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.062696291 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.07454832 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.061167096 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.063685507 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.061469382 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.060369885 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.061225689 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.063508317 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.062834637 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.061254711 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.061417619 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.065459336 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.069546624 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.06202731 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.064762109 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.061296257 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.063399618 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.069579174 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.062609241 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.063659455 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.060860103 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.063663267 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.063247467 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.067797646 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.063531505 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.061806874 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.060357642 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.061111319 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.061513443 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.06395206 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.064143279 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.061718682 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.060055874 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.066562372 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.061976713 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.062280109 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.062710599 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.064008298 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.063302764 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.067273345 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.061578021 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.063900004 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.061474946 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.063304759 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.061763698 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.068605688 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.063793617 seconds)
  done (took 4.949425823 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076075861 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064237864 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058734786 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058553595 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063670777 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.064171727 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.063874896 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.064378739 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064542447 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.059337723 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064257425 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.063332209 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064263333 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063999793 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.064625962 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064482463 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.06079227 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.065488969 seconds)
  done (took 2.632089255 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.065250977 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064519037 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.063052362 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.060396625 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.060661641 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065514066 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.059159468 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.061859914 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061641193 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.061852555 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061970098 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.061734164 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061383065 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.061421997 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.066090962 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061893491 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.061297243 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060576676 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.06196932 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.060052383 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066989369 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060639492 seconds)
  done (took 2.845450981 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.086063998 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.082116487 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.125333012 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.077832025 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.08696226 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.071426353 seconds)
  done (took 2.004607604 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.093180116 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.098156157 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.065022482 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.065044121 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069946998 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068537686 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068019588 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068290041 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072088753 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.0720176 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068734026 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072220504 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071724226 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074102828 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069482184 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069050905 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067333727 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067038958 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.063802997 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075727617 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066723682 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069924019 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066803415 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066543397 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06657938 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072411012 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070466083 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07077946 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066742009 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070240104 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068374136 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066840606 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070290618 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070561342 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.064068294 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069926299 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06731819 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074692393 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069623217 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074043846 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.065135238 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070264362 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071216561 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069928536 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070858181 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068740277 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070862021 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06701536 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067498671 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075464776 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068701029 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072515219 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068819256 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071768657 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071992074 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076559614 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070966815 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072397474 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068935181 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072262363 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074301372 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070353315 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073902757 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071234355 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069889894 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074623761 seconds)
  done (took 6.1484479 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.102695703 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064391754 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066946201 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070626225 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072020242 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066893333 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067172249 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067102435 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066674681 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064325345 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.10252247 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067012377 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072334159 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074847727 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06723609 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067259474 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067148082 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072266608 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.064735791 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076967372 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068597374 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073988973 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072124789 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071776697 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070358286 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06871149 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067260076 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066703866 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067124348 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066614199 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07025266 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067421059 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072069794 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063841432 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071905824 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067671484 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06869998 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072146675 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068217681 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070096582 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073850798 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076274818 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068122848 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068393866 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072597136 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068477663 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068782088 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065911949 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068750626 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065620911 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.0724007 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072696907 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072955658 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074345547 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069077338 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068790168 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068911119 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069055643 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068488673 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069787941 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073918216 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068699099 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078060851 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069349934 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06921561 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074727866 seconds)
  done (took 6.162259085 seconds)
done (took 127.716911219 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.228816252 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.197481186 seconds)
  done (took 1.881836781 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.072489197 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.163424838 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.072525153 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.072073513 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.105968678 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.105020753 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.073270224 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.070012114 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.07350625 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.071557337 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.138864506 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.073695118 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.069808724 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.069975684 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.06995706 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.069652195 seconds)
  done (took 2.856554712 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.104562509 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.201913373 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.079432283 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.06753148 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.148597508 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.074522087 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.069852344 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.074286182 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.074488257 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.06777834 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.104397506 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.080905809 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.073148058 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.074148588 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.069608825 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.072731446 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.073705669 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.074140836 seconds)
  done (took 3.073811036 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.10046294 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.089455966 seconds)
  done (took 1.684301859 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.154514954 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.102809549 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.14211069 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.340469154 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.137382387 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.13550372 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.138471482 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.133969527 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.107138664 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.130900511 seconds)
  done (took 3.010102159 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.103323086 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.101888767 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.303093152 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.099824981 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.079804336 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.074785426 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.072623813 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.077687831 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.074293181 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.075819191 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.121036111 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.072915136 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.070901301 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.122882682 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.09541501 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.103945266 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.069580533 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.077368648 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.079254749 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.069791044 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.075401885 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.077423857 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.176109974 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.075873144 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.096956223 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.072635812 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.074611853 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.071803575 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.071908469 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.075246534 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.076695324 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.096454438 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.075458792 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.0802286 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.074082369 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.094107133 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.068996301 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.095661323 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.071756936 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.070617708 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.075010775 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.078559578 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.07155467 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.077901659 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.074120138 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.076739593 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.079571178 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.070109043 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.074217208 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.073928856 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.071671837 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.075836719 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.075658053 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.076940116 seconds)
  done (took 6.172999088 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.105194825 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.105993139 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067957079 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.110399235 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.102584218 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068261673 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.102159224 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.097937644 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.105678357 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067356242 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066724525 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067229312 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.073872686 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.076801676 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.113610451 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.105403745 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069404321 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.067467994 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.105975084 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.107161851 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068331164 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.101462721 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.099087074 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.105885405 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.066023461 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.067383439 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066047827 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.06692225 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.071664216 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.072593276 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067032743 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.07296236 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.078519574 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.073156273 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.065642379 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066100924 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.065867041 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.073290922 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.073672681 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.073858852 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.07247542 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.065798989 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066467995 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067152818 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067150099 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.065903711 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.072335673 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.072819655 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.072437944 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066686835 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.066808717 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.06616273 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.066785782 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.072752936 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.072331619 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.073773455 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073301686 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066264238 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066823122 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.067899943 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074383342 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.074484433 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.073652812 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067661319 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.074464626 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067588037 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078688514 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.078787663 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066550235 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.066908052 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.066632777 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066420603 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067025543 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.072227706 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.072421205 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067250451 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.066651189 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067130208 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.074904482 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.072329457 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066997942 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.072050029 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.066087878 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.06644102 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068259252 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068501533 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.07348904 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.075291358 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.06907072 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067718641 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067940171 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068188369 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.06725731 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.074375052 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.074961363 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.074782017 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.072518151 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.06639357 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.072562956 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.07242954 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067260678 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.071968506 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066036137 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066802477 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066545304 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.071618065 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.070283912 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.073319105 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.065666674 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.065456303 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.070864762 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.073088345 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.065341054 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.070415819 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.072702366 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.208988044 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.066987241 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076304203 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067276184 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.07512416 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067482064 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075342126 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067341033 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072962365 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066810075 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.066666997 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.068232446 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.07455043 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068669571 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.06794618 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068398445 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067992263 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.074856392 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076589868 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067179467 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072605106 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.072546124 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067017092 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.072400472 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067589476 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.075245499 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066893917 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067027258 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066042785 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.074921119 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066422184 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066436872 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066170892 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.07400777 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067053084 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.074894959 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.071884654 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.065589997 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075958221 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.074468368 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.071949546 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.075318885 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067524332 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.066518469 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066431299 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.068877472 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.071469942 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07426365 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06681194 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066297505 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.071648329 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.074303976 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.066204755 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.072063959 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.071891508 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.072629737 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066968139 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.066738961 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.075523561 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.074994503 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.072589454 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.072285757 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.07287994 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066771635 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072010642 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072243653 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066743733 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078788621 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066890647 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.076486647 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.072745734 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.071647703 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.072824198 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.074406796 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.074478805 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.074673186 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.077445971 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066619362 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066296534 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.07249048 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066566957 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067194005 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.072344957 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067427692 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067131756 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.077125698 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066946057 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.074766893 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.066267851 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.073311787 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.065857777 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066865232 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.07759767 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066939876 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067193035 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.07267712 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066688895 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.072344025 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.074770592 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.0720894 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066149159 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066920562 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.073211094 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.073503071 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066549261 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.06620226 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.06697116 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.071851325 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.07145244 seconds)
  done (took 17.870456439 seconds)
done (took 38.056634598 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.166408493 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.112747379 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.207125116 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.196393792 seconds)
  done (took 2.276341666 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.097858591 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.063349513 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.077820812 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.087483144 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.063051187 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.07331555 seconds)
  done (took 2.001261318 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.196422459 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.172121782 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.239929667 seconds)
  done (took 2.138352759 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.363753618 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.146160278 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.212905428 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.4961567 seconds)
  done (took 2.849972379 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.107401808 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.097397347 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.075064084 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.108233395 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.08246399 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.060691223 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.130011586 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.067396245 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.096722721 seconds)
  done (took 2.420302549 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.135974056 seconds)
done (took 13.380757686 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.215781482 seconds)
    (2/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.219970015 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.185388135 seconds)
    (4/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.436773432 seconds)
    (5/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.118780583 seconds)
    (6/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.118758145 seconds)
    (7/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.094901082 seconds)
    (8/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.181574894 seconds)
    (9/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.102658813 seconds)
    (10/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.23610069 seconds)
    (11/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.205422211 seconds)
    (12/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.187985958 seconds)
    (13/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.087055666 seconds)
    (14/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.186869811 seconds)
    (15/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.070939212 seconds)
    (16/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.179388023 seconds)
    (17/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.256569416 seconds)
    (18/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.110147649 seconds)
    (19/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.234764693 seconds)
    (20/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.193977138 seconds)
    (21/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.169257646 seconds)
    (22/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.120934401 seconds)
    (23/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.073802793 seconds)
    (24/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.13804227 seconds)
    (25/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.070716217 seconds)
    (26/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.197356348 seconds)
    (27/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.075178178 seconds)
    (28/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.073594854 seconds)
    (29/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.076104371 seconds)
    (30/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.168936685 seconds)
    (31/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.19529238 seconds)
    (32/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.091247376 seconds)
    (33/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.069216447 seconds)
    (34/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.169415157 seconds)
    (35/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.085894534 seconds)
    (36/341) benchmarking ("sort", Float64, false)...
    done (took 0.134615382 seconds)
    (37/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.072296128 seconds)
    (38/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.08078074 seconds)
    (39/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.074006971 seconds)
    (40/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.074130222 seconds)
    (41/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.066634056 seconds)
    (42/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.146200948 seconds)
    (43/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.0930894 seconds)
    (44/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.092505233 seconds)
    (45/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.224071456 seconds)
    (46/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.08718447 seconds)
    (47/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.08059282 seconds)
    (48/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.076365862 seconds)
    (49/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.237800697 seconds)
    (50/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.07427516 seconds)
    (51/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.239260017 seconds)
    (52/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.063866649 seconds)
    (53/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.194504712 seconds)
    (54/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.064305931 seconds)
    (55/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.18873362 seconds)
    (56/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.063779655 seconds)
    (57/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.063983923 seconds)
    (58/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.089560753 seconds)
    (59/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.072341383 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.073004305 seconds)
    (61/341) benchmarking ("sort", Float32, false)...
    done (took 0.134858575 seconds)
    (62/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.15089457 seconds)
    (63/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.081915528 seconds)
    (64/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.084975719 seconds)
    (65/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.064301871 seconds)
    (66/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.084907144 seconds)
    (67/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.152337645 seconds)
    (68/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.144023229 seconds)
    (69/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.064810817 seconds)
    (70/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.074414471 seconds)
    (71/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.138942019 seconds)
    (72/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.193688694 seconds)
    (73/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.062583516 seconds)
    (74/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.071178997 seconds)
    (75/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.084616766 seconds)
    (76/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.074223372 seconds)
    (77/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.070280945 seconds)
    (78/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.062664467 seconds)
    (79/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.134528437 seconds)
    (80/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.219957778 seconds)
    (81/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.066629828 seconds)
    (82/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.134643475 seconds)
    (83/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.065318811 seconds)
    (84/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.065682037 seconds)
    (85/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.183576449 seconds)
    (86/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.189264995 seconds)
    (87/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.076679773 seconds)
    (88/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.069377472 seconds)
    (89/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.137348852 seconds)
    (90/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.063615753 seconds)
    (91/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.063930458 seconds)
    (92/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.090533099 seconds)
    (93/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.079758321 seconds)
    (94/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.123918643 seconds)
    (95/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.092349322 seconds)
    (96/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.064060376 seconds)
    (97/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.229612481 seconds)
    (98/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.161402919 seconds)
    (99/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.072552231 seconds)
    (100/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.195366124 seconds)
    (101/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.232948145 seconds)
    (102/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.063863254 seconds)
    (103/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.072282773 seconds)
    (104/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.166704884 seconds)
    (105/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.071485027 seconds)
    (106/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.063652864 seconds)
    (107/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.16907044 seconds)
    (108/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.158940063 seconds)
    (109/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.162063444 seconds)
    (110/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.154539409 seconds)
    (111/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.081237592 seconds)
    (112/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.092725814 seconds)
    (113/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.168193044 seconds)
    (114/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.081830524 seconds)
    (115/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.063531957 seconds)
    (116/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.072345336 seconds)
    (117/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.066876627 seconds)
    (118/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.069793499 seconds)
    (119/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.067311892 seconds)
    (120/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.073749347 seconds)
    (121/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.066895307 seconds)
    (122/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.192366126 seconds)
    (123/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.088987026 seconds)
    (124/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.217358852 seconds)
    (125/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.073131926 seconds)
    (126/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.142880258 seconds)
    (127/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.150987315 seconds)
    (128/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.072948998 seconds)
    (129/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.067125395 seconds)
    (130/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.070999303 seconds)
    (131/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.167175029 seconds)
    (132/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.065493178 seconds)
    (133/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.15974147 seconds)
    (134/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.071687886 seconds)
    (135/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.216261155 seconds)
    (136/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.071920536 seconds)
    (137/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.072794182 seconds)
    (138/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.13438594 seconds)
    (139/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.07343062 seconds)
    (140/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.063636829 seconds)
    (141/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.06414445 seconds)
    (142/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.063683342 seconds)
    (143/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.144114898 seconds)
    (144/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.063217917 seconds)
    (145/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.064299144 seconds)
    (146/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.072937946 seconds)
    (147/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.063702499 seconds)
    (148/341) benchmarking ("sort", Bool, false)...
    done (took 0.140921225 seconds)
    (149/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.064842742 seconds)
    (150/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.064767723 seconds)
    (151/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.070757384 seconds)
    (152/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.077431409 seconds)
    (153/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.139898347 seconds)
    (154/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.082458982 seconds)
    (155/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.063733817 seconds)
    (156/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.088091214 seconds)
    (157/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.114857845 seconds)
    (158/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.070827611 seconds)
    (159/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.072959338 seconds)
    (160/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.063653402 seconds)
    (161/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.149156306 seconds)
    (162/341) benchmarking ("sort", Int64, false)...
    done (took 0.064946952 seconds)
    (163/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.071326629 seconds)
    (164/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.083521139 seconds)
    (165/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.192762596 seconds)
    (166/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.06483231 seconds)
    (167/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.153334586 seconds)
    (168/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.063963834 seconds)
    (169/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.063561702 seconds)
    (170/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.063010302 seconds)
    (171/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.065347463 seconds)
    (172/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.062996022 seconds)
    (173/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.079580841 seconds)
    (174/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.08807749 seconds)
    (175/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.062972899 seconds)
    (176/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.072386146 seconds)
    (177/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.064004674 seconds)
    (178/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.064944721 seconds)
    (179/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.070284124 seconds)
    (180/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.070018092 seconds)
    (181/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.062708709 seconds)
    (182/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.061393432 seconds)
    (183/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.074373792 seconds)
    (184/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.061503159 seconds)
    (185/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.069894298 seconds)
    (186/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.063464995 seconds)
    (187/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.063064607 seconds)
    (188/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.14261031 seconds)
    (189/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.062589448 seconds)
    (190/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.062083587 seconds)
    (191/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.063719611 seconds)
    (192/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.13832792 seconds)
    (193/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.228410676 seconds)
    (194/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.076939434 seconds)
    (195/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.073849037 seconds)
    (196/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.0772247 seconds)
    (197/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.082236263 seconds)
    (198/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.122877657 seconds)
    (199/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.082847331 seconds)
    (200/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.062324442 seconds)
    (201/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.068591044 seconds)
    (202/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.086203993 seconds)
    (203/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.072687426 seconds)
    (204/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.063705353 seconds)
    (205/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.063972785 seconds)
    (206/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.123548152 seconds)
    (207/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.140683345 seconds)
    (208/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.226159197 seconds)
    (209/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.071575359 seconds)
    (210/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.065458917 seconds)
    (211/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.071173405 seconds)
    (212/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.143588803 seconds)
    (213/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.064566473 seconds)
    (214/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.06654221 seconds)
    (215/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.063506585 seconds)
    (216/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.081392959 seconds)
    (217/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.067323038 seconds)
    (218/341) benchmarking ("sort", Int8, false)...
    done (took 0.147473895 seconds)
    (219/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.065685436 seconds)
    (220/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.091010173 seconds)
    (221/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.065211685 seconds)
    (222/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.066242192 seconds)
    (223/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.064726706 seconds)
    (224/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.08790161 seconds)
    (225/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.190225416 seconds)
    (226/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.064995482 seconds)
    (227/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.065258864 seconds)
    (228/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.14223741 seconds)
    (229/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.064123731 seconds)
    (230/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.073463078 seconds)
    (231/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.071906072 seconds)
    (232/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.064807105 seconds)
    (233/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.069171967 seconds)
    (234/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.066448614 seconds)
    (235/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.077534591 seconds)
    (236/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.075316526 seconds)
    (237/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.085589684 seconds)
    (238/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.189996351 seconds)
    (239/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.064636357 seconds)
    (240/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.082292969 seconds)
    (241/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.064754052 seconds)
    (242/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.07246582 seconds)
    (243/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.066034192 seconds)
    (244/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.064558421 seconds)
    (245/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.150792248 seconds)
    (246/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.177795261 seconds)
    (247/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.14875802 seconds)
    (248/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.074689847 seconds)
    (249/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.065090957 seconds)
    (250/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.066633583 seconds)
    (251/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.144822781 seconds)
    (252/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.070879142 seconds)
    (253/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.148524101 seconds)
    (254/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.072337112 seconds)
    (255/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.062375135 seconds)
    (256/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.063655855 seconds)
    (257/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.06607018 seconds)
    (258/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.07272364 seconds)
    (259/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.127138739 seconds)
    (260/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.177161134 seconds)
    (261/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.071578667 seconds)
    (262/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.081824073 seconds)
    (263/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.064497183 seconds)
    (264/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.0711668 seconds)
    (265/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.071882773 seconds)
    (266/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.064486553 seconds)
    (267/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.067047419 seconds)
    (268/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.069360754 seconds)
    (269/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.064572119 seconds)
    (270/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.063949144 seconds)
    (271/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.064417423 seconds)
    (272/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.129700777 seconds)
    (273/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.063609248 seconds)
    (274/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.064229011 seconds)
    (275/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.061818348 seconds)
    (276/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.092905911 seconds)
    (277/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.065972225 seconds)
    (278/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.064347476 seconds)
    (279/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.076182237 seconds)
    (280/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.066551881 seconds)
    (281/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.064227272 seconds)
    (282/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.066767408 seconds)
    (283/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.120570744 seconds)
    (284/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.138320617 seconds)
    (285/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.06562746 seconds)
    (286/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.062212855 seconds)
    (287/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.063071168 seconds)
    (288/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.064013217 seconds)
    (289/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.147387133 seconds)
    (290/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.064574638 seconds)
    (291/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.064888002 seconds)
    (292/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.076082412 seconds)
    (293/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.224989388 seconds)
    (294/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.130498326 seconds)
    (295/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.066916868 seconds)
    (296/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.065916282 seconds)
    (297/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.064006066 seconds)
    (298/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.064548531 seconds)
    (299/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.064124422 seconds)
    (300/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.071001544 seconds)
    (301/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.06377473 seconds)
    (302/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.071200262 seconds)
    (303/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.063869025 seconds)
    (304/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.063150512 seconds)
    (305/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.067142638 seconds)
    (306/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.078764341 seconds)
    (307/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.063582461 seconds)
    (308/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.064764666 seconds)
    (309/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.063185707 seconds)
    (310/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.064202394 seconds)
    (311/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.083722951 seconds)
    (312/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.063463372 seconds)
    (313/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.065097918 seconds)
    (314/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.071912568 seconds)
    (315/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.063129967 seconds)
    (316/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.062928296 seconds)
    (317/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.062490339 seconds)
    (318/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.075695045 seconds)
    (319/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.063615452 seconds)
    (320/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.062856885 seconds)
    (321/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.064327635 seconds)
    (322/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.06409494 seconds)
    (323/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.069653472 seconds)
    (324/341) benchmarking ("sort", BigInt, false)...
    done (took 0.449907758 seconds)
    (325/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.077682403 seconds)
    (326/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.066511549 seconds)
    (327/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.065295814 seconds)
    (328/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.074868935 seconds)
    (329/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.130940182 seconds)
    (330/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.066649629 seconds)
    (331/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.089834821 seconds)
    (332/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.067608282 seconds)
    (333/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.068023194 seconds)
    (334/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.070116222 seconds)
    (335/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.109788211 seconds)
    (336/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.089565688 seconds)
    (337/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.064728127 seconds)
    (338/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.073476559 seconds)
    (339/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.143126067 seconds)
    (340/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.064038074 seconds)
    (341/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.070052096 seconds)
  done (took 36.262438897 seconds)
done (took 37.816740948 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.089684197 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.077608403 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.076538983 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.07465737 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.078249507 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.07698149 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.07811045 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.076131564 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.077259347 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.076751419 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.076780952 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.064658414 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.073063472 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.080442786 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.073978639 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.080458105 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.07739745 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.080572541 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.065490215 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.079348671 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.093049675 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.077528672 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.073118326 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.078977355 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.065319536 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.074082024 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089376953 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.086688269 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.071839783 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.074462159 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.072867946 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.083801493 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.072958646 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.071429754 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.074862755 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.070907042 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.074617117 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.071878508 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.088700507 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.070489965 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.0651428 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.077108984 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.072254419 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.07325392 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.074302964 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.077483314 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.070564317 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.078766155 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.063250395 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.075166489 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.086257362 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.068018466 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.069690531 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.072171865 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.06911916 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.073036776 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.069843405 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.074932794 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.068324121 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.076029155 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.076353929 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.073722961 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.06473364 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.073855088 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.072288194 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.072601428 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.063759021 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070135163 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.06489891 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.064673477 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.064037275 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.073571127 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.071988513 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.069800622 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.063971345 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.064838452 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.064280271 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.0771542 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.071090658 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.074535354 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.064823696 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.069973578 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.069827183 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.064863018 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070223512 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.076204248 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.063837154 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.065078955 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.06344586 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.0779957 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.070453378 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.06442624 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.076360498 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070008802 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069879158 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.064510487 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.06360736 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.068040566 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.071545661 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.063311817 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.062120956 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068117609 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.068102891 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.072362628 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.063737952 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068258146 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068525525 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.062333245 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.07273474 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.071025979 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.072221239 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.076116046 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.072073996 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.075394219 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.063733898 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.06199395 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.072612099 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.063507314 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068283384 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.070689573 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.068441075 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.071011904 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.063403286 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.062586695 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068291964 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.069711517 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.063357795 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.06360676 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.063442156 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.072450973 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.070350839 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.061864605 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.063058849 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.071635601 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.071563831 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.062084313 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.062000762 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.071806675 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.062902603 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.068589053 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.068322821 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.071438769 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.062200302 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.062494041 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.062011911 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.06196776 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.064886958 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.067503784 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.067194447 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.06277058 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.070801798 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.216627209 seconds)
done (took 12.59735338 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.06757181 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.108669828 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.078123055 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.08030055 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.077079558 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.065347927 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.067975361 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.082636989 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.067703776 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.088081122 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.089280906 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.085427856 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.093950124 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.062315036 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.06403889 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.064894561 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.062495559 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.075993031 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.081157751 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.087450741 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.099754173 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.063615823 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.079441151 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.083707004 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077988428 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.081552212 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.065839245 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.065585414 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.06741737 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.082896433 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.090935273 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.063701314 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.065249489 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.081114856 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.079101089 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.071859005 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.064657953 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.070369843 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.067850429 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.06410145 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.065862659 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.081746952 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.070479295 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.070655214 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.065561984 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.065334187 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.064445356 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.070830764 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.081410391 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.06966768 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.076065791 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.082919821 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.065994545 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.064489274 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.062397862 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.071329365 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.064096552 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.064853165 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.064848225 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.063715848 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.065199238 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.066792507 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.069183836 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.070086603 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.067820752 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.070162852 seconds)
  done (took 6.444943457 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.081806784 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.090178429 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.078669206 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.07926441 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.063995507 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.064498086 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.064966889 seconds)
  done (took 2.186516378 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.066361692 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.072202905 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.076477075 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.076546228 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.085735922 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.074436815 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.065375105 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.095911855 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.063891579 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.072553751 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.079826034 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.077641804 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.067791736 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.076555381 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.065000614 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.076254845 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.064746405 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.071449219 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.072151036 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.077692252 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.068622613 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.094590636 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.078195263 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.065205392 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.077855057 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.0718512 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.066786628 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.065355837 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.064955865 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.064160487 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064058894 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.086542517 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.071264208 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.076642724 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.064820907 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.063382421 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.068766753 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065218705 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.068466405 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.073069682 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.068387334 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.064403058 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.064810816 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.064475128 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.065685906 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.068690425 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.065350877 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.064092884 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.063593397 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.071779757 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.063636343 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.070922792 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.06676231 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.069489571 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.069087456 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069015477 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.071137424 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.06449853 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.071572604 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.070882397 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064070753 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.076440103 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.075650205 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.067638355 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.075974864 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.072614735 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.070710505 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.068054817 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.063679764 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.063815276 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.064672869 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.075858038 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.067567598 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.066922908 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.065031701 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.068995923 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.067942362 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.079053688 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.079146576 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.077326698 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.066632392 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.064364678 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.06806613 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.078943465 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.068856183 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064194644 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.06494681 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.063475378 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.069098106 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.064525816 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.069123739 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.064685931 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.070904217 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.066663353 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.066361407 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.071988115 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.064313544 seconds)
  done (took 8.457524835 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.067535939 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.066551027 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.065353038 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.065466365 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.065869402 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.065641081 seconds)
  done (took 2.099699549 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.088673796 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.064871143 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.076612293 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.065219367 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.087098921 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.071323847 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.071449846 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066904124 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.080973927 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.075458575 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.071087406 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.07375327 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.07403895 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.06643001 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.071186036 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.065532443 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.070686565 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.067414941 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.074509136 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066696162 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.081153509 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.066840803 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066845872 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.076550647 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.067768626 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.065642152 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.066136871 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.074970142 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.074284373 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.066338945 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.066115515 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.067836543 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.072980079 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.066335649 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.071128851 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.072814314 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.064554683 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.069913903 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.067061354 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.067458651 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.072954122 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066554405 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.066664235 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.069870199 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.066454682 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.073585605 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.069842962 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.068247186 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.070709082 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.070012051 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.069635101 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.065289147 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.067446138 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.069885115 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.072856258 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066345229 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.07003408 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.070325564 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.066179207 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.073032835 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.065049324 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.067802745 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.066410867 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.067375601 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.06907074 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.069738671 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.072836691 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.071059007 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066783565 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.064551377 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.070182503 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.06523421 seconds)
  done (took 6.708314547 seconds)
done (took 27.546198205 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.542160742 seconds)
  done (took 2.185668311 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.884360054 seconds)
  done (took 2.566263505 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.015697334 seconds)
  done (took 9.708886329 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.344396164 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.408282545 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.728581155 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.130159394 seconds)
  done (took 3.342395377 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.756278994 seconds)
  done (took 2.451371357 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.22996658 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.218328124 seconds)
  done (took 2.15342005 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.33344579 seconds)
  done (took 2.014286079 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.140667703 seconds)
  done (took 2.823149477 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.231796487 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.160590728 seconds)
  done (took 2.076773226 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.537071358 seconds)
  done (took 2.212599712 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.259522758 seconds)
  done (took 5.94664682 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.232528749 seconds)
  done (took 1.959825503 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.228288933 seconds)
  done (took 1.918709569 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.009509805 seconds)
  done (took 3.691996439 seconds)
done (took 46.751065757 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.083398901 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.084501906 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.084240505 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.078952573 seconds)
  done (took 1.993621967 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.07327546 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.068579859 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.071581068 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.071711642 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.068879218 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.070160468 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.070764701 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.067727879 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.069235917 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.068390725 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.067639627 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.067949559 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.070548934 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.068094826 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.071026612 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.071784531 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.068112008 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.068299961 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.070417824 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.067819519 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.070374671 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.068045494 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.06601149 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.067878766 seconds)
  done (took 3.354703542 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.07650835 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.070137097 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.073233644 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.069166652 seconds)
  done (took 1.98459326 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.074726379 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.074339291 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.083159618 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.08764037 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.073464415 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.074833795 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.08129993 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.081686148 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.06340701 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.084646098 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.065950529 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.064920052 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.065932484 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083081837 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.080654882 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.060407662 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.061741502 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.07463724 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.074127036 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.076557538 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.066226929 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.063486729 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.073967064 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.074906876 seconds)
  done (took 3.461575886 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.079885819 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.063444279 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.078964398 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.089179111 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.089801854 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.063588129 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.076946006 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.090729919 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.125436224 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.063692467 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.069770925 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063737045 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.102461559 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.064028108 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.078798723 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.106780629 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.110217174 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.06762108 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.096852271 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.064066596 seconds)
  done (took 3.352541803 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.07447622 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.067766863 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.068816055 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.063711788 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.074745216 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.070868612 seconds)
  done (took 2.129852918 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.066816383 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.06649694 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.067809436 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.070333356 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.065926348 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.066058714 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.065367525 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.063982844 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.063845817 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.064724911 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.064996383 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.065325678 seconds)
  done (took 2.494402723 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.147114285 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.067053592 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.068220395 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.064381918 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.065728514 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.064920997 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.080427987 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.066586075 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.082140235 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.065025871 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.065066578 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.067255439 seconds)
  done (took 2.606382698 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103830948 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108747336 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.142372856 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114790616 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114865663 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093980551 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.12223087 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.092658993 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.156910298 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.133939842 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114106357 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.090919657 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084288798 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.067157283 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097167843 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115638347 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134793156 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.070802761 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110643597 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.161906218 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129048769 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.131552818 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145573374 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114556513 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08748304 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145087477 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09473814 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099836053 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.121622707 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123345708 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116710539 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.095024599 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.068905949 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.06834207 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145713516 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.100581216 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117286738 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.089903804 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102924407 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.085985884 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104683754 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.066997553 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.082903119 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.110135454 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082348022 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128299023 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.086219488 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112711876 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07862409 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.133757104 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.1190831 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094673847 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.082380322 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100175474 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.289849067 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110128997 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.131840038 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105351646 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080658724 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.116755975 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.101041083 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098330336 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104542308 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077969139 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.173442465 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086047402 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.108990312 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108682256 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.09132896 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09221434 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104306665 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132389609 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122057405 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.122939002 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135600338 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.093130072 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119663273 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.097093289 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.126424194 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102216797 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.071000807 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.118468228 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.125789712 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09676111 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098181265 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.127133297 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.089402058 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075144428 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.096565679 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.116042633 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078217752 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.109161166 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077958875 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.106258337 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131030212 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094787682 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109198246 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.113986777 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075402998 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15193866 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.105578209 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070057004 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.114667883 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109795998 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151479348 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091232283 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.073242517 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.095942297 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.260557015 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.146379035 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105312135 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078574405 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108567543 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136504052 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093363562 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.166456827 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.0939121 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136930598 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109616884 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084857389 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073067317 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.087599322 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109540607 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105526642 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109586792 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087651805 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.081611023 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084766052 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109232839 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08935021 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078593719 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.111205263 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.09874817 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.072159953 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086146586 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.076792929 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138672207 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.075884357 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134979997 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122515426 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.076473414 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103837444 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.095543226 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10580707 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.095397364 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113925777 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137256409 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.113029033 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.087951434 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.092409169 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105875091 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.140524922 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.124422936 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090008288 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.074366907 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097144974 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109291785 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095169667 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.123728921 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.097542438 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106339681 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100902387 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137447697 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139552834 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096612043 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097184287 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101978263 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.281865007 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075447059 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153713767 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102100543 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11615383 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082834292 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137954483 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.111292805 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.086874136 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085204046 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097974798 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.101255475 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103097568 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140236407 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.092929101 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.070709284 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090552967 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140726308 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074159253 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106916585 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.08865784 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.090407141 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115497182 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.090550027 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078800166 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.065953718 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12478481 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.155380175 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.06776806 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.111895108 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.108801334 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100612867 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.120528422 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.068088582 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116789763 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.135866713 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115486654 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137916971 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144253216 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113724062 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116215239 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.111677358 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103625713 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077527717 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.123253569 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.131695229 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093988526 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090283735 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132841157 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114621022 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.130682936 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.111615562 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109684826 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.100420143 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.266001058 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101153396 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.10018994 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141274351 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117515953 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.121608419 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083902762 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103263623 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114930337 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132120789 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07977938 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138789576 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.081015827 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115861328 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.074816691 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120286087 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.077192328 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.108337466 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.076923738 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097070557 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.067404316 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.071667208 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.137755169 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.10934268 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103048051 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09746915 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.134196271 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.134236453 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.078579562 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105694152 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113120096 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098975908 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113440014 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107008758 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.086837125 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092698968 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106783765 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083250736 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.079763114 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.112058106 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09222099 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124349526 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.082173558 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072912581 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13778661 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102576026 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092949403 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075812563 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106043997 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.119170898 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090578076 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085154802 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112454725 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102254994 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138416375 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.087484037 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.09440826 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.120572819 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077488765 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.088858524 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.066613733 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.081601879 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.073617456 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.286593757 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.074857207 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11405365 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.067076631 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.127827379 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084837345 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.09057574 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.09965615 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10850352 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124484225 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.092102435 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137177573 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086855628 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115076549 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104594676 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091446922 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085838437 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100718286 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09834467 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.119678782 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.093853715 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119453242 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140644986 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101961303 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.138392409 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089280217 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119135648 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103893328 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.121905693 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109991687 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144069111 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135640393 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110565407 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10966235 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072796207 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092247456 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103019214 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.108903842 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.171655666 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123143455 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.069908774 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10356776 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091384043 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106293932 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102925843 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080830225 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14414285 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099443042 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.086000755 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109749126 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.087578137 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100309978 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072956096 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.091565665 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.095869504 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.249008432 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09656913 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112939298 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125037162 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110741016 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.140025121 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.097685001 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.090698253 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.115528014 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10737195 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107952275 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083511544 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083858691 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134204463 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115513928 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.125413357 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.097444024 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106761403 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108604323 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09744367 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122675175 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10490786 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.123442808 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078185432 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.074028964 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.0661042 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.069820481 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.120380861 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106181804 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108990696 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095779908 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.070151299 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101113837 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103838084 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069687601 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086839439 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091901197 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096830488 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.089378907 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104344182 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.111653761 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.088747677 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101874005 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097036772 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14366011 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.098281937 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086442767 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14112472 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.147237531 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085989642 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090588362 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.069162712 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.076939349 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111264684 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146353472 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.146666287 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.074809353 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082949438 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.08212717 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.082610591 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.068026956 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.24338556 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.087902229 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102668268 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096948216 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.110601232 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101943589 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073755465 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101003089 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097019303 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.089655748 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.1012017 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115014324 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.121852485 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.137399336 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10733291 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104485568 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074134386 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.077983794 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.073564727 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.076959592 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.099298233 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.076423646 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07415464 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140152104 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.089715238 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101715681 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105607929 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08634672 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073017937 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131142884 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.067149203 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132828907 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.06941931 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080071128 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.080141742 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077297883 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091679151 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13650735 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107494952 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110777425 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104152846 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102266557 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138294076 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153208667 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.0778254 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.140800789 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073342064 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073299926 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.073750152 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111667468 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087648507 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112142742 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138213585 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089011988 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101367267 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075089674 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140478808 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.096543396 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100101266 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083622898 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.075801998 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.301098417 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077879906 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.078134376 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088388196 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.109177191 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.070403723 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.101683121 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082735727 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.07748399 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139165711 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.62757886 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087545038 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.073292122 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093668071 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.138399275 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.124017673 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092260166 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105471846 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.116180687 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.097084936 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093171325 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104882473 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.179226819 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071767064 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092015879 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.100782058 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095520814 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098958501 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.095846063 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.084065794 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.09003538 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.084957421 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077435732 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105329325 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08714762 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094300029 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105003342 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081100599 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.084817083 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.12790809 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.10287184 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.081396553 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086545899 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.103908576 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086919911 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099247269 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.06722826 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111069571 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.088661808 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114398076 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092923215 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.104470513 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.124411654 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088045589 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13558811 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.10424635 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.119817413 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085258434 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.075956981 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122653147 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.084903378 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075670703 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.303408582 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.092586833 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.09057032 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101563672 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.094083503 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110704248 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11480865 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108811911 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.095225425 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077011179 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097240878 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.099079112 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082367009 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075940915 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.072265411 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.074021048 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104471323 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082790716 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.081068868 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111547358 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086248425 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100612069 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.097567378 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.119197279 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08086572 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098125158 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107078767 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.08973998 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107127393 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098213702 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.12510232 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.17105464 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123237773 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.125981058 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131762684 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.07464287 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.073176743 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.066458777 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112843321 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.077184435 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.086743861 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078959384 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130740374 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.07989991 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108512417 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.226961721 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.078340006 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.091427943 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094498238 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.06797038 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.080959595 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105783089 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085263291 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078225399 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116701098 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081380658 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125807524 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109263786 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097109351 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092254865 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079225905 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110651812 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.101411456 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.124140568 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090568789 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.071685405 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.273511224 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101404186 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135195376 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.070842854 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079109799 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.126545864 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101268767 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12932379 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078001637 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146365934 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.14002676 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.097307209 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130874283 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069271959 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08142632 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086789615 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.123073989 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082121682 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10809255 seconds)
  done (took 66.364546518 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.148818658 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.139520306 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.086069563 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.111570144 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.194980865 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.209836814 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.129425474 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.102970392 seconds)
  done (took 2.980817386 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.068137263 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.082555944 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.078563956 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.202792848 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.094064675 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.0651381 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.070695629 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.079533139 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.065164138 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.064730466 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.09914466 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.065290557 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.065546741 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.373195542 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.064063821 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.070034935 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.06491417 seconds)
  done (took 3.511812102 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.332992583 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.005937455 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.229105213 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.292470947 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.1436931 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.553592985 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.074307859 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.080847122 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.692187793 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.364413938 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.137471781 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.086103195 seconds)
  done (took 19.843097257 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.076204893 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.076426225 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.076043265 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.072934422 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.07268985 seconds)
  done (took 2.209430048 seconds)
done (took 118.005101528 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.084354358 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.169371635 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.065376846 seconds)
  done (took 2.10743036 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.082163197 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.078753256 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.078189513 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.076099964 seconds)
  done (took 2.160152474 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.075074412 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.075936673 seconds)
  done (took 1.987367316 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.217863851 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.174174793 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.087322012 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.080536276 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.077657374 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.07788512 seconds)
  done (took 2.095688222 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.071601302 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.070132515 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.069701072 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.069860472 seconds)
  done (took 2.124745579 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.067677645 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.065238812 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.067347666 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.07008331 seconds)
  done (took 2.115397798 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.085426912 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.083597778 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.113858812 seconds)
  done (took 2.1293775 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.083580223 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.080931007 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.076033684 seconds)
  done (took 2.083818528 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.108182683 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.095096669 seconds)
  done (took 2.040578438 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.080831799 seconds)
  done (took 1.924883436 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.089118206 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.095456402 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.136294239 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.104155394 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.142837315 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.122747822 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.075249422 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.075800509 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.071289551 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.076526214 seconds)
  done (took 2.829365821 seconds)
done (took 26.002814505 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.078941065 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.371123896 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.357600214 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085026614 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.669571384 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.354195548 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.992951494 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.08888719 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.098769109 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066163575 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.082785476 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.646831199 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.984885368 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.323527407 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.972223329 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.322091023 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.653673956 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.066258049 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.065460474 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.065992082 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.978867905 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.065724129 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.06602144 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.066837082 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.647973242 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.371902502 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.066892101 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.322853124 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.065836836 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.069437071 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.354575375 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067062061 seconds)
  done (took 16.303536 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.069807065 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.12026104 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.070518749 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.081826213 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.068123651 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.067461103 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.068942681 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.066735552 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.109971115 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066360142 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083048901 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.065598927 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.069886887 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.067156369 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088300858 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066113277 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.068499273 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.066686335 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.065923502 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066500892 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.084147928 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.065875005 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.06678527 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.066937448 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.066912071 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.079103675 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067108409 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066061889 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066492544 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.069842816 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.070499218 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067115584 seconds)
  done (took 4.194172144 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.120731322 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.123545774 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.071071818 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.106453968 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.115383228 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.067866788 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.148232042 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.088902154 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112582973 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.06626895 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083356461 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.065851965 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.101408527 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.06729828 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.086118246 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066268227 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.06852065 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.066482295 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066223233 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066629845 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.085078403 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.065882086 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066612571 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.066732495 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.066527379 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.080979495 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067071254 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066530671 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.06588152 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070369916 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.071227309 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067632862 seconds)
  done (took 4.461551701 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.069528548 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.070992333 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.076323201 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.078670077 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.064578482 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.0668696 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.067590534 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.064199965 seconds)
  done (took 2.421829981 seconds)
done (took 29.244248142 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.079054784 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.065930003 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.06893248 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.085135929 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.071974241 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.068343954 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.062457492 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.072254124 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.069206521 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.069413771 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.071000546 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.064790301 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.067771155 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.062562999 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.069994274 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.063782664 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.070009325 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.068129558 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.068424295 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.069737246 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.06597458 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.069133348 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.072569764 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.068320132 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.068543753 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.068306598 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.07269619 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.069349291 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.064435301 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.066573136 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.0658064 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.078054518 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.070042214 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.070099266 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.064060408 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.06389613 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.067670462 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.066034778 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.069939606 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.072991542 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.066004019 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.072782641 seconds)
  done (took 4.726221941 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.087571082 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.091777602 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.084162826 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.079787433 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.104881266 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.079727541 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.089049682 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.07645916 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.075726058 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.088070311 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.071415267 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.076535108 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.078142411 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.072859764 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.076055566 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.072232246 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.077591619 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.070777843 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.075648061 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.075274708 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.088536123 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.069405974 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.076401225 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.077262151 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.070781658 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.076962062 seconds)
  done (took 3.938067511 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.072831411 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.086884428 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.090083908 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.138504665 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.107020628 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.080371895 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.079769452 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.091449307 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.09824038 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.065821837 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.069994511 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.091542673 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.094262208 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.072759174 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.104331467 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.083751929 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.078392335 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.067684448 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.072629236 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.100217762 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.088400676 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.084092793 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.098591943 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.086008278 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.064974067 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.074861479 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.073146906 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.082212881 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.07353704 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.078407088 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.06994716 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.072423333 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.066479508 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.078017332 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.069906649 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.063780097 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.087762164 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.079117509 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.08029553 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.103804919 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.075906137 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.067574732 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.095868105 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.131476156 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.065553673 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.068152881 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.069634564 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.078552183 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.066922692 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.095414833 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.083637747 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.065962253 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.083922088 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.067183953 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.06702191 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.081684109 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.067358158 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.108562059 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.078165159 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.071495743 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.085938682 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.070457535 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.0866272 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.06509941 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.076992913 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.066903493 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.067245731 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.064488823 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.101182382 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.072397211 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.117236115 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.066752221 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.063235367 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.077950703 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.076980462 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.072384935 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.065365933 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085234317 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.077760685 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.069095263 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.077143718 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.068410045 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.06873458 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.101006583 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.064171851 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.063551833 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.063326959 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.067810002 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.068990437 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.065956222 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.078460637 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.064813239 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.068483072 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.080725083 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.065438641 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.066076749 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.068005644 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.066683863 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.064850353 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.075693814 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.069081037 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.067139835 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.078246626 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.066694868 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.068898958 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.079964105 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.074730107 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.064800884 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.066231681 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.067758724 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.066936927 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.070237166 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.068572709 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.067481557 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.07235952 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.073010705 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.071406664 seconds)
  done (took 10.915426869 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.161851888 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.151220907 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.066577963 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.145472212 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.073681249 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.070507354 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.146871105 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.085649384 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.066240515 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.067509608 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.065417546 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.093726774 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.089399581 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.100248767 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.070168806 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.066448423 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.091284419 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.098948408 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.148995733 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.143646068 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.089497715 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.073629304 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.068693909 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.067601501 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.06724699 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.074711247 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.082008351 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.074431976 seconds)
  done (took 4.510242839 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.074730023 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.081825581 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.070225911 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.090493467 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.084056001 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.066481653 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.067916561 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.067396003 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.083186228 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.073230556 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.066283153 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.070559351 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.069659167 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.067345327 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.067011981 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.072851292 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.072403823 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.064938852 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.069517813 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.070461256 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.076574987 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.092122066 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.070036961 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.066578966 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.068864754 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.066000527 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.073121109 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.075353175 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.065741058 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.095992613 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.063293266 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.070281741 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.080537089 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.066972085 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.065714834 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.066610093 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.065942967 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.065950516 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.066368272 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.064003922 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.063830996 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.071431433 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.064574221 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.071868995 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.082573816 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.073582887 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.067375101 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.068653028 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.068422726 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.063165618 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.068999845 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.069268913 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.06876302 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.07435514 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.069672909 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.06858251 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.067422592 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.096244895 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.071895833 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.065412924 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.065601989 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.06404529 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.067782282 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.074036275 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.08283059 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.067743752 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.064340491 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.06591249 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.070827257 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.079936039 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.065441513 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.071461283 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.063174499 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.066479006 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.069026974 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.068741455 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.067171962 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.064212899 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.066350445 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.066100519 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.066941335 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.065882894 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.066165805 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.068556628 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.063864416 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.064001725 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.066907801 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.067811963 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.073384119 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.066806812 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.070775501 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.069486286 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.066428418 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.070147093 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.073412331 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.070357689 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.087989856 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.076779052 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.06698395 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.064020171 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.080621839 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.067829843 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.065371919 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.072243572 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.072300887 seconds)
  done (took 9.320801065 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.091463789 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.069488951 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.087563764 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.092384965 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.076316752 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.071390557 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.080093984 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.066916053 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.082341393 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.065311636 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.074984096 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.064023508 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.079430512 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.074927073 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.067482199 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.076592916 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.068390434 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.08673732 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.081044203 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.064625532 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.075070126 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.080197575 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.079075031 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.084099455 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.083608445 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.084906298 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.078155052 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.068468493 seconds)
  done (took 4.079658943 seconds)
done (took 39.350284313 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.940752213 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.114667579 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.94909525 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.189636506 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.214889988 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.075480968 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.062102753 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.939922297 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.10360649 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.975610343 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.263179964 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.341064551 seconds)
done (took 69.105476975 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.037220158 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.082522999 seconds)
    (2/2) benchmarking "String"...
    done (took 2.153463593 seconds)
  done (took 6.106715989 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.53689872 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.937033058 seconds)
    (3/3) benchmarking "different"...
    done (took 1.985288568 seconds)
  done (took 8.327305644 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.063747019 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.575601569 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.181724871 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.935567649 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.939517765 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.303261858 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.754374191 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.409086433 seconds)
  done (took 32.971187024 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.152470025 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.152155306 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.693412782 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.743413355 seconds)
  done (took 16.665987015 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.540831473 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.199189884 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.198746606 seconds)
    (4/4) benchmarking "different"...
    done (took 2.190885223 seconds)
  done (took 11.06743391 seconds)
done (took 87.213297044 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.940273131 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.001008042 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.962506236 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.091473792 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.979009452 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.972019862 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.954690823 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.94840434 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.937100024 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.941294262 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.36758761 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.936165218 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.948166118 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.978588355 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.938286227 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.984060609 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.444546041 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.959189882 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.952118849 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.490138883 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.461658066 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.942754424 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.947283978 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.985070717 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.005831137 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.944908954 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.488608617 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.934331666 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.547238115 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.952605404 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.1055258 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.941764867 seconds)
  done (took 209.85341529 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.938716436 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.101930561 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.195650049 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.960831231 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.643552153 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.127817091 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.082276905 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.689786526 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.94014733 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.944115083 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.30657043 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.93636289 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.239340103 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.888465474 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.906660418 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.97772966 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.208096163 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.291717359 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.938538027 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.129533789 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.951805702 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.103099907 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.056219247 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.257434497 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.944929284 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.004044903 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.950172439 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.943829929 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.127795426 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.203212037 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.964444353 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.982690016 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.144368674 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.811941115 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.946890304 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.943375348 seconds)
  done (took 177.657946926 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.128412243 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.951019647 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.001071909 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.076786706 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.708392241 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.676514134 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.941686487 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.940961611 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.941914265 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.949343473 seconds)
    (10/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.939354415 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.942090112 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.011790921 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.768796738 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.953603567 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.943555633 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.943471783 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.729079362 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.940886491 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.942615827 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.942040025 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.006279786 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.313602272 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.076771688 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.941642204 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.950665699 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.07919165 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.949604447 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.941164979 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.077286203 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.943731762 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.020513035 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.076762136 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.93808643 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.024140362 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.948213886 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.436748051 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.943053339 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.942699378 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.944311511 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.004008046 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.940486539 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.053338893 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.033290977 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.941659184 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.954731536 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.137949149 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.62452056 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.943037798 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.94384192 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.943271909 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.941854662 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.944937113 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.956922962 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.943801791 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.969971696 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.577907637 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.943690109 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.943698624 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.945623037 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.944140726 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.945454208 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.950542924 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.97868707 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.761318891 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.97180291 seconds)
    (66/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.944548426 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.336715804 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.74967935 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.94518624 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.304371694 seconds)
    (71/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.944951197 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.999412959 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.94642078 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.024418085 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.941904907 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.945245155 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.943366776 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.944957175 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.034394327 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.02966289 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.944115182 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.081076589 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.947308453 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.942815082 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.200812321 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.741773812 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.94245863 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.95986494 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.003247026 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.944535097 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.94619597 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.952540612 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.033214832 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.943851131 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.946191627 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.945270067 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.051836151 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.947088575 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.951325088 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.165462262 seconds)
    (101/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.942502985 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.017010591 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.190274749 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.188914418 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.946788746 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.946542858 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.961374342 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.947421714 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.944535346 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.956233827 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.946714888 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.945343901 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.946287822 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.94745062 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.945892963 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.946691978 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.958773662 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.942976186 seconds)
  done (took 429.182072726 seconds)
done (took 820.747721619 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.676616565 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.736433324 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.587147029 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.621309313 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.593024654 seconds)
  done (took 15.091629827 seconds)
done (took 16.968810781 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.967664264 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.964889424 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.952242582 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.971061098 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.968530151 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.967443811 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.999471316 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.991425094 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.986966227 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.966769609 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.975620666 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.968320434 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.972802534 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.988731827 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.977166038 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.974586336 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.971052551 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.960239422 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.977962943 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.968926669 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.969989388 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.964232114 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.969601255 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.976792965 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.980945518 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.971496064 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.964325385 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.970542206 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.970021925 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.972969336 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.005817398 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.977296055 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.001464971 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.977706237 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.97671944 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.98021777 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.966944573 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.992545028 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.971791982 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.006941263 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.979657649 seconds)
  done (took 82.89935671 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.957761138 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.09376673 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.16488426 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.986779902 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.955880288 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.171427096 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.01000367 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.082326738 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.090223908 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.166083562 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.175965285 seconds)
  done (took 24.740874294 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.941593521 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.094449928 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.146454279 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.983427297 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.958069581 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.169073528 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.016733273 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.1037491 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.092110993 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.186591136 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.17999107 seconds)
  done (took 24.760339207 seconds)
done (took 134.282395302 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.331307974 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.979780689 seconds)
  done (took 6.192452874 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.953835241 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.971490053 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.103523334 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.95417707 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.955030677 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.954868376 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.956320442 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.954355999 seconds)
  done (took 17.684956979 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.95308324 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.953058372 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.954787735 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.953744881 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.953714422 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.954252191 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.95295053 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.95490045 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.953706198 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.953413566 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.954600244 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.954564139 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.953496498 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.954458764 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.954325804 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.955042445 seconds)
  done (took 33.146274416 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.953522308 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.954585719 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.953188758 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.954508082 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.954175893 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.954508142 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.957574336 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.954268854 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.953792455 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.954530049 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.953473589 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.955470388 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.955564552 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.953845627 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.954541236 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.954921507 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.955464746 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.955812562 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.956916896 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.955497831 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.955567761 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.955087357 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.95976547 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.954468835 seconds)
  done (took 48.805475142 seconds)
done (took 107.719778311 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.191375114 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.861923386 seconds)
  done (took 8.935913485 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.958666673 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.953558657 seconds)
  done (took 5.871711796 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.956713985 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.954028759 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.954437194 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.953008456 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.953334672 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.95696927 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.952672879 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.953354045 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.952784786 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.952961722 seconds)
  done (took 21.423444084 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.954883268 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.954563283 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.954191164 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.95481738 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.96013803 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.955688636 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.954813507 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.954755357 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.955382564 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.955079594 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.942570547 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.954338954 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.955706163 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.955166334 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.958219484 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.952172208 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.956405349 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.954470474 seconds)
  done (took 37.067072057 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.956498138 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.955578494 seconds)
  done (took 5.795232115 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.955459396 seconds)
    (2/7) benchmarking "second"...
    done (took 1.955558895 seconds)
    (3/7) benchmarking "month"...
    done (took 1.954775528 seconds)
    (4/7) benchmarking "year"...
    done (took 1.962155554 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.953278334 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.955028179 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.955789908 seconds)
  done (took 15.576043749 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.958043205 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.113468016 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.162534696 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.580425882 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.958798 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.95572807 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.839324725 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.95614161 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.9587118 seconds)
  done (took 21.369585953 seconds)
done (took 117.92394401 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.816116608 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.961290259 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.271052108 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.035684594 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.041512813 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.258512907 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.999936394 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.510248629 seconds)
done (took 43.782673887 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.072475386 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.95251556 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.986458941 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.98966391 seconds)
  done (took 22.819053919 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.946562863 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.277506864 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.974078713 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.96973359 seconds)
  done (took 23.062947508 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.323974454 seconds)
    (2/2) benchmarking "read"...
    done (took 2.299373977 seconds)
  done (took 6.509286884 seconds)
done (took 61.352972152 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.946577158 seconds)
    (2/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.94681759 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.946727095 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 1.946128159 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.945712806 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 1.945993839 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.946034686 seconds)
    (8/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.946819584 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.947206694 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.946904233 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 1.947117741 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 1.946477795 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.946345003 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.946929475 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.946913635 seconds)
    (16/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.946947487 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.947688598 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.947097964 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.946902196 seconds)
    (20/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.946822521 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.947063455 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.947894946 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.947014638 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.947318038 seconds)
  done (took 48.60406214 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.94701714 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.946742528 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.947155604 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.946137699 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.947123806 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.947445201 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.947011396 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.947305356 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.947009768 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.94698873 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.947670764 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.947403711 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.946600967 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.948304845 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.947635124 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.947949259 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.948236104 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.94620027 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.937438747 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.94791003 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.948012209 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.948864445 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.948342733 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.948635604 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.948317861 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.947656119 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.947685821 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.948814354 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.948748961 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.947987831 seconds)
  done (took 60.301078935 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.949755734 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.950160905 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.949101602 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.949011393 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.949350304 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.949842641 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.949192994 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.94965607 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.949123236 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.949275683 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.948852823 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.949464006 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.949748115 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.949433404 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.951063037 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.945060867 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.94998578 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.940147393 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.929085996 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.943448318 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.94677538 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.949908944 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.947117407 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.940096812 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.949905266 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.938151403 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.949801311 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.950010597 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.950875569 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.950341394 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.950855697 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.951123992 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.950788849 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.951178296 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.950444175 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.950478692 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.950331249 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.954164402 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.958893937 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.950940621 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.951229423 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.950936999 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.950889889 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.951029305 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.950390925 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.951708242 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.951654126 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.951311999 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.951867798 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.951925299 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.951450762 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.951381493 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.951563034 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.951559263 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.951593286 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.951819438 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.952174964 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.952209457 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.951390359 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.952364384 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.95296789 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.952424668 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.952103075 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.9546406 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.952489787 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.952514487 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.952530103 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.952042089 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.952402366 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.952348279 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.951774801 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.952710243 seconds)
  done (took 142.289654533 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.952172951 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.95355396 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.953079758 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.952596126 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.953261584 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.952540445 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.952573193 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.952769327 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.954196636 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.952682568 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.952240809 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.952973393 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.953147085 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.9533837 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.95347539 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.953088555 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.953650863 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.952169712 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.952830329 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.953688591 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.95261338 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.953306786 seconds)
  done (took 44.853451414 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.953502964 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.952916211 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.952605903 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.953360207 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.953510052 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.953523677 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.953944587 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.951007308 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.936616769 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.953323576 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.953732152 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.954394054 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.953564517 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.953317521 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.953596478 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.954017253 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.954338054 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.953340434 seconds)
  done (took 37.032523069 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.954739994 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.954089432 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.953845919 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.952558999 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.954481848 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.953975914 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.954841595 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.954235889 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.953679851 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.953641772 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.954536133 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.954652696 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.954370502 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.936739275 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.944955789 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.954222321 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.954967041 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.954660657 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.953913204 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.954965829 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.955175619 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.954341948 seconds)
  done (took 44.856100872 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.954314316 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.955208008 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.955043237 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.954952301 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.954818359 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.953599887 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.944144279 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.955849893 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.955263672 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.955711037 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.955994181 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.95572248 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.955878816 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.955409047 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.956088368 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.956537063 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.956372892 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.935695195 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.955435956 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.956442333 seconds)
  done (took 40.968145538 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.956667945 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.950322623 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.956325708 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.956646653 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.95623145 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.957012711 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.95512173 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.956032099 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.955632838 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.957557888 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.957366217 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.956947943 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.957383153 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.95662589 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.956578287 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.957430557 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.957579277 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.958004469 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.957783325 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.957115994 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.957547647 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.957699434 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.957335149 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.957744227 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.958452403 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.958301139 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.957891076 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.95742084 seconds)
  done (took 56.683407087 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.957241529 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.957459206 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.957615382 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.957111105 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.957465115 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.957521625 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.957391315 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.957129092 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.957677141 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.943752505 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.958666061 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.958006279 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.957432737 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.957729517 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.957771463 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.958147385 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.958606518 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.946279892 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.958456301 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.958215157 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.959724143 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.956733152 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.959030696 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.958750469 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.958069476 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.958713707 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.958929331 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.959254783 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.958797741 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.958670215 seconds)
  done (took 60.608276003 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.975535191 seconds)
    (2/2) benchmarking "in"...
    done (took 1.978033734 seconds)
  done (took 5.845803492 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.958729543 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.959347181 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.959505451 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.960238712 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.959536939 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.960027179 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.959718197 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.959438707 seconds)
  done (took 17.569991417 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.96041703 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.961943313 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.960181751 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.959071619 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.959729203 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.966779212 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.960946037 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.960662451 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.961535351 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.960682964 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.96435458 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.949989075 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.965055255 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.963783376 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.95952858 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.960838696 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.961359181 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.962708477 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.960906397 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.960718325 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.962560326 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.956598608 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.960081154 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.962885583 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.960942344 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.963550567 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.970667636 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.960885829 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.961649197 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.96021317 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.967157026 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.96105079 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.960465836 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.963441055 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.961106552 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.96051424 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.968479386 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.962030395 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.9622317 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.961404807 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.962860053 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.963209008 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.964683793 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.969701002 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.962404892 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.962569764 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.961893202 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.962235974 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.961935232 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.966340462 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.969836898 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.962811438 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.961891928 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.962171488 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.963228574 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.963314084 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.950568663 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.965104235 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.969390493 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.969941763 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.966368142 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.983869063 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.972191979 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.962828391 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.962665717 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.972547158 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 1.987427602 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.964408119 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.964816702 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.963189279 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.970228821 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.96355966 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.96252736 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.963014736 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.976427922 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.97220884 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.963494936 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.9627483 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.963484884 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.963602017 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.965006377 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.963937158 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.963832091 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.958051322 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.974111555 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 1.988385134 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.964454392 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.964047917 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.966186555 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.965458635 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.968553456 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.966631515 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.96502047 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.963688068 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.965292536 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.968224747 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.965402253 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.964585105 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.964587386 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.972724807 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.965485929 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.965006265 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.969048678 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.973283172 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.964585437 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.964890106 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.966088227 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.964975461 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.971978438 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.964604485 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.965838347 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.965114586 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.967000827 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.969668634 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.964753467 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.969124007 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.974580504 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.972632464 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.967046785 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.969331243 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.969098523 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.967831707 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.975973225 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 1.990504467 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.966220373 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.968958296 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.971101069 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.977881637 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.968627553 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.966276535 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.967881469 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.966182342 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.965737701 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.967500061 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.966564108 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.966933344 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.966362097 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.96665903 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.966531874 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.967073706 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.969883115 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.96758666 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.968549336 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.967405328 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.970686217 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.967153253 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.969757729 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.972909248 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.966845768 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.968282397 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.967530819 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.969208883 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.968712464 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.967351185 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.966999582 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.967421835 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.967360939 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.96807784 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.969647752 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.967049739 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.966764529 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.969553347 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.972186724 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.967535939 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.967983801 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.96777543 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.968857779 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.968582914 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.96941072 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.968365506 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.969778097 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.968841806 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.973366641 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.968225836 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.96850364 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.968909611 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.967657908 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.968162512 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.9718157 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.979337296 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.97229991 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.97874895 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.968318661 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.975260824 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.969306606 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.968769691 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.970885053 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.969202788 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.969559304 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.968906694 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.970028081 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.97324815 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.991024957 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.979510068 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.971441198 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.970876557 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.974930501 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.974316714 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.975320414 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.969289907 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.970676831 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.972108751 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.97042296 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.969465276 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.970376316 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.973122155 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.97018525 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.969770623 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.973773991 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.969718155 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.969769451 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.973252505 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.970645549 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.972329654 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.974853913 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.970303706 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.970233899 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.969892527 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.978581134 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.973146935 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.970359552 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.970524604 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.97152813 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.971080268 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.971022922 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.971877924 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.973871871 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.970317438 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.972964788 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.978398179 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.975204521 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.971235456 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.970643013 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.970329121 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.973215302 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.975591396 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.97473784 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.979818757 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.973715399 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.970643126 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.981512046 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.971278626 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.97404608 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.97180149 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.97323862 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.975286754 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.973524674 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.972696459 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.973118124 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.978614143 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.974179624 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.969706055 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.968565178 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.972127702 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.970284584 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.975788571 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.966943763 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.969861317 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.975095779 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.972909049 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.971744396 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.97049835 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.968949398 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.967985473 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.970453382 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.971673781 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.978347036 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.975054741 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.966505373 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.965887568 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.971463627 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.967445103 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.964475784 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.965280748 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.971187184 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.971058343 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.965879982 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.967804419 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.964647235 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.96482732 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.975372911 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.964652532 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.96603178 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.964778912 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.964379512 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.970330144 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.962978653 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.96556142 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.963475017 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.96637716 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.967462927 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.970414679 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.963090567 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.962601559 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.971875503 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.962969955 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.965063053 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.969839867 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.963508158 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.963001692 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.963554972 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.967132709 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.963208876 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.962938782 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.963144721 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.963529298 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.967576549 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.965957517 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 1.972789566 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.965757157 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.969068763 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.966730786 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.970965342 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.96212899 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.962102958 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.962412571 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.967604529 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.967826981 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.960515969 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.961510173 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.96827963 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.962750266 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.961510083 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.965585658 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.961047936 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.961416317 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.962945773 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.962441157 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.965391409 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.964813066 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.962345253 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.963514561 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.961367656 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.9613081 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.965241533 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.96334413 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.964427357 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.962815011 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.961255452 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.96168486 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.96194067 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.963403052 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.962140576 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.960568119 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.961488203 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.969252105 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.96074862 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.963717745 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.964581792 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.959852545 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.96990607 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.961623175 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.96380961 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.961664624 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.960364092 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.964017752 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.960341469 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.961997059 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.960669875 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.959797955 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.962063564 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 1.972163093 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.971082431 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.96369379 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.961307548 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.960349558 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.961328447 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.970818986 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 1.981706853 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.960535379 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.961908621 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.962866075 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.966280483 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.962820899 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.964881951 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.964301428 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.967106166 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.964987734 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.9596838 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.963467214 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.970695955 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.960683232 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.962220269 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.959631708 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.964898559 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.963113244 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.959665959 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.966285771 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.962498737 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.960743587 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 1.969779549 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.960056341 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.964343945 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.959170219 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.958708484 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.959551994 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.958727792 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.961682681 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.964793872 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.959514375 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.958966829 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.961796184 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.963965512 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.961600655 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.963199564 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 1.967788854 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.958958886 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.959778818 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.964571641 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.959863057 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.961069998 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.959644906 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.959557531 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.961522125 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.958602706 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.960262771 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.962290371 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 1.966174442 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.964040086 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.957671118 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.958254489 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.962215804 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.958036635 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.961633098 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.961269582 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 1.966745894 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.96135053 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 1.969214483 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 1.969299626 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.959722922 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.95976035 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.965603288 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 1.959435423 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.961739082 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.959243558 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.959060747 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.961579896 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.961378678 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.963277162 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.959290578 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.959123968 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 1.947416174 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.958657784 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.963410308 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.957971853 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.958433537 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.961342051 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.960615759 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 1.962327702 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.963129178 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.959159736 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.957611155 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.959897039 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 1.961370999 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.965336862 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.958107836 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.95900435 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 1.961895732 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.959894864 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 1.963851433 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.958360057 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.958630206 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 1.960495215 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.958561755 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.962034639 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.958307603 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.959571255 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.958543121 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 1.961722656 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 1.971241161 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.959339953 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.961104052 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.960537105 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 1.962990134 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.964459498 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.958931394 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.960022739 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.95910535 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.966545507 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.962659963 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.960352741 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 1.95928617 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.959566089 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 1.964749814 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 1.964226347 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.964239296 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.95940587 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.959734188 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.959392355 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.965265921 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 1.967118702 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 1.963668442 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 1.962052031 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 1.965576324 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.969119494 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 1.962187583 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.959404711 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.959968265 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.960345094 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.960975717 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 1.968755128 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.96286623 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 1.962990907 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.960617141 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.962610022 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.964117022 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 1.962195029 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.960870179 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.960839162 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 1.962663802 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.971604002 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 1.969353181 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.960611935 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 1.962094523 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.962192818 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 1.967105499 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 1.97094408 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.962353062 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.961593624 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.962099656 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.966457416 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 1.962924889 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 1.967709947 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 1.968136948 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 1.965156263 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.966973659 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 1.966787852 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 1.977593229 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 1.963891275 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.970439969 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.99276896 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 1.964614794 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.962126388 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.962880607 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 1.963409673 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.967122137 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 1.965278651 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.962690019 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 1.969312184 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.963481547 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.968624129 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.970297696 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.962303256 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.962910492 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.963023787 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.966722654 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 1.967384947 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.963184134 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 1.970146086 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.962614803 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.964438704 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 1.96463439 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 1.965527892 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.963389636 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.962909607 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.963129157 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.969397793 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.963283566 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.963845744 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 1.97163089 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.963748863 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 1.966664209 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.976482513 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 1.972901826 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.964600063 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.964214107 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.965373749 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 1.968991583 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 1.967563757 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.963009217 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.967009354 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 1.971697059 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 1.967652211 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 1.969747969 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 1.965375057 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 1.965816574 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.966097554 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.964508047 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.96414782 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 1.977105955 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 1.973526523 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 1.96870597 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.965100587 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 1.970360698 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.964857329 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 1.970980319 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 1.971559722 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.964967651 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 1.966692277 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.965796584 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.964846241 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.965772845 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.965923526 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 1.967806821 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 1.970830941 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.964403396 seconds)
  done (took 1173.662863947 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.964842161 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.9648727 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.965036913 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.965948596 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.968144176 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.96496994 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.96487796 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.965700596 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.965776977 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.966556815 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.965373819 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.965939077 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.966727726 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.966337145 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.965625386 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.968744345 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.966115853 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.965728904 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.965907451 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.965715924 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.966944553 seconds)
  done (took 43.186704706 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.965523978 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.966003157 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.965888811 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.967248101 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.965960229 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.966982461 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.967233592 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.966532387 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.969683624 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.966298299 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.966391437 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.965911478 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.966383429 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.967595552 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.96724319 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.967404869 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.966464829 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.966533522 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.967027584 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.967281066 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.9662988 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.966979575 seconds)
  done (took 45.168524252 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.969425606 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.966639813 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 1.967845814 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.966970157 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.967476821 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.96907785 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.967431242 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 1.969500253 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 1.967553878 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.968164945 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 1.975012796 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 1.973115455 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.966963158 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 1.971090491 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.967797206 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.969845943 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.112735073 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.968245516 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.969763476 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.967678522 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.970564989 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 1.974305387 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.968611862 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.968747378 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.968315486 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.970036265 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.968827347 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.968392548 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.967991548 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 1.969178418 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 1.971165125 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.96989382 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 1.970115899 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 1.971456776 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 1.969124787 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.969817242 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 1.973396878 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.968794481 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.968509001 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.968795129 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 1.977739903 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 1.989823154 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.96819757 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.96988334 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 1.977127807 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.969083175 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.96981823 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 1.971601746 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 1.975449735 seconds)
  done (took 98.587849165 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.968275106 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.970807933 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.968780262 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.968219829 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.969572407 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.97035635 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.970671729 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.969372158 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.96947525 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.96891269 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.969462329 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.970029093 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.970498042 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.968830909 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.969405275 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.97006974 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.969632464 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.969404289 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.969336753 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.968879666 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.950383131 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.971217253 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.969335278 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.970793838 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.969480246 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.970483928 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.972647461 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.970588826 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.970352089 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.971024495 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.969695294 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.971247681 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.970108597 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.97048194 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.971118853 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.970915302 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.971542273 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.971327432 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.970871851 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.970714101 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.970778198 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.970331342 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.973900427 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.971337034 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.970657454 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.970963592 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.970715915 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.97198508 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.972073616 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.972100938 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.971671074 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.971511622 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.971675711 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.972133336 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.971208216 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.971167567 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.971077592 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.973279288 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.971312639 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.972438918 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.971455891 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.97221881 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.973303035 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.972335913 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.971949112 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.972176237 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.973433225 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.973157336 seconds)
  done (took 135.9016329 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.972632227 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.972195375 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.972912433 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.973196163 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.972906293 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.972326077 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.973302486 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.97325773 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.974197714 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.97377286 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.97266082 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.972663658 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.973361474 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.974482682 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.972515047 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.97316122 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.972647183 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.973272886 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.974080077 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.972638182 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.943290376 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.97422316 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.973793559 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.974177753 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.974137386 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.97362046 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.972219699 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.974422108 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.97563168 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.973808924 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.975046274 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.974264255 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.973226456 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.975573032 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.97348802 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.972949043 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.974265508 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.974213005 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.976129731 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.973348865 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.974279118 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.974307071 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.97424395 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.973873871 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.974728531 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.974279738 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.974307965 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.974463728 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.974491551 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.976246908 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.974472832 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.975167453 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.974812652 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.975880954 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.976835252 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.975760864 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.975091517 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.975290983 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.975658519 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.975993187 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.975309716 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.97489502 seconds)
  done (took 124.27279082 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.974217824 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.975621722 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.974788356 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.97487599 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.97532461 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.97473996 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.976576751 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.975599394 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.976119331 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.975651759 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.976532231 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.977709788 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.977089667 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.976128404 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.97598394 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.976524499 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.976575796 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.976067235 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.975916042 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.976184725 seconds)
  done (took 41.427264465 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.977607522 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.975721902 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.976586279 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.976301376 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.976752037 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.977389974 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.976851148 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.976917106 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.977043447 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.977577011 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.978186324 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.976171014 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.976367041 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.97696913 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.977085688 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.978309069 seconds)
  done (took 33.541473437 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.977362509 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.977689325 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.97746685 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.978088446 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.976783644 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.976783967 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.977341802 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.977802157 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.979247433 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.977278557 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.978429434 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.977630089 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.978179234 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.978376602 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.977596766 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.977785103 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.977704433 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.977420778 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.977701063 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.978822579 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.978058064 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.978698929 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.977718514 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.977950312 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.978459862 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.978894778 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.978481153 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.979193958 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.97743003 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.978465333 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.978101309 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.977829879 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.978474075 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.978548701 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.979624467 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.977753483 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.978511963 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.978563368 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.978536054 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.980373249 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.979316052 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.979177884 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.978456819 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.97905475 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.979618978 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.979224349 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.979208423 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.979893281 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.979443663 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.980073946 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.979583375 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.978741783 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.966706329 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.963438226 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.981604409 seconds)
  done (took 110.70167471 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.979138934 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.979621508 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.980147743 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.980695462 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.980202675 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.979433418 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.980180865 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.980097021 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.980758955 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.980038527 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.979749445 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.979539699 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.980157113 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.980507028 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.980828954 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.979986639 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.979804131 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.979583448 seconds)
  done (took 37.55318975 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.981063898 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.980570063 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.98127538 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.98041433 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.981582908 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.980476226 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.980091377 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.981447676 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.981011682 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.980752778 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.981264982 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.981143422 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.981887167 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.981756504 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.981311225 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.981019021 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.981142154 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.980569674 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.981205406 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.982308555 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.981458728 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.981459546 seconds)
  done (took 45.501764732 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 1.981805914 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 1.981767767 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 1.99750484 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 1.99913058 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.000250523 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.012782591 seconds)
  done (took 13.887512503 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.98083526 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.982202921 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.981263101 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.981007387 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.982448203 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.982381917 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.981449358 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.982676473 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.982191481 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.982219502 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.982389361 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.98282177 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.981926235 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.98237364 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.98257804 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.982417336 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.982467964 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.98272286 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.982724369 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.983402597 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.98282491 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.982825524 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.983211312 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.98298052 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.983266308 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.982685674 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.982866444 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.983935542 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.983100098 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.982233451 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.982481269 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.983503769 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.983082363 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.983093854 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.98367062 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.98353546 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.982375849 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.983092923 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.983685695 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.984117654 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.980624007 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.984511966 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.983934562 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.983508178 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.984195922 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.983414943 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.983887213 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.982888843 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.983853951 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.98431281 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.983304789 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.984066048 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.984632704 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.983799997 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.984410275 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.98425932 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.984306455 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.984038833 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.98474941 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.984255929 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.984726224 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.984352843 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.986379166 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.984147937 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.983527556 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.982739257 seconds)
  done (took 132.807133931 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.985298726 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.978455819 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.961124426 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.982514058 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.970022159 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.982247763 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.962414377 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.984997188 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.985034597 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.985297985 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.984805013 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.973275229 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.986151019 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.985738219 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.986054076 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.98538046 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.985097975 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.98567013 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.984511916 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.985949293 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.985210269 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.985576465 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.986056159 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.986126645 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.986443087 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.985485064 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.986141051 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.986538718 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.985603136 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.986139686 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.985944026 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.987445088 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.986364244 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.986662928 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.986353587 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.986760753 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.986159509 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.98640361 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.987106517 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.986004874 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.986650515 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.986883436 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.985678221 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.986538297 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.986276783 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.987347275 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.987682823 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.987551586 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.987418765 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.98696502 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.987967408 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.987657806 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.986774066 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.987570129 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.987109776 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.987495648 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.987472677 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.987525527 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.98699532 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.98671615 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.987167612 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.987416389 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.960576513 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.985333752 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.988537419 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.987998321 seconds)
  done (took 132.904245725 seconds)
done (took 2730.605359724 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.036305255 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.0482084 seconds)
  done (took 16.006180095 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.159363461 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 6.990847048 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.174317829 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.104779979 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.013106875 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 6.991709638 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 1.991521539 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 1.989961825 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.081059056 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 1.989711566 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.013191279 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 1.990408197 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 1.991611504 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 1.990512061 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 1.990182787 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 1.99071601 seconds)
  done (took 54.376260192 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.993684399 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 1.993605187 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 1.991733997 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 1.991123791 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.00236056 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.06556751 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.010798325 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.994584081 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.004218961 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.023610614 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.99704274 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 1.994352709 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 1.998535736 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 1.996464844 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.077866835 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.035409661 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.048126684 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.064198996 seconds)
  done (took 38.205522471 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.069040166 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.001919589 seconds)
  done (took 10.998693672 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.007244327 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.997757144 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.026817264 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.009658823 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.01730464 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.993511309 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.019958387 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.011161232 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.992697018 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.016870431 seconds)
  done (took 72.018000562 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.994986104 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.993870539 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.304790656 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.000026828 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 1.998687976 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.018164856 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.992808697 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.021577402 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.994531061 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.989883935 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 1.971702725 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.312294129 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.003974108 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.994651511 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.339402095 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.003692853 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 1.998068673 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.025175063 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.023275404 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.997090417 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 1.999554067 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 1.995596994 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.156757679 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.671665794 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.994559684 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.996575935 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 1.999729385 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.99089811 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.991976857 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.994203728 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 1.995599754 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.992515234 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.997078198 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.994193107 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.000964179 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.998633147 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.485299179 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.011400318 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.000732308 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.071086965 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.038038172 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 1.99818251 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.789992795 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 1.996531727 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.992680884 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.999025066 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.668188655 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.076135475 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.995611112 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.167527911 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.342619435 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.008488144 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.173629194 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.165368021 seconds)
  done (took 139.640195662 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.991660861 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.228019004 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.147038923 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.994565512 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.249992089 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.204456884 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.994372564 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.03904858 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.993980448 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.195198517 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.240093204 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.09488846 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.994966212 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.994515715 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.995642469 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.992501858 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.137519746 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.058372612 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.995486689 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.993123021 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.018041349 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.193028272 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.112354519 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.995326025 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.020313245 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.198763431 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.114619347 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.094129145 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.759920594 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.992381533 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.054188562 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.995225063 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.993204218 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.993410615 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.145133383 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.084917266 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.075000913 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.996252144 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.994799409 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.995411583 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.665999235 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.193074165 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.088457587 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.115446613 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.239178687 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.206252756 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.607408463 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.993191423 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.624473719 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.161591732 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.19904731 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.187981522 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.111816516 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.997321023 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.546767594 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.9936089 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.99399211 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.216061174 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.211998811 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.091197864 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.997545221 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.995417293 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.994564442 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.232001019 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.998205021 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.085747527 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.998327297 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.996772372 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.087587599 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.094667109 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.218219951 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.214597079 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.026488628 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.333234233 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.481382223 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.197261259 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.059105971 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.2140756 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.996504195 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.99552427 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.078830277 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.836619435 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.245846272 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.236339148 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.192554476 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.025171828 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.641745875 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.995674768 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.182731114 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.184810988 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.228944467 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.242659261 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.230237895 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.350215273 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.995570341 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.995622449 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.378250888 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.112711556 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.948349022 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.354163088 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.224501515 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.480155115 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.011105963 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.260809202 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.122967393 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.999485656 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.643969368 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.998715655 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.202677508 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.035104836 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.998243366 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.997382031 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.187404353 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.902417769 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.995785749 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.010897728 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.057954106 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.003167675 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.200618259 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.000289626 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.241265696 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.000243799 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.229319183 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.616024823 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.028266731 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.223966727 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.241517763 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.630644922 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.287910801 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.238565285 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.110718445 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.27100457 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.0024295 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.997147059 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.26003817 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.000539592 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.997810582 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.16841286 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.999907174 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.572767483 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.00115206 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.25787383 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.018275374 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.226230756 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.000755181 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.237139003 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.031277563 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.047076228 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.002564753 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.12443035 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.00312524 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.845804914 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.156380667 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.003964349 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.999260597 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.776151652 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.000529399 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.152825341 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.223698748 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.018951354 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.067911312 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.568910277 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.999633117 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.082328912 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.020296144 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.63899355 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 6.999690071 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.24600367 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.952343884 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.486017782 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.99881011 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.234103823 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.23905884 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.00345991 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.001468024 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.842780608 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 6.999995774 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.001979941 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.156233159 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.976365801 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.934988312 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.199900784 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.002163289 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.127452085 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.00187981 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.080207732 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.34662843 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.001136323 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.002197291 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.001564736 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.00156653 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.001386883 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.259061029 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.029183335 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.433369374 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.136316316 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.255021634 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.307853688 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.196647053 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.041178833 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.005323311 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.223542301 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.004873597 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.063209154 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.002144379 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.020526513 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.227308054 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.002841707 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.207458417 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.234986286 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.885009275 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.048168947 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.002645106 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.002146651 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.918368533 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.144352026 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.086229408 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.004400919 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.003062022 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.114901198 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.11995736 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.184246247 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.8203425 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.170600238 seconds)
  done (took 931.367078683 seconds)
done (took 1264.534665104 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.00220025 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.008399049 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.008710193 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.011433919 seconds)
  done (took 29.966550534 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.003022508 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.004062892 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.004606696 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.004372439 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.004355226 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.004910517 seconds)
  done (took 13.961866739 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.003262524 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.006743657 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.993303028 seconds)
  done (took 22.9393042 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.420295477 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.398705239 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.076797549 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.14109791 seconds)
  done (took 10.973219595 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.00745348 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.004231191 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.004797079 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.005319485 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.00578521 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.006106407 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.006301912 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.005331873 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.005573671 seconds)
  done (took 19.993519531 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.229471262 seconds)
done (took 104.001802703 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.158324931 seconds)
    (2/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.089060602 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.108820279 seconds)
    (4/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.009790186 seconds)
    (5/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.018346676 seconds)
    (6/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.018577561 seconds)
    (7/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.01214001 seconds)
    (8/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.189557109 seconds)
    (9/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.085960455 seconds)
    (10/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.32329663 seconds)
    (11/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.261853723 seconds)
    (12/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.090815937 seconds)
    (13/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.017349009 seconds)
    (14/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.029898362 seconds)
    (15/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.101462818 seconds)
    (16/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.134636034 seconds)
    (17/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.006219138 seconds)
    (18/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 4.268696414 seconds)
    (19/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.250652901 seconds)
    (20/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.202534192 seconds)
    (21/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 5.951625252 seconds)
    (22/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.138152558 seconds)
    (23/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.019384905 seconds)
    (24/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.095448224 seconds)
    (25/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.117256632 seconds)
    (26/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.169003431 seconds)
    (27/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.025420604 seconds)
    (28/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.134957775 seconds)
    (29/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.021499987 seconds)
    (30/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.234023981 seconds)
    (31/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.255606956 seconds)
    (32/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.006401955 seconds)
    (33/341) benchmarking ("perf_sum", Float64, true)...
    done (took 3.817008268 seconds)
    (34/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.005457341 seconds)
    (35/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.320282739 seconds)
    (36/341) benchmarking ("sort", Float64, false)...
    done (took 5.729710344 seconds)
    (37/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.022159597 seconds)
    (38/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.096529091 seconds)
    (39/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.090830362 seconds)
    (40/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.231527311 seconds)
    (41/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.068490989 seconds)
    (42/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.02874558 seconds)
    (43/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.036083172 seconds)
    (44/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.704576397 seconds)
    (45/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.787864292 seconds)
    (46/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.89140346 seconds)
    (47/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.144625534 seconds)
    (48/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.429629765 seconds)
    (49/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.75972168 seconds)
    (50/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.636920131 seconds)
    (51/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.090113665 seconds)
    (52/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.432246603 seconds)
    (53/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.308592101 seconds)
    (54/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.387817355 seconds)
    (55/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.008845363 seconds)
    (56/341) benchmarking ("map", abs, Int64, true)...
    done (took 3.908958156 seconds)
    (57/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.386324359 seconds)
    (58/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.133457525 seconds)
    (59/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.137657512 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.251537173 seconds)
    (61/341) benchmarking ("sort", Float32, false)...
    done (took 5.666637151 seconds)
    (62/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.009161806 seconds)
    (63/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.261694477 seconds)
    (64/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.398655345 seconds)
    (65/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.009441149 seconds)
    (66/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 4.030581022 seconds)
    (67/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.009820422 seconds)
    (68/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.00893903 seconds)
    (69/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.824388991 seconds)
    (70/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.76135497 seconds)
    (71/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.278104681 seconds)
    (72/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.345453206 seconds)
    (73/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.406446395 seconds)
    (74/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.02227995 seconds)
    (75/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.339599443 seconds)
    (76/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.172552827 seconds)
    (77/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.018347539 seconds)
    (78/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.2215246 seconds)
    (79/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.163058465 seconds)
    (80/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.144495927 seconds)
    (81/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.307584062 seconds)
    (82/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.112918959 seconds)
    (83/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.291540854 seconds)
    (84/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.092930319 seconds)
    (85/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.118880825 seconds)
    (86/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.009087476 seconds)
    (87/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.028165197 seconds)
    (88/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.196166332 seconds)
    (89/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.133283374 seconds)
    (90/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.092791769 seconds)
    (91/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.24374615 seconds)
    (92/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.741238182 seconds)
    (93/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.101525257 seconds)
    (94/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.011945938 seconds)
    (95/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.770214094 seconds)
    (96/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.73553131 seconds)
    (97/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.303091703 seconds)
    (98/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.118928811 seconds)
    (99/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.0267712 seconds)
    (100/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.419558606 seconds)
    (101/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.009755589 seconds)
    (102/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.310819275 seconds)
    (103/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.306785999 seconds)
    (104/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.073897723 seconds)
    (105/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.026038103 seconds)
    (106/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.314878286 seconds)
    (107/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.441716735 seconds)
    (108/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.167001961 seconds)
    (109/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.282323348 seconds)
    (110/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.772036299 seconds)
    (111/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.118786406 seconds)
    (112/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.732983829 seconds)
    (113/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.228518647 seconds)
    (114/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 2.97267367 seconds)
    (115/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.192904215 seconds)
    (116/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.020609161 seconds)
    (117/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.07019803 seconds)
    (118/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.021264439 seconds)
    (119/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.275553853 seconds)
    (120/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.318685376 seconds)
    (121/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.37210418 seconds)
    (122/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.368867973 seconds)
    (123/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.827020996 seconds)
    (124/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.017834657 seconds)
    (125/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 4.024428992 seconds)
    (126/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.285401026 seconds)
    (127/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.815416724 seconds)
    (128/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.033516158 seconds)
    (129/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.142159343 seconds)
    (130/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.152073266 seconds)
    (131/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.013409125 seconds)
    (132/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.231384678 seconds)
    (133/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.298025016 seconds)
    (134/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.023786535 seconds)
    (135/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.270038271 seconds)
    (136/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.104513176 seconds)
    (137/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.020936874 seconds)
    (138/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.136709174 seconds)
    (139/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.258988926 seconds)
    (140/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.256171901 seconds)
    (141/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.393491527 seconds)
    (142/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.538851409 seconds)
    (143/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.212713594 seconds)
    (144/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.123457466 seconds)
    (145/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.445705821 seconds)
    (146/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.25598955 seconds)
    (147/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.278342126 seconds)
    (148/341) benchmarking ("sort", Bool, false)...
    done (took 2.229671886 seconds)
    (149/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.362087963 seconds)
    (150/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.031972001 seconds)
    (151/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.182527841 seconds)
    (152/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.609868223 seconds)
    (153/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.097401423 seconds)
    (154/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.867871999 seconds)
    (155/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.219068257 seconds)
    (156/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.875658878 seconds)
    (157/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.151133334 seconds)
    (158/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.027541257 seconds)
    (159/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.026743242 seconds)
    (160/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.24928115 seconds)
    (161/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.0149415 seconds)
    (162/341) benchmarking ("sort", Int64, false)...
    done (took 5.650495213 seconds)
    (163/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.121860712 seconds)
    (164/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.874996339 seconds)
    (165/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.340714052 seconds)
    (166/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.41322256 seconds)
    (167/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.884204776 seconds)
    (168/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.343650204 seconds)
    (169/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.092951259 seconds)
    (170/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.221214267 seconds)
    (171/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.907071007 seconds)
    (172/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.3551122 seconds)
    (173/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.149158026 seconds)
    (174/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.890945905 seconds)
    (175/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.201328191 seconds)
    (176/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.036893316 seconds)
    (177/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.418311027 seconds)
    (178/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.443827126 seconds)
    (179/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.243643728 seconds)
    (180/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.093531679 seconds)
    (181/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.123447055 seconds)
    (182/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.169975664 seconds)
    (183/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.014395468 seconds)
    (184/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.138523431 seconds)
    (185/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.405894646 seconds)
    (186/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.318450511 seconds)
    (187/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.326730599 seconds)
    (188/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.016855155 seconds)
    (189/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.233382996 seconds)
    (190/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.419220162 seconds)
    (191/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.111826261 seconds)
    (192/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.204038008 seconds)
    (193/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.787212089 seconds)
    (194/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.015781671 seconds)
    (195/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.193625715 seconds)
    (196/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.800221859 seconds)
    (197/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.259496111 seconds)
    (198/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.876793225 seconds)
    (199/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.977610468 seconds)
    (200/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.042179512 seconds)
    (201/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.162607261 seconds)
    (202/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.39581369 seconds)
    (203/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.75269405 seconds)
    (204/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.798716009 seconds)
    (205/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.090587646 seconds)
    (206/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.867337125 seconds)
    (207/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.192771661 seconds)
    (208/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.423411164 seconds)
    (209/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.182070241 seconds)
    (210/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.092335709 seconds)
    (211/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.093437929 seconds)
    (212/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.014551668 seconds)
    (213/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.233338439 seconds)
    (214/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.289660261 seconds)
    (215/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.202284013 seconds)
    (216/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.216244176 seconds)
    (217/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.129032547 seconds)
    (218/341) benchmarking ("sort", Int8, false)...
    done (took 4.98073958 seconds)
    (219/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.358727338 seconds)
    (220/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.065013898 seconds)
    (221/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.352620673 seconds)
    (222/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.418940923 seconds)
    (223/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.146111972 seconds)
    (224/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.473650349 seconds)
    (225/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.017264682 seconds)
    (226/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.294623624 seconds)
    (227/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.016475881 seconds)
    (228/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.519478239 seconds)
    (229/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.100826176 seconds)
    (230/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.025821849 seconds)
    (231/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.017402086 seconds)
    (232/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.34520684 seconds)
    (233/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.402568601 seconds)
    (234/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.017085113 seconds)
    (235/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 4.36633569 seconds)
    (236/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.327919737 seconds)
    (237/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.274190383 seconds)
    (238/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.015127635 seconds)
    (239/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.753014829 seconds)
    (240/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.022627279 seconds)
    (241/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.025435151 seconds)
    (242/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.090197222 seconds)
    (243/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.114482588 seconds)
    (244/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.105293897 seconds)
    (245/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.957908518 seconds)
    (246/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.242059447 seconds)
    (247/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.018061083 seconds)
    (248/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.791185629 seconds)
    (249/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.458025288 seconds)
    (250/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.100507955 seconds)
    (251/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.044558607 seconds)
    (252/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.035382726 seconds)
    (253/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 2.985913277 seconds)
    (254/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.033035304 seconds)
    (255/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.103644303 seconds)
    (256/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.203104339 seconds)
    (257/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.765338782 seconds)
    (258/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.149856204 seconds)
    (259/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.140671 seconds)
    (260/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.016410841 seconds)
    (261/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.033475441 seconds)
    (262/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.201404076 seconds)
    (263/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.017630303 seconds)
    (264/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.378979654 seconds)
    (265/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.032087292 seconds)
    (266/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.354065091 seconds)
    (267/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.020402359 seconds)
    (268/341) benchmarking ("perf_sum", Float32, true)...
    done (took 4.124631115 seconds)
    (269/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.409362567 seconds)
    (270/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.238053377 seconds)
    (271/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.33619073 seconds)
    (272/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.156299339 seconds)
    (273/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.132499515 seconds)
    (274/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.391359626 seconds)
    (275/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.03653646 seconds)
    (276/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.102344029 seconds)
    (277/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.105049277 seconds)
    (278/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.19229047 seconds)
    (279/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.738554897 seconds)
    (280/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.115642784 seconds)
    (281/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.231184779 seconds)
    (282/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.083175988 seconds)
    (283/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.020537586 seconds)
    (284/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.182351249 seconds)
    (285/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.129240811 seconds)
    (286/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.107411856 seconds)
    (287/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.227627803 seconds)
    (288/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.335673346 seconds)
    (289/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.02037924 seconds)
    (290/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.020957266 seconds)
    (291/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.885988972 seconds)
    (292/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.718928651 seconds)
    (293/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.423185395 seconds)
    (294/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.019783765 seconds)
    (295/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.08017097 seconds)
    (296/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.953067128 seconds)
    (297/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.515534966 seconds)
    (298/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.284516606 seconds)
    (299/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.020545228 seconds)
    (300/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.080857894 seconds)
    (301/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.397082039 seconds)
    (302/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.03234799 seconds)
    (303/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.316642607 seconds)
    (304/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.216683931 seconds)
    (305/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.487432659 seconds)
    (306/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.495449211 seconds)
    (307/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.436411613 seconds)
    (308/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.020526004 seconds)
    (309/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.182992798 seconds)
    (310/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.023476806 seconds)
    (311/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.310754916 seconds)
    (312/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.656389704 seconds)
    (313/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.020500616 seconds)
    (314/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.039823423 seconds)
    (315/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.479962731 seconds)
    (316/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.438823166 seconds)
    (317/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.3239319 seconds)
    (318/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.003416597 seconds)
    (319/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.078580312 seconds)
    (320/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.272174638 seconds)
    (321/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.206703974 seconds)
    (322/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.106165215 seconds)
    (323/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.03071766 seconds)
    (324/341) benchmarking ("sort", BigInt, false)...
    done (took 7.020284945 seconds)
    (325/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.920502653 seconds)
    (326/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.020738578 seconds)
    (327/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.402979321 seconds)
    (328/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.852696094 seconds)
    (329/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.23734297 seconds)
    (330/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.020730225 seconds)
    (331/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.01275598 seconds)
    (332/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.03619086 seconds)
    (333/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.003213452 seconds)
    (334/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.111067761 seconds)
    (335/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.15509679 seconds)
    (336/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.03397596 seconds)
    (337/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.919387111 seconds)
    (338/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.136908334 seconds)
    (339/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.15612648 seconds)
    (340/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.155908616 seconds)
    (341/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.030448012 seconds)
  done (took 1143.128205833 seconds)
done (took 1145.17291945 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.043023441 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.032879829 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.505225957 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.02989142 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.031921895 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.036316924 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.516280481 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.0616991 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.047901207 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.515279015 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.042333902 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.032312262 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.047906351 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.06801223 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.044242982 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.046735811 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.039273834 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.057574084 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.070025167 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.038483354 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.07748723 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.039606596 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.032330307 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.084780748 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.034238581 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.048406289 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.045260185 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.077169334 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.077723992 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.037136667 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.039751409 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.37482683 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.076968739 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.039195475 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.045485055 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.048371172 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.039974431 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.049349294 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.04441386 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.049665538 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.034193536 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.044640554 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.03763517 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.036882042 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.033833784 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.033812283 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.03721506 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.159756834 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.048979774 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.359102416 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.079461001 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.045820842 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.077943802 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.037974485 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.03641744 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.037606308 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.07907463 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.040134106 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.039242492 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.357778609 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.113887208 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.049867945 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.359616663 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.088942506 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.044253376 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.043286811 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.034399485 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.046001751 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.376963794 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.548640735 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.065952102 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.055936172 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.035518028 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.038037521 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.049473158 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.513718205 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.049817261 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.585295749 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.059121711 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.050659955 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.041966363 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.03840748 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.037908826 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.053473831 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.047619476 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.035609622 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.043564386 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.042056225 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.050760157 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.379162544 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.072493678 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.509769159 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.043380253 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.048761836 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.047761256 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.584144072 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.060771276 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.045824931 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.039891507 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.377411112 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.069715807 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.04954823 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.039074578 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.049053696 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.152335567 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.048356001 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.048508589 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.037048232 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.059342652 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.043683984 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.037951797 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.051228563 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.057569457 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.073885186 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.054610114 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.037624744 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.046650229 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.043190178 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.047247528 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.04702332 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.044582943 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.049123665 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.03831168 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.089256044 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.049154633 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.053886243 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.153493299 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.04366041 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.164246462 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.055339688 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.044258662 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.037833163 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.363846958 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.075209741 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.060469417 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.045577992 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.061837013 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.060623943 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.055973775 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.041029007 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.054355697 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.042744838 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.091704984 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.039160547 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.064106049 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.091470585 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.05292782 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.045149181 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.049403633 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.074579893 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.059572332 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.044056219 seconds)
done (took 320.487635717 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.076319006 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.02800923 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.105238474 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.030636023 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.096788866 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.08139718 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.029931381 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.030877657 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.030823324 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.421814649 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.031270306 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.03579485 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.029911035 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.03064227 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.080108398 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.030469841 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.030077241 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.265577445 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.030686803 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.090562974 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.030503747 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.031533236 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.030317619 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.420432113 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.031528599 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.032017783 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.091713173 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.031149555 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.272085152 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.030669379 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.031113364 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.271892812 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.090286171 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.04507877 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.038402629 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.038516138 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.098440034 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.03956977 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.080283944 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.080573514 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.10990247 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.065669184 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.031138131 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.030995265 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.034341444 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.032654287 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.032212574 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.065989886 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.035244257 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.038132066 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.266336955 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.039944749 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.037319854 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.032518664 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.032569749 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.048689088 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.032560904 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.03306763 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.091993689 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.034322609 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.080635279 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.422085704 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.424552294 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.033153516 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.031385469 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.033074541 seconds)
  done (took 194.516399664 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.100463742 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.119321015 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.099133878 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.037660458 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.084116368 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.098698697 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.037493396 seconds)
  done (took 16.541226291 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.039853686 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.034420628 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.057114227 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.056628472 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.033385749 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.17405085 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.045185871 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.039076977 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.060151454 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.03427882 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.368393017 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.058344785 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.04142482 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.032758902 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.045569363 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.061501217 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.037602807 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.035088787 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.132028074 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.11088084 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.039715285 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.042188041 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.063477048 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.046589553 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.034104743 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.034729409 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.035158107 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.042438836 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.035111241 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.034654514 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.034501988 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.048488051 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.03442149 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.034367829 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.03563457 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.035486503 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.035705677 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.034798286 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.036746731 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.036345859 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.035964345 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.034647062 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.035215731 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.035721694 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.036106459 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.057847387 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.034897898 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.034521186 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.035767687 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.036838665 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.064853651 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.035974506 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.035754038 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.041682912 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.077854669 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.046146883 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.037012743 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.035676693 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.036628324 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.036585935 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.036439082 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.113838881 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.059016347 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.037070207 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.058775459 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.074883895 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.036946658 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.036135507 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.036975671 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.062243639 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.035798137 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.060784747 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.037155743 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.133888063 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.036091018 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.182017157 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.060071578 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.040211882 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.041012169 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.037755776 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.043887462 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.037500425 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.0397102 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.0442997 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.042327519 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.037900441 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.038059 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.039602264 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.04541222 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.037129841 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.083297096 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.037495374 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.037829309 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.136091066 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.038020105 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.135091126 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.064442221 seconds)
  done (took 221.220619012 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.043483188 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.040055362 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.052322355 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.039230946 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.039261077 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.044179471 seconds)
  done (took 14.227273053 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.039939227 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.040869561 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.039110304 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.038054768 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.038553457 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.039282008 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.038252493 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.039662535 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.035544686 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.032919157 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.039027166 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.038295412 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.038982013 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.039038295 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.038982126 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.028568374 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.01776415 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.03911081 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.038949596 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.038840247 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.284577974 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.039117346 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.040592442 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.042040115 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.042454629 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.039198882 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.048749467 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.039006987 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.038423894 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.044500041 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.042658399 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.039770862 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.042242572 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.045282108 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.042705094 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.043302681 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.043070489 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.040147066 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.039337897 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.040236307 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.040384228 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.039539977 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.040524318 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.040301376 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.041672588 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.046807618 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.044249183 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.050721399 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.039728618 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.040564696 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.041631392 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.040054536 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.041013658 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.040747457 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.044570477 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.046751413 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.044524133 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.040610634 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.040965878 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.043596601 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.04446807 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.029063312 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.04910694 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.046213813 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.021210373 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.042978038 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.018741396 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.033660737 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.043637666 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.044362587 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.044795879 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.043532328 seconds)
  done (took 150.099714522 seconds)
done (took 598.567238856 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.102545731 seconds)
  done (took 9.074849459 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.163365998 seconds)
  done (took 9.234596415 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 9.929461585 seconds)
  done (took 11.907758569 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.051995146 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.053808398 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.045870497 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.045321222 seconds)
  done (took 30.181918002 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.389354725 seconds)
  done (took 9.36306797 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.054788759 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.042407514 seconds)
  done (took 16.142966165 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.14512277 seconds)
  done (took 9.119382731 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.125712706 seconds)
  done (took 9.125746882 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.059398858 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.070698158 seconds)
  done (took 16.122678056 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.047453943 seconds)
  done (took 9.021942696 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.867225836 seconds)
  done (took 9.909195259 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.048296498 seconds)
  done (took 9.040462157 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.104650391 seconds)
  done (took 9.079745391 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.727233007 seconds)
  done (took 9.702018 seconds)
done (took 169.000690123 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.049931011 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.048116947 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.045149165 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.043750323 seconds)
  done (took 30.161597184 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.080053801 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.080425838 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.090771346 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.080183148 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.070032009 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.071467247 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.081028031 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.08059099 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.070927494 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.078935875 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.081094496 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.077986276 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.080150981 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.089813514 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.089299014 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.078827749 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.080251603 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.080963351 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.070998068 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.091037249 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.079254903 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.080479966 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.047761088 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.046817657 seconds)
  done (took 51.834136665 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.23636244 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.113413194 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.201502212 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.092623025 seconds)
  done (took 10.619880289 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.04683949 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.109856588 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.09785159 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.092201984 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.097476951 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.149596686 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.099901384 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.182783519 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.175457784 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.226482648 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.054329323 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.069691927 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.07257621 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.092934949 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.149853364 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.046955577 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.04847026 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.161811976 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.109989687 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.305210358 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.047790137 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.10184354 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.099362173 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.101037065 seconds)
  done (took 52.716147312 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.048935354 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.057795707 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.053723796 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.050217268 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.049208289 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.049101389 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.055282117 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.051378323 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.070394145 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.05131957 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.049247114 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.049943395 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.056419861 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.048764794 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.049276329 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.062439288 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.063717164 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.049461963 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.052487809 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.05700535 seconds)
  done (took 43.054257713 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.046953221 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.894246823 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.395109097 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.29904861 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.046891326 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.047357397 seconds)
  done (took 32.707316177 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.061085617 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.062394505 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.05256349 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.072200419 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.091723059 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.059151912 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.107622114 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.211268289 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.061652444 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.105425892 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.071286995 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.053962724 seconds)
  done (took 26.988154221 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.048082905 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.051381439 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.052458473 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.063899087 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.059716561 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.058714127 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.057214832 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.048369881 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.063586771 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.067614749 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.057468835 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.060765272 seconds)
  done (took 46.668004742 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.262933881 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.275206667 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.272689769 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.463734722 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.372364412 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.033170499 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.336366475 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.261967564 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.735933621 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.76971204 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.352628785 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.034552269 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.997085439 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.975248331 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.947750868 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.293138769 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.052477641 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.908860171 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.316061085 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.100160087 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.041695896 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.050698431 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.05378227 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.347691151 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.380365191 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.058108046 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.26360319 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.067031828 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.049968243 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.284542682 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.471630054 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.098067389 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.253983484 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.307542975 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.404897031 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.111331776 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.154642131 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.044636765 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.089885969 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.085707535 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.060612375 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.062159666 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.593460905 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.06301561 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.325100908 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.053535841 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.056563255 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.146873576 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.977839058 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.425411185 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.170769674 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.050477051 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.087841096 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.483209874 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.170138778 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.294283347 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.056787978 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.042159011 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.102803595 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.365614997 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.171448609 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.15451392 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.265814125 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.978756667 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.439265947 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.182570468 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.054046823 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.057462172 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.751928076 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.296342388 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.13402271 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.426830756 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.820902244 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.054579081 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.056270267 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.09720536 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.14247405 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.053418883 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.345778962 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.038010659 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.979958002 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.154190916 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.453395331 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.057530959 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.053803347 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.06008476 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.899499794 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.979500305 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.150806104 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.361636218 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.382911112 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.055017349 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.055107761 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.076712722 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.05614405 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.00266601 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.429122171 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.112992806 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.981024143 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.619181815 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.519306518 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.013322028 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.354154644 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.090297309 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.340159676 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.20384984 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.461173048 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.262196625 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.299313917 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.587068482 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.059159503 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.670716848 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.135647132 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.131027537 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.054668315 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.613750083 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.044978067 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.398586535 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.175851335 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.055182514 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.980488466 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.066436324 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.258784498 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.494334344 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.103660309 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.057309705 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.059882009 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.056805556 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.058157167 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.222121256 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.071781585 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.359325309 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.132196813 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.05657978 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.993242033 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.061776141 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.350403024 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.419922431 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.112117685 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.316220699 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.324338008 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.756425524 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.655456011 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.98566369 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.339042201 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.121764059 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.13093783 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.644432758 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.19576392 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.154435322 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.031149951 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.184797072 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.059937364 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.060781275 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.151098597 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.465113316 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.481019079 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.099168313 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.058003159 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.006898609 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.060752312 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.273185587 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.12417392 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.084260498 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.062063503 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.141053373 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.283209447 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.057650689 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.984153181 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.314957786 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.307184902 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.359388799 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.471163187 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.126707424 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.13210803 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.068963146 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.270153937 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.139919659 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.704879891 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.605606811 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.286385172 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.449891447 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.016312877 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.726751773 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.378386407 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.44399156 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.073628599 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.51094506 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.053926616 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.556050935 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.083903228 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.587626165 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 3.985578798 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.064272665 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.420148849 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.016883991 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.380706769 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.211798786 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.075647561 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.060132975 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.059379826 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.067043614 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.975744537 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.165904998 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.128165299 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.131942055 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.986756399 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.534554794 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.092255005 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.062889395 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.059638723 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.421864845 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.928778146 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.018366046 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.060680629 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.137405672 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.800378026 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.607812191 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.066643437 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.062348676 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.656691168 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.0655681 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.974656169 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.07083154 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.93635465 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.088087699 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.371187101 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.765560177 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.355197536 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.13961393 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.136577108 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.060960596 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.068590586 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.762787119 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.070190639 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.761692437 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.356022825 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.341620681 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.511383338 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.132022012 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.269406378 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.046642943 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.062643427 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.557995096 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.088888266 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.063508236 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.264872322 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.576821136 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.447306302 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.709674005 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.147331376 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.061939198 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.344252182 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.072757271 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.490258775 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.765600955 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.075497552 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.062830561 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.291022592 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.747573482 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.064196129 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.037174551 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.069783563 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.275092207 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.26532249 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.351788061 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.370945457 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.516926498 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.989907508 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.068216031 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.087535082 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.286151392 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.062685429 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.098476511 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.509906121 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.132714918 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.494752955 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.356390642 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.513044224 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.704643619 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.33275734 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.131622611 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.075159161 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.738291788 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.204217012 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.99572045 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.182252248 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 3.990433406 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.823140106 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.358837262 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.083564872 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.347362527 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.050052425 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.409070082 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.367995313 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.378222735 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.116272196 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.093552808 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.049009998 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.118346763 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.06470752 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.048060204 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.174119233 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.070165451 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.435920158 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.097470574 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.111997823 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.069874663 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.585230159 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.086545245 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.067551686 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.759031952 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.089173489 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.184091052 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.137102222 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.823236972 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.525601609 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.088124999 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.952314214 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.893292551 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.34831599 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.125627795 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.54060168 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.107830652 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.469844256 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.050973795 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.27839264 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.070347486 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.455073246 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.106303027 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.343275045 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.024899309 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.277836172 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.277916008 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.094002392 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.071770207 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.99219499 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.229847509 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.935307033 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.047595674 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.069233792 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.749015855 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.512172773 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.10436345 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.546566761 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.892174221 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.068317991 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.408108543 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.489112939 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.50853969 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.095093834 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.069733282 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.447163317 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.205207021 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.429421117 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.362384811 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.075598008 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.093798009 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.280784546 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.191237084 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.987106749 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.559409044 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.653161267 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.768771524 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.079320573 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.272137297 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.452867906 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.190999033 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.098162255 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.139851777 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.472087384 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.351769625 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.140686129 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.002144188 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.069417538 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.462247418 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.472780541 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.165174749 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.309584457 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.390785555 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.404875114 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.501348221 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.338466133 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.496372725 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.520896497 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.464139023 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.291147914 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.458557656 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.399933938 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.660185611 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.480487514 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.282143598 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.158277338 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.35649766 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.944217756 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.779875384 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.314437104 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.07546991 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.99915388 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.27749644 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.081069109 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.246809328 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.595205394 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.317361049 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.385826035 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.540269224 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.607175088 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.084362642 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.090296304 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.036305559 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.093929487 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.090965882 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.06980896 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.561371024 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.360248852 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.084236776 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.012210984 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.743662951 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.997388863 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.284210686 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.085353119 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.101439243 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.62750804 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.384268525 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.182044762 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.375758459 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.134001562 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.101444773 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.997711053 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.832272695 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.01993032 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.144166666 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.498388733 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.087787744 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.062246461 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.274315872 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.000294827 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.1174028 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.076690572 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.279702918 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.657888183 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.334403289 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.199913485 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.324278158 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.377455479 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.946096189 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.108144951 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.345008125 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.998736886 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.533353774 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.748813551 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.113698236 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.145103907 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.072161021 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.075322681 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.343598006 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.461276448 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.179808744 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.611559511 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.100506859 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.097306079 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.491565362 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.17595297 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.075276567 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.078412446 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.389394661 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.301011076 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.121999156 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.028541807 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.286894637 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.147356162 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.269926667 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.148637914 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.588221548 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.078236788 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.95538785 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.183517184 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.028150445 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.054676426 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.796621201 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.136311286 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.074658591 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.361104797 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.734189157 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.278238627 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.469938638 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.934685707 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.090498587 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.111616182 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.077650412 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.077319315 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.477784204 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.384551072 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.074068903 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.353110003 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.129793693 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.080054007 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.735231007 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.043693581 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.075330155 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.831036151 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.957825496 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.806645197 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.47065705 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.082123582 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.17357655 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.077864246 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.00197788 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.075372622 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.213054347 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.051416846 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.08106751 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.443055445 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.44426609 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.17671735 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.081912712 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.078109572 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.081054343 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.289639616 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.59122704 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.093228032 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.776841257 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.279806804 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.085172634 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.565428366 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.537486308 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.165647247 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.110501001 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.092657815 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.322044266 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.618208668 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.095549409 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.045476341 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.30306472 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.078230664 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.349753596 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.350810501 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.078109483 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.288810642 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.51403123 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.357056558 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.431972577 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.397714068 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.146291561 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.106074523 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.964918851 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.081792589 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.080718414 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.348719745 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.135474907 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.077732544 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.085911504 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.634518435 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.774900234 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.573286946 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.236472793 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.455361367 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.93738915 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.834606992 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.080491001 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.003441713 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.077609673 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.103392857 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.081073325 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.004791393 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.832002413 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.803924903 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.292353794 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.388099894 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.003891317 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.282077873 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.681909308 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.005314472 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.047460286 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.078552242 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.344875663 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.00607531 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.081825788 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.03296845 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.418396949 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.637081798 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.342798897 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.080109087 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.023879784 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.083991484 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.079942509 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.080035017 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.163593215 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.08082289 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.195041191 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.349952568 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.511374355 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.189765704 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.719475106 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.773023341 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.020178872 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.124909048 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.694835519 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.650532419 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.410248055 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.21470679 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.778411604 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.026435359 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.083233597 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.095951403 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.334362741 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.084515158 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.083289425 seconds)
  done (took 2193.498241209 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.140355994 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.152021533 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.146507786 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.122924126 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.243257095 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.210691297 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.14311557 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.15716095 seconds)
  done (took 59.32544133 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.080142943 seconds)
    (2/17) benchmarking "4467"...
    done (took 2.589254556 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.201480338 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.081814893 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.080756557 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.117849381 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.263274638 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.104677564 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.081345098 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.129173622 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.081198334 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.086545852 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.080980944 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.112263554 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.085004926 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.362092159 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.098454674 seconds)
  done (took 78.723643783 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.135316255 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.960848649 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.087713743 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.870616214 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.098833506 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.371524457 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.084332965 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.084460022 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.391667667 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.375637632 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.134008209 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.08991448 seconds)
  done (took 94.705380717 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.084054769 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.084452026 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.083329388 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.082585653 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.083583025 seconds)
  done (took 12.430041443 seconds)
done (took 2735.467183259 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.311414668 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.175871563 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.152744206 seconds)
  done (took 6.317142754 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.226348665 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.274727986 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.376197754 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.409585894 seconds)
  done (took 11.302519803 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.365975742 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.474087065 seconds)
  done (took 6.852132642 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.448963288 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.09453036 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.47601215 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.085963475 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.08674444 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.088442659 seconds)
  done (took 23.277782571 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.083899608 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.084526652 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.084169451 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.084347391 seconds)
  done (took 10.349854689 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.08111886 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.883668251 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.082314965 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.091967128 seconds)
  done (took 22.151709189 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.291985124 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 5.990553394 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.850314138 seconds)
  done (took 13.14598093 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.704396694 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.582832199 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.691602364 seconds)
  done (took 9.992344853 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.91182437 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.095092412 seconds)
  done (took 8.019711753 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.221662715 seconds)
  done (took 4.229523522 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.918844814 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.39831808 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.553530564 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 3.083689955 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.722886759 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.496421989 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.576920469 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.384569745 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.506588583 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.528266863 seconds)
  done (took 28.173791114 seconds)
done (took 160.155279834 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.723443428 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.129795805 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.318256517 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.522732842 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.348608233 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.314823278 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.387118328 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.539818947 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.16322359 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.14775121 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.493735891 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.342981893 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.345280673 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.127592849 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.343552544 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.129045114 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.341977271 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.579956159 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.172811091 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.417419388 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.399715513 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.133345928 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.328098345 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.165005389 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.347291515 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.263012545 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.744413404 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.124303523 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.325542036 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.767475547 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.267973044 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.588833612 seconds)
  done (took 177.373422883 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.009401467 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.101963954 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.102847327 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.101975109 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.578197958 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.102919958 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.104139859 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.102947684 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.421276572 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.405358072 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.104328 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.565041029 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.102720391 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.10248519 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.103725322 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.102376971 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.553266147 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.040533504 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.103533273 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.103176984 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.103709772 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.428865466 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.109431617 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.446947331 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.521923749 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.105239819 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.103620881 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.103521991 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.103335293 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.104259444 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.105349802 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.105746149 seconds)
  done (took 216.28551542 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.102540713 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.104831121 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.105369907 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.105325326 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.104761149 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.105828377 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.104820733 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.103908829 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.991119808 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.993386043 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.106629943 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.104629085 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.107317036 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.10483499 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.107028818 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.103814807 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.106408202 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.105586866 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.105902368 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.104174983 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.10717115 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.834495442 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.106670525 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.85575099 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.106648541 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.108179461 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.105963416 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.111581639 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.095284665 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.105973626 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.105145825 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.105772082 seconds)
  done (took 228.660323753 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.343085154 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.106402778 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.106709146 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.108830211 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.106274934 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.104993837 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.113561864 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.3515689 seconds)
  done (took 21.375378096 seconds)
done (took 645.734874392 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.476714062 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.852231498 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.241187174 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.131173776 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.380927608 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.177997622 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.124160093 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.195287939 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.775854515 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.205357701 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.54259974 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.13384152 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.86978285 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.156073701 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.244258546 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.189697009 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.495747243 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.739431032 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.264933427 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.814164477 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.337458132 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.078263846 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.210101525 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.811041117 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.563039972 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.092370655 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.143831298 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.501097683 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.130257461 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.361991878 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.795908915 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.377396854 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.142975373 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.128045723 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.183231811 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.168961205 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.323538016 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.138998821 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.240229589 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.87484476 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.800218531 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.660952658 seconds)
  done (took 110.110067815 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.113222908 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.112038612 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.112891247 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.11241213 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.120377094 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.112068844 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.112768292 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.11229609 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.113222352 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.112888726 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.113393888 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.120789184 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.112614451 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.121094866 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.113403921 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.112762558 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.111637523 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.119342648 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.114166548 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.112754563 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.114203272 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.113924196 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.111673298 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.113267656 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.11344897 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.113811877 seconds)
  done (took 57.013490355 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.110177597 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.287978699 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.402449031 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.1437402 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.1117293 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.112989861 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.13972529 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.11763947 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.113150714 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.111678543 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.222818599 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.115968599 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.123022083 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.400061749 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.141423377 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.110356647 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.110435195 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.111419326 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.295899264 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.12955322 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.141250436 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.118464859 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.141610646 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.127567389 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.113914606 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.11182226 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.114897188 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.540404376 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.124547117 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.223630722 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.174698085 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.150206827 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.449637886 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.410082294 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.180736206 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.122006242 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.111714828 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.268945859 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.125022725 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.112040858 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.142636429 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.120850821 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.403527189 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.622550356 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.128416992 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.112688503 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.536638329 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.281140818 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.161537019 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.127120658 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.411009239 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.143680205 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.111882855 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.113200515 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.150224066 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.12428809 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.112378561 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.357710722 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.129747438 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.143151448 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.120825682 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.113235602 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.302081649 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.12296436 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.291971162 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.124156316 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.120965575 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.114362285 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.405532955 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.14558994 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.619583017 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.1293648 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.113049999 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.214819847 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.296840841 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.563357882 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.128436101 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.303281096 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.466246995 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.153170039 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.126420098 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.524224125 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.15690102 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.125481458 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.11263291 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.114435394 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.114564518 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.155678773 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.142767083 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.540988149 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.623901094 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.358529282 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.156106494 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.129198651 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.114498976 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.360985032 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.12782452 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.114208814 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.399268875 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.645787836 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.130982607 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.122241502 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.601481554 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.132501908 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.145374519 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.127950819 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.415144234 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.147020202 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.15582832 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.115152622 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.121346218 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.117968406 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.146166548 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.126615641 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.116088799 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.59345202 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.29002151 seconds)
  done (took 261.349325792 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.120936108 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.114822137 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.115202505 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.114614369 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.115246074 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.116611481 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.113445957 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.113966905 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.117004462 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.114665164 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.114292572 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.116643178 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.117571193 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.116319586 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.154504297 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.117472072 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.605093791 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.113544866 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.115881516 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.117721426 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.690102602 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.121823359 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.115107685 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.117645141 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.117648166 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.117382948 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.125363731 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.143615152 seconds)
  done (took 174.443557642 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.11695261 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.166575444 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.118984636 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.16633078 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.129020388 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.091117944 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.139207214 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.13351303 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.112694478 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.097937239 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.100967042 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.131712466 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.125980819 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.19218659 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.151560345 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.149173133 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.196631358 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.12662814 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.118133 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.118467858 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.16655064 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.133081027 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.146833463 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.174670644 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.133685332 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.168251025 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.132649969 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.1192251 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.11845065 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.210195375 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.136361851 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.147655771 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.154847982 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.13884183 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.213757829 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.211625419 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.203168249 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.148243174 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.12373451 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.119109053 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.118623938 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.119770009 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.168156627 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.134017585 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.11965053 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.213422779 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.137166995 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.119816606 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.139258417 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.119336651 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.131157641 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.136365371 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.153747 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.223462165 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.167605605 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.145252904 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.14217112 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.138020805 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.119744127 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.194312212 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.127984931 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.211780532 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.139613192 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.119715599 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.1216254 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.123740024 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.168761922 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.157424208 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.201622174 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.131768806 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.195210594 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.178198793 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.134742925 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.119444106 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.120449975 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.169290716 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.209485184 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.179376345 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.184485464 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.158829639 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.133308266 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.120426549 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.12160073 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.149543263 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.128978403 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.211932203 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.213707686 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.12853772 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.121150159 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.120971839 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.121131226 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.145184915 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.181383203 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.164578089 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.205537342 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.159383994 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.158530119 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.130158363 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.134182412 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.126674101 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.153759656 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.129716507 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.13470034 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.456006701 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.159034315 seconds)
  done (took 227.936663861 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.502566044 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.173003032 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.19174424 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.395661641 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.507388225 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.240960197 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.1606322 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.181731639 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.182448363 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.287384658 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.230335665 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.213120719 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.159811575 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.144124619 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.171088181 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.178426279 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.209504501 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.471042665 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.270178642 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.906848658 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.161944337 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.449657965 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.457649152 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.522284599 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.209452035 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.570221848 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.785881445 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.26027491 seconds)
  done (took 69.249021567 seconds)
done (took 902.136366193 seconds)
SAVING RESULT...
DONE!
